package com.nomisma.SelfAssessmentpom2019;
import static org.testng.Assert.assertEquals;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.management.loading.PrivateClassLoader;
import javax.swing.JOptionPane;
import org.apache.pdfbox.cos.COSDocument;
import org.apache.pdfbox.pdfparser.PDFParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFTextStripper;
import org.apache.poi.EmptyFileException;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.Reporter;
import com.graphbuilder.math.func.RoundFunction;
import com.mongodb.connection.StreamFactory;
import com.nomisma.generic.WaitStatementLib;
import com.nomisma.pom.CISPage;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.By;
import java.text.ParseException;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
//Self Assessment Pages Locators and Functions for 2018-2019
public class SAPOM2019 {
	@FindBy(id="ctl00_ctl00_ParentContent_cpHFooter_PageUC1_rptrPager_ctl03_lnkNext")
	private WebElement linkNext;
	@FindBy (id="ctl00_ctl00_ParentContent_cPH_chkDuplicateUTR")
    private WebElement forceDuplicateUTRno;
	@FindBy(xpath="//span[contains(text(),'anjali1')]")
	private WebElement AgentPageTitle;
	@FindBy(xpath="//td[contains(text(),'anjali1')]")
	private WebElement agentName;
	@FindBy(xpath="//span[contains(text(),'Self Assessment')]")
	private WebElement SelfAssessmentLink;
	@FindBy(xpath= "//a[contains(text(),'Client List')]")
	private WebElement ClientListLink;
	@FindBy(xpath= "//main/header/div/div[2]/ul/li[1]/a/img")
	private WebElement PlusClientButton;
	@FindBy(xpath= "//p[contains(text(),'Add Client')]")
	private WebElement AddClientButton;
	@FindBy(id="ctl00_ctl00_ParentContent_cPH_txtUTR")
	private WebElement UTRNoTextBox;
	@FindBy(id="ctl00_ctl00_ParentContent_cPH_txtFirstName")
	private WebElement FirstNameTextBox;
	@FindBy(id="ctl00_ctl00_ParentContent_cPH_txtLastName")
	private WebElement LastNameTextBox;
	@FindBy(id= "ctl00_ctl00_ParentContent_cPH_txtAddress1")
	private WebElement AddressLine1TxtBox;
	@FindBy(id= "ctl00_ctl00_ParentContent_cPH_txtPostCode")
	private WebElement PostCodeTxtBox;
	@FindBy(id="ctl00_ctl00_ParentContent_cPH_btnSave")
	private WebElement SaveButton;
	@FindBy(id="ctl00_ctl00_ParentContent_cPH_txtEmail")
	private WebElement emailAddClient;
	@FindBy(id="ctl00_ctl00_ParentContent_cPH_rBtnListGenderType_0")
	private WebElement genderMale;
	@FindBy(id="ctl00_ctl00_ParentContent_cPH_rBtnListGenderType_1")
	private WebElement genderFemale;
	//Income ->  add employment locators
	//@FindBy(xpath="//a[contains(text(),'nomisma')]")	
	@FindBy(xpath="//a[contains(text(),'Foregin1')]")
	private WebElement selectClient;
	@FindBy (xpath="//a[contains(text(),'Blind')]")
	private WebElement blindClient;
	@FindBy (xpath="//span[contains(text(),'1000000110')]")
	private WebElement chckClientName;
	@FindBy(xpath="//main/div/div[2]/ul/li[5]/a/span")	
	private WebElement IncomeLink;
	@FindBy(xpath="//a[contains(text(),'Employment')]")	
	private WebElement EmploymentLink;
	@FindBy(linkText="Add Employment")
	private WebElement addEmploymentBtn;
	@FindBy (id="ctl00_cPH_txtEmployerName")
	private WebElement EmployerName;
	@FindBy (id="ctl00_cPH_txtEmployerPAYEReference")
	private WebElement txtEmployerPAYERef;
	@FindBy (id = "ctl00_cPH_txtStartDate")
	private WebElement StartDatetxtbox;
	@FindBy (id = "ctl00_cPH_txtEndDate")
	private WebElement Endtxtbox;
	@FindBy (id = "ctl00_cPH_ddEmployer")
	private WebElement employerLstBox;
	@FindBy (id="ctl00_ddlTaxYear")
	public WebElement TaxYear;
	@FindBy(xpath="//td[contains(text(),'Abc Corp.')]")
	private WebElement cellemp;
	@FindBy (id="ctl00_cPH_rptrDisplayRecords_ctl00_hrefDelete")
	private WebElement delButton;
	@FindBy (id="ctl00_cPH_btnDelete")
	private WebElement confirmDel;
	@FindBy (id="ctl00_cPH_rptrEmployment_ctl00_lnkDelete")
	private WebElement delEmpName;
	//Income -> Employment -> add employer 
	@FindBy(linkText="Add Employment Income")
	private WebElement addEmpIncome;
	@FindBy (id="ctl00_cPH_txtPayFromEmployment")
	private WebElement payFrmEmployer;
	@FindBy (id="ctl00_cPH_txtTaxTakenOffPay")
	private WebElement UkTaxTakenOffPay;
	@FindBy (id="ctl00_cPH_txtTipsAndOtherPayments")
	private WebElement TipsPaymentsNtOnP60;
	@FindBy (id="ctl00_cPH_chkIsTeacher")
	private WebElement isTeacherChkBox;
	//Income ->  Employment -> Add Employer Income
	@FindBy (id="ctl00_cPH_txtCompanyCarsAndVansBenefit")
	private WebElement CompanyCarsAndVans;
	@FindBy (id="ctl00_cPH_txtFuelForCarsAndVans")
	private WebElement FuelForCompanyCarsAndVans;
	@FindBy (id="ctl00_cPH_txtPrivateMedicalDentalInsurance")
	private WebElement PrvtMedAndDntl;
	@FindBy (id="ctl00_cPH_txtVouchersCreditCardsExcessMileageAllowance")
	private WebElement 	VochrCredcardExsMilg;
	@FindBy (id="ctl00_cPH_txtGoodsEtcProvidedByEmployer")
	private WebElement GoodsEtcTxtBob;
	@FindBy (id="ctl00_cPH_txtAccommodationProvidedByEmployer")
	private WebElement AccommodationProvidedByEmployerTxtBox;
	@FindBy (id="ctl00_cPH_txtOtherBenefits")
	private WebElement 	OtherBenefitsTxtBox;
	@FindBy (id="ctl00_cPH_chkIsCloseCompany")
	private WebElement isCloseCompanyChkBox;
	@FindBy (id="ctl00_cPH_chkIsDirector")
	private WebElement isDirectorChkBox;
	@FindBy (id="ctl00_cPH_txtExpensesPaymentsReceived")
	private WebElement expensesPaymentsReceivedtxtBox;
	//Add Employer Income -> Expenses
	@FindBy (id="ctl00_cPH_txtBusinessTravelAndSubsistence")
	private WebElement 	BusnsTrvlAndSubstancTxtBox;
	@FindBy (id="ctl00_cPH_txtFixedExpensesDeductions")
	private WebElement FxdExpnsDeductTxtBox;
	@FindBy (id="ctl00_cPH_txtProfessionalFeesAndSubscriptions")
	private WebElement ProfFeesAndSubsTxtBox;
	@FindBy (id="ctl00_cPH_txtOtherExpensesAndCapitalAllowances")
	private WebElement 	OtherExpensTxtBox;
	
	//Add Employer Income -> Earnings from P60
	@FindBy (id="ctl00_cPH_txtEarningPTtoUAP")
	private WebElement EarningPTtoUAPTxtBox;
	@FindBy (id="ctl00_cPH_txtEarningUAPtoUEL")
	private WebElement 	EarningUAPtoUELTxtBox;
	@FindBy (id="ctl00_cPH_btnSave")
	private WebElement 	SaveBtn1;
	@FindBy (id="ctl00_cPH_btnCancel")
	private WebElement popUpCancelBtn;
	@FindBy (xpath="//span[contains(text(),'Dashboard')]")
	private WebElement dashBoardClient;
	@FindBy (xpath="//div[1]/div[2]/ul/li[1]/span")
	private WebElement finalIncome;
	@FindBy (id="ctl00_cPH_btnDelete")
	private WebElement confDel;
	@FindBy (xpath="//div[2]/table/tbody/tr[2]/td[2]")
	private WebElement totalIncome;
	@FindBy(xpath="//a[contains(text(),'Finishing your tax return')]")
	private WebElement linkDashboardFinishingTaxReturn;
	//SA -> Client -> Tax Return
	@FindBy (xpath="//span[contains(text(),'Tax Return')]")
	public WebElement taxReturnLink;
	@FindBy (xpath="//a[contains(text(),'Tax Calculation Summary')]")
	public WebElement taxCalSummaryLink;
	
	//SA -> Client -> Tax Calculation Summary 
	
	@FindBy (xpath="//tr/td[contains(text(),'Pay from all employments')]//..//td[2]")
	private WebElement payFromAllEmployments;
	@FindBy (xpath="//tr/td/em[contains(text(),'plus')]//..//..//td[2]")
	private WebElement benefitAndExpensesReceived;
	@FindBy (xpath=" //tr/td/em[contains(text(),'minus')]//..//..//td[2]")
	private WebElement allowableExpenses;
	@FindBy (xpath="//tr/td[contains(text(),'Total from all employments')]//..//td[2]")
	private WebElement TotalFromAllEmployment;
	@FindBy (xpath="//tr/td/b[contains(text(),'Total income received')]//..//..//td[3]/b")
	private WebElement TotalIncomeReceived;
	@FindBy (xpath="//tr/td[contains(text(),'Share schemes')]//..//td[2]")
	private WebElement ShareschemesTaxSummary;
	@FindBy (xpath="//tr/td[contains(text(),'Foreign Tax Credit Relief')]//..//td[4]")
	private WebElement amtForeignTaxCreditRelief;
	@FindBy (xpath="//tr/td[contains(text(),'Payments into a retirement annuity contract etc.')]//..//td[2]")
	private WebElement PaymentsIntoRetirementAnnuity;
	@FindBy (xpath="//tr/td/b[contains(text(),'Total income on which tax is due')]//..//..//td[3]/b")
	private WebElement totalIncomeOnWhichTaxIsDue;
	@FindBy (xpath="//tr/td/b[contains(text(),'Total income on which tax has been charged')]//..//..//td[2]/b")
	private WebElement incomeOnWhichTaxCharged;
	@FindBy (xpath="//tr/td/b[contains(text(),'Income Tax')]//..//..//td[4]")
	private WebElement incomeTaxDue;
	@FindBy (xpath="//tr/td/strong[contains(text(),'Income Tax due')]//..//..//td[4]")
	private WebElement incomeTaxDue1;
	@FindBy (xpath="//tr/td[contains(text(),'State Pension lump sum payment')]//..//td[4]")
	private WebElement statePensionLumpSumPaymentAmt;
	@FindBy (xpath="//tr/td[contains(text(),'Community Investment Tax Relief')]//..//td[4]")
	private WebElement amtCommunityInvestmentTaxRelief;
	@FindBy(xpath="//tr/td/b[contains(.,'Total Income Tax due')]//..//..//td[4]")
	private WebElement totalIncomeTaxDue;
	@FindBy (xpath="//tr/td/b[contains(text(),'Balance for this year')]//..//..//td[4]/b")
	private WebElement taxForThisYear;
	@FindBy (xpath="//tr/td[contains(text(),'First Payment on Account')]//..//td[4]")
	private WebElement firstPayment;
	@FindBy (xpath="//tr/td[contains(text(),'Second Payment on Account')]//..//td[4]")
	private WebElement secondPayment;
	@FindBy (xpath="//tr/td/b[contains(text(),'Total Income Tax due')]//..//..//td[4]")
	private WebElement fTaxDue;
	@FindBy (xpath="//tr/td[contains(text(),'Underpaid tax for earlier years in your tax code')]//..//td[4]")
	private WebElement amtUnderpaidTaxForEarlierYears;
	@FindBy (xpath="//tr/td[contains(text(),'Notional tax from gains on life')]//..//td[4]")
	private WebElement amtNotionalTaxFromGainsOnLife;
	@FindBy (xpath="//tr/td[contains(text(),'Remittance basis charge for non-domiciles')]//..//td[4]")
	private WebElement amtRemittanceBasisChargeNonBomiciles;
	//Tax including Class 2 and Class 4 deduction
	@FindBy (xpath="//tr/td/strong[contains(text(),'Income Tax, Class 2 and Class 4 National Insurance contributions due')]//..//..//td[4]/strong")
	private WebElement IncomeTaxCls2andCls4NationalInsurContriDue;
	@FindBy (xpath="//tr/td/strong[contains(text(),'Income Tax and Class 2 National Insurance contributions due')]//..//..//td[4]/strong")
	private WebElement IncomeTaxCls2NationalInsurContriDue;
	
	@FindBy (xpath="//tr/td/strong[contains(text(),'Total Class 2 and Class 4 National Insurance contributions due')]//..//..//td[4]")
	private WebElement totalClass2andClass4NationalInsurancecontributionsdue; 
	@FindBy (xpath="//tr/td/b[contains(text(),'Income Tax, Class 2 and Class 4 National Insurance contributions due')]//..//..//td[4]/b")
	private WebElement IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction;
	@FindBy (xpath="//tr/td/b[contains(text(),'Income Tax and Class 2 National Insurance contributions due')]//..//..//td[4]/b")
	private WebElement IncomeTaxCls2NationalInsurContriDueMinusDeduction;	
	@FindBy (xpath="//tr/td/strong[contains(text(),'Total tax deducted')]//..//..//td[4]")
	private WebElement totalTaxDeducted;
	@FindBy (xpath="//tr/td/b[contains(text(),'Income Tax, Capital Gains Tax, Class 2 and Class 4 National Insurance contributions due')]//..//..//td[5]")
	private WebElement AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions;
	@FindBy (xpath="//tr/td/b[contains(text(),'Income Tax, Capital Gains Tax, and Class 2 National Insurance contributions due')]//..//..//td[5]")
	private WebElement AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions;
	//SA -> Client -> Submit To HMRC -> Validate HMRC
	@FindBy (xpath = "//a[contains(text(),'Submit to HMRC')]")
	public WebElement submitToHMRC;
	@FindBy (id="ctl00_cPH_txtInternalNote")
	private WebElement internalNotes;
	@FindBy (id="ctl00_cPH_btnValidate")
	public WebElement validateSubmissionBtn;
	@FindBy (id = "ctl00_cPH_btnSubmit")
	private WebElement submitToHMRCbtn;
	@FindBy (id="ctl00_cPH_btnYes")
	private WebElement yesBtn;
	@FindBy (id="ctl00_cPH_btnSubmitManualUndo")
	public WebElement undoManualSubmitBtn;
	@FindBy (xpath="//strong[contains(text(),'Success!')]")
	public WebElement successMessage;
	@FindBy (id="ctl00_cPH_btnUnlock")
	public WebElement unlockBtn;
	@FindBy (id="ctl00_cPH_btnLock")
	private WebElement lockBtn;
	@FindBy (id="ctl00_SideMenu1_hrefSubmissionReport")
	public WebElement submissionReportLink;
	@FindBy (xpath="//div[2]/table/tbody/tr[2]/td[4]")
	private WebElement descriptionSubmission;
	//SA -> Client -> documents locators
	@FindBy (xpath = "//span[contains(text(),'Documents')]")
	private WebElement linkDocuments;
	@FindBy (id="hrefDoc")
	private WebElement pdfSAforms;
	@FindBy (id="hrefTaxCalc")
	private WebElement pdfSAforms1;
	@FindBy (id = "hrefSASummary")
	private WebElement pdfSAforms2;
	@FindBy (id = "hrefTaxSchedule")
	private WebElement pdfSAforms3;
	@FindBy (xpath="//span[contains(text(),'newClient 31 Test 31')]")
	private WebElement clientName;
	@FindBy (xpath="//td[contains(text(),'Abc Corp.')]")
	private WebElement empName;
	//SA -> Client -> Dashboard elements
	@FindBy (xpath="//a[contains(text(),'Employment')]")
	private WebElement empNameDashboard;
	@FindBy (id="ctl00_cPH_spanIncomeEmployment")
	private WebElement empcheckBox;
	@FindBy (id="ctl00_cPH_spanFinishingReturn")
	private WebElement finishTaxRetCheckBox;
	// UK pensions, annuities and other state benefits received Locators
	@FindBy (xpath="//a[contains(text(),'Dividend, Bank Interest, Pensions & Other UK Income')]")
	WebElement dividentLink;
	//Income -> Divident...-> State Benefits
	@FindBy (id="ctl00_cPH_img1")
	private WebElement frm1Btn;
	@FindBy (id="ctl00_cPH_txtStatePension")
	private WebElement totStatPension;
	@FindBy (id="ctl00_cPH_txtStatePensionLumpSum")
	private WebElement statPensionLumpSum;
	@FindBy (id="ctl00_cPH_txtTaxTakenOffPensionLumpSum")
	private WebElement taxtakenoffLumpsum;
	@FindBy (id="ctl00_cpHFooter_btnSaveIncome")
	private WebElement stateBenefitsSaveBtn;
	@FindBy (xpath="//div[2]/div[1]/div[1]/div/div/div[1]/table/tbody/tr[2]/td[2]")
	private WebElement totstatePension;
//State Benefits -> Taxable Incapacity Benefit
	@FindBy (id="ctl00_cPH_txtIncapacityBenefit")
	private WebElement taxableIncapacityBenefit;
	@FindBy (id="ctl00_cPH_txtTaxTakenOffIncapacityBenefit")
	private WebElement taxTakenOff;
	//State Benefits -> Other Pensions & Retirement Annuities
	@FindBy (id="ctl00_cPH_txtOtherPensionsAndRetirementAnnuities")
	private WebElement otherPensionsRetirementAnnuities;
	@FindBy (id="ctl00_cPH_txtTaxTakenOffPensionsAndRetirementAnnuities")
	private WebElement taxTakenOffOtherPensions;
	//State Benefits -> Jobseekers Allowance / Any other pensions/benefits
	@FindBy (id="ctl00_cPH_txtJobseekersAllowance")
	private WebElement jobseekersAllowance;
	@FindBy (id="ctl00_cPH_txtOtherStatePensionsAndBenefits")
	private WebElement anyOtherPensionsBenefits;
	//Income -> Divident...-> Bank Locators
	@FindBy (xpath="(//div[@class='infoNote-top']/a)[3]")
	private WebElement addBankBtn;
	@FindBy (id="ctl00_cPH_ddlBanksMaster")
	private WebElement bankNameTxtBox1;
	@FindBy (id="ctl00_cPH_txtBankName")
	private WebElement bankNameTxtBox2;
	@FindBy (id="ctl00_cPH_txtAccountNo")
	private WebElement acNumber;
	@FindBy (id="ctl00_cpHFooter_btnSave")
	public WebElement SaveBtn2;
	@FindBy (xpath="//img[@alt='Delete']")
	private WebElement delbank;
	@FindBy (xpath="//div[2]/div[1]/div[3]/div/div/div/table/tbody/tr[2]/td[1]")
	private WebElement verifyBankname;
	//Income -> Divident...-> Interest from UK banks, building societies etc.
	@FindBy (id="img5")
	private WebElement formOpenBtn;
	@FindBy (id="ctl00_cPH_txtDate")
	private WebElement dateTxtBox;
	@FindBy (id="ctl00_cPH_ddBank")
	private WebElement bankTxtBox;
	@FindBy (id="ctl00_cPH_txtDescription")
	private WebElement descriptionTxtBox;
	@FindBy (id="ctl00_cPH_txtInterestAmount")
	private WebElement interestAmountTxtBox;
	@FindBy (id="ctl00_cPH_rBtnListInterestType_0")
	private WebElement taxedUKInterestRadioBtn;
	@FindBy (id="ctl00_cPH_rBtnListInterestType_1")
	private WebElement unTaxedUKInterestRadioBtn;
	@FindBy (id="ctl00_cPH_rBtnListInterestType_2")
	private WebElement foreignInterestRadioBtn;
	@FindBy (xpath="//div[2]/div[1]/div[2]/div/div/div/table/tbody/tr[2]/td[3]")
	private WebElement verifyInterest;
	@FindBy (id="ctl00_cPH_rptrBankInterest_ctl00_hrefDelete")
	private WebElement delInterest;
	//Income -> Divident...-> Dividend Locators
	@FindBy (xpath="//h3[contains(text(),'Dividend')]")
	private WebElement dividentTxt;
	@FindBy (id="img4")
	private WebElement dividentFormBtn;
	@FindBy (id="ctl00_cPH_txtCompanyName")
	private WebElement companyNameTxtBox;
	@FindBy (id="ctl00_cPH_txtDescription")
	private WebElement dividentDescripTxtBox;
	@FindBy (id="ctl00_cPH_txtDividendUKCompany")
	private WebElement dividendsfrmUKcompTxtBox;
	@FindBy (id="ctl00_cPH_rptrRecord_ctl00_hrefDelete")
	private WebElement delDivident;
	@FindBy (id="ctl00_cpHFooter_btnDelete")
	public WebElement cnfmdel;
	// Income -> Divident...-> Other Dividends Locators
	@FindBy (id="ctl00_cPH_txtOtherDividend")
	private WebElement otherDividentTxtBox;
	@FindBy (id="ctl00_cPH_txtForeignDividend")
	private WebElement foreignDividendsTxtBox;
	@FindBy (id="ctl00_cPH_txtTaxTakenOffForeignDividend")
	private WebElement taxTakenOffForeignDividendTxtBox;
	//Income -> Divident...-> Other UK Income locators
	@FindBy (id="ctl00_cPH_img2")
	private WebElement form1OpenBtn;
	@FindBy (id="ctl00_cPH_txtOtherTaxableIncome")
	private WebElement otherTaxableIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtAllowableExpense")
	private WebElement allowableExpensesTxtBox;
	@FindBy (id="ctl00_cPH_txtTaxTakenOffOtherTaxableIncome")
	private WebElement taxDeductedTxtBox;
	@FindBy (id="ctl00_cPH_txtBenefitPreOwnedAsset")
	private WebElement beneftFrmPreOwnedAssetsTxtBox;
	@FindBy (id="ctl00_cPH_txtDescriptionOfOtherIncome")
	private WebElement otherUKDescriptionTxtBox;
	@FindBy (id="ctl00_cpHFooter_btnSaveIncome")
	private WebElement OtherUKIncomeSaveBtn;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Relief for finance costs')]//..//td[4]")
	private WebElement dataReliefForFinanceCosts;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Venture Capital Trust relief')]//..//td[4]")
	private WebElement dataVentureCapitalTrustrelief;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Maintenance and alimony paid')]//..//td[4]")
	private WebElement dataMaintenanceAndAlimonyPaid;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Enterprise Investment Scheme relief')]//..//td[4]")
	private WebElement dataEnterpriseInvestmentSchemerelief;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Seed Enterprise Investment Scheme relief')]//..//td[4]")
	private WebElement dataSeedEnterpriseInvestmentSchemerelief;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Chargeable Event Gain')]//..//td[4]")
	private WebElement dataChargeableEventGain;
	//Tax Summary -> Tax Calculation summary of income with divident
	@FindBy (xpath="//table/tbody/tr[16]/td[2]")
	private WebElement basicRateOfPensions;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Basic rate')]//..//td[4]")
	private WebElement interOnBasicRate;
	@FindBy (xpath="//table/tbody/tr[19]/td[2]")
	private WebElement nilRateAmount;
	@FindBy (xpath="//table/tbody/tr[19]/td[4]")
	private WebElement interestUptoNill;
	@FindBy (xpath="//table/tbody/tr[20]/td[4]")
	private WebElement interestAtBasicRate;
	@FindBy (xpath="//table/tbody/tr[20]/td[2]")
	private WebElement basicRateOfBanks;
	@FindBy (xpath="//table/tbody/tr[23]/td[2]/b")
	private WebElement newTotalIncomeOnWhichTaxHasBeenCharged;
	@FindBy (xpath="//table/tbody/tr[24]/td[4]/b")
	private WebElement HeigherIncomeTaxdue1;
	@FindBy (xpath="//table/tbody/tr[26]/td[4]/strong")
	private WebElement HeigherIncomeTaxdue2;
	@FindBy (xpath="//table/tbody/tr[17]/td[4]")
	private WebElement heigherRateInterest;
	//Tax Summary -> Read XML
	@FindBy (id="ctl00_SideMenu1_hrefXML")
	private WebElement mtrXmlLink;
	@FindBy (id="ctl00_cPH_txtData")
	private WebElement textArea1;
	//Income -> Income From Property locators
	@FindBy (id="ctl00_SideMenu1_hrefProperty")
	private WebElement incmFrmProLink;
	@FindBy (id="ctl00_cpHeaderRight_btnEdit")
	public WebElement editBtn;
	@FindBy (id="ctl00_cPH_txtNumberOfProperties")
	private WebElement noOfPropertiesRentedOutTxtBox;
	@FindBy (id="ctl00_cPH_chkIsPropertyIncomeCeasedInYear")
	private WebElement icomeCeasedCheckBox;
	@FindBy (id="ctl00_cPH_chkIsIncomeFromPropertyLetJointly")
	private WebElement propertyJointlyCheckBox;
	@FindBy (id="ctl00_cPH_chkIsRentARoomReliefClaim")
	private WebElement rentARoomreliefchkBox;
	@FindBy (id="ctl00_cPH_txtFHLUKIncome")
	private WebElement rentIncomeTextBox;
	@FindBy (id="ctl00_cPH_txtFHLUKPropertyIncomeAllowance")
	private WebElement propertyIncomeAllowanceTxtBox;
	@FindBy (id="ctl00_cPH_txtFHLUKExpenses")
	private WebElement UKExpensesTxtBox;
	@FindBy (id="ctl00_cPH_txtFHLUKInterestEtcCosts")
	private WebElement loanInterestTxtBox;
	@FindBy (id="ctl00_cPH_txtFHLUKManagementEtcFees")
	private WebElement legalManagementOthrProfessionalFeesTxtBox;
	@FindBy (id="ctl00_cPH_txtFHLUKOtherExpenses")
	private WebElement allowablePropertyExpensesTxtBox;
	@FindBy (id="ctl00_cPH_txtFHLUKPrivateUseAdjustment")
	private WebElement privateUseAdjustmentTxtBox;
	@FindBy (id="ctl00_cPH_txtFHLUKBalancingCharges")
	private WebElement balancingChargesTxtBox;
	@FindBy (id="ctl00_cPH_txtFHLUKCapitalAllowances")
	private WebElement capitalAllowancesTxtBox;
	@FindBy (id="ctl00_cPH_txtFHLUKLossesBroughtForward")
	private WebElement lossBroughtForwardTxtBox;
	@FindBy (id="ctl00_cPH_txtFHLUKLossToCarryForward")
	private WebElement lossToCarryForwardTxtBox;
	@FindBy (id="ctl00_cPH_chkFHLUKTraditionalAccounting")
	private WebElement fHLUKTraditionalAccountingChkBox;
	@FindBy (id="ctl00_cPH_chkFHLUKIsPeriodOfGraceElection")
	private WebElement fHLUKIsPeriodOfGraceElectionChkBox;
	@FindBy (id="ctl00_cPH_txtFHLUKAdjustedProfitForTheYear")
	private WebElement calculateFHLUKAdjustedProfitForTheYear;
	@FindBy (id="ctl00_cPH_txtFHLUKTaxableProfitForYear")
	private WebElement calculateFHLUKTaxableProfitForYear;
	@FindBy (id="ctl00_cPH_txtFHLUKLossForYear")
	private WebElement calculateFHLUKLossForYear;
	//Income From Property locators -> EAA
	@FindBy (id="ctl00_cPH_txtNumberOfPropertiesEEA")
	private WebElement noOfPropertiesRentedOutEEATxtBox;
	@FindBy (id="ctl00_cPH_chkIsPropertyIncomeCeasedInYearEAA")
	private WebElement icomeCeasedEEAChkBox;
	@FindBy (id="ctl00_cPH_chkIsIncomeFromPropertyLetJointlyEEA")
	private WebElement  incomeFromPropertyEEAChkBox;
	@FindBy (id="ctl00_cPH_chkIsRentARoomReliefClaimEEA")
	private WebElement  rentARoomreliefEEAChkBox;
	@FindBy (id="ctl00_cPH_txtFHLEEAIncome")
	private WebElement rentIncomeEEATextBox;
	@FindBy (id="ctl00_cPH_txtFHLEEAPropertyIncomeAllowance")
	private WebElement propertyIncomeAllowanceEEATxtBox;
	@FindBy (id="ctl00_cPH_txtFHLEEAExpenses")
	private WebElement uKExpensesEAATxtBox;
	@FindBy (id="ctl00_cPH_txtFHLEEAInterestEtcCosts")
	private WebElement loanInterestEEATxtBox;
	@FindBy (id="ctl00_cPH_txtFHLEEAManagementEtcFees")
	private WebElement legalMangmntOthrProfsnlFeesEEATxtBox;
	@FindBy (id="ctl00_cPH_txtFHLEEAOtherExpenses")
	private WebElement allowablePropertyExpensesEAATxtBox;
	@FindBy (id="ctl00_cPH_txtFHLEEAPrivateUseAdjustment")
	private WebElement privateUseAdjustmentEAATxtBox;
	@FindBy (id="ctl00_cPH_txtFHLEEABalancingCharges")
	private WebElement balancingChargesEAATxtBox;
	@FindBy (id="ctl00_cPH_txtFHLEEACapitalAllowances")
	private WebElement capitalAllowancesEAATxtBox;
	@FindBy (id="ctl00_cPH_txtFHLEEALossesBroughtForward")
	private WebElement lossBroughtForwardEAATxtBox;
	@FindBy (id="ctl00_cPH_txtFHLEEALossToCarryForward")
	private WebElement lossToCarryForwardEAATxtBox;
	@FindBy (id="ctl00_cPH_chkFHLEEAIsPeriodOfGraceElection")
	private WebElement FHLEEAIsPeriodOfGraceElectionChkBox;
	@FindBy (id="ctl00_cPH_txtFHLEEAAdjustedProfitForTheYear")
	private WebElement calculateFHLEaaUKAdjustedProfitForTheYear;
	@FindBy (id="ctl00_cPH_txtFHLEEATaxableProfitForYear")
	private WebElement calculateFHLEaaUKTaxableProfitForYear;
	@FindBy (id="ctl00_cPH_txtFHLEEALossForYear")
	private WebElement calculateFHLEaaUKLossForYear;
	//Income -> Property Income
	@FindBy (id="ctl00_cPH_txtTotalRentsAndOtherIncomeFromProperty")
	private WebElement totalIncomePropertyLinkTxtBox;
	@FindBy (id="ctl00_cPH_txtPropertyIncomeAllowance")
	private WebElement totalIncomeAllowanceTxtBox;
	@FindBy (id="ctl00_cPH_chkTraditionalAccounting")
	private WebElement propertyIncomeAllowanceChkBox;
	@FindBy (id="ctl00_cPH_txtTaxTakenOffAnyIncome")
	private WebElement taxTakenOffTxtBox;
	@FindBy (id="ctl00_cPH_txtPremiumsForGrantOfALease")
	private WebElement premiumsForGrantOfALeaseTxtBox;
	@FindBy (id="ctl00_cPH_txtReversePremiumsAndInducements")
	private WebElement revrsePremAndInducTxtBox;
	@FindBy (id="ctl00_cPH_txtRentRatesInsuranceEtc")
	private WebElement rentRatesInsuranceEtcTxtBox;
	@FindBy (id="ctl00_cPH_txtRepairsAndMaintenance")
	private WebElement repairsAndMaintenanceTxtBox;
	@FindBy (id="ctl00_cPH_txtInterestAndOtherFinancialCharges")
	private WebElement intrstAndOthrFinancialChrgsTxtBox;
	@FindBy (id="ctl00_cPH_txtLegalManagementAndProfessionalFees")
	private WebElement legalManagmntAndPrfsnalFeesTxtBox;
	@FindBy (id="ctl00_cPH_txtCostsOfServicesProvided")
	private WebElement costsOfServicProvidedTxtBox;
	@FindBy (id="ctl00_cPH_txtOtherPropertyExpenses")
	private WebElement othrPropertyExpensesTxtBox;
	@FindBy (id="ctl00_cPH_txtPrivateUseAdjustment")
	private WebElement propertyPrivateUseAdjustmentTxtBox;
	@FindBy (id="ctl00_cPH_txtBalancingCharges")
	private WebElement balancingTaxableChargesTxtBox;
	@FindBy (id="ctl00_cPH_txtAnnualInvestmentAllowance")
	private WebElement annualInvestmentAllowanceTxtBox;
	@FindBy (id="ctl00_cPH_txtBusinessPremisesRenovationAllowance")
	private WebElement businessPremisesRenovationAllowanceTxtBox;
	@FindBy (id="ctl00_cPH_txtZeroEmissionGoodsVehicleAllowance")
	private WebElement zeroEmisnGoodsVehclAllwncTxtBox;
	@FindBy (id="ctl00_cPH_txtEnhancedCapitalAllowances")
	private WebElement enhancedCapitalAllowancesTxtBox;	
	@FindBy (id="ctl00_cPH_txtTenPercentWearAndTearAllowance")
	private WebElement tenPercntWearAndTearAllowanceTxtBox;
	@FindBy (id="ctl00_cPH_txtRentARoomExemptAmount")
	private WebElement rentARoomExemptAmountTxtBox;
	@FindBy (id="ctl00_cPH_txtLossSetOffAgainstTotalIncomeOfTheYear")
	private WebElement lossSetOffAgainstTotlIncmOfTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtLossSetOffAgainstTotalIncome")
	private WebElement lossSetOffAgainstTotalIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtLossToCarryForward")
	private WebElement lossToCarryForwardIncludingUnusedLossesTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialfinancecosts")
	private WebElement ResidentialfinancecostsTxtBox;
	@FindBy (id="ctl00_cPH_btnDelete")
	private WebElement incomeFrmPropertyDelBtn;
	@FindBy (xpath="//strong[contains(text(),'Error!')]")
	private WebElement errrMsg;
	@FindBy (id="ctl00_cPH_txtAdjustedProfitForTheYear")
	private WebElement adjustedProfitForTheYear;
	@FindBy (id="ctl00_cPH_txtTaxableProfitForTheYear")
	private WebElement taxableProfitForTheYear;
	@FindBy (id="ctl00_cPH_txtAdjustedLossForTheYear")
	private WebElement adjustedLossForTheYear;
	
	//Income -> Self Employment
	@FindBy (xpath="//a[contains(text(),'Self Employment')]")
	private WebElement selfEmploymentLink;
	//Self Employment -> Self Employment Short -> Business Details
	@FindBy (id="ctl00_cPH_txtBusinessDescription")
	private WebElement descriptionOfBusinessTxtBox;
	@FindBy (id="ctl00_cPH_txtPostCode")
	public WebElement empPostCodeTxtBox;
	@FindBy (id="ctl00_cPH_txtCeaseDate")
	private WebElement tradingEnddateTxtBox;
	@FindBy (id="ctl00_cPH_txtAccountDate")
	private WebElement businessAccountsEnddateTxtBox;
	@FindBy (id="ctl00_cPH_txtBusinessIncome")
	private WebElement businessIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtOtherBusinessIncome")
	private WebElement otherBusinessIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtTradingIncomeAllowance")
	private WebElement tradingIncomeAllowanceTxtBox;
	//Self Employment -> Self Employment Short -> Allowable Business Expenses for vehicles and equipment (capital allowances)
	@FindBy (id="ctl00_cPH_txtCostOfGoods")
	private WebElement costsOfGoodsBoughtForResaleTxtBox;
	@FindBy (id="ctl00_cPH_txtCarVanAndTravelExpenses")
	private WebElement carVanAndTravelExpensesTxtBox;
	@FindBy (id="ctl00_cPH_txtWagesSalariesAndStaffCosts")
	private WebElement wagesSalariesAndStaffCostsTxtBox;
	@FindBy (id="ctl00_cPH_txtRentAndOtherPropertyCosts")
	private WebElement rentAndOtherPropertyCostsTxtBox;
	@FindBy (id="ctl00_cPH_txtRepairAndRenewalCosts")
	private WebElement repairAndRenewalCostsTxtBox;
	@FindBy (id="ctl00_cPH_txtAccountancyAndLegalFees")
	private WebElement accountancyAndLegalFeesTxtBox;
	@FindBy (id="ctl00_cPH_txtInterestAndFinanceCharges")
	private WebElement interestAndFinanceChargesTxtBox;
	@FindBy (id="ctl00_cPH_txtPhoneAndOtherOfficeCosts")
	private WebElement phoneAndOtherOfficeCostsTxtBox;
	@FindBy (id="ctl00_cPH_txtOtherAllowableBusinessExpenses")
	private WebElement otherAllowableBusinessExpensesTxtBox;
	@FindBy (id="ctl00_cPH_txtTotalExpense")
	private WebElement totalExpenseTxtBox;
	//Self Employment -> Self Employment Short -> Tax allowances for vehicles and equipment (capital allowances)
	@FindBy (id="ctl00_cPH_txtAnnualInvestmentAllowance")
	private WebElement seAnnualInvestmentAllowanceTxtBox;
	@FindBy (id="ctl00_cPH_txtAllowanceForSmallBalanceOfUnrelievedExpenditure")
	private WebElement allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox;
	@FindBy (id="ctl00_cPH_txtOtherCapitalAllowances")
	private WebElement otherCapitalAllowancesTxtBox;
	@FindBy (id="ctl00_cPH_txtTotalBalancingCharges")
	private WebElement totalBalancingChargesTxtBox;
	@FindBy (id="ctl00_cPH_txtTotalAllowance")
	private WebElement totalAllowancesTxtBox;
	//Self Employment -> Self Employment Short -> Taxable Profits
	@FindBy (id="ctl00_cPH_txtOwnGoodsAndServices")
	private WebElement ownGoodsAndServicesTxtBox;
	@FindBy (id="ctl00_cPH_txtLossBroughtForward")
	private WebElement txtBoxLossBroughtForward;
	@FindBy (id="ctl00_cPH_txtAnyOtherBusinessIncome")
	private WebElement anyOtherBusinessIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtNetBusinessLoss")
	private WebElement netBusinessLossAmt;
	//Self Employment -> Self Employment Short -> Losses
	@FindBy (id="ctl00_cPH_txtLossOfYearSetAgainstOtherIncome")
	private WebElement lossOfYearSetAgainstOtherIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtLossToCarryBack")
	private WebElement lossToCarryBackTxtBox;
	@FindBy (id="ctl00_cPH_txtTotalLossToCarryForward")
	private WebElement totalLossToCarryForwardTxtBox;
	//Self Employment -> Self Employment Short -> CIS Deductions
	@FindBy (id="ctl00_cPH_txtSubContractorsTaxDeduction")
	private WebElement subContractorsTaxDeductionTxtBox;
	@FindBy(id="ctl00_cPH_rptrDisplayRecords_ctl00_hrefEdit")
	private WebElement displayRecordsBtn;
	//Income -> Self Employment (Full)
	@FindBy (id="ctl00_cPH_txtBusinessName")
	private WebElement businessNameTxtBox;
	@FindBy (id="ctl00_cPH_txtDescriptionofBusiness")
	private WebElement descriptionofBusinessTxtBox;
	@FindBy (id="ctl00_cPH_txtBusinessAddress")
	private WebElement businessAddressTxtBox;
	@FindBy (id="ctl00_cPH_txtBusinessPostCode")
	private WebElement businessPostCodeTxtBox;
	@FindBy (id="ctl00_cPH_txtBusinessStarteddate")
	private WebElement businessStarteddateTxtBox;
	@FindBy (id="ctl00_cPH_txtBusinessCeasedDate")
	private WebElement businessCeasedDateTxtBox;
	@FindBy (id="ctl00_cPH_txtBooksAccoutsStartDate")
	private WebElement booksAccoutsStartDateTxtBox;
	@FindBy (id="ctl00_cPH_txtBusinessBooksEnddate")
	private WebElement businessBooksEnddateTxtBox;
	@FindBy (id="ctl00_cPH_Chkincomeexpense")
	private WebElement incomeExpenseChkBox;
	//Self Employment (Full) -> Other Information
	@FindBy (id="ctl00_cPH_Chkaccountdate")
	private WebElement accountDateChkBox;
	@FindBy (id="ctl00_cPH_Chkchangedaccountdate")
	private WebElement changedAccountDateChkBox;
	@FindBy (id="ctl00_cPH_Chkarrangement")
	private WebElement arrangementChkBox;
	@FindBy (id="ctl00_cPH_Chkprofitinformation")
	private WebElement profitInformationChkBox;
	//Self Employment (Full) -> Business Income
	@FindBy (id="ctl00_cPH_txtTrunover")
	private WebElement trunoverTxtBox;
	@FindBy (id="ctl00_cPH_txtbusinessincomeother")
	private WebElement businessIncomeOtherTxtBox;
	@FindBy (id="ctl00_cPH_txtSEFullTradingIncomeAllowance")
	private WebElement seFullTradingIncomeAllowanceTxtBox;
	//Self Employment (Full) -> Business Expenses
	@FindBy (id="ctl00_cPH_txtConstructionindustrySubcontractors")
	private WebElement constructionindustrySubcontractorsTxtBox;
	@FindBy (id="ctl00_cPH_txtGoodsofCostfull")
	private WebElement goodsOfCostfullTxtBox;
	@FindBy (id="ctl00_cPH_txtgoodsDexp")
	private WebElement goodsDexpTxtBox;
	@FindBy (id="ctl00_cPH_txtDisexpConstruction")
	private WebElement disexpConstructionTxtBox;
	@FindBy (id="ctl00_cPH_txtDisexpwages")
	private WebElement disexpwagesTxtBox;
	@FindBy (id="ctl00_cPH_txtTravelexpenses")
	private WebElement travelexpensesTxtBox;
	@FindBy (id="ctl00_cPH_txtDisexpCarandVan")
	private WebElement disexpCarandVanTxtBox;
	@FindBy (id="ctl00_cPH_txtBankCreditandOtherFinancialCharges")
	private WebElement bankCreditandOtherFinancialChargesTxtBox;
	@FindBy (id="ctl00_cPH_txtDisexpBankCredit")
	private WebElement disexpBankCreditTxtBox;
	@FindBy (id="ctl00_cPH_txtIrrecoverabledebts")
	private WebElement irrecoverabledebtsTxtBox;
	@FindBy (id="ctl00_cPH_txtAccountancyLegalandOtherfees")
	private WebElement accountancyLegalandOtherfeesTxtBox;
	@FindBy (id="ctl00_cPH_txtDepreciationProfitandLoss")
	private WebElement depreciationProfitandLossTxtBox;
	@FindBy (id="ctl00_cPH_txtDisexpDepreciation")
	private WebElement disexpDepreciationTxtBox;
	@FindBy (id="ctl00_cPH_txtBusinessExpTotalExpenses")
	private WebElement businessExpTotalExpensesTxtBox;
	@FindBy (id="ctl00_cPH_txttotaldisallowableexpences")
	private WebElement totalDisallowableExpencesTxtBox;
	//Self Employment (Full) -> Net profit or loss
	@FindBy (id="ctl00_cPH_txtNetProfit")
	private WebElement netProfitTxtBox;
	@FindBy (id="ctl00_cPH_txtNetLoss")
	private WebElement netLossTxtBox;
	//Self Employment (Full) -> Tax allowances for vehicles and equipment (capital allowances)
	@FindBy (id="ctl00_cPH_txtannualinvestment")
	private WebElement annualinvestmentTxtBox;
	@FindBy (id="ctl00_cPH_txtCapitalAllowancesemissions")
	private WebElement capitalAllowancesemissionsTxtBox;
	@FindBy (id="ctl00_cPH_txtCapitalAllowances")
	private WebElement seCapitalAllowancesTxtBox;
	@FindBy (id="ctl00_cPH_txtRestrictedCosting")
	private WebElement restrictedCostingTxtBox;
	@FindBy (id="ctl00_cPH_txtOtherEnhancedCapitalAllowances")
	private WebElement otherEnhancedCapitalAllowancesTxtBox;
	@FindBy (id="ctl00_cPH_txtAllowancesCessationBusiness")
	private WebElement allowancesCessationBusinessTxtBox;
	@FindBy (id="ctl00_cPH_txttotalcapitalallowances")
	private WebElement totalcapitalallowancesTxtBox;
	@FindBy (id="ctl00_cPH_txtBalancingChargeOnSales")
	private WebElement balancingChargeOnSalesTxtBox;
	//Self Employment Full -> new  element according to MTR Test 3
	@FindBy (id="ctl00_cPH_txtWagesSalariesandOtherStaffCosts")
	private WebElement wagesSalariesandOtherStaffCostsTxtBox;
	@FindBy (id="ctl00_cPH_txtRepairandRenewalsProperty")
	private WebElement repairandRenewalsPropertyTxtBox;
	@FindBy (id="ctl00_cPH_txtRentInsurancecost")
	private WebElement rentInsurancecostTxtBox;
	@FindBy (id="ctl00_cPH_txtPhonefaxandOtherOfficeCosts")
	private WebElement phonefaxandOtherOfficeCostsTxtBox;
	@FindBy (id="ctl00_cPH_txtAdvertisingandEntertainmentCost")
	private WebElement advertisingandEntertainmentCostTxtBox;
	@FindBy (id="ctl00_cPH_txtDisexpRent")
	private WebElement disexpRentTxtBox;
	@FindBy (id="ctl00_cPH_txtInterestbank")
	private WebElement interestbankTxtBox;
	@FindBy (id="ctl00_cPH_txtOtherbusinessexpenses")
	private WebElement otherbusinessexpensesTxtBox;
	@FindBy (id="ctl00_cPH_txtAccountingperiodandProfitloss")
	private WebElement accountingperiodandProfitlossTxtBox;
	//Self Employment (Full) -> Calculating Taxable Profit or Loss
	@FindBy (id="ctl00_cPH_txtGoodandServices")
	private WebElement goodAndServicesTxtBox;
	@FindBy (id="ctl00_cPH_txttotaladditionaltonetprofit")
	private WebElement totaladditionaltonetprofitTxtBox;
	@FindBy (id="ctl00_cPH_txtBusinessIncomeandOtherProfit")
	private WebElement businessIncomeandOtherProfitTxtBox;
	@FindBy (id="ctl00_cPH_txttotaldeductiontonetprofit")
	private WebElement totaldeductiontonetprofitTxtBox;
	@FindBy (id="ctl00_cPH_txtNetBusinessProfitfortaxpurpose")
	private WebElement netBusinessProfitfortaxpurposeTxtBox;
	@FindBy (id="ctl00_cPH_txtBasisperiodBegan")
	private WebElement basisPeriodBeganTxtBox;
	@FindBy (id="ctl00_cPH_txtBasisperiodEnded")
	private WebElement basisPeriodEndedTxtBox;
	@FindBy (id="ctl00_cPH_txtAccountingperiodandProfitLoss")
	private WebElement accountingPeriodAndProfitLossTxtBox;
	@FindBy (id="ctl00_cPH_txtOverlapRelief")
	private WebElement overlapReliefTxtBox;
	@FindBy (id="ctl00_cPH_txtOverlapProfit")
	private WebElement overlapProfitTxtBox;
	@FindBy (id="ctl00_cPH_txtAdjustmentchangeofAccount")
	private WebElement adjustmentChangeofAccountTxtBox;
	@FindBy (id="ctl00_cPH_txtAdjustedProfit")
	private WebElement adjustedProfitTxtBox;
	@FindBy (id="ctl00_cPH_txtLossbroughtForwardProfit")
	private WebElement lossBroughtForwardProfitTxtBox;
	@FindBy (id="ctl00_cPH_txtAnyBusinessIncome")
	private WebElement anyBusinessIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txttotalprofitfrombusiness")
	private WebElement totalProfitFromBusinessTxtBox;
	//Self Employment (Full) -> Losses
	@FindBy (id="ctl00_cPH_txtAdjustedLoss")
	private WebElement adjustedLossTxtBox;
	@FindBy (id="ctl00_cPH_txtLossandAgainstOtherIncome")
	private WebElement lossandAgainstOtherIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtLossTocarriedBack")
	private WebElement lossTocarriedBackTxtBox;
	@FindBy (id="ctl00_cPH_txtLosstoCarryforward")
	private WebElement losstoCarryforwardTxtBox;
	//Self Employment (Full) -> CIS Deductions and Tax taken Off
	@FindBy (id="ctl00_cPH_txtSubContractorsDeductionTax")
	private WebElement subContractorsDeductionTaxTxtBox;
	@FindBy (id="ctl00_cPH_txtTaxTradingIncome")
	private WebElement taxTradingIncomeTxtBox;
	//Self Employment (Full) -> Balance Sheet -> Assets
	@FindBy (id="ctl00_cPH_txtEquipMentandMachinery")
	private WebElement equipMentandMachineryTxtBox;
	@FindBy (id="ctl00_cPH_txtOtherFixedAssests")
	private WebElement OtherFixedAssestsTxtBox;
	@FindBy (id="ctl00_cPH_txtStockandWork")
	private WebElement stockAndWorkTxtBox;
	@FindBy (id="ctl00_cPH_txtTradeDebtors")
	private WebElement tradeDebtorsTxtBox;
	@FindBy (id="ctl00_cPH_txtCashinHand")
	private WebElement cashinHandTxtBox;
	@FindBy (id="ctl00_cPH_txtCurrentAssestsandPayment")
	private WebElement currentAssestsandPaymentTxtBox;
	@FindBy (id="ctl00_cPH_txttotalassets")
	private WebElement totalAssetsTxtBox;
	//Self Employment (Full) -> Balance Sheet -> Liabilities
	@FindBy (id="ctl00_cPH_txtTradeCreditors")
	private WebElement tradeCreditorsTxtBox;
	@FindBy (id="ctl00_cPH_txtLoansOverdrawnandBankAccount")
	private WebElement loansOverdrawnandBankAccountTxtBox;
	@FindBy (id="ctl00_cPH_txtLiabilitiesandAccruals")
	private WebElement liabilitiesandAccrualsTxtBox;
	//Self Employment (Full) -> Balance Sheet -> Net business assets
	@FindBy (id="ctl00_cPH_txtNetBusinessAssets")
	private WebElement netBusinessAssetsTxtBox;
	//Self Employment (Full) -> Balance Sheet -> Capital Account
	@FindBy (id="ctl00_cPH_txtBalanceStartPeriod")
	private WebElement balanceStartPeriodTxtBox;
	@FindBy (id="ctl00_cPH_txtnetprofitorloss")
	private WebElement netprofitorlossTxtBox;
	@FindBy (id="ctl00_cPH_txtCapitalIntroduced")
	private WebElement capitalIntroducedTxtBox;
	@FindBy (id="ctl00_cPH_txtDrawing")
	private WebElement drawingTxtBox;
	@FindBy (id="ctl00_cPH_txtBalanceEndPeriod")
	private WebElement balanceEndPeriodTxtBox;
	//Self Employment (Full) -> National Insurance Contributions
	@FindBy (id="ctl00_cPH_txtAdjustmentProfit")
	private WebElement adjustmentProfitTxtBox;
	//Self Employment (Full) -> Other Information
	@FindBy (id="ctl00_cPH_txtComment")
	private WebElement commentTxtBox;
	@FindBy (xpath="//tr/td[contains(text(),'Class 4 National Insurance contributions')]//..//td[4]")
	private WebElement class4NationalInsurancecontributions1;
	@FindBy (xpath="//table/tbody/tr[18]/td[4]")
	private WebElement class4NationalInsurancecontributions2;
	@FindBy (xpath="//*[@id='ctl00_divSubContent']/div[2]/div/div/div/div/table/tbody/tr[33]/td[4]")
	private WebElement class4NationalInsurancecontributions2_test87;
	@FindBy (xpath="//*[@id='ctl00_divSubContent']/div[2]/div/div/div/div/table/tbody/tr[31]/td[4]")
	private WebElement class4NationalInsurancecontributions2_test96;
	@FindBy (xpath="//*[@id='ctl00_divSubContent']/div[2]/div/div/div/div/table/tbody/tr[31]/td[4]")
	private WebElement class4NationalInsurancecontributions2_test98;
	@FindBy (xpath="//*[@id='ctl00_divSubContent']/div[2]/div/div/div/div/table/tbody/tr[28]/td[4]")
	private WebElement class4NationalInsurancecontributions2_test153;
	@FindBy (xpath="//*[@id='ctl00_divSubContent']/div[2]/div/div/div/div/table/tbody/tr[25]/td[4]")
	private WebElement class4NationalInsurancecontributions2_test155;
	@FindBy (xpath="//tr/td[contains(text(),'Class 2 National Insurance contributions')]//..//td[4]")
	private WebElement class2NationalInsurancecontributions;
	@FindBy (id="ctl00_cPH_txtBankSocietyBalances")
	private WebElement bankSocietyBalancesTxtBox;
	@FindBy (id="ctl00_cPH_rptrDisplayFullRecords_ctl00_hrefDelete")
	private WebElement delDisplayFullRecords;
	@FindBy (id="ctl00_cPH_rptrDisplayFullRecords_ctl00_hrefEdit")
	private WebElement editFullRecordsSE;
	//Income -> Partnership (Short)
	@FindBy (xpath="//tr/td[contains(text(),'Profit from partnerships')]//..//td[2]")
	private WebElement profitFromPartnershipsCalculation;
	@FindBy (xpath="//a[contains(text(),'Partnership')]")
	private WebElement PartnershipLink;
	@FindBy (xpath="//h3[contains(text(),'Partnership (Short)')]//..//div/a/img")
	private WebElement PartnershipShortFormLink;
	@FindBy (id="ctl00_cPH_txtYourShareOfTheTotalTaxableProfits")
	private WebElement amtYourShareOfTheTotalTaxableProfits;
	//Income -> Partnership -> Class 2 & Class 4 NICs
	@FindBy ( xpath="//img[@src='../commonv2/images/note-i.jpg']")
	private WebElement Class2Class4NICsForm;
	@FindBy (id="ctl00_cPH_chkExemptFromPayingClass4NIC")
	private WebElement ExemptfromPayingClass4NICs;
	@FindBy (id="ctl00_cPH_chkPayClass2Voluntarily")
	private WebElement PayClass2NICsvoluntarily;
	//Income -> Partnership -> Partnership (Full)
	@FindBy ( xpath="//h3[contains(text(),'Partnership (Full)')]//..//div/a/img")
	private WebElement PartnershipFullFormLink;
	@FindBy (id = "ctl00_cPH_ddPartnership")
	private WebElement Description;
	@FindBy (id="ctl00_cPH_txtPartnershipReferenceNumber")
	private WebElement PartnerShipRefNo;
	@FindBy (id="ctl00_cPH_txtPartnerShipReference")
	private WebElement PartnerShipRefNoNew;
	@FindBy (id="ctl00_cPH_chkCashBasis")
	private WebElement CashBasisChkBox;
	@FindBy (id= "ctl00_cPH_txtDateBasisPeriodBegan")
	private WebElement BasisBusinessStartDate;
	@FindBy (id ="ctl00_cPH_txtDateBasisPeriodEnded")
	private WebElement BasisBusinessEndDate;
	@FindBy (id="ctl00_cPH_txtShareOfPartnershipProfitOrLoss")
	private WebElement yourShareOfPartnershipProfitLoss;
	@FindBy (id="ctl00_cPH_txtAdjustmentForBasisPeriod")
	private WebElement adjustmentBasisPeriodAccountingPeriod;
	@FindBy (id="ctl00_cPH_txtChangeOfAccountingPracticeAdjustment")
	private WebElement adjustmentForChangeOfAccountingPractice;
	@FindBy (id ="ctl00_cPH_txtAveragingAdjustment")
	private WebElement averagingAdjustment;
	@FindBy (id ="ctl00_cPH_chkPayClass2NICsvoluntarily")
	private WebElement payClass2NICsVoluntarilyChkBox;
	@FindBy (id ="ctl00_cPH_txtShareUKUntaxedSavingsIncome")
	private WebElement shareUKUntaxedSavingsIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtAdjustmentToUKIncomeForBasisPeriod")
	private WebElement adjustmentToUKIncomeForBasisPeriodTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfForeignUntaxedSavingsIncome")
	private WebElement shareOfForeignUntaxedSavingsIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtUntaxedAdjustmentToIncomeForBasisPeriod")
	private WebElement untaxedAdjustmentToIncomeForBasisPeriodTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfOtherUntaxedUKIncome")
	private WebElement shareOfOtherUntaxedUKIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtUntaxedUKIncomeAdjustmentToIncomeForBasisPeriod")
	private WebElement untaxedUKIncomeAdjustmentToIncomeForBasisPeriodTxtBox;
	@FindBy (id ="ctl00_cPH_txtLossesBroughtForwardFromEarlierYearsSetOffAgainstIncome")
	private WebElement lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfIncomeFromOffshoreFunds")
	private WebElement shareOfIncomeFromOffshoreFundsTxtBox;
	@FindBy (id ="ctl00_cPH_txtTotalForeignTaxTakenOffAndForeignTax")	
	private WebElement totalForeignTaxTakenOffAndForeignTaxTxtBox;
	@FindBy (id ="ctl00_cPH_txtTotalForeignTaxTakenOff")
	private WebElement totalForeignTaxTakenOffTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfAnyTaxTakenOffTradingIncome")
	private WebElement shareOfAnyTaxTakenOffTradingIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtOverlapReliefUsedThisYear")
	private WebElement overlapReliefUsedThisYearTxtBox;
	@FindBy (id ="ctl00_cPH_txtAdjustmentToIncomeOffshoreForBasisPeriod")
	private WebElement adjustmentToIncomeOffshoreForBasisPeriodTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfProfitOrLossFromUKProperty")
	private WebElement shareOfProfitOrLossFromUKPropertyTxtBox;
	@FindBy (id ="ctl00_cPH_txtLossesBroughtForwardFromEarlierYearsSetOffAgainstProfits")
	private WebElement lossesBroughtForwardFromEarlierYearsSetOffAgainstProfitsTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfProfitFromUKOrEEAFurnishedHolidayLettings")
	private WebElement shareOfProfitFromUKOrEEAFurnishedHolidayLettingsTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfOtherUntaxedForeignIncome")
	private WebElement shareOfOtherUntaxedForeignIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtAdjustmentToUntaxedIncomeForBasisPeriod")
	private WebElement adjustmentToUntaxedIncomeForBasisPeriodTxtBox;
	@FindBy (id ="ctl00_cPH_txtTotalForeignFaxTakenOff")
	private WebElement totalForeignFaxTakenOffTxtBox;
	@FindBy (id ="ctl00_cPH_txtUntaxedResidentialFinanceCosts")
	private WebElement untaxedResidentialFinanceCostsTxtBox;
	@FindBy (id ="ctl00_cPH_txtDividendIncome")
	private WebElement dividendIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfTaxedIncomeTaxable")
	private WebElement shareOfTaxedIncomeTaxableTxtBox;
	@FindBy (id ="ctl00_cPH_txtDividendIncomeTotalForeignTaxTakenOff")
	private WebElement dividendIncomeTotalForeignTaxTakenOffTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfOtherTaxedIncome")
	private WebElement shareOfOtherTaxedIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtDividendIncomeTotalForeignTaxCreditTakenOff")
	private WebElement dividendIncomeTotalForeignTaxCreditTakenOffTxtBox;
	@FindBy (id ="ctl00_cPH_txtDeductionsShareOfIncomeTaxTakenOffPartnershipIncome")
	private WebElement deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfCISDeductionsMadeByContractors")
	private WebElement shareOfCISDeductionsMadeByContractorsTxtBox;
	//Partnership (Full) -> Fetched
	@FindBy (id="ctl00_cPH_txtAdjustedLossForYear")
	private WebElement adjustedLoss;
	@FindBy (id ="ctl00_cPH_txtLossSetOffAgainstOtherIncome")
	private WebElement lossFromThisTaxYearSetOffAgainstOtherIncome;
	@FindBy (id="ctl00_cPH_txtLossToBeCarriedBack")
	private WebElement lossCarriedBackPreviousYearSetOFFAgainstIncome;
	@FindBy (id="ctl00_cPH_txtForeignTaxClaimedAsDeduction")
	private WebElement foreignTaxclaimedAsDeduction;
	@FindBy (id="ctl00_cPH_txtAdjustmentToProfitsChargeableToClass4NICs")
	private WebElement adjustmentToProfitsChargeableToClass4NICsTxtBox;
	@FindBy (id="ctl00_cPH_txtOverlapReliefUsed")
	private WebElement overlapReliefUsedThisYear;
	@FindBy (id="ctl00_cPH_txtOverlapProfitCarriedForward")
	private WebElement overlapProfitCarriedForward ;
	@FindBy (id="ctl00_cPH_txtPartnersShareOfBPRA")
	private WebElement partnersShareOfBPRATxtBox;
	@FindBy (id="ctl00_cPH_txtTaxableProfitAfterAdjustmentAndLosses")
	private WebElement taxableProfitAfterAdjustmentAndLossesTxtBox;
	@FindBy (id="ctl00_cPH_txtUntaxedTaxableProfit")
	private WebElement untaxedTaxableProfitTxtBox;
	@FindBy (id ="ctl00_cPH_txtUntaxedIncome")
	private WebElement untaxedIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfTotalUntaxedIncome")
	private WebElement shareOfTotalUntaxedIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtTotalDividendIncome")
	private WebElement totalDividendIncomeTxtBox;
	@FindBy (id ="ctl00_cPH_txtTaxedIncomeTaxable")
	private WebElement taxedIncomeTaxableTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfTotalTaxedAndUntaxedIncomeOtherThanThatTaxable")
	private WebElement shareOfTotalTaxedAndUntaxedIncomeOtherThanThatTaxableTxtBox;
	@FindBy (id ="ctl00_cPH_txtShareOfTotalTaxTakenOff")
	private WebElement shareOfTotalTaxTakenOfTxtBox;
	@FindBy (id ="ctl00_cPH_txtUntaxedUnusedResidentialFinanceCostsBroughtForward")
	private WebElement untaxedUnusedResidentialFinanceCostsBroughtForwardTxtBox;
	//Partnership (Full) -> Fetched
	@FindBy (id ="ctl00_cPH_txtAdjustedProfitForYear")
	private WebElement adjustedProfitForYear;
	@FindBy (id="ctl00_cPH_txtLossesBroughtForward")
	private WebElement lossesBroughtForward;
	@FindBy (id="ctl00_cPH_txtAdjustedUKSavingsIncomeForBasisPeriod")
	private WebElement adjustedUKSavingsIncomeForBasisPeriodTxtBox;
	@FindBy (id="ctl00_cPH_txtTotalUntaxedSavingsIncomeTaxable")
	private WebElement totalUntaxedSavingsIncomeTaxableTxtBox;
	//Partnership (Full) -> otherBusinessIncomeTxtBox exist
	@FindBy (id="ctl00_cPH_txtAdjustmentToClass4NICProfits")
	private WebElement adjustmentToClass4NICProfits;
	@FindBy (id="ctl00_cPH_txtShareOfTaxedInterestEtc")
	private WebElement shareOfUnTaxedInterestEtc;
	@FindBy (id="ctl00_cPH_txtShareOfTaxTakenOffByContractors")
	private WebElement shareOfTaxTakenOffByContractors;
	@FindBy (id="ctl00_cPH_txtShareOfTaxTakenOffTradingIncome")
	private WebElement shareOfTaxTakenOffTradingIncome;
	@FindBy (id="ctl00_cPH_txtAnyOtherInformationSpace")
	private WebElement anyOtherInformationSpace;
	//Partnership (Full) -> Add PartnershipForm
	@FindBy (id="ctl00_cPH_txtName")
	private WebElement txtBoxDec;
	@FindBy(xpath="//tr/td[contains(text(),'Adjustment to  Class 4 NIC profits')]//..//td[2]")
	private WebElement class4NICprofits;
	@FindBy (id="ctl00_cPH_rptrPartnership_ctl00_hrefDelete")
	private WebElement partnershipDel;
	@FindBy(id="ctl00_cPH_rptrDisplayRecordsFull_ctl00_hrefDelete")
	private WebElement delPartnershipFullBtn;
	//Income -> Capital Gains Summary
	@FindBy (id="ctl00_SideMenu1_hrefCapitalGain")
	private WebElement linkCapitalGain;
	//Capital Gains Summary -> TOTAL GAINS
	@FindBy (id="ctl00_cPH_txtTotalGain")
	private WebElement totalGainTxtBox;
	//Capital Gains Summary -> Residential property (and carried interest)
	@FindBy (id="ctl00_cPH_txtResidentialPropertyNumberOfDisposals")
	private WebElement residentialPropertyNumberOfDisposalsTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyDisposalProceeds")
	private WebElement residentialPropertyDisposalProceedsTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyAllowableCosts")
	private WebElement residentialPropertyAllowableCostsTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyGainsInTheYear")
	private WebElement residentialPropertyGainsInTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyLossesInTheYear")
	private WebElement residentialPropertyLossesInTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyClaimOrElectionMade")
	private WebElement residentialPropertyClaimOrElectionMadeTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyGainOrLossRelatingToNRCGT")
	private WebElement residentialPropertyGainOrLossRelatingToNRCGTTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyNRCGTtaxAlreadyCharged")
	private WebElement residentialPropertyNRCGTtaxAlreadyChargedTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyGainOrLossFromRTTreturn")
	private WebElement residentialPropertyGainOrLossFromRTTreturnTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyRTTtaxAlreadyCharged")
	private WebElement residentialPropertyRTTtaxAlreadyChargedTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialPropertyCarriedInterest")
	private WebElement residentialPropertyCarriedInterestTxtBox;
	//Capital Gains Summary -> Other property, assets and gains
	@FindBy (id="ctl00_cPH_txtPropertyEtcTotalDisposal")
	private WebElement propertyEtcTotalDisposalTxtBox;
	@FindBy (id="ctl00_cPH_txtPropertyEtcDisposalProceed")
	private WebElement propertyEtcDisposalProceedTxtBox;
	@FindBy (id="ctl00_cPH_txtPropertyEtcCostsAndIndexation")
	private WebElement propertyEtcCostsAndIndexationTxtBox;
	@FindBy (id="ctl00_cPH_txtPropertyEtcGainsInTheYear")
	private WebElement propertyEtcGainsInTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtPropertyEtcAttributedGain")
	private WebElement propertyEtcAttributedGainTxtBox;
	@FindBy (id="ctl00_cPH_txPropertyEtcLossesInTheYear")
	private WebElement propertyEtcLossesInTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtPropertyEtcClaimOrElectionMade")
	private WebElement propertyEtcClaimOrElectionMadeTxtBox;
	@FindBy (id="ctl00_cPH_txtPropertyEtcGainFromRTTreturn")
	private WebElement propertyEtcGainFromRTTreturnTxtBox;
	@FindBy (id="ctl00_cPH_txtPropertyEtcRTTtaxAlreadyCharged")
	private WebElement propertyEtcRTTtaxAlreadyChargedTxtBox;
	//Capital Gains Summary -> Listed shares and securities
	@FindBy (id="ctl00_cPH_txtQSTotalDisposal")
	private WebElement qSTotalDisposalTxtBox;
	@FindBy (id="ctl00_cPH_txtQSDisposalProceed")
	private WebElement qSDisposalProceedTxtBox;
	@FindBy (id="ctl00_cPH_txtQSCostsAndIndexation")
	private WebElement qSCostsAndIndexationTxtBox;
	@FindBy (id="ctl00_cPH_txtQSGainsInTheYear")
	private WebElement qSGainsInTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtQSLossesInTheYear")
	private WebElement qSLossesInTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtQSClaimOrElectionMade")
	private WebElement qSClaimOrElectionMadeTxtBox;
	@FindBy (id="ctl00_cPH_txtQSGainFromRTTreturn")
	private WebElement qSGainFromRTTreturnTxtBox;
	@FindBy (id="ctl00_cPH_txtQSRTTtaxAlreadyCharged")
	private WebElement qSRTTtaxAlreadyChargedTxtBox;
	//Capital Gains Summary -> Unlisted shares and securities
	@FindBy (id="ctl00_cPH_txtUQSTotalDisposal")
	private WebElement uQSTotalDisposalTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSDisposalProceed")
	private WebElement uQSDisposalProceedTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSCostsAndIndexation")
	private WebElement uQSCostsAndIndexationTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSGainsInTheYear")
	private WebElement uQSGainsInTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSLossesInTheYear")
	private WebElement uQSLossesInTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSClaimOrElectionMade")
	private WebElement uQSClaimOrElectionMadeTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSGainFromRTTreturn")
	private WebElement uQSGainFromRTTreturnTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSRTTtaxAlreadyCharged")
	private WebElement uQSRTTtaxAlreadyChargedTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSGainsExceedingESSlimit")
	private WebElement uQSGainsExceedingESSlimitTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSGainsInvestedUnderSeedEIS")
	private WebElement uQSGainsInvestedUnderSeedEISTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSLossUsedAgainstCurrentYearIncome")
	private WebElement uQSLossUsedAgainstCurrentYearIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSUncappedLossUsedAgainstCurrentYearIncome")
	private WebElement uQSUncappedLossUsedAgainstCurrentYearIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSLossUsedAgainstPrevYearIncome")
	private WebElement uQSLossUsedAgainstPrevYearIncomeTxtBox;
	@FindBy (id="ctl00_cPH_txtUQSUncappedLossUsedAgainstPrevYearIncome")
	private WebElement uQSUncappedLossUsedAgainstPrevYearIncomeTxtBox;
//Capital Gains Summary -> Losses and adjustments
	@FindBy (id="ctl00_cPH_txtLossBFAndUsedInYear")
	private WebElement lossBFAndUsedInYearTxtBox;
	@FindBy (id="ctl00_cPH_txtIncomeLossesOfTheYearSetAgainstGain")
	private WebElement incomeLossesOfTheYearSetAgainstGainTxtBox;
	@FindBy (id="ctl00_cPH_txtLossToBeCarriedForward")
	private WebElement lossToBeCarriedForwardTxtBox;
	@FindBy (id="ctl00_cPH_txtLossUsedAgainstEarlierYearsGain")
	private WebElement lossUsedAgainstEarlierYearsGainTxtBox;
	@FindBy (id="ctl00_cPH_txtEntrepreneurReliefClaimOnDefGainBefore23June2010")
	private WebElement entrepreneurReliefClaimOnDefGainBefore23June2010TxtBox;
	@FindBy (id="ctl00_cPH_txtTotalERGainForTheYear")
	private WebElement totalERGainForTheYearTxtBox;
	@FindBy (id="ctl00_cPH_txtAdjustmentToCGT")
	private WebElement adjustmentToCGTTxtBox;
	@FindBy (id="ctl00_cPH_txtNRDRTrustLiability")
	private WebElement nRDRTrustLiabilityTxtBox;
	//Capital Gains Summary -> descriptionTxtBox
	@FindBy (id="ctl00_cPH_FileUpload1")
	private WebElement fileUpload1;
	@FindBy(xpath="//span[contains(text(),'Delete')]")
	private WebElement delCapitalGain;
	@FindBy(id="ctl00_cPH_chkDeleteAttachment")
	private WebElement deleteAttachmentChkBox;
	//Tax Reliefs -> Pension Contributions
	@FindBy(xpath="//span[contains(text(),'Tax Reliefs')]")	
	private WebElement taxReliefsLink;
	@FindBy(id="ctl00_cPH_spanPensionContribution")
	private WebElement linkPensionContributionx;
	@FindBy(id="ctl00_cPH_txtPaymentsToRegisteredPensionSchemes")
	private WebElement paymentsToRegisteredPensionSchemesTxtBox;
	@FindBy(id="ctl00_cPH_txtRetirementAnnuityContractPayments")
	private WebElement retirementAnnuityContractPaymentsTxtBox;
	@FindBy(id="ctl00_cPH_txtEmployerPensionSchemePayments")
	private WebElement employerPensionSchemePaymentsTxtBox;
	@FindBy(id="ctl00_cPH_txtNonUKOverseasPensionSchemePayments")
	private WebElement nonUKOverseasPensionSchemePaymentsTxtBox;
	@FindBy(id="ctl00_cpHFooter_btnSavePension")
	private WebElement savePensionBtn;
	//Tax Reliefs -->Charitable giving
	@FindBy(xpath="//header/h3[contains(text(),'Charitable giving')]//..//div/a")
	private WebElement openCharitableForm;
	@FindBy(id="ctl00_cPH_txtSharesGiftedToCharity")
	private WebElement sharesOrSecuritiesGiftedToCharityTxtBox;
	@FindBy(id="ctl00_cPH_txtLandAndBuildingsGiftedToCharity")
	private WebElement landAndBuildingsGiftedToCharityTxtBox;
	@FindBy(id="ctl00_cPH_txtInvestmentsGiftedToNonUKCharities")
	private WebElement investmentsGiftedToNonUKCharitiesTxtBox;
	@FindBy(id="ctl00_cPH_rptrCharityRecords_ctl00_hrefEdit")
	private WebElement editCharityRecords;
	@FindBy(id="ctl00_cPH_rptrCharityRecords_ctl00_hrefDelete")
	private WebElement deleteCharityRecords;
	@FindBy(id="ctl00_cpHFooter_btnCancel")
	private WebElement cancelBtn;
	//Tax Reliefs -> Gift Aid payment
	@FindBy(xpath="(//header/h3[contains(text(),'Gift Aid Payments')]//..//div/a)[1]")
	private WebElement linkGiftAidpayment;
	@FindBy(id="ctl00_cPH_txtGiftAidPaymentsMadeInYear")
	private WebElement giftAidPaymentsMadeInYearTxtBox;
	@FindBy(id="ctl00_cPH_txtOneOffGiftAidPayments")
	private WebElement oneOffGiftAidPaymentsTxtBox;
	//Tax Reliefs -> Other Gift Aid payment
	@FindBy(xpath="(//header/h3[contains(text(),'Gift Aid Payments')]//..//div/a)[2]")
	private WebElement otherGiftAidpaymentLink;
	@FindBy(id="ctl00_cPH_txtGiftAidPaymentsCarriedBackToPreviousYear")
	private WebElement giftAidPaymentsCarriedBackToPreviousYearTxtBox;
	@FindBy(id="ctl00_cPH_txtGiftAidPaymentsBroughtBackFromLaterYear")
	private WebElement giftAidPaymentsBroughtBackFromLaterYearTxtBox;
	//Tax Reliefs -> Blind Person Allowance
	@FindBy(xpath="//header/h3[contains(text(),'Blind Person')]//..//div/a")
	private WebElement linkBlindPerson;
	@FindBy(id="ctl00_cPH_chkSurplusBlindPersonsAllowanceFromSpouse")
	private WebElement surplusBlindPersonsAllowanceFromSpouseChkBox;
	@FindBy(id="ctl00_cPH_chkSurplusBlindPersonsAllowanceToSpouse")
	private WebElement surplusBlindPersonsAllowanceToSpouseChkBox;
	//Tax Reliefs -> Marriage Allowance
	@FindBy(xpath="//header/h3[contains(text(),'Marriage Allowance')]//..//div/a")
	private WebElement marriageAllowanceForm;
	@FindBy(id="ctl00_cPH_chkReceiveMarriageAllowancefrom")
	private WebElement receiveMarriageAllowancefromChkBox;
	@FindBy(id="ctl00_cPH_chkReceiveMarriageAllowanceTO")
	private WebElement receiveMarriageAllowanceTOChkBox;
	@FindBy(id="ctl00_cPH_txtSpouseFirstName")
	private WebElement spouseFirstNameTxtBox;
	@FindBy(id="ctl00_cPH_txtSpouselastname")
	private WebElement spouselastnameTxtBox;
	@FindBy(id="ctl00_cPH_txtSpouseNInumber")
	private WebElement spouseNInumberTxtBox;
	@FindBy(id="ctl00_cPH_txtSpouseDOB")
	private WebElement spouseDOBTxtBox;
	@FindBy(id="ctl00_cPH_txtDateofmarriageSpouse")
	private WebElement dateOfMarriageSpouseTxtBox;
	@FindBy(xpath="//td[contains(text(),'Marriage Allowance Transfer')]")
	private WebElement taxSummaaryMarriageAllowance;
	@FindBy(xpath="//td[contains(text(),'Marriage Allowance Transfer')]//..//td[4]")
	private WebElement taxSummaaryMarriageAllowanceAmt;
	@FindBy(xpath="//td[contains(text(),'Married Couple')]//..//td[4]")
	private WebElement taxSummaaryMarriedCoupleAllowanceAmt;
	//Other Tax Information -> Student Loan Repayment
	@FindBy(xpath="//span[contains(text(),'Other Tax Information')]")
	private WebElement linkOtherTaxInformation;
	@FindBy(id="ctl00_cPH_ddStudentLoan")
	private WebElement studentLoanTypeLstBox;
	@FindBy(id="ctl00_cPH_txtAmount")
	private WebElement amountTxtBox;
	@FindBy(id="ctl00_cPH_chkLoanFullyRepaidIn2Years")
	private WebElement repaidChckBox;
	@FindBy(xpath="//tr/td[contains(text(),'Student Loan repayments')]//..//td[4]")
	private WebElement studentLoanAmountTaxWindow;
	//Other Tax Information -> High Income Child Benefit Charge
	@FindBy(id="ctl00_cPH_txtAmountReceived")
	private WebElement amountReceivedTxtBox;
	@FindBy(id="ctl00_cPH_txtChildren")
	private WebElement NoOfchildrenTxtBox;
	@FindBy(id="ctl00_cPH_txtBenifitStopDate")
	private WebElement benifitStopDateTxtBox;
	//Other Tax Information -> Payments on account
	@FindBy(id="ctl00_cPH_img4")
	private WebElement paymentsOnAccountLink;
	@FindBy(id="ctl00_cPH_chkClaimToReducePaymentsOnAccount")
	private WebElement claimToReducePaymentsOnAccountChkBox;
	@FindBy(id="ctl00_cPH_txtFirstPaymentOnAccount")
	private WebElement firstPaymentOnAccountTxtBox;
	@FindBy(id="ctl00_cPH_txtNotes")
	private WebElement notesTxtBox;
	@FindBy(xpath="//tr/td[contains(text(),'First Payment on Account')]//..//td[4]")
	private WebElement firstPaymentonAccountAmount;
	@FindBy(xpath="//tr/td[contains(text(),'Total due by')]//..//td[4]")
	private WebElement totalDueByJanuaryAmount;
	@FindBy(xpath="//tr/td[contains(text(),'Second Payment on Account for')]//..//td[4]")
	private WebElement secondPaymentAmount;
	//Other Tax Information -> Finishing your tax return
	@FindBy(id="ctl00_cPH_img5")
	private WebElement finishingTaxLink;
	@FindBy(id="ctl00_cPH_txtTaxRoundedOff")
	private WebElement taxRoundedOffTxtBox;
	@FindBy(id="ctl00_cPH_chkNotPaidEnoughOweTaxPrevYear")
	private WebElement notPaidEnoughOweTaxPrevYearChkBox;
	@FindBy(id="ctl00_cPH_chkNotPaidEnoughNotUseCode")
	private WebElement notPaidEnoughNotUseCodeChkBox;
	@FindBy(id="ctl00_cPH_txtOtherInfo")
	private WebElement otherInfoTxtBox;
	@FindBy (xpath="//tr/td[contains(text(),'Tax already refunded in the year')]//..//td[4]")
	private WebElement taxAlreadyRefunded;
	@FindBy (id="ctl00_cPH_chkTaxAdvisor")
	private WebElement taxAdvisorChkBox;
	//Other Tax Information -> Underpaid Tax
	@FindBy (id="ctl00_cPH_img3")
	private WebElement formOpenLink;
	@FindBy (id="ctl00_cPH_txtUnderpaidTaxForEarlierYearsIncludedInCode")
	private WebElement underpaidTaxForEarlierYearsIncludedInCodeTxtBox;
	@FindBy (id="ctl00_cPH_txtUnderpaidTax")
	private WebElement underpaidTaxTxtBox;
	@FindBy (id="ctl00_cPH_txtOutstandingDebt")
	private WebElement outstandingDebtTxtBox;
	//Additional Information
	@FindBy (xpath="//span[contains(text(),'Additional Information')]")
	private WebElement additionalInformationLink;
	@FindBy (id="ctl00_cpHeaderRight_btnEditIncome")
	private WebElement commonEditBtn;
	@FindBy (id="ctl00_cPH_txtGiftInterestAfterTax")
	private WebElement giftInterestAfterTaxTxtBox;
	@FindBy (id="ctl00_cPH_txtTaxTakenOff1")
	private WebElement taxTakenOff1TxtBox;
	@FindBy (id="ctl00_cPH_txtGrossAmount")
	private WebElement grossAmountTxtBox;
	@FindBy (id="ctl00_cPH_txtStockDividends")
	private WebElement stockDividendsTxtBox;
	@FindBy (id="ctl00_cPH_txtNonQualifying")
	private WebElement nonQualifyingTxtBox;
	@FindBy (id="ctl00_cPH_txtTaxYearIncomeToBeTaxed")
	private WebElement taxYearIncomeToBeTaxedTxtBox;
	//Other tax reliefs
	@FindBy (id="ctl00_cPH_txtSubscriptionsVenture")
	private WebElement subscriptionsVentureTxtBox;
	@FindBy (id="ctl00_cPH_txtSubscriptionsShares")
	private WebElement subscriptionsSharesTxtBox;
	@FindBy (id="ctl00_cPH_txtCommunityInvestment")
	private WebElement communityInvestmentTxtBox;
	@FindBy (id="ctl00_cPH_txtAnnualPayments")
	private WebElement annualPaymentsTxtBox;
	@FindBy (id="ctl00_cPH_txtQualifyingLoan")
	private WebElement qualifyingLoanTxtBox;
	@FindBy (id="ctl00_cPH_txtPostCessation")
	private WebElement postCessationTxtBox;
	@FindBy (id="ctl00_cPH_txtMaintenancePayment")
	private WebElement maintenancePaymentTxtBox;
	@FindBy (id="ctl00_cPH_txtPaymentsTrade")
	private WebElement paymentsTradeTxtBox;
	@FindBy (id="ctl00_cPH_txtReliefClaimed")
	private WebElement reliefClaimedTxtBox;
	@FindBy (id="ctl00_cPH_txtSubscriptionsSharesUnder")
	private WebElement subscriptionsSharesUnderTxtBox;
	@FindBy (id="ctl00_cPH_txtSocialInvestment")
	private WebElement socialInvestmentTxtBox;
	@FindBy (id="ctl00_cPH_txtAmountGainOnLifeInsuranceVoidedISAs")
	private WebElement amountGainOnLifeInsuranceVoidedISAsTxtBox;
	@FindBy (id="ctl00_cPH_txtNumberOfYearsSinceLastVoidedISAs")
	private WebElement numberOfYearsSinceLastVoidedISAsTxtBox;
	@FindBy (id="ctl00_cPH_txtTaxTakenOffOnLifeInsuranceGains")
	private WebElement taxTakenOffOnLifeInsuranceGainsTxtBox;
	@FindBy (id="ctl00_cPH_txtDeficiencyReliefOnLifeInsuranceGains")
	private WebElement deficiencyReliefOnLifeInsuranceGainsTxtBox;
	//Share schemes and employment lump sums
	@FindBy (id="ctl00_cPH_txtShareSchemesTaxableAmount")
	private WebElement shareSchemesTaxableAmountTxtBox;
	@FindBy (id="ctl00_cPH_txtLumpSumSalariesAndOtherPayments")
	private WebElement lumpSumSalariesAndOtherPaymentsTxtBox;
	@FindBy (id="ctl00_cPH_txtLumpSumsOrBenefitsFromRetirementSchemes")
	private WebElement lumpSumsOrBenefitsFromRetirementSchemesTxtBox;
	@FindBy (id="ctl00_cPH_txtRedundancyAndOtherCompensationPayments")
	private WebElement redundancyAndOtherCompensationPaymentsTxtBox;
	@FindBy (id="ctl00_cPH_txtRedundancyAndOtherCompensationTaxTakenOff")
	private WebElement redundancyAndOtherCompensationTaxTakenOffTxtBox;
	@FindBy (id="ctl00_cPH_txtRetirementAndOtherExemptions")
	private WebElement retirementAndOtherExemptionsTxtBox;
	@FindBy (id="ctl00_cPH_txtCompensationAndLumpSumExemptions")
	private WebElement compensationAndLumpSumExemptionsTxtBox;
	@FindBy (id="ctl00_cPH_txtDisabilityAndForeignServiceDeduction")
	private WebElement disabilityAndForeignServiceDeductionTxtBox;
	@FindBy (id="ctl00_cPH_txtSeafarersEarningsDeduction")
	private WebElement seafarersEarningsDeductionTxtBox;
	@FindBy (id="ctl00_cPH_txtNonUKTaxableForeignEarnings")
	private WebElement nonUKTaxableForeignEarningsTxtBox;
	@FindBy (id="ctl00_cPH_txtForeignTaxNoCreditReliefClaim")
	private WebElement foreignTaxNoCreditReliefClaimTxtBox;
	@FindBy (id="ctl00_cPH_txtOverseasPensionExemptEmployerContributions")
	private WebElement overseasPensionExemptEmployerContributionsTxtBox;
	@FindBy (id="ctl00_cPH_txtUKpatentRoyaltyPayments")
	private WebElement UKpatentRoyaltyPaymentsTxtBox;
	@FindBy (id="ctl00_cPH_txtSchemeReference1")
	private WebElement schemeReference1TxtBox;
	//comment For Validation
	@FindBy (id="ctl00_cPH_btnSaveIncome")
	private WebElement saveAdditionalInfoBtn;
	//popUpCancelBtn
	//life insurance
	@FindBy (id="ctl00_cPH_txtAmountGainOnLifeInsurance")
	private WebElement amountGainOnLifeInsuranceTxtBox;
	@FindBy (id="ctl00_cPH_txtNumberOfYearsSinceLastPolicyGain")
	private WebElement numberOfYearsSinceLastPolicyGainTxtBox;
	@FindBy (id="ctl00_cPH_txtNoTaxAmountGainOnPolicy")
	private WebElement txtBoxNoTaxAmountGainOnPolicy;
	@FindBy (id="ctl00_cPH_txtNumberOfYearsSinceLastNoTaxPolicyGain")
	private WebElement txtBoxNumberOfYearsSinceLastNoTaxPolicyGain;
	//Married Couple’s Allowance
	@FindBy (id="ctl00_cPH_txtSpousesName")
	private WebElement spousesNameTxtBox;
	@FindBy (id="ctl00_cPH_txtSpousesDateOfBirth")
	private WebElement spousesDateOfBirthTxtBox;
	@FindBy (id="ctl00_cPH_txtDateOfMarriageOrCivilPartnership")
	private WebElement dateOfMarriageOrCivilPartnershipTxtBox;
	@FindBy (id="ctl00_cPH_chkAllMinimumAllowanceTransferToYou")
	private WebElement allMinimumAllowanceTransferToYouChkBox;
	@FindBy (id="ctl00_cPH_txtPreviousSpousesName")
	private WebElement previousSpousesNameTxtBox;
	@FindBy (id="ctl00_cPH_chkHalfMinimumAllowanceTransferToYou")
	private WebElement chkBoxHalfMinimumAllowanceTransferToYou;
	@FindBy (id="ctl00_cPH_chkAllMinimumAllowanceTransferToOther")
	private WebElement chkBoxAllMinimumAllowanceTransferToOther;
	@FindBy (id="ctl00_cPH_chkHalfMinimumAllowanceTransferToOther")
	private WebElement chkBoxHalfMinimumAllowanceTransferToOther;
	//PAYCode
	@FindBy (xpath="//td[contains(text(),'To be collected through PAYE code')]")
	private WebElement payCodeTaxSummary;
	@FindBy (xpath="//tr/td[contains(text(),'To be collected through PAYE code')]//..//td[4]")
	private WebElement payCodeAmountTaxSummary;	
	@FindBy (xpath="//tr/td/b[contains(text(),' No payment on account as 80% of tax paid at source')]//..//..//td[4]")
	private WebElement payCodeAmountTaxSummary1;
	//email /SMS
	@FindBy (xpath="//span[contains(text(),'Email / SMS')]")
	private WebElement emailOptionsLink;
	@FindBy (xpath="//span[contains(text(),'E mail')]")
	private WebElement emailOpenLink;
	@FindBy (id="ctl00_cPH_txtEmail")
	public WebElement emailTxtBox;
	@FindBy (id="ctl00_cPH_ddlEmailTemplate")
	private WebElement emailTemplateListBox;
	@FindBy (id="ctl00_cPH_txtSubject")
	private WebElement subjectTxtBox;
	@FindBy (id="ctl00_cPH_txtMessage_ctl02_ctl00")
	private WebElement msgBodyTxtBox;
	@FindBy (xpath="//*[@id='ctl00_divSubContent']/div[2]/table/tbody/tr[2]/td[2]")
	private WebElement rowOneDisplay;
	@FindBy (xpath="//*[@id='ctl00_divSubContent']/div[2]/table/tbody/tr[2]/td[3]")
	private WebElement rowTwoDisplay;
	@FindBy (xpath="//span[contains(text(),'Schedule Email')]")
	private WebElement scheduleEmailLink;
	@FindBy (id="ctl00_cPH_rdTemplate")
	private WebElement emailTempalateOption;
	@FindBy (id="ctl00_cPH_rdGeneric")
	private WebElement ownEmailTempalateOption;
	@FindBy (id="ctl00_cPH_btnNext")
	private WebElement nextBtn;
	@FindBy (id="ctl00_cPH_ddTemplate")
	private WebElement chooseTemplateOption;
	@FindBy (id="ctl00_cPH_ddSendTo")
	private WebElement sendTooption;
	@FindBy (xpath="//a[contains(text(),'Email Templates')]")
	private WebElement emailTempLink;
	@FindBy (xpath="//td[contains(text(),'test tamplate')]")
	private WebElement emailTempOption;
	@FindBy (xpath="//td[contains(text(),'test tamplate')]//..//td[2]")
	private WebElement templateSubject;
	//Tax Payments Already Made
	@FindBy (xpath="//span[contains(text(),'Tax Payments Already Made')]")
	private WebElement linkTaxPaymentsAlreadyMade;
	@FindBy (xpath="//*[@id='ctl00_divMainContent']/header/div/a")
	private WebElement addTaxPaymentBtn;
	@FindBy (xpath="//*[@id='ctl00_divSubContent']/div[2]/table/tbody/tr[2]/td[3]")
	private WebElement	taxAmountDisplay;
	//SA -> Dashboard
	@FindBy (tagName="body")
	private WebElement body;
	@FindBy (xpath="//tr/td/span[contains(text(),'Approved')]//..//..//td[2]")
	private WebElement	statusApprovedClientList;
	@FindBy (xpath="//ul[@id='ctl00_ctl00_ParentContent_SideMenu1_SAMenuChildren']/li/a[contains(text(),'Dashboard')]")
	private WebElement	saDashboardLink;
	@FindBy (xpath="//h2[contains(text(),'Dashboard')]")
	private WebElement txtDashboard;
	@FindBy (xpath="//form[@id='aspnetForm']/main/div/div[2]/ul/li[1]")
	private WebElement	menuDashboard;
	// SA -> Assign Accountant
	@FindBy (xpath="//a[contains(text(),'Assign Accountant')]")
	private WebElement	assignAccountantLink;
	@FindBy (id="ctl00_ctl00_ParentContent_cPHFilter_ddlAccountant")
	private WebElement accountantLSTBox;
	@FindBy (id="ctl00_ctl00_ParentContent_cPHFilter_btnSearch")
	private WebElement searchBtn;
	//SA -> Client List -> import Client 
	@FindBy (xpath="//span[contains(text(),'Import Client')]")
	private WebElement importClientLink;
	@FindBy (id="ctl00_ctl00_ParentContent_cPH_fuList")
	private WebElement uploadClientTxtBox;
	@FindBy (id="ctl00_ctl00_ParentContent_cPH_btnUpload")
	private WebElement uploadClientBtn;
	@FindBy (id="ctl00_ctl00_ParentContent_cpHeaderRight_btnSave")
	private WebElement importBtn;
	@FindBy (id="chkSingle")
	private WebElement importChkBox;
	@FindBy (id="ctl00_ctl00_ParentContent_cpHeaderRight_btnCancel")
	private WebElement importCancelBtn;
	//SA -> Email template
	@FindBy (xpath="//ul[@id='ctl00_ctl00_ParentContent_SideMenu1_SAMenuChildren']/li/a[contains(text(),'Email Templates')]")
	private WebElement emailTemplatesLink;
	@FindBy (xpath="//span[contains(text(),'Add New Template')]")
	private WebElement addNewTemplateBtn;
	@FindBy (id="ctl00_ctl00_ParentContent_cPH_txtTemplateName")
	private WebElement templateNameTxtBox;
	@FindBy (id="ctl00_ctl00_ParentContent_cPH_txtSubject")
	private WebElement emailSubjectTxtBox;
	//SaveButton
	@FindBy (xpath="//iframe[@id='ctl00_ctl00_ParentContent_cPH_txtMessage_ctl02_ctl00']")
	private WebElement emailFrame;
	//SA -> Schedule email
	@FindBy (xpath="//ul[@id='ctl00_ctl00_ParentContent_SideMenu1_SAMenuChildren']/li/a[contains(text(),'Schedule Email')]")
	private WebElement scheduledEmailLink;
	@FindBy (id="ctl00_ctl00_ParentContent_cPHFilter_txtFirstName")
	private WebElement firstNameScheduleMail;
	@FindBy (id="ctl00_ctl00_ParentContent_cPHFilter_txtLastName")
	private WebElement lastNameScheduleMail;
	@FindBy (id="ctl00_ctl00_ParentContent_cPHFilter__selectall_inputitemAll")
	private WebElement inputItemAllChkBox;
	@FindBy (id="ctl00_ctl00_ParentContent_cPH_ddlEmailTemplates")
	private WebElement selectEmailTemplatesLstBox;
	//emailSubjectTxtBox
	@FindBy (id="ctl00_ctl00_ParentContent_cPH_txtDate")
	private WebElement dateScheduleEmailTxtBox;
	@FindBy (id="ctl00_ctl00_ParentContent_cPH_btnAssign")
	private WebElement sceduleEmailBtn;
	@FindBy(xpath="//a[contains(text(),'Nom1')]")	
	private WebElement selectClientScheduleEmail;
	@FindBy(xpath="//td[contains(text(),'Testing SA')]")
	private WebElement subjectEmail;
	//SA -> Foreign Income
	@FindBy(xpath="//a[contains(text(),'Foregin1')]")
	private WebElement clientForeignIncome;
	@FindBy(id="ctl00_SideMenu1_hrefForeignIncome")
	private WebElement linkForeignIncome;
	@FindBy(xpath="//a[contains(text(),'Foreign_33')]")
	private WebElement clientFOR33;
	@FindBy (id="ctl00_cPH_txtTotalForeignTaxRelief")
	private WebElement totalForeignTaxReliefTxtBox;
	
	//SA -> Foreign Income ->Interest and other income from overseas savings
	@FindBy (xpath="//tr/th/span[contains(text(),'Interest and other income from overseas savings')]//..//div//a//img")
	private WebElement interestOtherincomefromoverseassavingsFormBtn;
	@FindBy (id="ctl00_cPH_ddlCountryCode")
	private WebElement countryCodeLstBox;
	@FindBy (id="ctl00_cPH_txtColB")
	private WebElement colBTxtBox;
	@FindBy (id="ctl00_cPH_chkColE")
	private WebElement colEChkBox;
	@FindBy (id="ctl00_cPH_txtColF")
	private WebElement colFTxtBox;
	@FindBy (id="ctl00_cPH_txtColC")
	private WebElement colCTxtBox;
	@FindBy (id="ctl00_cPH_txtColD")
	private WebElement colDTxtBox;
	@FindBy (id="ctl00_cPH_rptrInterestOtherIncomeFromOverseasSavings_ctl00_hrefDelete")
	private WebElement delOverseasSavings;
	@FindBy (id="ctl00_cPH_rprtr_DividendIncomeReceivedPersonAbroad_ctl00_hrefDelete")
	private WebElement delDividendIncomeReceivedPersonAbroad;
	@FindBy (id="ctl00_cPH_rptr_OtherIncomeRemittedForeignIncome_ctl00_hrefDelete")
	private WebElement delOtherIncomeRemittedForeignIncome;
	@FindBy (id="ctl00_cPH_rptr_DividendsForeignComanies_ctl00_hrefDelete")
	private WebElement delDividendsForeignComaniesBtn;
	@FindBy (id="ctl00_cPH_rptr_OverseasPensionsRoyalties_ctl00_hrefDelete")
	private WebElement delOverseasPensionsRoyaltiesBtn;
	@FindBy (id="ctl00_cPH_rptr_Summary_ctl00_hrefDelete")
	private WebElement delSummaryFOR;
	@FindBy (id="ctl00_cPH_rptForeignTaxPaidOnEmployment_ctl00_hrefDelete")
	private WebElement delForeignTaxPaid;
	
	//SA -> Foreign Income -> Dividends from foreign companies
	@FindBy (xpath="//tr/th/span[contains(text(),'Dividends from foreign companies')]//..//div//a//img")
	private WebElement dividendsFromForeignCompanies;
	@FindBy (xpath="//tr/th/span[contains(text(),'Overseas pensions, social security benefits and royalties')]//..//div//a//img")
	private WebElement overseasPensionsSocialScurityBenefitsAndRoyalties;
	@FindBy (xpath="//tr/th/span[contains(text(),'Dividend income received by a person abroad')]//..//div//a//img")
	private WebElement dividendIncomeReceivedByAPersonAbroadBtn;
	@FindBy (xpath="//tr/th/span[contains(text(),'All other income received by a person abroad and any remitted ‘ring fenced’ foreign income')]//..//div//a//img")
	private WebElement incomeReceivedByPersonAbroadBtn;
	@FindBy (id="ctl00_cPH_txtResidentialFinanceCostRelief")
	private WebElement residentialFinanceCostReliefTxtBox;
	@FindBy (id="ctl00_cPH_txtUnusedTOAAresidentialFinanceCostsBroughtForward")
	private WebElement unUsedTOAAresidentialFinanceCostsBroughtForwardTxtBox;
	@FindBy (id="ctl00_cPH_txtTotalRentsAndOtherReceipts")
	private WebElement totalRentsAndOtherReceiptsTxtBox;
	@FindBy (id="ctl00_cPH_txtPropertyExpenses")
	private WebElement propertyExpensesTxtBox;
	@FindBy (id="ctl00_cPH_txtNetProfitOrLoss")
	private WebElement foreignIncomeNetProfitOrLossTxtBox;
	@FindBy (id="ctl00_cPH_txtNumberOfOverseasLetProperties")
	private WebElement foreignIncomeNumberOfOverseasLetPropertiesTxtBox;
	@FindBy (id="ctl00_cPH_txtPrivateUseAdjustments")
	private WebElement foreignIncomePrivateUseAdjustmentsTxtBox;
	@FindBy (id="ctl00_cPH_txtCostsOfReplacingDomesticItems")
	private WebElement foreignIncomeCostsOfReplacingDomesticItemsTxtBox;
	@FindBy (id="ctl00_cPH_txtResidentialFinanceCosts")
	private WebElement foreignIncomeResidentialFinanceCostsTxtBox;
	@FindBy (id="ctl00_cPH_txtUnusedResidentialFinanceCostsBroughtForward")
	private WebElement unusedResidentialFinanceCostsBroughtForwardTxtBox;
	@FindBy (id="ctl00_cPH_txtAdjustedProfitOrLossForTheYear")
	private WebElement foreignIncomeAdjustedProfitOrLossForTheYearTxtBox;
	@FindBy (xpath="//div[@id='ctl00_divSubContent']/div[2]/div[1]/div[3]/div[2]/div[1]/div[1]/div[8]/div[1]/a/img")
	private WebElement foreignIncomeEditSummaryBtn;
	@FindBy (id="ctl00_cPH_txtTotalTaxableProfit")
	private WebElement totalTaxableProfitTxtBox;
	@FindBy(xpath="//tr/td/b[contains(text(),'Income Tax due after allowances and reliefs')]//..//..//td[4]")
	private WebElement amountIncomeTaxdueafterallowances;
	//Foreign Income -> Other overseas income and gains
	@FindBy (id="ctl00_cPH_txtGainsOnForeignLifeInsurancePolicies")
	private WebElement txtBoxGainsOnForeignLifeInsurancePolicies;
	@FindBy (id="ctl00_cPH_txtNumberOfYears")
	private WebElement txtBoxNumberOfYears;
	@FindBy (id="ctl00_cPH_txtTaxTreatedAsPaidReadTheNotes")
	private WebElement txtBoxTreatedAsPaidReadTheNotes;
	@FindBy (id="ctl00_cPH_pnlPopup")
	private WebElement popup1;
	@FindBy (id="ctl00_cPH_txtForeignTaxPaid")
	private WebElement foreignTaxPaidTxtBox;
	@FindBy(xpath="//*[@id='ctl00_divSubContent']/div[2]/div/div[3]/div[2]/div/div/div[8]/div/a")
	private WebElement BtnAddSummary;
	@FindBy(xpath="//*[@id='ctl00_divSubContent']/div[2]/div/div[3]/div[3]/div/div[1]/div/a")
	private WebElement BtnForeignTaxPaid;
	@FindBy (id="ctl00_cPH_txtAmountOfChargeableGainUnderUKRules")
	private WebElement amountOfChargeableGainUnderUKRulesTxtBox;
	@FindBy (id="ctl00_cPH_chkToClaimForeignTaxCreditRelief")
	private WebElement toClaimForeignTaxCreditReliefChkBox;
	@FindBy (id="ctl00_cPH_txtTotalForeignTaxCreditReliefOnGains")
	private WebElement totalForeignTaxCreditReliefOnGainsTxtBox;
//Verify XML File
	@FindBy(xpath="//td[contains(text(),'Pay from all employments')]//..//td[2]")
	private WebElement txtPaymentFrmEmployment;
	@FindBy(xpath="//td/strong[contains(text(),'Total tax deducted')]//..//..//td[4]")
	private WebElement txtTotaltaxdeducted;
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Interest from UK banks, building societies and securities etc')]//..//td[2]")
	private WebElement amountInterestFromUKbanksBuilding;
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Dividends from UK companies')]//..//td[2]")
	private WebElement amountDividendsfromUKCompanies;
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'UK pensions and state benefits')]//..//td[2]")
	private WebElement amountUKpensionsAndStateBenefits;
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Gains on life insurance policies etc.')]//..//td[2]")
	private WebElement amountGainsOnLifeInsurancePolicies;
	//MTR Test 4 -> verify tax page
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Starting rate')]//..//td[2]")
	private WebElement txtSavingsinterestStartingrate;
	@FindBy(xpath="//table/tbody/tr[14]/td[contains(text(),'Nil rate')]//..//td[2]")
	private WebElement txtSavinginterestNilrate;
	@FindBy(xpath="//table/tbody/tr[17]/td[contains(text(),'Nil rate')]//..//td[2]")
	private WebElement txtDividentNilrate;
	@FindBy (xpath="//span[contains(text(),'Residence, Remittance Basis')]")
	private WebElement residenceRemittanceBasisLink;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Tax due on annuity and royalty payments')]//..//td[4]")
	private WebElement amtTaxDueOnAnnuityAndRoyaltyPayments;

	//Please read the ‘Residence, remittance basis etc notes’ before you fill in below boxes
	@FindBy (id="ctl00_cPH_chknotResidentInUK")
	private WebElement notResidentInUKChkBox;
	@FindBy (id="ctl00_cPH_chkClaimForOverseasWorkdayRelief")
	private WebElement rlaimForOverseasWorkdayReliefChkBox;
	@FindBy (id="ctl00_cPH_chkRequestForSplitYearTreatment")
	private WebElement requestForSplitYearTreatmentChkBox;
	@FindBy (id="ctl00_cPH_chkMoreThanOneCaseOfSplitYearTreatmentApplies")
	private WebElement moreThanOneCaseOfSplitYearTreatmentAppliesChkBox;
	@FindBy (id="ctl00_cPH_chkResidentInUKForPreviousYear")
	private WebElement residentInUKForPreviousYearChkBox;
	@FindBy (id="ctl00_cPH_chkClaimForOverseasWorkdayReliefWhichIncludesPYamount")
	private WebElement claimForOverseasWorkdayReliefWhichIncludesPYamountChkBox;
	@FindBy (id="ctl00_cPH_chkMeetTheThirdAutomaticOverseasTest")
	private WebElement meetTheThirdAutomaticOverseasTestChkBox;
	@FindBy (id="ctl00_cPH_chkHadAGapBetweenEmploymentsInThisTaxYear")
	private WebElement hadAGapBetweenEmploymentsInThisTaxYearChkBox;
	@FindBy (id="ctl00_cPH_chkHadAHomeOverseas")
	private WebElement hadAHomeOverseasChkBox;
	@FindBy (id="ctl00_cPH_txtSplitYearTreatmentDateFromWhichTheUKpartYearBeginsOrEnds")
	private WebElement splitYearTreatmentDateFromWhichTheUKpartYearBeginsOrEndsTxtBox;
	@FindBy (id="ctl00_cPH_txtNumberOfDaysSpentInUK")
	private WebElement numberOfDaysSpentInUKTxtBox; 
	@FindBy (id="ctl00_cPH_txtNumberOfDaysDueToExceptionalCircumstances")
	private WebElement numberOfDaysDueToExceptionalCircumstancesTxtBox;
	@FindBy (id="ctl00_cPH_txtHowManyTiesToUK")
	private WebElement howManyTiesToUKTxtBox;
	@FindBy (id="ctl00_cPH_txtNumberOfWorkdaysInUKForEmployment")
	private WebElement numberOfWorkdaysInUKForEmploymentTxtBox;
	@FindBy (id="ctl00_cPH_txtNumberOfWorkdaysSpentOverseas")
	private WebElement numberOfWorkdaysSpentOverseasTxtBox;

	//Personal allowances for non-residents and dual residents
	@FindBy (id="ctl00_cPH_chkPersonalAllowancesClaimDueToDTA")
	private WebElement personalAllowancesClaimDueToDTAChkBox;
	@FindBy (id="ctl00_cPH_chkPersonalAllowancesClaimOnOtherBasis")
	private WebElement personalAllowancesClaimOnOtherBasisChkBox;
	@FindBy (id="ctl00_cPH_ddlCodeForCountryOfNationalityOrResidence1")
	private WebElement countryOfNationalityOrResidence1LstBox;
	@FindBy (id="ctl00_cPH_ddlCodeForCountryOfNationalityOrResidence2")
	private WebElement countryOfNationalityOrResidence2LstBox;
	@FindBy (id="ctl00_cPH_ddlCodeForCountryOfNationalityOrResidence3")
	private WebElement countryOfNationalityOrResidence3LstBox;

	//Residence in other countries
	@FindBy (id="ctl00_cPH_ddlCodeForCountryOfResidenceForTaxInYear1")
	private WebElement countryOfResidenceForTaxInYear1LstBox;
	@FindBy (id="ctl00_cPH_ddlCodeForCountryOfResidenceForTaxInYear2")
	private WebElement countryOfResidenceForTaxInYear2LstBox;
	@FindBy (id="ctl00_cPH_ddlCodeForCountryOfResidenceInPreviousYear1")
	private WebElement countryOfResidenceInPreviousYear1LstBox;
	@FindBy (id="ctl00_cPH_ddlCodeForCountryOfResidenceInPreviousYear2")
	private WebElement countryOfResidenceInPreviousYear2LstBox;
	@FindBy (id="ctl00_cPH_txtAmountOfDTAincomeForWhichPartialReliefIsClaimed")
	private WebElement amountOfDTAincomeForWhichPartialReliefIsClaimedTxtBox;
	@FindBy (id="ctl00_cPH_txtDTAReliefClaimResidenceInAnotherCountry")
	private WebElement dTAReliefClaimResidenceInAnotherCountryTxtBox;
	@FindBy (id="ctl00_cPH_txtDTAReliefClaimOtherProvisions")
	private WebElement dTAReliefClaimOtherProvisionsTxtBox;

	//Domicile
	@FindBy (id="ctl00_cPH_chkDomiciledOutsideTheUKForTax")
	private WebElement domiciledOutsideTheUKForTaxChkBox;
	@FindBy (id="ctl00_cPH_chkConditionA")
	private WebElement conditionAChkBox;
	@FindBy (id="ctl00_cPH_chkConditionB")
	private WebElement conditionBChkBox;
	@FindBy (id="ctl00_cPH_txtYearsUKresident")
	private WebElement yearsUKresidentTxtBox;
	@FindBy (id="ctl00_cPH_chkFirstYearOrAlwaysDomiciledOutsideUK")
	private WebElement firstYearOrAlwaysDomiciledOutsideUKChkBox;
	@FindBy (id="ctl00_cPH_txtDateDomicileChanged")
	private WebElement dateDomicileChangedTxtBox;
	@FindBy (id="ctl00_cPH_chkBornInUKButNonUKDomicile")
	private WebElement bornInUKButNonUKDomicileChkBox;
	@FindBy (id="ctl00_cPH_txtDateOfComingToLiveInUK")
	private WebElement dateOfComingToLiveInUKTxtBox;

	//Remittance basis - Check Boxes
	@FindBy (id="ctl00_cPH_chkRemittancebasisclaim")
	private WebElement remittancebasisclaimChkBox;
	@FindBy (id="ctl00_cPH_chkUnremitedIncomeAndGainsUnremittedIncomeAndGainsUnder")
	private WebElement unremitedIncomeAndGainsUnremittedIncomeAndGainsUnderChkBox;
	@FindBy (id="ctl00_cPH_chkDeemedUKdomicileAndPreviouslyClaimedRemitanceBasis")
	private WebElement deemedUKdomicileAndPreviouslyClaimedRemitanceBasisChkBox;
	@FindBy (id="ctl00_cPH_chkUKResidentFor12OutOf14Years")
	private WebElement uKResidentFor12OutOf14YearsChkBox;
	@FindBy (id="ctl00_cPH_chkUKResidentFor7OutOf9YearsUKResident")
	private WebElement uKResidentFor7OutOf9YearsUKResidentChkBox;
	@FindBy (id="ctl00_cPH_chkLessThan18Years")
	private WebElement lessThan18YearsChkBox;
	@FindBy (id="ctl00_cPH_chkRemittedIncomeOrGains")
	private WebElement remittedIncomeOrGainsChkBox;
	@FindBy (id="ctl00_cPH_chkPreviousInvestmentNoLongerQualifies")
	private WebElement previousInvestmentNoLongerQualifiesChkBox;

	//Remittance basis - Text Boxes
	@FindBy (id="ctl00_cPH_txtNominatedIncomeAmount")
	private WebElement nominatedIncomeAmountTxtBox;
	@FindBy (id="ctl00_cPH_txtNominatedCapitalGainsAmount")
	private WebElement nominatedCapitalGainsAmountTxtBox;
	@FindBy (id="ctl00_cPH_txtAdjustmentToPaymentsOnAccount")
	private WebElement adjustmentToPaymentsOnAccountTxtBox;
	@FindBy (id="ctl00_cPH_txtAmountOfReliefClaimedForInvestmentInQualifyingBusiness")
	private WebElement amountOfReliefClaimedForInvestmentInQualifyingBusinessTxtBox;
	@FindBy (id="ctl00_cPH_txtCompanyRegistrationNumber")
	private WebElement companyRegistrationNumberTxtBox;
	@FindBy (id="ctl00_cPH_txtCompanyRegistrationNumber1")
	private WebElement companyRegistrationNumber1TxtBox;
	@FindBy (id="ctl00_cPH_txtCompanyRegistrationNumber2")
	private WebElement companyRegistrationNumber2TxtBox;
	//Any Other Information
	//commentTxtBox
	//verify tax test case 9
	@FindBy(xpath="//td[contains(text(),'Profit from self-employment')]//..//td[2]")
	private WebElement amountProfitFromSelfEmployment;
	@FindBy(xpath="//td[contains(text(),'Profit from UK land and property')]//..//td[2]")
	private WebElement amountProfitFromUKLandAndProperty;  
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Other income')]//..//td[2]")
	private WebElement amountOtherIncome;
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Tax due on Gift Aid payments')]//..//td[3]")
	private WebElement calculationGiftAidpayments;
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Tax due on Gift Aid payments')]//..//td[5]")
	private WebElement taxDueGiftAidpayments;
	@FindBy(xpath="//table/tbody/tr/td/b[contains(text(),'Income Tax due after Gift Aid')]//..//..//td[3]")
	private WebElement incomeTaxDueAfterGifTAid;
	@FindBy(xpath="//td[contains(text(),'Reduced Personal Allowance')]//..//td[2]")
	private WebElement amountReducedPersonalAllowance; 
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Capital Gain Tax Due')]//..//td[4]")
	private WebElement amountCapitalGainTaxDue;
	//MTR Test Case 10
	@FindBy(xpath="//table/tbody/tr[14]/td[contains(text(),'Basic rate')]//..//td[2]")
	private WebElement amtBasicRatePayPensions;
	@FindBy(xpath="//table/tbody/tr[19]/td[contains(text(),'Basic rate')]//..//td[2]")
	private WebElement amtBasicRateSavingsInterestTest1;
	@FindBy(xpath="//table/tbody/tr[19]/td[contains(text(),'Basic rate')]//..//td[4]")
	private WebElement calculationBasicRateSavingsInterestTest1;
	@FindBy(xpath="//table/tbody/tr[17]/td[contains(text(),'Basic rate')]//..//td[4]")
	private WebElement calculationBasicRateSavings;
	@FindBy(xpath="//table/tbody/tr[23]/td[contains(text(),'Basic rate')]//..//td[2]")
	private WebElement amtBasicRateDividendsTest1;
	@FindBy(xpath="//table/tbody/tr[23]/td[contains(text(),'Basic rate')]//..//td[4]")
	private WebElement calculationBasicRateDividendsTest1;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Higher rate')]//..//td[2]")
	private WebElement amtHeigherRate1;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Starting rate')]//..//td[4]")
	private WebElement amtSavingsinterestStartingrate;
	@FindBy (xpath="//table/tbody/tr[18]/td[contains(text(),'Nil rate')]//..//td[2]")
	private WebElement amtNilRateSavingsInterest;
	@FindBy (xpath="//table/tbody/tr[22]/td[contains(text(),'Nil rate')]//..//td[2]")
	private WebElement amtNilRateDividendsTest10;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'From all employments, UK pensions and state benefits')]//..//td[2]")
	private WebElement amtFromallemploymentsUKpensionsTest1;
	//MTR Test Case 14
	@FindBy(xpath="//table/tbody/tr[12]/td[contains(text(),'Basic rate')]//..//td[2]")
	private WebElement amtBasicRatePayPensionsTest14;
	@FindBy(xpath="//table/tbody/tr[15]/td[contains(text(),'Nil rate')]//..//td[2]")
	private WebElement amtNilRateDividentTest14;
	@FindBy(xpath="//table/tbody/tr[16]/td[contains(text(),'Basic rate')]//..//td[2]")
	private WebElement amtBasicRate;
	@FindBy(xpath="//table/tbody/tr[16]/td[contains(text(),'Basic rate')]//..//td[4]")
	private WebElement calculateBasicRate;
	//MTR test case 15
	@FindBy (xpath="//table/tbody/tr[21]/td[contains(text(),'Nil rate')]//..//td[2]")
	private WebElement amtNilRateSavingsInterest1;
	@FindBy(xpath="//table/tbody/tr[22]/td[contains(text(),'Basic rate')]//..//td[2]")
	private WebElement amtBasicRateDividends;
	@FindBy (xpath="//tr/td[contains(text(),'Class 4 National Insurance contributions')]//..//td[2]")
	private WebElement amtClass4NationalInsurancecontributions;
	//MTR test case 16
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Income tax relief')]//..//td[2]")
	private WebElement amtIncometaxrelief;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Blind')]//..//td[2]")
	private WebElement amtBlindPersonAllowance;
	@FindBy (xpath="//table/tbody/tr[21]/td[contains(text(),'Higher rate')]//..//td[2]")
	private WebElement amtHeigherRate2;
	@FindBy (xpath="//table/tbody/tr[25]/td[contains(text(),'Higher rate')]//..//td[2]")
	private WebElement amtHeigherRate3;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Higher rate')]//..//td[4]")
	private WebElement calculationHeigherRate1;
	@FindBy (xpath="//table/tbody/tr[21]/td[contains(text(),'Higher rate')]//..//td[4]")
	private WebElement calculationHeigherRate2;
	@FindBy (xpath="//table/tbody/tr[25]/td[contains(text(),'Higher rate')]//..//td[4]")
	private WebElement calculationHeigherRate3;
	//Tax summary Locators
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Basic rate')]//..//td[2]")
	private WebElement amountPayPensionsProfitBasicRate;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Balance of PAYE tax')]//..//td[3]")
	private WebElement amtBalanceofPAYEtax;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Interest received from UK banks and building societies')]//..//td[3]")
	private WebElement amtInterestReceivedfromUKbanksBuildingSocieties;
	@FindBy (xpath="//table/tbody/tr[31]/td[contains(text(),'Other income')]//..//td[3]")
	private WebElement amtTaxDeductionOfOtherIncome;
	@FindBy (xpath="//table/tbody/tr/td/b[contains(text(),'Income Tax overpaid')]//..//..//td[4]")
	private WebElement amtIncomeTaxoverpaid;
	@FindBy (xpath="//table/tbody/tr/td/b[contains(text(),'Income Tax overpaid')]//..//..//td[5]")
	private WebElement amtIncomeTaxoverpaid1;
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Benefits and expenses received')]//..//td[2]")
	private WebElement amtBenefitsandexpensesreceived;
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Allowable expenses')]//..//td[2]")
	private WebElement amtAllowableexpenses;
	@FindBy(xpath="//table/tbody/tr/td[contains(text(),'Non UK Taxable Foreign Earnings')]//..//td[2]")
	private WebElement nonUKTaxableForeignEarnings;
	@FindBy(xpath="//td/strong[contains(text(),'Capital Gains Tax due')]//..//..//td[4]")
	private WebElement capitalGainsTaxdue;
	@FindBy(xpath="//tr/td/b[contains(text(),'Income and Capital Gains Tax due')]//..//..//td[5]")
	private WebElement IncomeandCapitalGainsTaxdue;
	@FindBy(xpath="//table/tbody/tr[21]/td[contains(text(),'Other income')]//..//td[3]")
	private WebElement otherIncomeTaxDeduction;
	@FindBy(xpath="//*[@id='ctl00_divSubContent']/div[2]/div/div/div/div/table/tbody/tr[24]/td[3]")
	private WebElement otherIncomeTaxDeduction_test50;
	@FindBy(xpath="//tr/td[contains(text(),'Top Slicing Relief')]//..//td[4]")
	private WebElement topSlicingReliefAmt;
	@FindBy (xpath="//td[contains(text(),'Foreign income')]//..//td[2]")
	private WebElement foreignIncomeAmt;
	@FindBy (xpath="//td[contains(text(),'Dividends from foreign companies')]//..//td[2]")
	private WebElement dividendsFromForeignCompaniesAmt;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Annuities')]//..//td[2]")
	private WebElement annuitiesAmtTaxSummary;
	@FindBy (xpath="//table/tbody/tr/td[contains(text(),'Gift of investments and property to charity')]//..//td[2]")
	private WebElement giftofInvestmentsAndPropertyAmtTaxSummary;
	@FindBy(xpath="//tr/td[contains(text(),'Deficiency Relief')]//..//td[4]")
	private WebElement deficiencyReliefAmt;
	@FindBy(xpath="//tr/td[contains(text(),'tax credits on dividends from UK companies')]//..//td[4]")
	private WebElement amtTaxCreditsDividendsFromUKCompanies;
	//Global Variables
	//Variables for tax calculation
	int count1 = 0;
	int count2=0;

	private double n1=0.00;
	private double n2=0.00;
	private double n3=0.00;
	private double n4=0.00;
	private double n5=0.00;
	private double n6=0.00;
	private double n7=0.00;
	private double n8=0.00;
	private double n9=0.00;
	private double n10=0.00;
	private double n11=0.00;
	private double n12=0.00;
	private double n13=0.00;
	private double n14=0.00;
	private double n15=0.00;
	private double n16=0.00;
	private double n17=0.00;
	private double n18=0.00;
	private double n19=0.00;
	private double n20=0.00;
	private double n21=0.00;
	private double n22=0.00;
	private double n23=0.00;
	private double n24=0.00;
	private double n25=0.00;
	private double n26=0.00;
	private double n27=0.00;
	private double n28=0.00;
	private double n29=0.00;
	private double n30=0.00;
	private double n31=0.00;
	private double n32=0.00;
	private double n33=0.00;
	private double n34=0.00;
	private double n35=0.00;
	private double n36=0.00;
	private double n37=0.00;
	private double n38=0.00;
	private double n39=0.00;
	private double n40=0.00;
	private double n41=0.00;
	private double n42=0.00;
	private double n43=0.00;
	private double n44=0.00;
	private double n45=0.00;
	private double n46=0.00;
	private double n47=0.00;
	private double n48=0.00;
	private double n49=0.00;
	private double n50=0.00;
	private double n51=0.00;
	private double n52=0.00;
	private double n53=0.00;
	private double n54=0.00;
	private double n55=0.00;
	private double n56=0.00;
	private double n57=0.00;
	private double n58=0.00;
	private double n59=0.00;
	private double n60=0.00;
	private double n61=0.00;
	private double n62=0.00;
	private double n63=0.00;
	private double n64=0.00;
	private double n65=0.00;
	private double totalincome = 0.00;
	private double taxDueInc = 0.00;
	private String taxTotal="";
	private double dueTax1=0.00;
	private double dueTax2=0.00;
	private double dueTax3=0.00;
	private double dueTax4=0.00;
	private double dueTax5=0.00;
	private double dueTax6=0.00;
	private double dueTax7=0.00;
	private double amtStatePensionLumpSumPayment =0.00;
	private double d1 = 0.00;
	private double Totaltax =0.00;
	private double x1 =0.00;
	private String t1 ="";
	private String t2="";
	private String taxdueOnInc1="";
	private String actualtax="";
	private String firstPageTitle;
	private String EmpName;
	private String expectedDescription="HMRC has received the HMRC-SA-SA100";
	//global variable for tax calculation and read pdf
	private int income1=0;
	private int income2=0;
	private int income3=0;
	private int total=0;
	private String displayTotal="";
	private String FinalCalculation1="";
	private String FinalCalculation ="";
	private String dashBoardTotal ="";
	private String value1="";
	private String value2="";
	private double personalAllowanceRate=11850.00;
	private double personalAllowanceRateMaxLimit=100000.00;
	private double finalLimit=123700.00;
	private double blindAllowance =2390.00;
	private double marriageAllowance =1190.00;
	private double marriageAllowanceRate=.20;
	private double marriageAllowanceAmt=0.00;
	private double startedRatePayPension=0.00;
	private double basicRatePayPension=0.00;
	private double intermediateRatePayPension=0.00;
	private double heigherRatePayPension=0.00;
	private double additionalRatePayPension=0.00;
	private double startedRateSaving=0.00;
	private double basicRateSaving=0.00;
	private double intermediateRateSaving=0.00;
	private double heigherRateSaving=0.00;
	private double additionalRateSaving=0.00;	
	private double basicRateDividends=0.00;
	private double intermediateDividends=0.00;
	private double startedRateDividends=0.00;
	private double heigherRateDividends=0.00;
	private double additionalRateDividends=0.00;
	private double incomeTaxCharged=0.00;
	private double incomeTaxDueAmt=0.00;
	private double totIncomeTaxDue=0.00;
	private double totalTaxDeductedAmt=0.00;
	private double totalTaxDeductedAmt1=0.00;
	private double taxAlreadyRefundedAmt=0.00;
	private double total1=0.00;
	private double total2=0.00;
	private double total3=0.00;
	private double total4=0.00;
	private double total5=0.00;
	private double total6=0.00;
	private double total7=0.00;
	private double total8=0.00;
	private double total9=0.00;
	private double total10=0.00;
	private double totalAllowance = 0.00;
	private double allowance1 = 0.00;
	private double amtRetirementAnnuity = 0.00;
	private double tax1 = 0.00;
	private double SR_band = 5000.00;
	private double SR_bandScott = 2000.00;
	private double taxLimit1Uk = 34500.00;
	private double taxLimit1Scot = 31500.00;
	private double taxLimit2Scot = 118420.00;
	private double BR_rate = .20;
	private double taxLimit2 = 115500.00;
	private double taxLimit3 = 150000.00;
	private double amount1 = 6900.00;
	private double HR_rate = .40;
	private double percentageZero = 0.00;
	private double amount2 = 46600.00;
	private double advancedRatePercentage = 45.00;
	private double entrepreneursReliefRate = 10.00;
	private double taxedUKInterestRate = .25;
	private double reliefFinancerate = .20;
	private double Dedn_taper_Rate = .25;
	private double amtDedn_cap = 50000;
	//Scottland Rates 
	private double startedRateScott=.19;
	private double basicRateScott=.20;
	private double intermediateRateScott=.21;
	private double heigherRateScott=.41;
	private double topRateScott=.46;
	private double giftAidRate=1.25;
	private double amtBasicRateScott=10150.00;
	private double amtIntermediateRateScott=19430.00;
	private double amtHeigherRateScott=106570.00;
	private double dividentNillRate=2000.00;
	//private double taxLimit3=1500.00;
	private String folderName="";
	private File[] listFiles;
	private String fileName="";
	private double basic1=0.00;
	private double heigherRate=0.00;
	private double basicInterestAmount=0.00;
	private double finalAmount=0.00;
	private double amount3=0.00;
	private double amount4=0.00;
	private double amount5=0.00;
	private String path ="C:\\Users\\Administrator";
	private String string1="";
	private String string2="";
	private String string3="";
	private String string4="";
	private String string5="";
	private String string6="";
	private String string7="";
	private String string8="";
	private String string9="";
	private String string10="";
	private String string11="";
	private String string12="";
	private String string13="";
	private String string14="";
	private String string15="";
	private String string16="";
	private String string17="";
	private String string18="";
	private String string19="";
	private String string20="";
	private String string21="";
	private String string22="";
	private String string23="";
	private String string24="";
	private String string25="";
	private String string26="";
	private String string27="";
	private String string28="";
	private String string29="";
	private String string30="";
	private String string31="";
	private String string32="";
	private String string33="";
	private String string34="";
	private String string35="";
	private String string36="";
	private String string37="";
	private String string38="";
	private String string39="";
	private String string40="";
	private String string41="";
	private String string42="";
	private String string43="";
	private String string44="";
	private String string45="";
	private String string46="";
	private String string47="";
	private String string48="";
	private String string49="";
	private String string50="";
	private String string51="";
	private String filePath="";
	private String file1="";
	private File file;
	private File folder;
	//private File[] fList;
	private String pes;
	private String name1="";
	private  String output ="";
	private String output1="";
	private String expResult1="";
	private String actResult1="";
	private String actResult2="";
	private int lenDesc=0;
	public Select listbox1;
	private String oldTab;
	WaitStatementLib wLib;
	//Tax Calculation for divident
	private double totlIncome = 0.00;
	private double totalIncome1 = 0.00;
	private double totalIncome2 = 0.00;
	private double totalIncome3 = 0.00;
	private double totalIncome4 = 0.00;
	private double totalFromAllEmployments = 0.00;
	private double basicRate=0.00;
	private double basicRateInterest = 0.00;
	private double nilRate1=1000.00;
	private double nilRate2=500.00;
	private String basicInterest="";
	private String basicRate1="";
	private String totIncomTaxChar="";
	private double incomTaxdue1=0.00;
	private double incomTaxdue2=0.00;
	private double statePensionlumpsum=0.00;
	private String statePensionlumpsum1="";
	private String statePensionlumpsum2="";
	private double fnltax=0.00;
	private double taxBalance=0.00;
	private String taxFinal=""; 
	private String taxFinalUI="";
	private double tot1=0.00;
	private double fPayment=0.00;
	private double secPayment=0.00;
	private String fPay="";
	private String secPay="";
	private double calculation1=0.00;
	private double calculation2=0.00;
	private double calculation3=0.00;
	private double dividendTaxBasicRate = 7.50;
	private double dividendTaxHigherRate = 32.50;
	private double dividendTaxAdditionalRate = 38.10;
	private double otherIncomeTaxReliefRate = .30;
	String actualValue1="";
	String actualValue2="";
	String actualValue3="";
	String actualValue4="";
	String actualValue5="";
	String actualValue6="";
	String actualValue7="";
	String actualValue8="";
	String expValue1="";
	String expValue2="";
	String expValue3="";
	String expValue4="";
	String expValue5="";
	String expValue6="";
	String expValue7="";
	String expValue8="";
	Document doc;
	CISPage cis;
	public Robot robot;
	String bodyText;
	DateFormat formatter;
	String today;
	String[] date1;
	Date date;
	String startingRateSavingsinterest="";
	String nillRateStartingRate="";
	String nillRateDivident="";
	double amountstartingRateSavingsinterest=0.00;
	double amountnillRateSavingsinterest=0.00;
	double amountnillRateDivident=0.00;
	//Self Employment
	private String dateStart="06/04/2018";
	private String dateStart1="07/04/2018";
	private String dateEnd="05/04/2019";
	private double class2LPL=8164;
	private double class2UPL=45000;
	private double class2LPLRate=9;
	private double class2UPLRate=2;
	private double class4LPLAmt=8424.00;
	private double class4UPLAmt=46350.00;
	private double max_NIC = 3413.34;
	private double nIC_Band = 37926.00;
	private double nIC1_rate = .12;
	private double nIC2_annual_limit = 156.35;
	private double class4LPLRate=.09;
	private double class4UPLRate=.02;
	private double class2Rate=2.95;
	private double weeksYear=52;
	private double weeksTillDec=39;
	private double class2Amount=153.40;
	private double netBusinessProfit=0.00;
	private double netBusinessLoss=0.00;
	private double adjustedProfit=0.00;
	private double adjustedLossSelfEmpFull=0.00;
	private double totalProfitFromBusiness=0.00;
	private double balanceEndPeriod=0.00;
	private double totalExpensesSelfEmpFull = 0.00;
	private double totalDisallowableExpensesSelfEmpFull = 0.00;
	private double totalDisallowableExpensesSelfEmpShort = 0.00;
	private double netProfitSelfEmpFull = 0.00;
	private double totalCapitalAllowancesSelfEmpFull = 0.00;
	private double totalAdditiontoNetProfitSelfEmpFull = 0.00;
	private double totalDeductionfromNetProfitSelfEmpFull = 0.00;
	private double netBusinessProfitForTaxPurpose = 0.00;
	//partnership
	private double shareOfTotalTaxableProfits=0.00;
	private double VCT_rate=.30;
	private double EIS_rate=.30;
	private double SEIS_rate=.50;
	private double CITR_rate=.05;
	private double A_rate=.1;
	private double communityInvestmentTaxReliefValue=.00;
	
	//capital Gain
	private double annualExemptIndividuals=11300.00;
	private double annualExemptIndividualsProposed=11700.00;
	private double annualExemptTrustees=5650.00;
	private double capitalGainsTaxdueAmt=0.00;
	private double lower_CGT_rate_RP_CI = 0.18;
	private double upper_CGT_rate_RP_CI = 0.28;
	private double capitalGainsRateUpper=0.20;
	private double capitalGainsRateLower=0.10;
	private double gainsThatQualifyRorEntrepreneursAmt=0.00;
	private double otherGainsBasicAmt = 0.00;
	private double otherGainsAmt = 0.00;
	private double residentialProperty_CarriedInterestAmt=0.00;
	//Student Loan
	private double plan1=17775.00;
	private double plan2=21000.00;
	private double plan1_2=17775.00;
	private double studentLoanRate=00.09;
	private double plan1Threshold=18330.00;
	private double plan2Threshold=25000.00;
	private double plan1Weekly=352.50;
	private double plan1Monthly=1527.50;
	private double plan1Annualy=18330.00;
	private double plan2Weekly=480.76;
	private double plan2Monthly=2083.33;
	private double plan2Annualy=25000.00;
	private double studentLoanAmt=0.00;
	//child benefit
	private double CBC_taper = .01;
	private double CBC_HR_thresholdMin = 50000.00;
	private double CBC_HR_thresholdMax = 60000.00;
	private double pAYCode=3000.00;
	private String emailTemplate="";
	private String emailID="anjali@nomismasolution.co.uk";
	private double FITax1=17775.00;
	private double SloanRate1=9;
	private double adjustedNetIncomeInExcessOfChildBenefitIncomeLimit = 0.00;
	private double highIncomeChildBenefitCharge = 0.00;
	//Married couple allowance
	private double maxMAT=8695.00;
	private double AA_limit=28900.00;
	private double AA_excess =.50;
	private double MCA=3360.00;
	private double MCA_2=1680.00;
	private double calculateMAT=0.00;
	private double month=12.00;
	private double amtMAT=0.00;
	private double MATrate=.1;
	private double Before6May2018 =	0.00;
	private double May6_2018to5June2018 = 1.00;
	private double June6_2018to5July2018 = 2.00;
	private double July6_2018to5August2018 = 3.00;
	private double August6_2018to5September2018 = 4.00;
	private double September6_2018to5October2018 = 5.00;
	private double October6_2018to5November2018 = 6.00;
	private double November6_2018to5December2018 = 7.00;
	private double December6_2018to5January2019 = 8.00;
	private double January6_2019to5February2019 = 9.00;
	private double February6_2019to5March2019 = 10.00;
	private double March6_2019to5April2019 = 11.00;
	private double April6_2019andlater = 12.00;
	//Residence, Remittance Basis
	private double res_non_dom_High_ch = 60000.00;
	private double res_non_dom_Lower_ch = 30000.00;
	private double remittanceBasisCharge_nonDomiciles = 0.00;
	//variable for tax summary page
	private double amtReliefForFinanceCosts=0.00;
	private double ventureCapitalTrustAmt=0.00;
	private double maintenanceAndAlimonyPaidAmt=0.00;
	private double enterpriseInvestmentSchemereliefAmt=0.00;
	private double seedEnterpriseInvestmentSchemereliefAmt=0.00;
	private double chargeableEventGainAmt=0.00;
	private double selfEmploymentIncome=0.00;
	private double class4Amt=0.00;
	private double class4Amt1=0.00;
	private double class2Amt=0.00;
	private double class4_2Amt=0.00;
	private double interestFromUKBanksBuildingAmt=0.00;
	private double dividendsFromUKCompaniesAmt=0.00;
	private double otherIncomeAmt=0.00;
	private double profitFromUKLandAndProperty=0.00;
	private double incomeTaxdueafterallowancesandreliefs=0.00;
	private double incomeTaxdueAfterGiftAid=0.00;
	private double UKPensionAndStateBenefitAmt=0.00;
	private double notionalTaxFromGainsOnLifeAmt=0.00;
	private double payFromAllEmploymentsAmt=0.00;
	private double benefitsAndExpensesReceivedAmt=0.00;
	private double allowableExpensesAmt=0.00;
	private double foreignIncomeCalc=0.00;
	private double dividendsFromForeignCompaniesCalc=0.00;
	private double shareSchemesAmt=0.00;
	private double enterpriseInvestmentSchemeReliefAmt=0.00;
	private double socialInvestmentTaxReliefAmt = 0.00;
	private double underpaidTaxForEarlierYearsAmt = 0.00;
	private double profitFromPartnershipsAmt = 0.00;
	private double incomeTaxReliefAmt = 0.00;
	private double nilAmountsaving = 0.00;
	private double nilAmountDivident = 0.00;
	private double amtAnnuities = 0.00;
	private double amtTaxdueonGiftAidpayments=0.00;
	private double taxdueonGiftAidpaymentsValue=0.00;
	private double reducedPersonalAllowanceAmt=0.00;
	private double underpaidTaxEarlierYearAmt = 0.00;
	private double amountInclusingAnderpaidTaxAmt = 0.00;
	private double underpaidTaxCurrentYearAmt = 0.00;
	private double nonSavingInc = 0.00;
	private double savingInc = 0.00;
	private double dividendInc = 0.00;
	private double interestAndOtherIncomeFromOverseasSavings = 0.00;
	private double amtTaxAdjustment = 0.00;
	private double amtCapitalGainTaxDue = 0.00; 
	private double taxTreatedAsPaidOnDividendsFromUKCompanies = 0.00;
	private double amtIncomeExcludedFromCalculation = 0.00;
	private double taxDueOnAnnuityAndRoyaltyPaymentsAmt = 0.00;
	//Property Value
	private double FHLAdjustedProfitForTheYear=0.00;
	private double FHLAdjustedProfitForTheYear1=0.00;
	private double FHLTaxableProfitForTheYear=0.00;
	private double AdjustedProfitForTheYear=0.00;
	private double TaxableProfitForTheYear=0.00;
	private double topSlicingReliefVal=0.00;
	private double fullGainAmt=0.00;
	private double sliceGainAmt=0.00;
	private double C17_Br_Rate=0.00;
	private double basicRateLiability =0.00;
	private String dateOfBirthCivilPartner = "10/09/1934";
	Random random;
	DateFormat dateFormat;
	LibSA ls1;
	WebDriverWait wait;

	//Constructor
	public SAPOM2019(WebDriver driver){
	PageFactory.initElements(driver, this);
	}
	//Verify Title of any page
public void verifyClientPageTitle(WebDriver driver) throws Exception{
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5,AgentPageTitle);
assertEquals(AgentPageTitle.getText(), "Anjali1");
Reporter.log("Agents page title is verified successfully", true);
	}
	//Click on Self assessment Link which is called in all scenario
public void clickSALink(WebDriver driver) throws Exception{
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5,SelfAssessmentLink);
	
SelfAssessmentLink.click();
try
{
	wLib.explicitWait(driver, 2,ClientListLink);
	if (ClientListLink.isDisplayed()==false)
	{
do
{
	wLib.explicitWait(driver,2,SelfAssessmentLink);
	SelfAssessmentLink.click();
	}while(ClientListLink.isDisplayed()==false);
}
	}catch (Exception e) {
Reporter.log("Self assessment Link is opened in first click",true);
	}
}

public void clickClientLst(WebDriver driver) throws Exception{
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5,ClientListLink);
ClientListLink.click();
Reporter.log("Client Link Clicked",true);
}
	
	public void clkAddClientBtn(WebDriver driver) throws Exception{
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5,PlusClientButton);	
PlusClientButton.click();

wLib.explicitWait(driver, 5,AddClientButton);
AddClientButton.click();

Reporter.log("Add Client page opened",true);
	}
public void addNewClient(WebDriver driver,String UTR,String FName, String LNmame, String address, String postcode,String dateOfBirth,String email ) throws Exception
{
wLib = new WaitStatementLib();
wLib.explicitWait(driver,5,UTRNoTextBox);	
UTRNoTextBox.sendKeys(UTR);

FirstNameTextBox.sendKeys(FName);
LastNameTextBox.sendKeys(LNmame);
AddressLine1TxtBox.sendKeys(address);
PostCodeTxtBox.sendKeys(postcode);
wLib.explicitWait(driver,5,genderMale);
genderMale.click();
dateScheduleEmailTxtBox.sendKeys(dateOfBirth);

emailAddClient.sendKeys(email);
SaveButton.click();
wLib.explicitWait(driver,5,forceDuplicateUTRno);	
forceDuplicateUTRno.click();
SaveButton.click();
driver.navigate().refresh();
Reporter.log("Client Created Successfully", true);
}
	
public void selectClientLink(WebDriver driver) throws InterruptedException {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5,firstNameScheduleMail);
	firstNameScheduleMail.sendKeys("Foregin1");

	searchBtn.click();
	wLib.explicitWait(driver,5,selectClient);
	selectClient.click();
	cis = new CISPage(driver);
	cis.switchwindowForward(driver);
	wLib.explicitWait(driver,5,TaxYear);
	Select year= new Select(TaxYear);

	year.selectByValue("6");
	Reporter.log("Client Selected", true);	
	}
public void selectClientForBlind(WebDriver driver) throws InterruptedException {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5,firstNameScheduleMail);
	firstNameScheduleMail.sendKeys("Blind");
	searchBtn.click();
	wLib.explicitWait(driver,5,blindClient);
	blindClient.click();
	cis = new CISPage(driver);
	cis.switchwindowForward(driver);
	Select year= new Select(TaxYear);
	year.selectByValue("6");
	Reporter.log("Blind Client Selected", true);	
	}
public void addBlindPersonAllowance(WebDriver driver) throws InterruptedException {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5,firstNameScheduleMail);
	firstNameScheduleMail.sendKeys("Blind");
	searchBtn.click();
	wLib.explicitWait(driver,5,blindClient);
	blindClient.click();
	cis = new CISPage(driver);
	cis.switchwindowForward(driver);
	wLib.explicitWait(driver,15,chckClientName);
	actResult1=chckClientName.getText();
	if(actResult1.contains("Blind Person")) {
    Reporter.log("Correct Client Name", true);
	} else {
	Reporter.log("wrong Client Name",true);
	}

	Select year= new Select(TaxYear);

	year.selectByValue("6");

	wLib.explicitWait(driver,5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver,5,linkBlindPerson);
	linkBlindPerson.click();

	cis.switchwindowNew(driver);
	
	wLib.explicitWait(driver,2,surplusBlindPersonsAllowanceFromSpouseChkBox);
	value1=surplusBlindPersonsAllowanceFromSpouseChkBox.getAttribute("checked");
	Reporter.log("Value of first check box:"+value1,true);
	if (value1==null)
{
	wLib.explicitWait(driver,10,surplusBlindPersonsAllowanceFromSpouseChkBox);
	surplusBlindPersonsAllowanceFromSpouseChkBox.click();
	wLib.explicitWait(driver,10,surplusBlindPersonsAllowanceToSpouseChkBox);
	surplusBlindPersonsAllowanceToSpouseChkBox.click();
	wLib.explicitWait(driver,15,SaveBtn2);
	SaveBtn2.click();
}
	driver.navigate().refresh();	
}
public void taxCalculationBlindPerson(String payEmp, String medExp, String trvlBussiness, WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	n1=Double.parseDouble(payEmp);
	n2=Double.parseDouble(medExp);
	n3=Double.parseDouble(trvlBussiness);
	//modified for checking failure
	totalincome = (n1 + n2) - n3;
	if ((totalincome >personalAllowanceRate) &&(totalincome  <=personalAllowanceRateMaxLimit) )
	{
	taxDueInc = totalincome - (personalAllowanceRate + blindAllowance);	
	
	taxTotal=String.format("%.2f",(taxDueInc));
	}
	else if (totalincome > personalAllowanceRateMaxLimit && totalincome<=finalLimit)
	{
total1 = totalincome - personalAllowanceRateMaxLimit;
allowance1=total1/2;
tax1=personalAllowanceRate-allowance1;
taxDueInc = totalincome - (tax1+ blindAllowance);
taxTotal=String.format("%.2f",(taxDueInc));
	}
	else if (totalincome>=finalLimit)
	{
taxDueInc=totalincome-blindAllowance;
taxTotal=String.format("%.2f",(taxDueInc));
	}
	else
	{
Reporter.log("no tax applied",true);
	}
	if (taxDueInc >0.00)
	{
	taxdueOnInc1="£"+taxTotal;
	System.out.println( taxdueOnInc1);
	if(taxDueInc<=finalLimit)
	{
	wLib.explicitWait(driver, 5,totalIncomeOnWhichTaxIsDue);
	actualtax=totalIncomeOnWhichTaxIsDue.getText().replaceAll(",","");
	
	Assert.assertEquals(actualtax,taxdueOnInc1 );
	Reporter.log("correct output",true);
	
	}
	if (taxDueInc <=taxLimit1Uk)
	{
dueTax1=taxDueInc*BR_rate;
t1 = String.format("%.2f",(dueTax1));
wLib.explicitWait(driver, 5,incomeTaxDue);
t2=incomeTaxDue.getText().substring(1).replace(",", "");

Assert.assertEquals(t2,t1);
Reporter.log(t1+"---"+t2,true);
	}
	else if(taxDueInc >taxLimit1Uk && taxDueInc <=taxLimit3) {
d1= taxDueInc-taxLimit1Uk;
dueTax1 =amount1;
dueTax2=d1*HR_rate;
Totaltax=dueTax1+dueTax2;
t1=String.format("%.2f",(Totaltax));
wLib.explicitWait(driver, 5,incomeTaxDue);
t2=incomeTaxDue.getText().substring(1).replace(",", "");
Assert.assertEquals(t2,t1);
Reporter.log(t1+"---"+t2,true);
	}
	else if(taxDueInc >taxLimit3)
	{
Reporter.log(String.format("%.2f",(taxDueInc)),true);
x1= taxDueInc-taxLimit3;
Reporter.log(String.format("%.2f",(x1)),true);
dueTax1 =amount1;
dueTax2 =amount2;
dueTax3=(x1*advancedRatePercentage)/100;
Totaltax=dueTax1+dueTax2+dueTax3;
Reporter.log(String.format("%.2f",(Totaltax)),true);
t1=String.format("%.2f",(Totaltax));
t2=incomeTaxDue.getText().substring(1).replace(",", "");
Assert.assertEquals(t2,t1);
Reporter.log(t1+"---"+t2,true);
	}
	}
driver.navigate().refresh();
}
public void delBlindPersonAllowance(WebDriver driver) throws Exception {
wLib = new WaitStatementLib();	
wLib.explicitWait(driver,5,firstNameScheduleMail);
firstNameScheduleMail.sendKeys("Blind");
searchBtn.click();
wLib.explicitWait(driver,5,blindClient);
blindClient.click();
cis = new CISPage(driver);
cis.switchwindowForward(driver);
wLib.explicitWait(driver, 5,chckClientName);
actResult1=chckClientName.getText();
if(actResult1.contains("Blind Person")) {
    Reporter.log("Correct Client Name", true);
} else {
	Reporter.log("wrong Client Name",true);
}

Select year= new Select(TaxYear);

year.selectByValue("6");
checkLockbutton(driver);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,linkBlindPerson);
linkBlindPerson.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,2,surplusBlindPersonsAllowanceFromSpouseChkBox);
value1=surplusBlindPersonsAllowanceFromSpouseChkBox.getAttribute("checked");
Reporter.log("Value of first check box:"+value1,true);
if (value1!=null)
	{

wLib.explicitWait(driver,2,surplusBlindPersonsAllowanceFromSpouseChkBox);
surplusBlindPersonsAllowanceFromSpouseChkBox.click();
wLib.explicitWait(driver,2,surplusBlindPersonsAllowanceToSpouseChkBox);
surplusBlindPersonsAllowanceToSpouseChkBox.click();
wLib.explicitWait(driver,2,SaveBtn2);
SaveBtn2.click();
	}
driver.navigate().refresh();
	}

public void clickIncome(WebDriver driver) throws Exception
	{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 30,IncomeLink);
	IncomeLink.click();
	
	try
	{
	wLib.explicitWait(driver, 2,EmploymentLink);
	if(EmploymentLink.isDisplayed()==false) {
	do{
	wLib.explicitWait(driver, 2,IncomeLink);
	IncomeLink.click();
	Reporter.log("Income link is not clicked in first click",true);
	}while(EmploymentLink.isDisplayed()==false);
	} 
	
	}
	catch (Exception e) {
Reporter.log("Income is clicked in first click only",true);
	}
	}
public void openSubmitToHMRC(WebDriver driver)
{
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	try
	{
wLib.explicitWait(driver, 2,submitToHMRC);
if(submitToHMRC.isDisplayed()==false)
{
	do {
wLib.explicitWait(driver, 1,taxReturnLink);
taxReturnLink.click();
	}while(submitToHMRC.isDisplayed()==false);
}
	}catch (Exception e) {
Reporter.log("Submit to HMRC button visible in first click",true);
	}
	
	wLib.explicitWait(driver, 5, submitToHMRC);
	submitToHMRC.click();
	driver.navigate().refresh();
}
	public void unlockSubmission(WebDriver driver)
	{
	try
	{


if(undoManualSubmitBtn.isDisplayed()==true)
{
undoManualSubmitBtn.click();
wLib.explicitWait(driver, 1, unlockBtn);
unlockBtn.click();
Reporter.log("undo Manual Submit button Enabled",true);
}

	}
	
	catch (Exception e)
	{
		
		if(unlockBtn.isDisplayed()==true)
			{
		unlockBtn.click();
		driver.navigate().refresh(); 
		Reporter.log("UnLock button Enabled",true);
		}
					
	}
	
}
public void checkLockbutton(WebDriver driver) throws Exception {
	openSubmitToHMRC(driver);
	try
{
	if(lockBtn.isDisplayed()==true)
	{
	Reporter.log("Lock button Enabled",true);
	}
}
catch (Exception e) {
	unlockSubmission(driver);
}
	
}

public void clickEmployment(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	
}
	
public void clickAddEmployment(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,dividentLink);
	dividentLink.click();
	
	try
	{
wLib.explicitWait(driver, 1,delDivident);
if(delDivident.isDisplayed()==true)
{
	wLib.explicitWait(driver, 1,delDivident);
	delDivident.click();	
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	
}
	}
	catch (Exception e) {
Reporter.log("del divident button not available",true);
	}
	wLib.explicitWait(driver, 3,linkTaxPaymentsAlreadyMade) ;
	linkTaxPaymentsAlreadyMade.click();
	
	try {
wLib.explicitWait(driver, 1,delButton);
if(delButton.isDisplayed()==true) {
	wLib.explicitWait(driver, 1,delButton) ;
	delButton.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel) ;
	cnfmdel.click();
	
}
	}catch (Exception e) {
Reporter.log("Tax not paid before",true);
	}
	wLib.explicitWait(driver, 2,taxReliefsLink);
	taxReliefsLink.click();
	
	try{
wLib.explicitWait(driver, 1,deleteCharityRecords);
if(deleteCharityRecords.isDisplayed()==true)
{
wLib.explicitWait(driver, 1,deleteCharityRecords);
deleteCharityRecords.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 1,cnfmdel);
cnfmdel.click();

}
	}
	catch (Exception e) {
Reporter.log("Charitable income is not added before",true);

	}
try
{
	wLib.explicitWait(driver, 1,delButton);
	if(delButton.isDisplayed()==true)
	{
	wLib.explicitWait(driver, 1,delButton);
	delButton.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();	
	wLib.explicitWait(driver, 1,otherGiftAidpaymentLink);
	otherGiftAidpaymentLink.click();
	
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,giftAidPaymentsCarriedBackToPreviousYearTxtBox);
	giftAidPaymentsCarriedBackToPreviousYearTxtBox.clear();
	giftAidPaymentsBroughtBackFromLaterYearTxtBox.clear();
	SaveBtn2.click();
	
}
}
catch (Exception e) {
	Reporter.log("Gift aid income not added before",true);
	
}

delPensionTaxRelief(driver);

	IncomeLink.click();
	
	do
	{
	if(EmploymentLink.isDisplayed()==false)
	{
IncomeLink.click();

	}
	}while(EmploymentLink.isDisplayed()==false);

	wLib.explicitWait(driver, 5,EmploymentLink) ;
	EmploymentLink.click();
	
	try
	{
if(delButton.isDisplayed()==true)
{
	delButton.click();

wLib.explicitWait(driver, 1, confirmDel);	
confirmDel.click();
wLib.explicitWait(driver, 1, delEmpName);
delEmpName.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 1,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
	}
catch(Exception e) {
	
	Reporter.log("Employment income  not added before",true);	
}
	try {
wLib.explicitWait(driver, 1,delEmpName);
if(delEmpName.isDisplayed()==true)
{
	wLib.explicitWait(driver, 1,delEmpName);
	delEmpName.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	driver.navigate().refresh();
}
	}
	catch (Exception e) {
Reporter.log("Employee Name not added before",true);
	}
}
	

public void addEmployment(String EmpName, String EmpPayRef, String strtDate, String endDate ,WebDriver driver) throws InterruptedException
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,addEmploymentBtn);
	addEmploymentBtn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	random = new Random();
	int x = random.nextInt(900) + 100;
	wLib.explicitWait(driver, 5,EmployerName);
	EmployerName.sendKeys(EmpName);
	txtEmployerPAYERef.sendKeys(x + "/"+EmpPayRef);
	StartDatetxtbox.sendKeys(strtDate);
	Endtxtbox.sendKeys(endDate);
	SaveBtn2.click();
	WebElement empCellValue= driver.findElement(By.xpath("//td[contains(text(),'"+EmpName+"')] "));
	//wLib.explicitWait(driver, 5,cellemp);
	Assert.assertEquals(empCellValue.getText(), EmpName);
	Reporter.log("Text is matching",true);
}
	
public void AddEmpIncome(String payEmp, String medExp, String trvlBussiness, WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	payFrmEmployer.sendKeys(payEmp);
	wLib.explicitWait(driver, 5, PrvtMedAndDntl);
	PrvtMedAndDntl.sendKeys(medExp);
	wLib.explicitWait(driver, 5, BusnsTrvlAndSubstancTxtBox);
	BusnsTrvlAndSubstancTxtBox.sendKeys(trvlBussiness);
	SaveBtn1.click();
	actResult1=totalIncome.getText();
	expResult1= "£"+ payEmp + ".00";
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log("Employer Income added Sucessfully", true);
	wLib.explicitWait(driver, 5, dashBoardClient);
	dashBoardClient.click();
	income1=Integer.parseInt(payEmp);
	income2=Integer.parseInt(medExp);
	income3 = Integer.parseInt(trvlBussiness);
	total = income1+income2-income3;
	Reporter.log("Total income is: "+total,true);
	displayTotal=Integer.toString(total);
	wLib.explicitWait(driver, 5,finalIncome);
	FinalCalculation1=finalIncome.getText();
	if(FinalCalculation1.contains(","))
	{
	String dispTot[]=FinalCalculation1.split(",");
	FinalCalculation=dispTot[0]+dispTot[1];
	dashBoardTotal = "£"+ displayTotal + ".00";
	Assert.assertEquals(FinalCalculation,dashBoardTotal);
	Reporter.log("DashBoard is displaying correct Final income", true);
	}else
	{
dashBoardTotal = "£"+ displayTotal + ".00";
Assert.assertEquals(FinalCalculation1,dashBoardTotal);
Reporter.log("DashBoard is displaying correct Final income", true);
	}
	}
public void verifyDashboard(WebDriver driver) 
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5,dashBoardClient);
	dashBoardClient.click();
	value1=empcheckBox.getAttribute("class");
	Assert.assertEquals(value1, "checked");;
    Reporter.log("employment amount checked verifie" , true);
    wLib.explicitWait(driver,5,finishTaxRetCheckBox);
    value2=finishTaxRetCheckBox.getAttribute("class");
	Assert.assertEquals(value2, "checked");;
    Reporter.log("Finish Tax return checked verifie" , true);
}
public void clicktaxReturnLink(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
}
public void clicktaxCalSummaryLink(WebDriver driver) {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5, taxCalSummaryLink);
	taxCalSummaryLink.click();
}
public void taxCalculationSummary(String payEmp, String medExp, String trvlBussiness, WebDriver driver) throws Exception 
{
	
	wLib = new WaitStatementLib();	
	wLib.explicitWait(driver,5, taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	n1=Double.parseDouble(payEmp);
	n2=Double.parseDouble(medExp);
	n3=Double.parseDouble(trvlBussiness);
	//modified for checking failure
	totalincome = (n1 + n2) - n3;
	if ((totalincome >personalAllowanceRate) &&(totalincome  <=personalAllowanceRateMaxLimit) )
	{
	taxDueInc = totalincome - personalAllowanceRate;	
	
	taxTotal=String.format("%.2f",(taxDueInc));
	}
	else if (totalincome > personalAllowanceRateMaxLimit && totalincome<=finalLimit)
	{
total1 = totalincome - personalAllowanceRateMaxLimit;
allowance1=total1/2;
tax1=personalAllowanceRate-allowance1;
taxDueInc = totalincome - tax1;
taxTotal=String.format("%.2f",(taxDueInc));
	}
	else if (totalincome>=finalLimit)
	{
taxDueInc=totalincome;
taxTotal=String.format("%.2f",(taxDueInc));
	}
	else
	{
Reporter.log("no tax applied",true);
	}
	if (taxDueInc >0.00)
	{
	taxdueOnInc1="£"+taxTotal;
	Reporter.log(taxdueOnInc1,true);
	if(taxDueInc<=finalLimit)
	{
	wLib.explicitWait(driver,5,totalIncomeOnWhichTaxIsDue) ;
	actualtax=totalIncomeOnWhichTaxIsDue.getText().replaceAll(",","");
	Assert.assertEquals(actualtax,taxdueOnInc1 );
	Reporter.log("correct output",true);
	}
	if (taxDueInc <=taxLimit1Uk)
	{
dueTax1=taxDueInc*BR_rate;
t1 = String.format("%.2f",(dueTax1));
wLib.explicitWait(driver,5,incomeTaxDue);
t2=incomeTaxDue.getText().substring(1).replace(",", "");
Assert.assertEquals(t2,t1);
Reporter.log(t1+"---"+t2,true);
	}
	else if(taxDueInc >taxLimit1Uk && taxDueInc <=taxLimit3) {
d1= taxDueInc-taxLimit1Uk;
dueTax1 =amount1;
dueTax2=d1*HR_rate;
Totaltax=dueTax1+dueTax2;
t1=String.format("%.2f",(Totaltax));
wLib.explicitWait(driver,5,incomeTaxDue);
t2=incomeTaxDue.getText().substring(1).replace(",", "");
Assert.assertEquals(t2,t1);
Reporter.log(t1+"---"+t2,true);
	}
	else if(taxDueInc >taxLimit3)
	{
System.out.println(taxDueInc);
x1= taxDueInc-taxLimit3;
System.out.println(x1);
dueTax1 =amount1;
dueTax2 =amount2;
dueTax3=(x1*advancedRatePercentage)/100;
Totaltax=dueTax1+dueTax2+dueTax3;
System.out.println(Totaltax);
t1=String.format("%.2f",(Totaltax));
wLib.explicitWait(driver,5,incomeTaxDue);
t2=incomeTaxDue.getText().substring(1).replace(",", "");
Assert.assertEquals(t2,t1);
Reporter.log(t1+"---"+t2,true);
	}
	}
	driver.navigate().refresh();
}
public void delEmpInfo(WebDriver driver) throws InterruptedException {
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	
	try
	{
	wLib.explicitWait(driver, 1,delButton);
	if(delButton.isDisplayed()==true)
	{
do {
	delButton.click();
	
	if(confirmDel.isDisplayed()==false)
	{
	do {
delButton.click();
	}while(confirmDel.isDisplayed()==false);
	}
	
	wLib.explicitWait(driver, 1, confirmDel);	
	confirmDel.click();
	Reporter.log("Employee income deleted",true);
}while(delButton.isDisplayed()==true);
}

}
catch (Exception e) {
	Reporter.log("Employee income Not available",true);
}
	
	try
	{
wLib.explicitWait(driver, 1, delEmpName);
if(delEmpName.isDisplayed()==true)
{do {
	
	delEmpName.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1, cnfmdel);
	cnfmdel.click();
	driver.navigate().refresh();
	Reporter.log("Employer information Deleted",true);
}while(delEmpName.isDisplayed()==true);	
}

	}
	catch (Exception e) {
Reporter.log("Employer information Not available",true);
	}
	
}
//Tax submission without Capital gain Income
public void clickSubmitToHMRC(WebDriver driver) throws Exception
{
	
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	
	try
	{
wLib.explicitWait(driver, 5,submitToHMRC);
if(submitToHMRC.isDisplayed()==false)
{
do {
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	} while (submitToHMRC.isDisplayed()==false);
	}
	}
	catch (Exception e) {
Reporter.log("Submit to hmrc visible",true);
	}
	wLib.explicitWait(driver, 10, submitToHMRC);
	submitToHMRC.click();
try
{
  undoManualSubmitBtn.click();
    
}
catch (Exception e)
{
	Reporter.log("Manual Undo Button not available",true);
	Reporter.log(e.getMessage(),true);
}
Reporter.log("clicking on validate submission",true);
wLib.explicitWait(driver, 5,validateSubmissionBtn);
validateSubmissionBtn.click();
try
{
	
Thread.sleep(80000);
driver.navigate().refresh();

wLib.explicitWait(driver,2, successMessage);
if(successMessage.isDisplayed()==true)
{
Assert.assertEquals(successMessage.getText(), "Success!");
Reporter.log("Submission Validated: "+successMessage.getText(),true);
wLib.explicitWait(driver, 2, submissionReportLink);
submissionReportLink.click();
lenDesc=expectedDescription.length();
wLib.explicitWait(driver, 5,descriptionSubmission);
Assert.assertEquals(descriptionSubmission.getText().substring(0, lenDesc),expectedDescription );
Reporter.log(descriptionSubmission.getText()+" :verified text",true);
}
	}catch (Exception e) {
Reporter.log("Submission not pass",true);
throw(e);
	}
	wLib.explicitWait(driver,5, submitToHMRC);
	submitToHMRC.click();
	wLib.explicitWait(driver,5,submitToHMRCbtn);
	submitToHMRCbtn.click();
	wLib.explicitWait(driver,5, yesBtn);
	yesBtn.click();
	try 
	{

	Thread.sleep(80000);
	driver.navigate().refresh();

wLib.explicitWait(driver,2, successMessage);
if(successMessage.isDisplayed()==true)
{
	Assert.assertEquals(successMessage.getText(), "Success!");
	wLib.explicitWait(driver, 5,submissionReportLink);
	submissionReportLink.click();
	wLib.explicitWait(driver, 5,descriptionSubmission);
	string1=descriptionSubmission.getText();
	actResult1=string1.substring(100, 106);
	expResult1="IRmark";
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log("Verified text: " +actResult1,true);
	}
	}
	catch (Exception e) {
Reporter.log("Submission not Verified by HMRC",true);
throw(e);
	}
	 ls1 = new LibSA(driver);
	 ls1.checkXML(driver);
	
	 wLib.explicitWait(driver,5, submitToHMRC);
	 submitToHMRC.click();
	 
	 try
	 {
 wLib.explicitWait(driver,5,undoManualSubmitBtn);
 undoManualSubmitBtn.click();
        
    }
    catch (Exception e)
    {
    	Reporter.log(e.getMessage(),true);
    }
 
	 wLib.explicitWait(driver, 5,unlockBtn);
	 unlockBtn.click();
	 driver.navigate().refresh();
	 wLib.explicitWait(driver, 5,taxCalSummaryLink);
	 taxCalSummaryLink.click();
	 try 
	 {
 actualValue1=ls1.actualValue1;
 wLib.explicitWait(driver, 5,taxForThisYear);
 expValue1=taxForThisYear.getText().substring(1).replace(",", "");
 wLib.explicitWait(driver, 5,incomeTaxDue);
 expValue2=incomeTaxDue.getText().substring(1).replace(",", "");
 Reporter.log(expValue1+"-----"+expValue2,true);
 if(actualValue1.equals(expValue1))
 {
	 Assert.assertEquals(actualValue1,expValue1);
	 Reporter.log(actualValue1 + "----" +expValue1 + " Tax for the year is verified",true);
 }
 else if (actualValue1.equals(expValue2))
 {
	 Assert.assertEquals(actualValue1,expValue2);

	 Reporter.log(actualValue1 + "----" +expValue2 + " Income Tax due verified",true);	
 }
 else
 {
	 Reporter.log("Tax for the year Not Verified",true);
}
}
catch (Exception e) {


	Reporter.log("No value for tax verified",true);
	throw(e);
}
actualValue2=ls1.actualValue2;
Reporter.log("Value of Pay from employment:"+actualValue2,true);
try {
	cis=new CISPage(driver);
	cis.switchwindowDefault(driver);
if(actualValue2!=null)
{
	wLib.explicitWait(driver, 5,txtPaymentFrmEmployment);
	expValue2=txtPaymentFrmEmployment.getText().substring(1).replace(",", "");
	Assert.assertEquals(actualValue2,expValue2);
	Reporter.log(actualValue2 + "----" +expValue2 + " Payment from employment is verified",true);
}	
}
catch (Error e) {
	Reporter.log("Payment from employment is not avialable",true);
}
actualValue4=ls1.actualValue4;
Reporter.log("Value of Total Tax Deducted:"+actualValue4,true);
try {
	cis.switchwindowDefault(driver);
if(actualValue4!=null)
{
wLib.explicitWait(driver, 5,txtTotaltaxdeducted);	
expValue4=txtTotaltaxdeducted.getText().substring(1).replace(",", "");
Assert.assertEquals(actualValue4,expValue4);
Reporter.log(actualValue4 + "----" +expValue4 + " Tax taken off amount is verified",true);
	
}
else
{
	Reporter.log("Total Tax deducted not available",true);
}
}
catch (Error e) {

Reporter.log("Total Tax deducted not available",true);
}
actualValue3=ls1.actualValue3;
Reporter.log("Value of Payments to Registered Pension Schemes:"+actualValue3,true);
try {
cis.switchwindowDefault(driver);
wLib.explicitWait(driver, 2,taxReliefsLink);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,form1OpenBtn);
form1OpenBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,paymentsToRegisteredPensionSchemesTxtBox);
expValue3=paymentsToRegisteredPensionSchemesTxtBox.getAttribute("value");
wLib.explicitWait(driver, 5,savePensionBtn);
savePensionBtn.click();
if(expValue3!=null)
{
Assert.assertEquals(actualValue1,expValue1);
Reporter.log(actualValue3 + "----" +expValue3 + " Payment to Register Pension Scheme is verified",true);
}
else
{
	Reporter.log("Pension not available",true);
}
}
catch (Error e) {


	Reporter.log("Payment to Register Pension Scheme is not available",true);
}
}
//Tax submission to HMRC with Capital gain income
public void clickSubmitToHMRC1(WebDriver driver) throws Exception
{

	wLib = new WaitStatementLib();
	
	try
	{
do {
	wLib.explicitWait(driver, 10, taxReturnLink);
	taxReturnLink.click();
	} while (submitToHMRC.isDisplayed()==false);
	}
	catch (Exception e) {
Reporter.log("Submit to hmrc visible",true);
	}
	wLib.explicitWait(driver, 10, submitToHMRC);
	submitToHMRC.click();
try
{
	wLib.explicitWait(driver, 10, undoManualSubmitBtn);
	undoManualSubmitBtn.click();
    
}
catch (Exception e)
{
	Reporter.log(e.getMessage(),true);
}
wLib.explicitWait(driver, 10,validateSubmissionBtn);
validateSubmissionBtn.click();

try
{
Thread.sleep(80000);
driver.navigate().refresh();


wLib.explicitWait(driver,2, successMessage);
if(successMessage.isDisplayed()==true)
{
wLib.explicitWait(driver,2, successMessage);
Assert.assertEquals(successMessage.getText(), "Success!");
Reporter.log("Submission Validated: "+successMessage.getText(),true);
wLib.explicitWait(driver, 10,submissionReportLink);
submissionReportLink.click();
}
wLib.explicitWait(driver, 5,descriptionSubmission);
if(descriptionSubmission.isDisplayed()==false)
{
do
{
submissionReportLink.click();	
}while(descriptionSubmission.isDisplayed()==false);
}

lenDesc=expectedDescription.length();
wLib.explicitWait(driver, 5,descriptionSubmission);
Assert.assertEquals(descriptionSubmission.getText().substring(0, lenDesc),expectedDescription );
Reporter.log(descriptionSubmission.getText()+" :verified text",true);
}
catch (Exception e) {
	Reporter.log("Submission not pass",true);
	throw(e);
}
	wLib.explicitWait(driver,5, submitToHMRC);
	submitToHMRC.click();
	wLib.explicitWait(driver,5, submitToHMRCbtn);
	submitToHMRCbtn.click();
	wLib.explicitWait(driver,5, yesBtn);
	yesBtn.click();
	try
	{
	Thread.sleep(80000);
	driver.navigate().refresh();
	
	wLib.explicitWait(driver,2, successMessage);
	if(successMessage.isDisplayed()==true)
	{
	Assert.assertEquals(successMessage.getText(), "Success!");
	Reporter.log("Submit to HMRC Successfully",true);
	wLib.explicitWait(driver,5, submissionReportLink);
	submissionReportLink.click();
	try
	{
wLib.explicitWait(driver,2,descriptionSubmission); 
if(descriptionSubmission.isDisplayed()==false)
{
do
{
submissionReportLink.click();	
}while(descriptionSubmission.isDisplayed()==false);
}
	}
	catch (Exception e) {
Reporter.log("Submission Report Link is clicked in first go",true);
	}
	wLib.explicitWait(driver,2,descriptionSubmission); 
	string1=descriptionSubmission.getText();
	actResult1=string1.substring(104,110);
	expResult1="IRmark";
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log("Verified text: " +actResult1,true);
	}
	}
	catch (Exception e) {
Reporter.log(e.getMessage(),true);
	}
	ls1 = new LibSA(driver);
ls1.checkXML(driver);
wLib.explicitWait(driver,5, submitToHMRC);
submitToHMRC.click();
  try
    {
	  wLib.explicitWait(driver,5, undoManualSubmitBtn);
	  undoManualSubmitBtn.click();
        
    }
    catch (Exception e)
    {
    	Reporter.log(e.getMessage(),true);
    }
  	
wLib.explicitWait(driver, 5, unlockBtn);
unlockBtn.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,taxCalSummaryLink); 
taxCalSummaryLink.click();

try
{
actualValue1=ls1.actualValue1;
wLib.explicitWait(driver, 5,taxForThisYear);
expValue1=taxForThisYear.getText().substring(1).replace(",", "");
Assert.assertEquals(actualValue1, expValue1);
Reporter.log(actualValue1 + "----" +expValue1 + " Tax for the year in XMl file verified",true); 
}catch (Exception e) {
	Reporter.log("Tax for the year in XMl file not verified",true);
}
}
//Content of XML file check after tax submission in HMRC 
public void clickMTRTestCaseSubmitToHMRC(WebDriver driver) throws Exception
{
wLib = new WaitStatementLib();
cis=new CISPage(driver);	
wLib.explicitWait(driver,2, taxReturnLink);
taxReturnLink.click();

try
{
	wLib.explicitWait(driver,1,submitToHMRC);
	if(submitToHMRC.isDisplayed()==false)
	{
	do {
wLib.explicitWait(driver, 1,taxReturnLink);
taxReturnLink.click();
} while (submitToHMRC.isDisplayed()==false);
}
}
catch (Exception e) {
	Reporter.log("Submit to hmrc visible",true);
}
	try
{
	wLib.explicitWait(driver, 1, submitToHMRC);
	submitToHMRC.click();
	taxReturnLink.click();
	checkLockbutton(driver);
Reporter.log("clicking on validate submission",true);
wLib.explicitWait(driver, 10,validateSubmissionBtn) ;
validateSubmissionBtn.click();

Thread.sleep(90000);
driver.navigate().refresh();

try {
wLib.explicitWait(driver,10,unlockBtn);	
if(unlockBtn.isDisplayed()==false);
{
Thread.sleep(10000);	
driver.navigate().refresh();
}
if(successMessage.isDisplayed()==true)
{
Assert.assertEquals(successMessage.getText(), "Success!");
Reporter.log("Submission Validated: "+successMessage.getText(),true);
wLib.explicitWait(driver, 10, submissionReportLink);
submissionReportLink.click();
lenDesc=expectedDescription.length();
Assert.assertEquals(descriptionSubmission.getText().substring(0, lenDesc),expectedDescription );
Reporter.log(descriptionSubmission.getText()+" :verified text",true);
}
}catch (Exception e) {
	Reporter.log("Submission not pass",true);
	throw(e);
	}
	wLib.explicitWait(driver,5, submitToHMRC);
	submitToHMRC.click();
	wLib.explicitWait(driver,5,submitToHMRCbtn);
	submitToHMRCbtn.click();
	wLib.explicitWait(driver,60, yesBtn);
	yesBtn.click();
	Thread.sleep(90000);
	driver.navigate().refresh();
	try 
	{
		
	wLib.explicitWait(driver,10, undoManualSubmitBtn);	
	if(undoManualSubmitBtn.isDisplayed()==false);
	{
	Thread.sleep(20000);	
	driver.navigate().refresh();
	}	
wLib.explicitWait(driver,2, successMessage);
if(successMessage.isDisplayed()==true)
{
	Assert.assertEquals(successMessage.getText(), "Success!");
	wLib.explicitWait(driver, 10,submissionReportLink);
	submissionReportLink.click();
	wLib.explicitWait(driver, 10,descriptionSubmission);	
	string1=descriptionSubmission.getText();
	actResult1=string1.substring(100, 106);
	expResult1="IRmark";
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log("Verified text: " +actResult1,true);
	}
	}
	catch (Exception e) {
Reporter.log("Submission not pass",true);
throw(e);

	}
	 ls1 = new LibSA(driver);
	 ls1.checkXML(driver);
	 wLib.explicitWait(driver,10, submitToHMRC);
	 submitToHMRC.click();
	 try
    {
	  wLib.explicitWait(driver,10, undoManualSubmitBtn);
	  undoManualSubmitBtn.click();
        
    }
    catch (Exception e)
    {
    	Reporter.log(e.getMessage(),true);
    }
 
wLib.explicitWait(driver, 10,unlockBtn);
unlockBtn.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 10,taxCalSummaryLink);
taxCalSummaryLink.click();
try {
actualValue1=ls1.actualValue1;
wLib.explicitWait(driver, 5,taxForThisYear);
expValue1=taxForThisYear.getText().substring(1).replace(",", "");
Reporter.log("Tax For This Year: "+ expValue1,true);
wLib.explicitWait(driver, 5,incomeTaxDue);
expValue2=incomeTaxDue.getText().substring(1).replace(",", "");
Reporter.log("Income Tax Due: "+expValue2,true);
	if(actualValue1.equals(expValue1))
	{
	Assert.assertEquals(actualValue1,expValue1);
	Reporter.log(actualValue1 + "----" +expValue1 + " Tax for the year is verified",true);
}
	else if (actualValue1.equals(expValue2))
	{
Assert.assertEquals(actualValue1,expValue2);
Reporter.log(actualValue1 + "----" +expValue2 + " Income Tax due verified",true);	
	}
	else
	{
Reporter.log("Tax for the year Not Verified",true);
	}
}
catch (Error e) {
	Reporter.log("No value for tax verified",true);
}
actualValue2=ls1.actualValue2;
Reporter.log("Value of Pay from employment:"+actualValue2,true);
try {
cis.switchwindowDefault(driver);
if(actualValue2!=null)
{
wLib.explicitWait(driver, 5,txtPaymentFrmEmployment);
expValue2=txtPaymentFrmEmployment.getText().substring(1).replace(",", "");
Assert.assertEquals(actualValue2,expValue2);
Reporter.log(actualValue2 + "----" +expValue2 + " Payment from employment is verified",true);
}	
}
catch (Error e) {
Reporter.log("Payment from employment is not avialable",true);
}
actualValue4=ls1.actualValue4;
Reporter.log("Value of Total Tax Deducted:"+actualValue4,true);
try {
cis.switchwindowDefault(driver);
if(actualValue4!=null)
{
wLib.explicitWait(driver, 5,txtTotaltaxdeducted);
expValue4=txtTotaltaxdeducted.getText().substring(1).replace(",", "");
Assert.assertEquals(actualValue4,expValue4);
Reporter.log(actualValue4 + "----" +expValue4 + " Tax taken off amount is verified",true);
}
}
catch (Error e) {
Reporter.log("Total Tax deducted not available",true);
}
actualValue3=ls1.actualValue3;
Reporter.log("Value of Payments to Registered Pension Schemes:"+actualValue3,true);
try {
cis.switchwindowDefault(driver);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,form1OpenBtn);
form1OpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,paymentsToRegisteredPensionSchemesTxtBox);
expValue3=paymentsToRegisteredPensionSchemesTxtBox.getAttribute("value");
savePensionBtn.click();
if(expValue3!=null)
{
Assert.assertEquals(actualValue3,expValue3);
Reporter.log(actualValue3 + "----" +expValue3 + " Payment to Register Pension Scheme is verified",true);
}
}
catch (Error e) {
	Reporter.log("Payment to Register Pension Scheme is not available",true);
}
actualValue5=ls1.actualValue5;
Reporter.log("Value of Retirement Annuity Contract Payments is:"+actualValue5,true);
try {
cis.switchwindowDefault(driver);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,form1OpenBtn);
form1OpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,retirementAnnuityContractPaymentsTxtBox);
expValue5=retirementAnnuityContractPaymentsTxtBox.getAttribute("value");
wLib.explicitWait(driver, 5,savePensionBtn);
savePensionBtn.click();
if(expValue5!=null)
{
Assert.assertEquals(actualValue5,expValue5);
Reporter.log(actualValue5 + "----" +expValue5 + "Retirement Annuity Contract Payments is verified",true);
}
}
catch (Error e) {
Reporter.log("Payment to Register Pension Scheme is not available",true);
}
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();

wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
actualValue6=ls1.actualValue6;
Reporter.log("Value of Interest From UK banks Building:"+actualValue6,true);
try {
cis.switchwindowDefault(driver);
if(actualValue6.isEmpty()==false)
{
	cis.switchwindowDefault(driver);
	wLib.explicitWait(driver, 5,amountInterestFromUKbanksBuilding);
expValue6=amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", "");
Assert.assertEquals(actualValue6,expValue6);
Reporter.log(actualValue6 + "----" +expValue6 + "Interest From UK banks Building amount is verified",true);
	
}

}
catch (Error e) {

Reporter.log("Value of Interest From UK banks Building is not available",true);
}
actualValue7=ls1.actualValue7;
Reporter.log("Value of Dividends from UK Companies:"+actualValue7,true);
try {
cis.switchwindowDefault(driver);
if(actualValue7.isEmpty()==false)
{
wLib.explicitWait(driver, 5,amountDividendsfromUKCompanies);
expValue7=amountDividendsfromUKCompanies.getText();
String divVal[]=expValue7.split("£");
Assert.assertEquals(actualValue7,divVal[2].replace(",", ""));
Reporter.log(actualValue7 + "----" +divVal[2].replace(",", "") + "Dividends from UK Companies amount is verified",true);
}
}
catch (Error e) {
Reporter.log("Value of Dividends from UK Companies is not available",true);
}
actualValue8=ls1.actualValue8;
Reporter.log("Value of UK pensions And State Benefits:"+actualValue8,true);
try {
cis.switchwindowDefault(driver);
if(actualValue8.isEmpty()==false)
{
	wLib.explicitWait(driver, 5,amountUKpensionsAndStateBenefits);
expValue8=amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", "");
Assert.assertEquals(actualValue8,expValue8);
Reporter.log(actualValue8 + "----" +expValue8 + "UK pensions And State Benefits amount is verified",true);
}
}
catch (Error e) {
Reporter.log("Value of UK pensions And State Benefits is not available",true);
}
	}
	catch (Error e) {

Reporter.log("Tax submission is not worked",true);
}
}

//Deleting PDF File
public void delPdf() {
folder = new File("C:\\Users\\Administrator\\Downloads");
File fList[]= folder.listFiles();

    for (File f : fList) {
        if (f.getName().endsWith(".pdf")) {
            f.delete(); 
        }}
}
public void delScreenShot() {
folder = new File("D:\\Nomisma\\AutomationNomisma\\screenshots\\Failures");
File fList[]= folder.listFiles();

    for (File f : fList) {
        if (f.getName().endsWith(".png")) {
            f.delete(); 
        }}
}
public void delReports() {
folder = new File("D:\\Nomisma\\AutomationNomisma\\reports\\excelreport");
File fList[]= folder.listFiles();

    for (File f : fList) {
        if (f.getName().startsWith("Report")) {
            f.delete(); 
        }}
}
//Getting File Name with partial file name
public String GetFileName1(String Folder, String PartialName) throws Exception  {
	folderName = path+Folder;
	listFiles = new File(folderName).listFiles();
	
for (int i = 0; i < listFiles.length; i++) 
{
	Reporter.log("File Name "+fileName, true);
	if (listFiles[i].isFile()) 
	{
if ((listFiles[i].getName()).endsWith(PartialName))
{
	fileName=listFiles[i].getName();
	Reporter.log("File Found "+ " " + fileName, true);
	break;
}
        
	}

 }	

return fileName;

}
public void saveFileCommand() throws Exception {
	robot = new Robot();
	robot.delay(10000);
	robot.keyPress(KeyEvent.VK_CONTROL);
	robot.keyPress(KeyEvent.VK_S);
	robot.setAutoDelay(4000);
	robot.keyRelease(KeyEvent.VK_CONTROL);
	robot.keyRelease(KeyEvent.VK_S);
	robot.setAutoDelay(4000);
	robot.keyPress(KeyEvent.VK_ENTER);
	robot.setAutoDelay(4000);
	robot.keyRelease(KeyEvent.VK_ENTER);
	robot.setAutoDelay(4000);
	}
//Saving SA2018-19.pdf file
public void savePdf(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	folder = new File("C:\\Users\\Administrator\\Downloads");
	File fList[]= folder.listFiles();

	    for (File f : fList) {
	        if (f.getName().endsWith(".pdf")) {
	            f.delete(); 
	        }}
	wLib.explicitWait(driver, 5, menuDashboard);
	menuDashboard.click();
	wLib.explicitWait(driver, 5, txtDashboard);
	oldTab = driver.getWindowHandle();
	wLib.explicitWait(driver, 5, linkDocuments);
	linkDocuments.click();
	wLib.explicitWait(driver, 5,pdfSAforms);
	pdfSAforms.click();
	cis = new CISPage(driver);
	cis.switchwindowForward(driver);
	saveFileCommand();
	driver.switchTo().window(oldTab);
	}
//Saving TaxCalculation.pdf file
	public void savePdf2(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	folder = new File("C:\\Users\\Administrator\\Downloads");
	File fList[]= folder.listFiles();

	    for (File f : fList) {
	        if (f.getName().endsWith(".pdf")) {
	            f.delete(); 
	        }}
	    wLib.explicitWait(driver, 5, menuDashboard);
	    menuDashboard.click();
	wLib.explicitWait(driver, 5, txtDashboard);
	oldTab = driver.getWindowHandle();
	wLib.explicitWait(driver, 10, linkDocuments);
	linkDocuments.click();
	wLib.explicitWait(driver, 10, pdfSAforms1);
	pdfSAforms1.click();
	cis = new CISPage(driver);
	cis.switchwindowForward(driver);
	saveFileCommand();
	driver.switchTo().window(oldTab);
	}
	//Saving Summary.pdf file 
public void savePdf3(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	folder = new File("C:\\Users\\Administrator\\Downloads");
	File fList[]= folder.listFiles();

	    for (File f : fList) {
	        if (f.getName().endsWith(".pdf")) {
	            f.delete(); 
	        }}	 
	wLib.explicitWait(driver, 5, menuDashboard);
	menuDashboard.click();
	wLib.explicitWait(driver, 5, txtDashboard);    
	oldTab = driver.getWindowHandle();
	wLib.explicitWait(driver, 10,linkDocuments);
	linkDocuments.click();
	wLib.explicitWait(driver, 10,pdfSAforms2);
	pdfSAforms2.click();
	cis = new CISPage(driver);
	cis.switchwindowForward(driver);
	saveFileCommand();
	driver.switchTo().window(oldTab);

}
//Saving Schedule.pdf file
public void savePdf4(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	folder = new File("C:\\Users\\Administrator\\Downloads");
	File fList[]= folder.listFiles();

	    for (File f : fList) {
	        if (f.getName().endsWith(".pdf")) {
	            f.delete(); 
	        }}
	    wLib.explicitWait(driver, 5, menuDashboard);
	menuDashboard.click();    
	wLib.explicitWait(driver, 5, txtDashboard);
	oldTab = driver.getWindowHandle();
	wLib.explicitWait(driver, 10,linkDocuments);
	linkDocuments.click();
	wLib.explicitWait(driver, 10,pdfSAforms3);
	pdfSAforms3.click();
	cis = new CISPage(driver);
	cis.switchwindowForward(driver);
	saveFileCommand();
	driver.switchTo().window(oldTab);
}
//Reading SA2018-19.pdf file
public void readPDF1InURL(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
    driver.navigate().refresh();
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 10, taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 10,payFromAllEmployments);
	string1 =payFromAllEmployments.getText().substring(1).replace(",","").replace(".00","").replace("", " ").trim();
	Reporter.log("Available Income from all employment: " +string1,true);
	string2 =benefitAndExpensesReceived.getText().substring(1).replace(",","").replace(".00","").replace("", " ").trim();
	 Reporter.log("Available Benefit and Expenses: " +string2,true);
	 string3 =allowableExpenses.getText().substring(1).replace(",","").replace(".00","").replace("", " ").trim();
	 Reporter.log("Allowable expense available: " +string3,true);
	 string4=taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	 Reporter.log("Total tax for the year available: " +string4,true);
    filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
       // String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Pay from all employments Verified: " +string1, true);
        
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Benefits and expenses received verified: " +string2, true);
        
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Allowable expense verified Successfully : " +string3, true);
        
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Balance tax for the year verified Successfully : " +string4, true);
        Reporter.log("Self Assessment Forms PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
   }
//Reading TaxCalculation.pdf file
public void readPDF2InURL(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
    
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10, taxReturnLink);	
	taxReturnLink.click();
 	wLib.explicitWait(driver, 10, taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 10,TotalIncomeReceived);
	string1 = TotalIncomeReceived.getText();
	Reporter.log("Total income Received: "+string1,true);
	string2 = totalIncomeOnWhichTaxIsDue.getText();
	Reporter.log("Total income on which tax is due: "+string2,true);
	string3 =incomeOnWhichTaxCharged.getText();
	 Reporter.log("Total income on which Tax is charged: "+string3,true);
	 string4 =incomeTaxDue.getText();
	 Reporter.log("Income Tax Due without State Pension lump sum payment: "+ string4,true);
	 string5 =taxForThisYear.getText();
	 Reporter.log("Total tax Balance for the year: "+string5,true);
	
	filePath =path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        //String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Total income Received Verified Successfully: " +string1, true);
        
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Total income on which tax is due verified Successfully: " +string2, true);
       
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Total income on which Tax is charged verified Successfully: " +string3, true);
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Income Tax Due without State Pension lump sum payment verified Successfully: " +string4, true);
        Assert.assertTrue(output.contains(string5));
        Reporter.log("Total tax Balance for the year verified Successfully: " +string5, true);
       
        Reporter.log("Tax Calculation PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
    }
//Reading Summary.pdf file 
public void readPDF3InURL(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,IncomeLink);
	IncomeLink.click();
	wLib.explicitWait(driver, 10, EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 10,empName);
	name1=empName.getText();
	wLib.explicitWait(driver, 10, taxReturnLink);
 	taxReturnLink.click();
 	wLib.explicitWait(driver, 10, taxCalSummaryLink);
	taxCalSummaryLink.click();
 	wLib.explicitWait(driver, 10, payFromAllEmployments);
	string1 = payFromAllEmployments.getText().replace(".00","");
	Reporter.log(string1,true);
	wLib.explicitWait(driver, 10, benefitAndExpensesReceived);
	string2 = benefitAndExpensesReceived.getText().replace(".00","");
	Reporter.log(string2,true);
	wLib.explicitWait(driver, 10, allowableExpenses);
	string3 =allowableExpenses.getText().replace(".00","");
	Reporter.log(string3,true);
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        Reporter.log("Summary Report PDF data: " +output, true);
        Assert.assertTrue(output.contains(string1));
        Reporter.log("pay From All Employments verified : " +string1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Benefit And Expenses Received verified :" +string2, true);
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Allowable Expenses verified :" +string3, true);       
        Assert.assertTrue(output.contains(name1));
        Reporter.log("Employer Name verified: " +name1, true);
        Reporter.log("Self Assessment Summary PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
    
}
//Reading Schedule.pdf file
public void readPDF4InURL(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10, IncomeLink);
	IncomeLink.click();
	wLib.explicitWait(driver, 10, EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 10, empName);
	name1=empName.getText();
	wLib.explicitWait(driver, 10, taxReturnLink);	
	taxReturnLink.click();
 	wLib.explicitWait(driver, 10, taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 10, payFromAllEmployments);	
	string1 = payFromAllEmployments.getText();
	Reporter.log(string1,true);
	driver.navigate().refresh();
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        output = new PDFTextStripper().getText(document);
        Reporter.log("Employment Income PDF data: " +output, true);
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Payment received from All Employments verified : " +string1, true);
        Assert.assertTrue(output.contains(name1));
        Reporter.log("Employer Name verified: " +name1, true);
        Reporter.log("Tax Schedules PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
    }
//Function to click on Divident link
public void clickDivident(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 30,dividentLink);
	dividentLink.click();
}
//Function to add bank and verify if added or not
public void addBank(WebDriver driver,String name1, String name2, String acNum) throws Exception {
	wLib = new WaitStatementLib();	
	cis = new CISPage(driver);
	wLib.explicitWait(driver, 10,dividentLink);
	dividentLink.click();
	/*try
	{
wLib.explicitWait(driver, 1,delInterest);
if (delInterest.isDisplayed()==true)
{
	wLib.explicitWait(driver, 1,delInterest);
	delInterest.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	
	Reporter.log("Interest deleted successfully",true);
	wLib.explicitWait(driver, 1,delbank);
	delbank.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	driver.navigate().refresh();
	}
	}
	catch (Exception e) {
Reporter.log(e.getMessage(),true);
	}*/
	wLib.explicitWait(driver, 10,addBankBtn);
	addBankBtn.click();
	cis.switchwindowNew(driver);
	//driver.switchTo().frame(frame1);
	wLib.explicitWait(driver, 2,bankNameTxtBox1);
	listbox1 = new Select(bankNameTxtBox1);
	listbox1.selectByVisibleText(name1);
	wLib.explicitWait(driver, 2,bankNameTxtBox2);
	bankNameTxtBox2.clear();
	bankNameTxtBox2.sendKeys(name2);
	wLib.explicitWait(driver, 2,acNumber);
	acNumber.clear();
	acNumber.sendKeys(acNum);
	wLib.explicitWait(driver, 2,SaveBtn2);
	SaveBtn2.click();
	driver.navigate().refresh();
	wLib.explicitWait(driver, 2,verifyBankname);
	String text1 = verifyBankname.getText();
	Assert.assertEquals(name2, text1);
	Reporter.log("Bank name added successfully",true);
	}
//Deleting Income of Interest from UK Banks
public void delInterestfromUKbanks(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 2,dividentLink);
	dividentLink.click();
	try {
wLib.explicitWait(driver, 2,dividentTxt);
if(dividentTxt.isDisplayed()==false)
{
	wLib.explicitWait(driver, 1,dividentLink);
	dividentLink.click();	
	Reporter.log("Dividend Link is not opened in first click", true);
}
	}
	catch (Exception e) {
Reporter.log("Dividend Link is opened in first click", true);
	}
	try {
wLib.explicitWait(driver,1,delInterest);
if(delInterest.isDisplayed()==true)
{
	do {
	wLib.explicitWait(driver, 1,delInterest);	
	delInterest.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	driver.navigate().refresh();
	Reporter.log("Interest deleted successfully",true);
	}while(delInterest.isDisplayed()==true);
}
	}
catch (Exception e) {
	Reporter.log("Interest from UK banks, building societies etc. is deleted",true);
}

	wLib.explicitWait(driver, 2,delbank);
	delbank.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,cnfmdel);
	cnfmdel.click();
	driver.navigate().refresh();
	
}
//Deleting Income of UK Pensions Annuities
public void delUKPensionsAnnuities(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,frm1Btn);
	frm1Btn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,totStatPension);
	totStatPension.clear();
	statPensionLumpSum.clear();
	taxtakenoffLumpsum.clear();
	taxableIncapacityBenefit.clear();
	otherPensionsRetirementAnnuities.clear();
	jobseekersAllowance.clear();
	taxTakenOffOtherPensions.clear();
	anyOtherPensionsBenefits.clear();
	taxTakenOff.clear();
	stateBenefitsSaveBtn.click();
	Reporter.log("banks name deleted successfully",true);
	driver.navigate().refresh();
}
//Deleting Bank
public void delBank(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	delInterestfromUKbanks(driver);
	delUKPensionsAnnuities(driver);
}
//Adding Income with UK Interest
public void addUKInterest(WebDriver driver, String dateaddInterest, String name1, String desc, String amt) throws Exception
{
	wLib = new WaitStatementLib();
	formOpenBtn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 10,dateTxtBox);
	dateTxtBox.clear();
	dateTxtBox.sendKeys(dateaddInterest);
	wLib.explicitWait(driver, 10,bankTxtBox);
	listbox1 = new Select(bankTxtBox);
	listbox1.selectByVisibleText(name1);
	wLib.explicitWait(driver, 10,descriptionTxtBox);
	descriptionTxtBox.clear();
	descriptionTxtBox.sendKeys(desc);
	wLib.explicitWait(driver, 10,interestAmountTxtBox);
	interestAmountTxtBox.clear();
	interestAmountTxtBox.sendKeys(amt);
	wLib.explicitWait(driver, 10,taxedUKInterestRadioBtn);
	taxedUKInterestRadioBtn.click();
	wLib.explicitWait(driver, 10,SaveBtn2);
	SaveBtn2.click();
	wLib.explicitWait(driver, 10,verifyInterest);
	String str1=verifyInterest.getText();
	Assert.assertEquals(str1, desc);
	Reporter.log("Interest added Successfully",true);
	
}
//Adding function without UK Interest
public void withoutTaxAddIncome(WebDriver driver, String dateaddInterest, String name1, String desc, String amt) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,10,formOpenBtn);
	formOpenBtn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,dateTxtBox);
	dateTxtBox.clear();
	dateTxtBox.sendKeys(dateaddInterest);
	wLib.explicitWait(driver, 2,bankTxtBox);
	listbox1 = new Select(bankTxtBox);
	listbox1.selectByVisibleText(name1);
	wLib.explicitWait(driver, 2,descriptionTxtBox);
	descriptionTxtBox.clear();
	descriptionTxtBox.sendKeys(desc);
	interestAmountTxtBox.clear();
	interestAmountTxtBox.sendKeys(amt);
	unTaxedUKInterestRadioBtn.click();
	SaveBtn2.click();
	wLib.explicitWait(driver, 10,verifyInterest);
	String str1=verifyInterest.getText();
	Assert.assertEquals(str1, desc);
	Reporter.log("Interest added Successfully",true);
	
}
//Adding Income with foreign Income
public void foreignInterestAddIncome(WebDriver driver, String dateaddInterest, String name1, String desc, String amt) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,formOpenBtn);
	formOpenBtn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,dateTxtBox);
	dateTxtBox.clear();
	dateTxtBox.sendKeys(dateaddInterest);
	listbox1 = new Select(bankTxtBox);
	listbox1.selectByVisibleText(name1);
	descriptionTxtBox.clear();
	descriptionTxtBox.sendKeys(desc);
	interestAmountTxtBox.clear();
	interestAmountTxtBox.sendKeys(amt);
	foreignInterestRadioBtn.click();
	SaveBtn2.click();
	wLib.explicitWait(driver, 10,verifyInterest);
	String str1=verifyInterest.getText();
	Assert.assertEquals(str1, desc);
	Reporter.log("Interest added Successfully",true);
	
}
// Adding Income of Dividend from UK companies
public void dividentUKCompanies(WebDriver driver,String name1, String desc, String amt) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,dividentFormBtn);
	dividentFormBtn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 10,companyNameTxtBox);
	companyNameTxtBox.clear();
	companyNameTxtBox.sendKeys(name1);
	dividentDescripTxtBox.clear();
	dividentDescripTxtBox.sendKeys(desc);
	dividendsfrmUKcompTxtBox.clear();
	dividendsfrmUKcompTxtBox.sendKeys(amt);
	SaveBtn2.click();
	Reporter.log("Dividend Income added Successfully",true);
	driver.navigate().refresh();
}
//Adding Basic employment Income
public void addIncomeBasic(String payEmp, String medExp, String trvlBussiness, WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	try
	{
wLib.explicitWait(driver, 10,delButton);
delButton.click();
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 10,confirmDel);	
confirmDel.click();
wLib.explicitWait(driver, 10, delEmpName);
delEmpName.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 10,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
	}
	catch (Exception e) {
System.out.println(e.getMessage());
	}
	wLib.explicitWait(driver, 10,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 2, payFrmEmployer);
	payFrmEmployer.sendKeys(payEmp);
	wLib.explicitWait(driver, 2, PrvtMedAndDntl);
	PrvtMedAndDntl.sendKeys(medExp);
	wLib.explicitWait(driver, 2, BusnsTrvlAndSubstancTxtBox);
	BusnsTrvlAndSubstancTxtBox.sendKeys(trvlBussiness);
	SaveBtn1.click();
	wLib.explicitWait(driver, 10,totalIncome);
	actResult1=totalIncome.getText();
	expResult1= "£"+ payEmp + ".00";
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log("Employer Income added Sucessfully", true);
}
//adding Income from state banefit
public void stateBenefit(WebDriver driver,String str1,String str2,String str3, String str4, String str5) throws Exception
{
	
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,dividentLink);
	dividentLink.click();
	wLib.explicitWait(driver, 10,frm1Btn);
	frm1Btn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str1);
	
	statPensionLumpSum.clear();
	statPensionLumpSum.sendKeys(str2);
	
	taxableIncapacityBenefit.clear();
	taxableIncapacityBenefit.sendKeys(str3);
	
	otherPensionsRetirementAnnuities.clear();
	otherPensionsRetirementAnnuities.sendKeys(str4);
	
	jobseekersAllowance.clear();
	jobseekersAllowance.sendKeys(str5);
	stateBenefitsSaveBtn.click();
	String actualStr=totstatePension.getText();
	String expectedStr=str1+".00";
	Assert.assertEquals(actualStr, expectedStr);
	Reporter.log("State benefit added successfully",true);
}
//Adding Other Dividend Income
public void addOtherDivident(WebDriver driver,String str1,String str2,String str3) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,formOpenLink);
	formOpenLink.click();
	
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,otherDividentTxtBox);
	otherDividentTxtBox.clear();
	otherDividentTxtBox.sendKeys(str1);
	foreignDividendsTxtBox.clear();
	foreignDividendsTxtBox.sendKeys(str2);
	taxTakenOffForeignDividendTxtBox.clear();
	taxTakenOffForeignDividendTxtBox.sendKeys(str3);
	SaveBtn2.click();
	Reporter.log("Other Divident income added successfully",true);
}
//Add Income other than uk income
public void addOtherUKIncome(WebDriver driver,String str1,String str2,String str3,String str4,String str5) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,form1OpenBtn);
	form1OpenBtn.click();
	
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	otherTaxableIncomeTxtBox.clear();
	otherTaxableIncomeTxtBox.sendKeys(str1);
	
	allowableExpensesTxtBox.clear();
	allowableExpensesTxtBox.sendKeys(str2);
	
	taxDeductedTxtBox.clear();
	taxDeductedTxtBox.sendKeys(str3);
	
	beneftFrmPreOwnedAssetsTxtBox.clear();
	beneftFrmPreOwnedAssetsTxtBox.sendKeys(str4);
	
	otherUKDescriptionTxtBox.clear();
	otherUKDescriptionTxtBox.sendKeys(str5);
	
	OtherUKIncomeSaveBtn.click();
	Reporter.log("Other UK Income added successfully",true);
}
//Deleting Income other than UK Income
public void delOtherUKIncome(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,dividentLink);
	dividentLink.click();
	wLib.explicitWait(driver, 10,form1OpenBtn);
	form1OpenBtn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	otherTaxableIncomeTxtBox.clear();
	allowableExpensesTxtBox.clear();
	taxDeductedTxtBox.clear();
	beneftFrmPreOwnedAssetsTxtBox.clear();
	otherUKDescriptionTxtBox.clear();
	OtherUKIncomeSaveBtn.click();
	Reporter.log("Other UK Income Deleted successfully",true);
}
//Deleting Dividend Income
public void deleteDivident(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,delDivident);
	delDivident.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 10,cnfmdel);
	cnfmdel.click();
}
//Deleting Interest from Bank
public void delBankInterest(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,delInterest);
	delInterest.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 10,cnfmdel);
	cnfmdel.click();
	Reporter.log("Interest deleted successfully",true);
	wLib.explicitWait(driver, 10,delbank);
	delbank.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 10,cnfmdel);
	cnfmdel.click();
	}
//Deleting other than dividend income
public void delOtherDivident(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10,formOpenLink);
	formOpenLink.click();
	
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,otherDividentTxtBox);
	otherDividentTxtBox.clear();
	
	foreignDividendsTxtBox.clear();
	
	taxTakenOffForeignDividendTxtBox.clear();
	
	SaveBtn2.click();
	Reporter.log("Other Divident income deleted successfully",true);
}
//Verifying tax summary page for Dividend Income
public void verifyTaxDivident(WebDriver driver,String a1, String a2, String a3, String a4, String a5, String a6, String a7,String a8, String a9) throws Exception
{
	wLib = new WaitStatementLib();	
	wLib.explicitWait(driver,5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	n1=Double.parseDouble(a1);
	n2=Double.parseDouble(a2);
	n3=Double.parseDouble(a3);
	totalIncome1 = (n1 + n2) - n3;
	Reporter.log("totalIncome1: "+totalIncome1,true);
	n4=Double.parseDouble(a4);
	n5=Double.parseDouble(a5);
	n6=Double.parseDouble(a6);
	n7=Double.parseDouble(a7);
	n8=Double.parseDouble(a8);
	totalIncome2=n8+(n8*.25);
	System.out.println(totalIncome2);
	totalIncome3=n4+n5+n6+n7;
	System.out.println(totalIncome3);
	totalincome=totalIncome1 + totalIncome2 + totalIncome3;
	System.out.println(totalincome);
	taxTotal=String.format("%.2f",(totalincome));
	t1=	TotalIncomeReceived.getText().substring(1).replace(",", "");
	Assert.assertEquals(t1, taxTotal);
	Reporter.log(t1+"----"+taxTotal+" Total Income verified successfully",true);
	taxDueInc = totalincome - personalAllowanceRate;	
	t1=String.format("%.2f",(taxDueInc));
	t2=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",","");
	Assert.assertEquals(t2, t1);
	Reporter.log(t2+"----"+ t1+" Total income on which tax is due Verified successfully",true);
	basic1=taxDueInc-totalIncome2;
	basicRate= basic1*BR_rate;
	basicRate1=String.format("%.2f",(basicRate));
	basicInterest=interOnBasicRate.getText().substring(1).replace(",", "");
	Assert.assertEquals(basicInterest,basicRate1);
	Reporter.log(basicInterest+"----"+basicRate1+ " Basic rate calculation is correct",true);
	basicRateInterest=totalIncome2-nilRate1;
	finalAmount=basic1+nilRate1+basicRateInterest;
	taxTotal=String.format("%.2f",(finalAmount));
	totIncomTaxChar= incomeOnWhichTaxCharged.getText().substring(1).replace(",", "");
	Assert.assertEquals(totIncomTaxChar, taxTotal);
	Reporter.log(totIncomTaxChar+"----"+ taxTotal+" Total income on which tax has been charged is verified", true);
	basicInterestAmount=basicRateInterest*BR_rate;
	incomTaxdue1=Double.parseDouble(basicInterest);
	incomTaxdue2=basicInterestAmount+incomTaxdue1;
	t1=String.format("%.2f",(incomTaxdue2));
	t2=incomeTaxDue.getText().substring(1).replace(",","");
	Assert.assertEquals(t2, t1);
	Reporter.log(t2+"-----"+ t1+" Income Tax due Verified successfully",true);
	n9=Double.parseDouble(a9);
	statePensionlumpsum=n9*BR_rate+incomTaxdue2;
	statePensionlumpsum1=String.format("%.2f",(statePensionlumpsum));
	statePensionlumpsum2=incomeTaxDue1.getText().substring(1).replace(",","");
	Assert.assertEquals(statePensionlumpsum2, statePensionlumpsum1);
	Reporter.log(statePensionlumpsum2+"----"+ statePensionlumpsum1+" Income Tax due verified successfully",true);
	fnltax=statePensionlumpsum-basicRateInterest;
	t1=String.format("%.2f",fnltax);
	t2=fTaxDue.getText().substring(1).replace(",","");
	Assert.assertEquals(t2, t1);
	Reporter.log(t2+"----"+ t1+" Total Income Tax due verified successfully",true);
	taxBalance= fnltax;
	taxFinal=String.format("%.2f",taxBalance);
	taxFinalUI=taxForThisYear.getText().substring(1).replace(",","");
	Assert.assertEquals(taxFinalUI, taxFinal);
	Reporter.log(taxFinalUI+"----"+ taxFinal+" Balance Tax of year Verified successfully",true);
	fPayment =  taxBalance/2;
	secPayment = fPayment;
	fPay=String.format("%.2f",fPayment);
	secPay = String.format("%.2f",secPayment);
	actResult1 = firstPayment.getText().substring(1).replace(",","");
	actResult2= secondPayment.getText().substring(1).replace(",","");
	Assert.assertEquals(actResult1, fPay);
	Reporter.log(actResult1+"----"+ fPay+" FirstPayment Verified successfully",true);
	Assert.assertEquals(actResult2, secPay);
	Reporter.log(actResult2+"----"+ secPay+" Second Payment Verified successfully",true);
	}
//Reading Schedule.pdf file of Dividend Income
public void readDividentPDF4InURL(WebDriver driver, String Folder, String filename,String s1,String s2,String s3,String s4,String s5,String s6,String s7) throws EmptyFileException, IOException, Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 30, IncomeLink);
	IncomeLink.click();
	wLib.explicitWait(driver, 30, EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 30, empName);
	name1=empName.getText();
	wLib.explicitWait(driver, 60, taxReturnLink);	
	taxReturnLink.click();
 	wLib.explicitWait(driver, 60, taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 60,payFromAllEmployments);	
	string1 = payFromAllEmployments.getText();
	Reporter.log(string1,true);
	n1=Double.parseDouble(s1);
	n2=Double.parseDouble(s2);
	n3=Double.parseDouble(s3);
	n4=Double.parseDouble(s4);
	n5=Double.parseDouble(s5);
	n6=Double.parseDouble(s6);
	n7=Double.parseDouble(s7);
	totlIncome=n1+n2+n3+n4+n5+n6+n7;
	string2="£"+(String.format("%.2f",(totlIncome)));
	
	Reporter.log(string2,true);
	driver.navigate().refresh();
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        output = new PDFTextStripper().getText(document);
        output1=output.replace(",", "");
        Reporter.log("Employment Income PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Payment received from All Employments verified : " +string1, true);
        
        Assert.assertTrue(output.contains(name1));
        Reporter.log("Employer Name verified: " +name1, true);
        Assert.assertTrue(output1.contains(string2));
        Reporter.log("Sum of Total Income verified: " +string2, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
    
}
//Verifying tax summary page with UnTaxed Dividand
public void verifyUNTaxDivident(WebDriver driver,String a1, String a2, String a3, String a4, String a5, String a6, String a7,String a8, String a9,String a10) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 60,taxCalSummaryLink);
	taxCalSummaryLink.click();
	n1=Double.parseDouble(a1);
	n2=Double.parseDouble(a2);
	n3=Double.parseDouble(a3);
	totalIncome1 = (n1 + n2) - n3;
	System.out.println(totalIncome1);
	n4=Double.parseDouble(a4);
	n5=Double.parseDouble(a5);
	n6=Double.parseDouble(a6);
	n7=Double.parseDouble(a7);
	n8=Double.parseDouble(a8);
	n9=Double.parseDouble(a9);
	n10 = Double.parseDouble(a10);
	totalIncome2=n8;
	System.out.println(totalIncome2);
	totalIncome3=n4+n5+n6+n7+n10;
	System.out.println(totalIncome3);
	totalincome=totalIncome1 + totalIncome2 + totalIncome3;
	taxTotal=String.format("%.2f",(totalincome));
	string1= TotalIncomeReceived.getText().substring(1).replace(",", "");
	Assert.assertEquals(string1, taxTotal);
	Reporter.log(string1+"---"+ taxTotal,true);
	Reporter.log("Total income received is Verified successfully",true);
	total1 = totalincome - personalAllowanceRateMaxLimit;
	allowance1=total1/2;
	tax1=personalAllowanceRate-allowance1;
	taxDueInc = totalincome - tax1;
	taxTotal=String.format("%.2f",(taxDueInc));
	t2=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",","");
	Assert.assertEquals(t2, taxTotal);
	Reporter.log(t2+"---"+taxTotal,true);
	Reporter.log("Total income on which tax is due Verified successfully",true);
	t1=incomeOnWhichTaxCharged.getText().substring(1).replace(",","");
	Assert.assertEquals(t1, t2);
	Reporter.log(t1+"---"+ t2,true);
	Reporter.log("Total income on which tax has been charged",true);
	amount3 = (taxDueInc - taxLimit1Uk - n8 - n10)*HR_rate;
	amount4 = (n8 - nilRate2)*HR_rate;
	incomTaxdue1= amount1 + amount3 +amount4;
	t1=String.format("%.2f",(incomTaxdue1));
	t2=incomeTaxDue.getText().substring(1).replace(",","");
	Assert.assertEquals(t2, t1);
	Reporter.log(t1+"---"+ t2,true);
	Reporter.log("Income Tax due without State Pension lump sum payment verified",true);
	incomTaxdue2 = incomTaxdue1 + (n9 *HR_rate);
	t1=String.format("%.2f",(incomTaxdue2));
	t2=incomeTaxDue1.getText().substring(1).replace(",","");
	Assert.assertEquals(t2, t1);
	Reporter.log(t1+"---"+ t2,true);
	Reporter.log("Income Tax due with State Pension lump sum payment verified",true);
	
	}

//Reading Schedule.pdf file of UnTaxed Dividand
public void readDivident1PDF4InURL(WebDriver driver, String Folder, String filename,String str1,String str2,String str3,String str4,String	str5,String	str6,String	str7,String	str8) throws EmptyFileException, IOException, Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 30, IncomeLink);
	IncomeLink.click();
	wLib.explicitWait(driver, 30, EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 30, empName);
	name1=empName.getText();
	wLib.explicitWait(driver, 60, taxReturnLink);	
	taxReturnLink.click();
 	wLib.explicitWait(driver, 60,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 60, payFromAllEmployments);	
	string1 = payFromAllEmployments.getText().replace(",", "");
	Reporter.log(string1,true);
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	n8=Double.parseDouble(str8);
	
	totlIncome=n1+n2+n3+n4+n5+n6+n7+n8;
	string2="£"+(String.format("%.2f",(totlIncome)));
	Reporter.log(string2,true);
	driver.navigate().refresh();
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        output = new PDFTextStripper().getText(document).replace(",", "");
        Reporter.log("Employment Income PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Payment received from All Employments verified : " +string1, true);
        
        Assert.assertTrue(output.contains(name1));
        Reporter.log("Employer Name verified: " +name1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Sum of Total Income verified: " +string2, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
   
}
//verifying Tax summary page with Foreign Income dividend
public void verifyForeighDivident(WebDriver driver,String str1, String str2, String str3, String str4, String str5, String str6, String str7,String str8, String str9, String str10,String str11, String str12, String str13 )
{
	wLib = new WaitStatementLib();	
	wLib.explicitWait(driver,5,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 60, taxCalSummaryLink);
	taxCalSummaryLink.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	n8=Double.parseDouble(str8);
	n9=Double.parseDouble(str9);
	n10=Double.parseDouble(str10);
	n11=Double.parseDouble(str11);
	n12=Double.parseDouble(str12);
	n13=Double.parseDouble(str13);
	totalIncome1 = (n3 + n4) - n5;
	actResult1=TotalFromAllEmployment.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(totalIncome1)); 
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1+"--"+expResult1+" Verified Payment From Employment",true);
	
	totalIncome2=n1+n12+n2+n11+n6+n8+n9+n10+totalIncome1; 
	actResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(totalIncome2));
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1+"--"+expResult1+" Verified Total income on which tax is due",true);
	
	amount3=((totalIncome2-(taxLimit3+n1+ n6+ n8+ n9+ n10))*advancedRatePercentage)/100;
	amount4 = (n1 * advancedRatePercentage)/100;
	totalIncome3=amount1 + amount2 + amount3 + amount4;
	actResult1=incomeTaxDue.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(totalIncome3));
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1+"--"+expResult1+"Verified Income Tax Due",true);
	
	t1 = totalIncomeOnWhichTaxIsDue.getText();
	t2 = incomeOnWhichTaxCharged.getText();
	Assert.assertEquals(t2,t1);
	Reporter.log("Total Income On Which Tax is Charged is Verified",true);

	finalAmount = ((n7*advancedRatePercentage)/100)+totalIncome3;
	actResult1=incomeTaxDue1.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(finalAmount));
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1+"--"+expResult1+"Final Tax amount Verified successfully",true);
	Reporter.log("Tax calculation Verified successfully",true);
	}
//Reading Schedule.pdf file for Foreign Income dividend
public void readDivident2PDF4InURL(WebDriver driver, String Folder, String filename,String str1,String str2,String str3,String str4,String	str5,String	str6,String	str7,String	str8) throws EmptyFileException, IOException, Exception {
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	totlIncome=n1+n2+n3+n4+n5+n6+n7;
	string1="£"+(String.format("%.2f",(totlIncome)));
	Reporter.log(string1,true);
	driver.navigate().refresh();
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
   file1=filePath + Folder + filename;
    
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        output = new PDFTextStripper().getText(document).replace(",", "");
        Reporter.log("Employment Income PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(str8));
        Reporter.log("Employer Name verified: " +str8, true);
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Sum of Total Income verified: " +string1, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
   
}
//Verifying tax summary page with Other tax income
public void verifyOthertax(WebDriver driver,String str1, String str2, String str3, String str4, String str5, String str6, String str7,String str8, String str9, String str10,String str11, String str12, String str13,String str14,String str15,String str16,String str17 )
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 60, taxCalSummaryLink);
	taxCalSummaryLink.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	n8=Double.parseDouble(str8);
	n9=Double.parseDouble(str9);
	n10=Double.parseDouble(str10);
	n11=Double.parseDouble(str11);
	n12=Double.parseDouble(str12);
	n13=Double.parseDouble(str13);
	n14=Double.parseDouble(str14);
	n15=Double.parseDouble(str15);
	n16=Double.parseDouble(str16);
	n17=Double.parseDouble(str17);
	totalincome = (n1 + n2) - n3;
	System.out.println(totalincome);
	actResult1=TotalFromAllEmployment.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(totalincome));
	try {
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1+"--"+expResult1+" Verified Payment From Employment",true);
	}
	catch(Error e)
	{
Reporter.log("Payment From Employment is not verified",true);


	}
	totalIncome1=n4 + ((n4 * 25)/100);
	totalIncome2=n5 + (n6 + n7) + n8 + n9 + n10 + n11 + ((n15-n12)+n16);
	total1=totalincome+totalIncome1+totalIncome2;
	actResult1=TotalIncomeReceived.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(total1));
	try {
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1+"----"+expResult1+" Verified Total income Received: ",true);
	}
	catch(Error e)
	{
Reporter.log("Total income Received is not verified",true);

	}
	incomTaxdue2=total1-personalAllowanceRate;
	actResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(incomTaxdue2));
	try {
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1+"----"+expResult1+" Verified Income is Tax Due",true);
	
	}
	catch(Error e)
	{
Reporter.log("Income Tax Due not verified",true);
e.printStackTrace();
	}
	t1 = totalIncomeOnWhichTaxIsDue.getText();
	t2 = incomeOnWhichTaxCharged.getText();
	try {
	Assert.assertEquals(t2,t1);
	Reporter.log(t1 +"----"+ t2 +" Total Income On Which Tax is Charged is Verified",true);
	
	}
	catch(Error e)
	{
Reporter.log("Total Income On Which Tax is Charged  is not verified",true);

	}
	allowance1=incomTaxdue2 - (totalIncome1+n5 + n6 + n7);
	basic1=allowance1*BR_rate;
	basicInterestAmount = (totalIncome1-nilRate1)*BR_rate;
	tax1= basic1 + basicInterestAmount;
	actResult1=incomeTaxDue.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(tax1));
	try {
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1+"--"+expResult1+" Tax amount Verified successfully",true);
	}
	catch(Error e)
	{
Reporter.log("Tax amount is not verified",true);

	}
	statePensionlumpsum= n13 * BR_rate;
	amount3=tax1 + statePensionlumpsum;
	actResult1=incomeTaxDue1.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(amount3));
	try {
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1 + "----"+expResult1+ " Total Income Tax Due is Verified successfully",true);
	}
	catch(Error e)
	{
Reporter.log("Total Income Tax Due is not verified",true);

	}
	incomTaxdue2=amount3 - ((totalIncome1 - n4) + n12);
	actResult1=taxForThisYear.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(incomTaxdue2));
	try {
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log(actResult1+expResult1 + " Final Tax Verified successfully",true);
	Reporter.log("Tax calculation Verified successfully",true);
	}
	catch(Error e)
	{
Reporter.log("Final Tax is not verified",true);
Reporter.log("Tax calculation not Verified successfully",true);

	}
	
	}
//Reading Schedule.pdf file for Other tax income
public void readOtherUkIncomePDF4InURL(WebDriver driver, String Folder, String filename,String name,String str1,String str2,String str3,String str4,String	str5,String	str6,String	str7,String	str8,String str9 ) throws EmptyFileException, IOException, Exception {
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	n8=Double.parseDouble(str8);
	n9=Double.parseDouble(str9);
	totlIncome=n1+n2+n3+n4+n5+n6+n7+n8+n9;
	string1="£"+(String.format("%.2f",(totlIncome)));
	Reporter.log(string1,true);
	driver.navigate().refresh();
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        output = new PDFTextStripper().getText(document).replace(",", "");
        Reporter.log("Employment Income PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(name));
        Reporter.log("Employer Name verified: " +name, true);
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Sum of Total Income verified: " +string1, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
    
}
 //Adding Income from property for FHL 
public void profitIncomeFrmProprtyFHL(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9, String str10,String str11) throws Exception {
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 2,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.sendKeys(str1);
	rentIncomeTextBox.sendKeys(str2);
	UKExpensesTxtBox.sendKeys(str3);
	loanInterestTxtBox.sendKeys(str4);
	legalManagementOthrProfessionalFeesTxtBox.sendKeys(str5);
	allowablePropertyExpensesTxtBox.sendKeys(str6);
	privateUseAdjustmentTxtBox.sendKeys(str7);
	balancingChargesTxtBox.sendKeys(str8);
	capitalAllowancesTxtBox.sendKeys(str9);
	lossBroughtForwardTxtBox.sendKeys(str10);
	lossToCarryForwardTxtBox.sendKeys(str11);
	fHLUKIsPeriodOfGraceElectionChkBox.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	n8=Double.parseDouble(str8);
	n9=Double.parseDouble(str9);
	n10=Double.parseDouble(str10);
	n11=Double.parseDouble(str11);
	SaveBtn1.click();
	wLib.explicitWait(driver, 2,calculateFHLUKAdjustedProfitForTheYear);
	string1=calculateFHLUKAdjustedProfitForTheYear.getAttribute("value").replace(".00", "");
	calculation1=Double.parseDouble(string1);
	totalIncome1=(n2+n7+n8)-(n3+n4+n5+n6+n9);
	Reporter.log(String.format("%.2f %.2f",totalIncome1, calculation1 ),true);
	Assert.assertEquals(calculation1,totalIncome1);
	Reporter.log("Adjusted profit for the year verified successfully",true);
	string2=calculateFHLUKTaxableProfitForYear.getAttribute("value").replace(".00", "");
	calculation2=Double.parseDouble(string2);
	totalIncome2 = totalIncome1 - n10;
	Reporter.log(String.format("%.2f %.2f",totalIncome2, calculation2 ),true);
	Assert.assertEquals(calculation2,totalIncome2 );
	Reporter.log("Taxable profit for the year verified successfully",true);
	}
//Adding Loss of property income for FHL
public void lossIncomeFrmProprtyFHL(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9, String str10) throws Exception {
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	
	editBtn.click();
	wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str1);
	rentIncomeTextBox.clear();	
	rentIncomeTextBox.sendKeys(str2);
	UKExpensesTxtBox.clear();
	UKExpensesTxtBox.sendKeys(str3);
	loanInterestTxtBox.clear();
	loanInterestTxtBox.sendKeys(str4);
	legalManagementOthrProfessionalFeesTxtBox.clear();
	legalManagementOthrProfessionalFeesTxtBox.sendKeys(str5);
	allowablePropertyExpensesTxtBox.clear();
	allowablePropertyExpensesTxtBox.sendKeys(str6);
	privateUseAdjustmentTxtBox.clear();
	privateUseAdjustmentTxtBox.sendKeys(str7);
	balancingChargesTxtBox.clear();
	balancingChargesTxtBox.sendKeys(str8);
	capitalAllowancesTxtBox.clear();
	capitalAllowancesTxtBox.sendKeys(str9);
	lossToCarryForwardTxtBox.clear();
	lossToCarryForwardTxtBox.sendKeys(str10);
	fHLUKIsPeriodOfGraceElectionChkBox.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	n8=Double.parseDouble(str8);
	n9=Double.parseDouble(str9);
	n10=Double.parseDouble(str10);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,calculateFHLUKLossForYear);
	string1=calculateFHLUKLossForYear.getAttribute("value").replace(".00", "");
	calculation1=Double.parseDouble(string1);
	totalIncome1 = ((n3+n4+n5+n6+n9)-(n2+n7+n8));
	System.out.println(String.format("%.2f %.2f",totalIncome1, calculation1 ));
	Assert.assertEquals(calculation1,totalIncome1);
	Reporter.log("Loss for the year verified successfully",true);
}
//Adding profit of property income for EEA
public void incomProfitFHLinEEA(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9, String str10,String str11) throws Exception {
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver,5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str1);
	rentIncomeEEATextBox.clear();
	rentIncomeEEATextBox.sendKeys(str2);
	uKExpensesEAATxtBox.clear();
	uKExpensesEAATxtBox.sendKeys(str3);
	loanInterestEEATxtBox.clear();
	loanInterestEEATxtBox.sendKeys(str4);
	legalMangmntOthrProfsnlFeesEEATxtBox.clear();
	legalMangmntOthrProfsnlFeesEEATxtBox.sendKeys(str5);
	allowablePropertyExpensesEAATxtBox.clear();
	allowablePropertyExpensesEAATxtBox.sendKeys(str6);
	privateUseAdjustmentEAATxtBox.clear();
	privateUseAdjustmentEAATxtBox.sendKeys(str7);
	balancingChargesEAATxtBox.clear();
	balancingChargesEAATxtBox.sendKeys(str8);
	capitalAllowancesEAATxtBox.clear();
	capitalAllowancesEAATxtBox.sendKeys(str9);
	lossBroughtForwardEAATxtBox.clear();
	lossBroughtForwardEAATxtBox.sendKeys(str10);
	lossToCarryForwardEAATxtBox.clear();
	lossToCarryForwardEAATxtBox.sendKeys(str11);
	FHLEEAIsPeriodOfGraceElectionChkBox.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	n8=Double.parseDouble(str8);
	n9=Double.parseDouble(str9);
	n10=Double.parseDouble(str10);
	n11=Double.parseDouble(str11);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,calculateFHLEaaUKAdjustedProfitForTheYear);
	string1=calculateFHLEaaUKAdjustedProfitForTheYear.getAttribute("value").replace(".00", "");
	calculation1=Double.parseDouble(string1);
	totalIncome1=(n2+n7+n8)-(n3+n4+n5+n6+n9);
	System.out.println(String.format("%.2f %.2f",totalIncome1, calculation1 ));
	Assert.assertEquals(calculation1,totalIncome1);
	Reporter.log("Adjusted profit for the year verified successfully",true);
	string2=calculateFHLEaaUKTaxableProfitForYear.getAttribute("value").replace(".00", "");
	calculation2=Double.parseDouble(string2);
	totalIncome2 = totalIncome1 - n10;
	System.out.println(String.format("%.2f %.2f",totalIncome2, calculation2 ));
	Assert.assertEquals(calculation2,totalIncome2);
	Reporter.log("Taxable profit for the year verified successfully",true);
	
}
//Adding Loss of property income for EEA
public void incomLossFHLinEEA(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9, String str10) throws Exception {
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 5, incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5, editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5, noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str1);
	rentIncomeEEATextBox.clear();
	rentIncomeEEATextBox.sendKeys(str2);
	uKExpensesEAATxtBox.clear();
	uKExpensesEAATxtBox.sendKeys(str3);
	loanInterestEEATxtBox.clear();
	loanInterestEEATxtBox.sendKeys(str4);
	legalMangmntOthrProfsnlFeesEEATxtBox.clear();
	legalMangmntOthrProfsnlFeesEEATxtBox.sendKeys(str5);
	allowablePropertyExpensesEAATxtBox.clear();
	allowablePropertyExpensesEAATxtBox.sendKeys(str6);
	privateUseAdjustmentEAATxtBox.clear();
	privateUseAdjustmentEAATxtBox.sendKeys(str7);
	balancingChargesEAATxtBox.clear();
	balancingChargesEAATxtBox.sendKeys(str8);
	capitalAllowancesEAATxtBox.clear();
	capitalAllowancesEAATxtBox.sendKeys(str9);
	lossToCarryForwardEAATxtBox.clear();
	lossToCarryForwardEAATxtBox.sendKeys(str10);
	FHLEEAIsPeriodOfGraceElectionChkBox.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	n8=Double.parseDouble(str8);
	n9=Double.parseDouble(str9);
	n10=Double.parseDouble(str10);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,calculateFHLEaaUKLossForYear);
	string1=calculateFHLEaaUKLossForYear.getAttribute("value").replace(".00", "");
	calculation1=Double.parseDouble(string1);
	totalIncome1 = ((n3+n4+n5+n6+n9)-(n2+n7+n8));
	System.out.println(String.format("%.2f %.2f",totalIncome1, calculation1 ));
	Assert.assertEquals(calculation1,totalIncome1);
	Reporter.log("Loss for the year verified successfully",true);
}
//Adding property income for Expense
public void propIncomeExpens(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9, String str10, String str11, String str12, String str13, String str14, String str15, String str16, String str17) throws Exception {
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str1);
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str2);
	propertyIncomeAllowanceChkBox.click();
	premiumsForGrantOfALeaseTxtBox.clear();
	premiumsForGrantOfALeaseTxtBox.sendKeys(str3);
	revrsePremAndInducTxtBox.clear();
	revrsePremAndInducTxtBox.sendKeys(str4);
	rentRatesInsuranceEtcTxtBox.clear();
	rentRatesInsuranceEtcTxtBox.sendKeys(str5);
	repairsAndMaintenanceTxtBox.clear();
	repairsAndMaintenanceTxtBox.sendKeys(str6);
	intrstAndOthrFinancialChrgsTxtBox.clear();
	intrstAndOthrFinancialChrgsTxtBox.sendKeys(str7);
	legalManagmntAndPrfsnalFeesTxtBox.clear();
	legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str8);
	costsOfServicProvidedTxtBox.clear();
	costsOfServicProvidedTxtBox.sendKeys(str9);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str10);
	propertyPrivateUseAdjustmentTxtBox.clear();
	propertyPrivateUseAdjustmentTxtBox.sendKeys(str11);
	balancingTaxableChargesTxtBox.clear();
	balancingTaxableChargesTxtBox.sendKeys(str12);
	annualInvestmentAllowanceTxtBox.clear();
	annualInvestmentAllowanceTxtBox.sendKeys(str13);
	zeroEmisnGoodsVehclAllwncTxtBox.clear();
	zeroEmisnGoodsVehclAllwncTxtBox.sendKeys(str14);
	enhancedCapitalAllowancesTxtBox.clear();
	enhancedCapitalAllowancesTxtBox.sendKeys(str15);
	tenPercntWearAndTearAllowanceTxtBox.clear();
	tenPercntWearAndTearAllowanceTxtBox.sendKeys(str16);
	txtBoxLossBroughtForward.clear();
	txtBoxLossBroughtForward.sendKeys(str17);
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	n3=Double.parseDouble(str3);
	n4=Double.parseDouble(str4);
	n5=Double.parseDouble(str5);
	n6=Double.parseDouble(str6);
	n7=Double.parseDouble(str7);
	n8=Double.parseDouble(str8);
	n9=Double.parseDouble(str9);
	n10=Double.parseDouble(str10);
	n11=Double.parseDouble(str11);
	n12=Double.parseDouble(str12);
	n13=Double.parseDouble(str13);
	n14=Double.parseDouble(str14);
	n15=Double.parseDouble(str15);
	n16=Double.parseDouble(str16);
	n17=Double.parseDouble(str17);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,adjustedProfitForTheYear);
	string1=adjustedProfitForTheYear.getAttribute("value").replace(".00", "");
	calculation1=Double.parseDouble(string1);
	totalIncome1 = (n2+n3+n4+n11+n12)-(n5+n6+n7+n8+n9+n10+n13+n14+n15+n16);
	System.out.println(String.format("%.2f %.2f",totalIncome1, calculation1 ));
	Assert.assertEquals( calculation1,totalIncome1);
	Reporter.log("Adjusted profit for the year verified successfully",true);
	string2=taxableProfitForTheYear.getAttribute("value").replace(".00", "");
	calculation2=Double.parseDouble(string2);
	totalIncome2 =totalIncome1-n17;
	System.out.println(String.format("%.2f %.2f",totalIncome2, calculation2 ));
	Assert.assertEquals(calculation2,totalIncome2 );
	Reporter.log("Taxable profit for the year verified successfully",true);
}
//Deleting Income from property
public void delProfit(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver,5,incmFrmProLink);
	incmFrmProLink.click();
	try
	{
do {
if (editBtn.isDisplayed()==false)
{
	incmFrmProLink.click();	
}
}
while(editBtn.isDisplayed()==false);
	
	}
	catch (Exception e) {
e.printStackTrace();
	}
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	try {
		wLib.explicitWait(driver, 5,incomeFrmPropertyDelBtn);
		incomeFrmPropertyDelBtn.click();
		wLib.explicitWait(driver, 5,popup1);
		driver.switchTo().activeElement();
		yesBtn.click();	
	}
	catch (Exception e) {
		wLib.explicitWait(driver, 5,editBtn);
		editBtn.click();
		
	wLib.explicitWait(driver, 5,incomeFrmPropertyDelBtn);
	incomeFrmPropertyDelBtn.click();
	wLib.explicitWait(driver, 5,popup1);
	driver.switchTo().activeElement();
	yesBtn.click();
	}
	driver.navigate().refresh();
	Reporter.log("income from property deleted successfully",true);
}
//Adding Income for Self employment Short
public void selfEmplomentShort(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22) throws Exception
{
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,selfEmploymentLink);
	selfEmploymentLink.click();
	/*try
	{
	wLib.explicitWait(driver, 5,delButton);
	delButton.click();
	wLib.explicitWait(driver, 5,confDel);
	confDel.click();
	}
	catch (Exception e)
	{
	    Reporter.log(e.getMessage(),true);
	}*/
	wLib.explicitWait(driver, 5,formOpenBtn);
	formOpenBtn.click();
	wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
	descriptionOfBusinessTxtBox.clear();
	descriptionOfBusinessTxtBox.sendKeys(str1);
	empPostCodeTxtBox.clear();
	empPostCodeTxtBox.sendKeys(str2);
	StartDatetxtbox.clear();
	StartDatetxtbox.sendKeys(dateStart);
	tradingEnddateTxtBox.clear();
	tradingEnddateTxtBox.sendKeys(dateEnd);
	businessAccountsEnddateTxtBox.clear();
	businessAccountsEnddateTxtBox.sendKeys(dateEnd);
	businessIncomeTxtBox.clear();
	businessIncomeTxtBox.sendKeys(str3);
	otherBusinessIncomeTxtBox.clear();
	otherBusinessIncomeTxtBox.sendKeys(str4);
	costsOfGoodsBoughtForResaleTxtBox.clear();
	costsOfGoodsBoughtForResaleTxtBox.sendKeys(str5);
	carVanAndTravelExpensesTxtBox.clear();
	carVanAndTravelExpensesTxtBox.sendKeys(str6);
	wagesSalariesAndStaffCostsTxtBox.clear();
	wagesSalariesAndStaffCostsTxtBox.sendKeys(str7);
	rentAndOtherPropertyCostsTxtBox.clear();
	rentAndOtherPropertyCostsTxtBox.sendKeys(str8);
	repairAndRenewalCostsTxtBox.clear();
	repairAndRenewalCostsTxtBox.sendKeys(str9);
	accountancyAndLegalFeesTxtBox.clear();
	accountancyAndLegalFeesTxtBox.sendKeys(str10);
	interestAndFinanceChargesTxtBox.clear();
	interestAndFinanceChargesTxtBox.sendKeys(str11);
	phoneAndOtherOfficeCostsTxtBox.clear();
	phoneAndOtherOfficeCostsTxtBox.sendKeys(str12);
	otherAllowableBusinessExpensesTxtBox.clear();
	otherAllowableBusinessExpensesTxtBox.sendKeys(str13);
	seAnnualInvestmentAllowanceTxtBox.clear();
	seAnnualInvestmentAllowanceTxtBox.sendKeys(str14);
	allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.clear();
	allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.sendKeys(str15);
	otherCapitalAllowancesTxtBox.clear();
	otherCapitalAllowancesTxtBox.sendKeys(str16);
	totalBalancingChargesTxtBox.clear();
	totalBalancingChargesTxtBox.sendKeys(str17);
	ownGoodsAndServicesTxtBox.clear();
	ownGoodsAndServicesTxtBox.sendKeys(str18);
	txtBoxLossBroughtForward.clear();
	txtBoxLossBroughtForward.sendKeys(str19);
	anyOtherBusinessIncomeTxtBox.clear();
	anyOtherBusinessIncomeTxtBox.sendKeys(str20);
	//Losses
	totalLossToCarryForwardTxtBox.clear();
	totalLossToCarryForwardTxtBox.sendKeys(str21);
	//CIS Deductions
	subContractorsTaxDeductionTxtBox.clear();
	subContractorsTaxDeductionTxtBox.sendKeys(str22);
	SaveBtn1.click();
	n1=Double.parseDouble(str3);
	n2=Double.parseDouble(str4);
	n3=Double.parseDouble(str5);
	n4=Double.parseDouble(str6);
	n5=Double.parseDouble(str7);
	n6=Double.parseDouble(str8);
	n7=Double.parseDouble(str9);
	n8=Double.parseDouble(str10);
	n9=Double.parseDouble(str11);
	n10=Double.parseDouble(str12);
	n11=Double.parseDouble(str13);
	n12=Double.parseDouble(str14);
	n13=Double.parseDouble(str15);
	n14=Double.parseDouble(str16);
	n15=Double.parseDouble(str17);
	n16=Double.parseDouble(str18);
	n17=Double.parseDouble(str19);
	n18=Double.parseDouble(str20);
	n19=Double.parseDouble(str21);
	n20=Double.parseDouble(str22);
	
	
	displayRecordsBtn.click();
	
	totalIncome1=n3+n4+n5+n6+n7+n8+n9+n10+n11;
	
	wLib.explicitWait(driver, 5,totalExpenseTxtBox);
	string1=totalExpenseTxtBox.getAttribute("value").replace(".00", "");
	calculation1=Double.parseDouble(string1);
	Assert.assertEquals(calculation1, totalIncome1);
	Reporter.log("Total allowable expenses verified successfully",true);
	//Tax allowances for vehicles and equipment (capital allowances)
	
	totalIncome2=n12+n13+n14+n15;
	
	string2=totalAllowancesTxtBox.getAttribute("value").replace(".00", "");
	calculation2=Double.parseDouble(string2);
	Assert.assertEquals(calculation2, totalIncome2);
	Reporter.log("Total Capital Allowance verified successfully",true);
	wLib.explicitWait(driver,5,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 60, taxCalSummaryLink);
	taxCalSummaryLink.click();
	total1=n1+n2+n16+n18+n15-(calculation1+n12+n13+n14);
	expResult1=String.format("%.2f",(total1));
	wLib.explicitWait(driver, 5,TotalIncomeReceived);
	actResult1=TotalIncomeReceived.getText().substring(1).replace(",","");
	Assert.assertEquals(actResult1, expResult1);
	Reporter.log("Total income received verified successfully"+actResult1,true);
	tax1=total1-(personalAllowanceRate+n17);
	expResult1=String.format("%.2f",(tax1));
	actResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",","");
	Assert.assertEquals(actResult1, expResult1);
	Reporter.log("Total income on which tax is due verified successfully"+actResult1,true);
	heigherRate=(tax1-taxLimit1Uk)*HR_rate;
	amount3=amount1+heigherRate;
	expResult1=String.format("%.2f",(amount3));
	actResult1=incomeTaxDue.getText().substring(1).replace(",","");
	Assert.assertEquals(actResult1, expResult1);
	Reporter.log("Income Tax due verified successfully"+actResult1,true);
	total2=(total1-(n17+class2UPL))*class2UPLRate/100;
	total3=(class2UPL-class2LPL)*class2LPLRate/100;
	amount4=amount3+(total2 + total3 +(weeksYear*class2Rate));
	expResult1=String.format("%.2f",(amount4));
	actResult1=IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",","");
	Assert.assertEquals(actResult1, expResult1);
	Reporter.log("Income Tax, Class 2 and Class 4 National Insurance contributions due verified successfully"+actResult1,true);
	amount5= amount4-n20;
	expResult1=String.format("%.2f",(amount5));
	actResult1=IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",","");
	 Assert.assertEquals(actResult1, expResult1);
	Reporter.log("Income Tax, Class 2 and Class 4 National Insurance contributions due minus CIS and trading income verified successfully"+actResult1,true);
	actResult2=taxForThisYear.getText().substring(1).replace(",","");
	Assert.assertEquals(actResult2, actResult1);
	Reporter.log("Balance for this year verified successfully"+actResult2,true);
}
//Verifying that Undo Manual Submit Button is enabled or not. If enabled then delete it
public void delundoManualSubmitBtn(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	
	try
	{
do {
	wLib.explicitWait(driver,5,taxReturnLink);
	taxReturnLink.click();
	
} while (submitToHMRC.isDisplayed()==false);
	}
	catch (Exception e) {
System.out.println("Submit to hmrc visible");
	}
	wLib.explicitWait(driver, 5, submitToHMRC);
	submitToHMRC.click();
	
	try
	{
	  undoManualSubmitBtn.click();
	    
	}
	catch (Exception e)
	{
	    System.out.println("undo Manual Submit Button not displayed");
	}
	try
	{
unlockBtn.click();
	    
	}
	catch (Exception e)
	{
	    System.out.println("unlock Button not displayed");
	}
}
public void clickSelfEmpLink(WebDriver driver) throws Exception
{
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 10,selfEmploymentLink);
selfEmploymentLink.click();

try
{
wLib.explicitWait(driver, 10,delButton);
	
if(delButton.isDisplayed()==false) {
do{
	wLib.explicitWait(driver, 10,selfEmploymentLink);
	selfEmploymentLink.click();
Reporter.log("Self employment link is not clicked in first click",true);
}while(delButton.isDisplayed()==false);
} 

}
catch (Exception e) {
	Reporter.log("Self employment link is clicked in first click only",true);
}
}
//Deleting Self employment Short income
public void delSEshort(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	clickIncome(driver);
	clickSelfEmpLink(driver);
	wLib.explicitWait(driver, 10,delButton);
	delButton.click();
	wLib.explicitWait(driver, 10,confDel);
	confDel.click();
}
//Reading SA2018-19.pdf file for Self employment short income
public void readPDF1SE(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
    
 	
	driver.navigate().refresh();
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5,taxReturnLink);
	
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	string1 =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	 Reporter.log("Tax For the year: " +string1,true);
	 string2=class4NationalInsurancecontributions1.getText().substring(1).replace(",","");
	 n1=Double.parseDouble(string2);
	 string3=class4NationalInsurancecontributions2.getText().substring(1).replace(",","");
	 n2=Double.parseDouble(string3);
	 string4=class2NationalInsurancecontributions.getText().substring(1).replace(",","");
	 n3=Double.parseDouble(string4);
	 actualValue1=String.format("%.0f",(n3)).replace("", " ").trim();
	 Reporter.log("class 2 National Insurance Contributions: " +string4,true);
	 total1=n1+n2;
	 expResult1=String.format("%.0f",(total1)).replace("", " ").trim();
	 Reporter.log("class 4 National Insurance Contributions: " +expResult1,true);
    filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
   file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
       // String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        
    Assert.assertTrue(output.contains(string1));
        Reporter.log("Tax for the year Verified: " +string1, true);
        Assert.assertTrue(output.contains(actualValue1));
        Reporter.log("Class 2 National Insurance contributions Verified: " +actualValue1, true);    
        Assert.assertTrue(output.contains(expResult1));
        Reporter.log("class 4 National Insurance Contributions: " +expResult1, true);
        Reporter.log("Self Assessment Forms PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
  
}
//Reading TaxCalculation.pdf file for Self employment short income
public void readPDF2SE(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
    
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver,5, taxReturnLink);	
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,totalIncomeOnWhichTaxIsDue);
	string1 = totalIncomeOnWhichTaxIsDue.getText();
	Reporter.log("Total income on which tax is due: "+string1,true);
	string2=incomeOnWhichTaxCharged.getText();
	 Reporter.log("Total income on which Tax is charged: "+string2,true);
	 string3 =taxForThisYear.getText();
	 Reporter.log("Total tax Balance for the year: "+string3,true);
	 string4 =IncomeTaxCls2andCls4NationalInsurContriDue.getText();
	 Reporter.log("Income Tax Class2 andClacs4 National Insurance Contribution Due: "+string4,true);
	 string5 =IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText();
	 Reporter.log("Income Tax Class2 andClacs4 National Insurance Contribution Due Minus CIS: "+string5,true);
	filePath =path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        //String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Total income on which tax is due Verified Successfully: " +string1, true);
        
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Total income on which Tax is charged verified Successfully: " +string2, true);
       
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Total income on which Tax is charged verified Successfully: " +string3, true);
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Income Tax Class2 andClacs4 National Insurance Contribution Due verified Successfully: " +string4, true);
        Assert.assertTrue(output.contains(string5));
        Reporter.log("Income Tax Class2 andClacs4 National Insurance Contribution Due Minus CIS verified Successfully: " +string5, true);
       
        Reporter.log("Tax Calculation PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
  
}
//Reading Summary.pdf file for Self employment short income
public void readPDF3SE(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 30, taxReturnLink);
 	taxReturnLink.click();
 	wLib.explicitWait(driver, 30, taxCalSummaryLink);
	taxCalSummaryLink.click();
 	wLib.explicitWait(driver, 30, class4NationalInsurancecontributions1);
 	string1=class4NationalInsurancecontributions1.getText().substring(1).replace(",","");
 	Reporter.log(string1,true);
 	n1=Double.parseDouble(string1);
	 string2=class4NationalInsurancecontributions2.getText().substring(1).replace(",","");
	 Reporter.log(string2,true);
	 n2=Double.parseDouble(string2);
	 string3=class2NationalInsurancecontributions.getText();
	 Reporter.log("class 2 National Insurance Contributions: " +string3,true);
	 total1=n1+n2;
	 DecimalFormat df = new DecimalFormat("###,###.##");
	  expResult1="£"+String.format(df.format(total1));
	 Reporter.log("class 4 National Insurance Contributions: " +expResult1,true);
	string4=taxForThisYear.getText(); 
	Reporter.log("Balance Tax for the year: "+string4,true);
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        Reporter.log("Summary Report PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string3));
        Reporter.log("class 2 National Insurance Contributions verified : " +string3, true);
        
        Assert.assertTrue(output.contains(expResult1));
        Reporter.log("class 4 National Insurance Contributions verified :" +expResult1, true);
        
         Assert.assertTrue(output.contains(string4));
        Reporter.log("Balance Tax for the year verified :" +string4, true);
         
        Reporter.log("Self Assessment Summary PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
   }
//Reading Schedule.pdf file for Self employment short income
public void readPDF4SE(WebDriver driver, String Folder, String filename,String s1) throws EmptyFileException, IOException, Exception {
	string1="£"+s1;
	wLib = new WaitStatementLib();
	Reporter.log("Total Income: "+string1,true);
	driver.navigate().refresh();
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        output = new PDFTextStripper().getText(document).replace(",", "").replace(".00", "");
      
        Reporter.log("Employment Income PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Payment received from All Employments verified : " +string1, true);
        
      
        Reporter.log("Tax Schedules PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
    }
//Adding Income from Self Employment Full
public void selfEmplomentFull(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44) throws Exception
{
	wLib = new WaitStatementLib();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();

/*try
{
wLib.explicitWait(driver, 5, delButton);
delButton.click();
wLib.explicitWait(driver, 5,confDel);
confDel.click();
}
catch (Exception e)
{
    System.out.println(e.getMessage());
}*/
try
{
wLib.explicitWait(driver, 5,editFullRecordsSE);
editFullRecordsSE.click();
wLib.explicitWait(driver, 5,adjustmentProfitTxtBox);
adjustmentProfitTxtBox.clear();
adjustmentProfitTxtBox.sendKeys("0");

SaveBtn1.click();
}
catch(Exception e)
{
	System.out.println(e.getMessage());	
}

	//delSAFull(driver);
	
	frm1Btn.click();
	wLib.explicitWait(driver, 5,businessNameTxtBox);
	businessNameTxtBox.clear();
	businessNameTxtBox.sendKeys(str1);
	descriptionofBusinessTxtBox.clear();
	descriptionofBusinessTxtBox.sendKeys(str2);
	businessAddressTxtBox.clear();
	businessAddressTxtBox.sendKeys(str3);
	businessPostCodeTxtBox.clear();
	businessPostCodeTxtBox.sendKeys(str4);
	businessStarteddateTxtBox.clear();
	businessStarteddateTxtBox.sendKeys(dateStart);
	businessCeasedDateTxtBox.clear();
	businessCeasedDateTxtBox.sendKeys(dateEnd);
	booksAccoutsStartDateTxtBox.clear();
	booksAccoutsStartDateTxtBox.sendKeys(dateStart);
	businessBooksEnddateTxtBox.clear();
	businessBooksEnddateTxtBox.sendKeys(dateEnd);
	businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
	incomeExpenseChkBox.click();
	
	//Other Information
	
	changedAccountDateChkBox.click();
	
	//Business Income
	trunoverTxtBox.clear();
	trunoverTxtBox.sendKeys(str5);
	businessIncomeOtherTxtBox.clear();
	businessIncomeOtherTxtBox.sendKeys(str6);
	//Business Expenses
	goodsOfCostfullTxtBox.clear();
	goodsOfCostfullTxtBox.sendKeys(str7);
	goodsDexpTxtBox.clear();
	goodsDexpTxtBox.sendKeys(str8);
	travelexpensesTxtBox.clear();
	travelexpensesTxtBox.sendKeys(str9);
	disexpCarandVanTxtBox.clear();
	disexpCarandVanTxtBox.sendKeys(str10);
	bankCreditandOtherFinancialChargesTxtBox.clear();
	bankCreditandOtherFinancialChargesTxtBox.sendKeys(str11);
	disexpBankCreditTxtBox.clear();
	disexpBankCreditTxtBox.sendKeys(str12);
	depreciationProfitandLossTxtBox.clear();
	depreciationProfitandLossTxtBox.sendKeys(str13);
	disexpDepreciationTxtBox.clear();
	disexpDepreciationTxtBox.sendKeys(str14);
	//Fetch Text
	n1 = Double.parseDouble(str5);
	n2 = Double.parseDouble(str6);
	n3 = Double.parseDouble(str7);
	n4 = Double.parseDouble(str8);
	n5 = Double.parseDouble(str9);
	n6 = Double.parseDouble(str10);
	n7 = Double.parseDouble(str11);
	n8 = Double.parseDouble(str12);
	n9 = Double.parseDouble(str13);
	n10 = Double.parseDouble(str14);
	//Tax allowances for vehicles and equipment (capital allowances)
	annualinvestmentTxtBox.clear();
	annualinvestmentTxtBox.sendKeys(str15);
	capitalAllowancesemissionsTxtBox.clear();
	capitalAllowancesemissionsTxtBox.sendKeys(str16);
	seCapitalAllowancesTxtBox.clear();
	seCapitalAllowancesTxtBox.sendKeys(str17);
	restrictedCostingTxtBox.clear();
	restrictedCostingTxtBox.sendKeys(str18);
	otherEnhancedCapitalAllowancesTxtBox.clear();
	otherEnhancedCapitalAllowancesTxtBox.sendKeys(str19);
	allowancesCessationBusinessTxtBox.clear();
	allowancesCessationBusinessTxtBox.sendKeys(str20);
	n11 = Double.parseDouble(str15);
	n12 = Double.parseDouble(str16);
	n13 = Double.parseDouble(str17);
	n14 = Double.parseDouble(str18);
	n15 = Double.parseDouble(str19);
	n16 = Double.parseDouble(str20);
	
	balancingChargeOnSalesTxtBox.clear();
	balancingChargeOnSalesTxtBox.sendKeys(str21);
	
	goodAndServicesTxtBox.clear();
	goodAndServicesTxtBox.sendKeys(str22);
	n17 = Double.parseDouble(str21);
	n18 = Double.parseDouble(str22);
	businessIncomeandOtherProfitTxtBox.clear();
	businessIncomeandOtherProfitTxtBox.sendKeys(str23);
	n19 = Double.parseDouble(str23);
	basisPeriodBeganTxtBox.clear();
	basisPeriodBeganTxtBox.sendKeys(dateStart);
	basisPeriodEndedTxtBox.clear();
	basisPeriodEndedTxtBox.sendKeys(dateEnd);
	overlapReliefTxtBox.clear();
	overlapReliefTxtBox.sendKeys(str24);
	overlapProfitTxtBox.clear();
	overlapProfitTxtBox.sendKeys(str25);
	n20 = Double.parseDouble(str24);
	n21 = Double.parseDouble(str25);
	lossBroughtForwardProfitTxtBox.clear();
	lossBroughtForwardProfitTxtBox.sendKeys(str26);
	anyBusinessIncomeTxtBox.clear();
	anyBusinessIncomeTxtBox.sendKeys(str27);
	n22 = Double.parseDouble(str26);
	n23 = Double.parseDouble(str27);
	//Losses
	losstoCarryforwardTxtBox.clear();
	losstoCarryforwardTxtBox.sendKeys(str28);
	n24 = Double.parseDouble(str28);
	//CIS Deductions and Tax taken Off
	subContractorsDeductionTaxTxtBox.clear();
	subContractorsDeductionTaxTxtBox.sendKeys(str29);
	n25 = Double.parseDouble(str29);
	//Balance Sheet
	//Assets
	equipMentandMachineryTxtBox.clear();
	equipMentandMachineryTxtBox.sendKeys(str30);
	OtherFixedAssestsTxtBox.clear();
	OtherFixedAssestsTxtBox.sendKeys(str31);
	stockAndWorkTxtBox.clear();
	stockAndWorkTxtBox.sendKeys(str32);
	tradeDebtorsTxtBox.clear();
	tradeDebtorsTxtBox.sendKeys(str33);
	bankSocietyBalancesTxtBox.clear();
	bankSocietyBalancesTxtBox.sendKeys(str34);
	cashinHandTxtBox.clear();
	cashinHandTxtBox.sendKeys(str35);
	currentAssestsandPaymentTxtBox.clear();
	currentAssestsandPaymentTxtBox.sendKeys(str36);
	n26 = Double.parseDouble(str30);
	n27 = Double.parseDouble(str31);
	n28 = Double.parseDouble(str32);
	n29 = Double.parseDouble(str33);
	n30 = Double.parseDouble(str34);
	n31 = Double.parseDouble(str35);
	n32 = Double.parseDouble(str36);
	//Liabilities
	tradeCreditorsTxtBox.clear();
	tradeCreditorsTxtBox.sendKeys(str37);
	loansOverdrawnandBankAccountTxtBox.clear();
	loansOverdrawnandBankAccountTxtBox.sendKeys(str38);
	liabilitiesandAccrualsTxtBox.clear();
	liabilitiesandAccrualsTxtBox.sendKeys(str39);
	n33 = Double.parseDouble(str37);
	n34 = Double.parseDouble(str38);
	n35 = Double.parseDouble(str39);
	//Capital Account
	balanceStartPeriodTxtBox.clear();
	balanceStartPeriodTxtBox.sendKeys(str40);
	n36 = Double.parseDouble(str40);
	capitalIntroducedTxtBox.clear();
	capitalIntroducedTxtBox.sendKeys(str41);
	drawingTxtBox.clear();
	drawingTxtBox.sendKeys(str42);
	n37 = Double.parseDouble(str41);
	n38 = Double.parseDouble(str42);
	//National Insurance Contributions
	adjustmentProfitTxtBox.clear();
	adjustmentProfitTxtBox.sendKeys(str43);
	n39 = Double.parseDouble(str43);
	//Other Information
	commentTxtBox.clear();
	commentTxtBox.sendKeys(str44);
	SaveBtn1.click();
	wLib.explicitWait(driver, 10,editFullRecordsSE);
	editFullRecordsSE.click();
	total1=n3+n5+n7+n9;
	t1=String.format("%.2f",(total1));
	value1=businessExpTotalExpensesTxtBox.getAttribute("value");
	Assert.assertEquals(value1, t1);
	Reporter.log("Total expenses Verified: "+value1,true);
	total2=n4+n6+n8+n10;
	t2=String.format("%.2f",(total2));
	value2=totalDisallowableExpencesTxtBox.getAttribute("value");
	Assert.assertEquals(value2, t2);
	Reporter.log("Total Disallowable expenses Verified: "+value2,true);
	x1=Double.parseDouble(value1);
	totlIncome=(n1+n2)-x1;
	t1=String.format("%.2f",(totlIncome));
	//Net profit or loss - Fetch Text
	string1=netProfitTxtBox.getAttribute("value");
	Assert.assertEquals(string1, t1);
	Reporter.log("Net profit Verified: "+string1,true);
	amount3=n11+n12+n13+n14+n15+n16;
	t1=String.format("%.2f",(amount3));
	string2=totalcapitalallowancesTxtBox.getAttribute("value");
	Assert.assertEquals(string2, t1);
	Reporter.log("Total capital allowances Verified: "+string2,true);
	//Fetched
	x1=Double.parseDouble(value2);
	totalIncome1=n17+n18+x1;
	t1=String.format("%.2f",(totalIncome1));
	t2=totaladditionaltonetprofitTxtBox.getAttribute("value");
	Assert.assertEquals(t2, t1);
	Reporter.log("Total additions to net profit or deductions from net loss Verified: "+t2,true);
	//Fetched
	dueTax1=Double.parseDouble(string2);
	dueTax2=Double.parseDouble(totaldeductiontonetprofitTxtBox.getAttribute("value"));
	dueTax3=Double.parseDouble(netBusinessProfitfortaxpurposeTxtBox.getAttribute("value"));
	Assert.assertEquals(dueTax2, dueTax1+n19);
	Reporter.log("Total deductions from net profit or additions to net loss Verified: "+dueTax2,true);
	totlIncome=Double.parseDouble(string1);
	tax1=Double.parseDouble(t2);
	Assert.assertEquals(dueTax3, (totlIncome+tax1)-dueTax2);
	Reporter.log("Net Business Profit for tax purpose Verified: "+dueTax3,true);
	//Fetched
	total3=dueTax3-n20;
	totalIncome2=Double.parseDouble(adjustedProfitTxtBox.getAttribute("value"));
	Assert.assertEquals(totalIncome2,total3);
	Reporter.log("Adjusted profit for current tax year Verified: "+totalIncome2,true);
	//Fetched
	amount3=totalIncome2+n23-n22;
	amount4=Double.parseDouble(totalProfitFromBusinessTxtBox.getAttribute("value"));
	Assert.assertEquals(amount4,amount3);
	Reporter.log("Total taxable profit from this business Verified: "+amount4,true);
	//Fetched
	totalIncome3=n26+n27+n28+n29+n30+n31+n32;
	amount5=Double.parseDouble(totalAssetsTxtBox.getAttribute("value"));
	Assert.assertEquals(amount5,totalIncome3);
	Reporter.log("Total Assets Verified: "+amount5,true);
	//Fetched
	//Net business assets
	calculation1=amount5-(n33+n34+n35);
	calculation2=Double.parseDouble(netBusinessAssetsTxtBox.getAttribute("value"));
	Assert.assertEquals(calculation2,calculation1);
	Reporter.log("Net Business Assets Verified: "+calculation2,true);
	//Fetched	
	string3=netprofitorlossTxtBox.getAttribute("value");
	Assert.assertEquals(string3,string1);
	Reporter.log("Capital amount Net profit Verified: "+string3,true);
	
	//Fetched
	calculation3=(totlIncome+n36+n37)-n38;
	finalAmount=Double.parseDouble(balanceEndPeriodTxtBox.getAttribute("value"));
	Assert.assertEquals(finalAmount,calculation3);
	Reporter.log("Balance at end of period Verified: "+string3,true);
	wLib.explicitWait(driver, 10,taxReturnLink); 	
	taxReturnLink.click();
 	wLib.explicitWait(driver,5, taxCalSummaryLink);
 	taxCalSummaryLink.click();
 	expResult1=	TotalIncomeReceived.getText().substring(1).replace(",", "");
 	calculation1=Double.parseDouble(expResult1);
 	tot1=totalIncome2+n23;
 	Assert.assertEquals(calculation1,tot1);
	Reporter.log("Total income received Verified: "+calculation1,true);
	expResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	calculation2=Double.parseDouble(expResult1);
	totlIncome=calculation1- (n22 +personalAllowanceRate);
	Assert.assertEquals(calculation2,totlIncome);
	Reporter.log("Total income on which tax is due Verified: "+calculation2,true);
	
	expResult1=incomeTaxDue.getText().substring(1).replace(",", "");
	calculation3=Double.parseDouble(expResult1);
	basic1=calculation2*BR_rate;
	Assert.assertEquals(calculation3,basic1);
	Reporter.log("Income Tax due Verified: "+calculation3,true);
	
	basicRate=basic1+(((calculation1-(class2LPL+n22+n39))*class2LPLRate/100)+(class2Rate*weeksYear));
	basicRate1=String.format("%.2f",(basicRate));
	wLib.explicitWait(driver, 5,IncomeTaxCls2andCls4NationalInsurContriDue);
	expResult1=IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", "");
	taxBalance=Double.parseDouble(expResult1);
	Assert.assertEquals(expResult1,basicRate1);
	Reporter.log("Total Class 2 and Class 4 National Insurance contributions due Verified: "+taxBalance,true);
	finalAmount=basicRate-n25;
	taxFinal=String.format("%.2f",(finalAmount));
	actResult1=IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", "");
	Assert.assertEquals(actResult1,taxFinal);
	Reporter.log("Total Class 2 and Class 4 National Insurance contributions due minus Tax deducted is Verified: "+actResult1,true);
	taxFinalUI= taxForThisYear.getText().substring(1).replace(",", "");
	Assert.assertEquals(taxFinalUI,actResult1);
	Reporter.log("Balance for the year verified: "+taxFinalUI,true);
}
//Deleting Self Employment Full Income
public void delSelfEmpFull(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();

	clickIncome(driver);
	wLib.explicitWait(driver, 10,selfEmploymentLink);
	selfEmploymentLink.click();
	wLib.explicitWait(driver, 10,editFullRecordsSE);
	editFullRecordsSE.click();
	try
	{
		if (adjustmentProfitTxtBox.isDisplayed()==false)
		{
			wLib.explicitWait(driver, 10,editFullRecordsSE);
			editFullRecordsSE.click();	
		}
	}
	catch (Exception e) {
		Reporter.log("Self employment edit button click in first attempt only",true);
	}
	wLib.explicitWait(driver, 10,adjustmentProfitTxtBox);
	adjustmentProfitTxtBox.clear();
	adjustmentProfitTxtBox.sendKeys("0");
	SaveBtn1.click();
	delSAFull(driver);
	
}
//Reading SA2018-19.pdf file for Self Employment Full
public void readPDF1SEFull(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
    
 	
	driver.navigate().refresh();
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 10,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 10,taxForThisYear);
	string1 =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	 Reporter.log("Tax For the year: " +string1,true);
	 string2=class4NationalInsurancecontributions1.getText().substring(1).replace(".","@").replace(",","");
	 String[] newStr=string2.split("@");
	 n1=Double.parseDouble(newStr[0]);
	 string2=String.format("%.0f",(n1)).replace("", " ").trim();
	 Reporter.log("class 4 National Insurance Contributions: " +string2,true);
	 string3=class2NationalInsurancecontributions.getText().substring(1).replace(",","");
	 String[] newStr1=string3.split("@");
	 n2=Double.parseDouble(newStr1[0]);
	 string3=String.format("%.0f",(n2)).replace(".","@").replace("", " ").trim();
	 Reporter.log("class 2 National Insurance Contributions: " +string3,true);
	
    filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
       // String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        
    Assert.assertTrue(output.contains(string1));
        Reporter.log("Tax for the year Verified: " +string1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Class 4 National Insurance contributions Verified: " +string2, true);    
        Assert.assertTrue(output.contains(string3));
        Reporter.log("class 2 National Insurance Contributions: " +string3, true);
        Reporter.log("Self Assessment Forms PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
  }
//Reading TaxCalculation.pdf file for Self Employment Full
public void readPDF2SEFull(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
    
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 10, taxReturnLink);	
	taxReturnLink.click();
 	wLib.explicitWait(driver, 10, taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 10,totalIncomeOnWhichTaxIsDue);
	string1 = totalIncomeOnWhichTaxIsDue.getText();
	Reporter.log("Total income on which tax is due: "+string1,true);
	string2=incomeOnWhichTaxCharged.getText();
	 Reporter.log("Total income on which Tax is charged: "+string2,true);
	 string3 =taxForThisYear.getText();
	 Reporter.log("Total tax Balance for the year: "+string3,true);
	 string4 =IncomeTaxCls2andCls4NationalInsurContriDue.getText();
	 Reporter.log("Income Tax Class2 andClacs4 National Insurance Contribution Due: "+string4,true);
	 string5 =IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText();
	 Reporter.log("Income Tax Class2 andClacs4 National Insurance Contribution Due Minus CIS: "+string5,true);
	filePath =path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        //String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Total income on which tax is due Verified Successfully: " +string1, true);
        
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Total income on which Tax is charged verified Successfully: " +string2, true);
       
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Total income on which Tax is charged verified Successfully: " +string3, true);
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Income Tax Class2 andClacs4 National Insurance Contribution Due verified Successfully: " +string4, true);
        Assert.assertTrue(output.contains(string5));
        Reporter.log("Income Tax Class2 andClacs4 National Insurance Contribution Due Minus CIS verified Successfully: " +string5, true);
       
        Reporter.log("Tax Calculation PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
   }
//Reading Summary.pdf file for Self Employment Full
public void readPDF3SEFull(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 60, taxReturnLink);
 	taxReturnLink.click();
 	wLib.explicitWait(driver, 60, taxCalSummaryLink);
	taxCalSummaryLink.click();
 	string1=class4NationalInsurancecontributions1.getText();
 	Reporter.log(string1,true);
 	 Reporter.log("class 4 National Insurance Contributions: " +string1,true);
 	string2=class2NationalInsurancecontributions.getText();
	 Reporter.log("class 2 National Insurance Contributions: " +string2,true);
	string3=taxForThisYear.getText(); 
	Reporter.log("Balance Tax for the year: "+string3,true);
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
     URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        Reporter.log("Summary Report PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string1));
        Reporter.log("class 4 National Insurance Contributions verified :" +string1, true);
        
        Assert.assertTrue(output.contains(string2));
        Reporter.log("class 2 National Insurance Contributions verified : " +string2, true);
        
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Balance Tax for the year verified :" +string3, true);
         
        Reporter.log("Self Assessment Summary PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
  }
//Reading Schedule.pdf file for Self Employment Full
public void readPDF4SEFull(WebDriver driver, String Folder, String filename,String s1) throws EmptyFileException, IOException, Exception {
	wLib = new WaitStatementLib();
	string1="£"+s1;
	Reporter.log("Total Income: "+string1,true);
	driver.navigate().refresh();
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    file1=filePath + Folder + filename;
    
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        output = new PDFTextStripper().getText(document).replace(",", "").replace(".00", "");
      
        Reporter.log("Employment Income PDF data: " +output, true);
        
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Payment received from All Employments verified : " +string1, true);
        
      
        Reporter.log("Tax Schedules PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
   }


public void uploadFile(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	clickIncome(driver);
	 
	 linkCapitalGain.click();
	 wLib.explicitWait(driver, 5,editBtn);
	 editBtn.click();
	descriptionTxtBox.clear();
	descriptionTxtBox.sendKeys("capital gain record");
	WebElement uploadElement = fileUpload1;
	uploadElement.clear();
	uploadElement.sendKeys("C:\\Users\\Administrator\\Desktop\\SA2017-18.pdf");
	commentTxtBox.clear();
	commentTxtBox.sendKeys("test");
	SaveBtn1.click();
  
	
}
public void capitalGainFormValidate(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26) throws Exception {
	
	wLib = new WaitStatementLib();
	try
	 {
 do {
wLib.explicitWait(driver, 5,IncomeLink);
IncomeLink.click();
} while (linkCapitalGain.isDisplayed()==false);

 	selfEmploymentLink.click();
	wLib.explicitWait(driver, 2,editFullRecordsSE);
	if(editFullRecordsSE.isDisplayed()==true) {
	editFullRecordsSE.click();
	wLib.explicitWait(driver, 5,adjustmentProfitTxtBox);
	adjustmentProfitTxtBox.clear();
	adjustmentProfitTxtBox.sendKeys("0");
	SaveBtn1.click();
	delSAFull(driver);
	
}
	 }
	 catch (Exception e) {
System.out.println("Self Employment Full is not available");
	}
	try
	 {
wLib.explicitWait(driver, 2,linkCapitalGain);
if(linkCapitalGain.isDisplayed()==false) {

clickIncome(driver);
} 
	 }
	catch (Exception e) {
System.out.println("Link Capital Gain is visible");
	}
	wLib.explicitWait(driver, 2,linkCapitalGain);
	 linkCapitalGain.click();
	 wLib.explicitWait(driver, 30,editBtn);
	 editBtn.click();
	wLib.explicitWait(driver, 2,residentialPropertyNumberOfDisposalsTxtBox);
	residentialPropertyNumberOfDisposalsTxtBox.clear();
residentialPropertyNumberOfDisposalsTxtBox.sendKeys(str1);
residentialPropertyDisposalProceedsTxtBox.clear();
residentialPropertyDisposalProceedsTxtBox.sendKeys(str2);
residentialPropertyAllowableCostsTxtBox.clear();
residentialPropertyAllowableCostsTxtBox.sendKeys(str3);
residentialPropertyGainsInTheYearTxtBox.clear();
residentialPropertyGainsInTheYearTxtBox.sendKeys(str4);
residentialPropertyLossesInTheYearTxtBox.clear();
residentialPropertyLossesInTheYearTxtBox.sendKeys(str5);
residentialPropertyClaimOrElectionMadeTxtBox.clear();
residentialPropertyClaimOrElectionMadeTxtBox.sendKeys(str6);
residentialPropertyGainOrLossRelatingToNRCGTTxtBox.clear();
residentialPropertyGainOrLossRelatingToNRCGTTxtBox.sendKeys(str7);
residentialPropertyNRCGTtaxAlreadyChargedTxtBox.clear();
residentialPropertyNRCGTtaxAlreadyChargedTxtBox.sendKeys(str8);
residentialPropertyGainOrLossFromRTTreturnTxtBox.clear();
residentialPropertyGainOrLossFromRTTreturnTxtBox.sendKeys(str9);
residentialPropertyRTTtaxAlreadyChargedTxtBox.clear();
residentialPropertyRTTtaxAlreadyChargedTxtBox.sendKeys(str10);
residentialPropertyCarriedInterestTxtBox.clear();
residentialPropertyCarriedInterestTxtBox.sendKeys(str11);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str1);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str2);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str3);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str12);
propertyEtcAttributedGainTxtBox.clear();
propertyEtcAttributedGainTxtBox.sendKeys(str5);
propertyEtcLossesInTheYearTxtBox.clear();
propertyEtcLossesInTheYearTxtBox.sendKeys(str13);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str14);
propertyEtcGainFromRTTreturnTxtBox.clear();
propertyEtcGainFromRTTreturnTxtBox.sendKeys(str9);
propertyEtcRTTtaxAlreadyChargedTxtBox.clear();
propertyEtcRTTtaxAlreadyChargedTxtBox.sendKeys(str15);
//Listed shares and securities
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str1);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str2);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str3);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str16);
qSLossesInTheYearTxtBox.clear();
qSLossesInTheYearTxtBox.sendKeys(str5);
qSClaimOrElectionMadeTxtBox.clear();
qSClaimOrElectionMadeTxtBox.sendKeys(str17);
qSGainFromRTTreturnTxtBox.clear();
qSGainFromRTTreturnTxtBox.sendKeys(str9);
qSRTTtaxAlreadyChargedTxtBox.clear();
qSRTTtaxAlreadyChargedTxtBox.sendKeys(str15);
//Unlisted shares and securities
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str1);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str2);
uQSCostsAndIndexationTxtBox.clear();
uQSCostsAndIndexationTxtBox.sendKeys(str3);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str16);
uQSLossesInTheYearTxtBox.clear();
uQSLossesInTheYearTxtBox.sendKeys(str18);
uQSClaimOrElectionMadeTxtBox.clear();
uQSClaimOrElectionMadeTxtBox.sendKeys(str19);
uQSGainFromRTTreturnTxtBox.clear();
uQSGainFromRTTreturnTxtBox.sendKeys(str9);
uQSRTTtaxAlreadyChargedTxtBox.clear();
uQSRTTtaxAlreadyChargedTxtBox.sendKeys(str15);
uQSGainsExceedingESSlimitTxtBox.clear();
uQSGainsExceedingESSlimitTxtBox.sendKeys(str20);
uQSGainsInvestedUnderSeedEISTxtBox.clear();
uQSGainsInvestedUnderSeedEISTxtBox.sendKeys(str21);
uQSLossUsedAgainstCurrentYearIncomeTxtBox.clear();
uQSLossUsedAgainstCurrentYearIncomeTxtBox.sendKeys(str22);
uQSUncappedLossUsedAgainstCurrentYearIncomeTxtBox.clear();
uQSUncappedLossUsedAgainstCurrentYearIncomeTxtBox.sendKeys(str9);
uQSLossUsedAgainstPrevYearIncomeTxtBox.clear();
uQSLossUsedAgainstPrevYearIncomeTxtBox.sendKeys(str20);
uQSUncappedLossUsedAgainstPrevYearIncomeTxtBox.clear();
uQSUncappedLossUsedAgainstPrevYearIncomeTxtBox.sendKeys(str15);
//Losses and adjustments
lossBFAndUsedInYearTxtBox.clear();
lossBFAndUsedInYearTxtBox.sendKeys(str23);
incomeLossesOfTheYearSetAgainstGainTxtBox.clear();
incomeLossesOfTheYearSetAgainstGainTxtBox.sendKeys(str21);
lossToBeCarriedForwardTxtBox.clear();
lossToBeCarriedForwardTxtBox.sendKeys(str22);
lossUsedAgainstEarlierYearsGainTxtBox.clear();
lossUsedAgainstEarlierYearsGainTxtBox.sendKeys(str16);
entrepreneurReliefClaimOnDefGainBefore23June2010TxtBox.clear();
entrepreneurReliefClaimOnDefGainBefore23June2010TxtBox.sendKeys(str20);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str21);
adjustmentToCGTTxtBox.clear();
adjustmentToCGTTxtBox.sendKeys(str22);
nRDRTrustLiabilityTxtBox.clear();
nRDRTrustLiabilityTxtBox.sendKeys(str16);
//Not an integer value str6	str14 str17	str19	str24	str25	str26
n1=Double.parseDouble(str1);
n2=Double.parseDouble(str2);
n3=Double.parseDouble(str3);
n4=Double.parseDouble(str4);
n5=Double.parseDouble(str5);
n6=Double.parseDouble(str7);
n7=Double.parseDouble(str8);
n8=Double.parseDouble(str9);
n9=Double.parseDouble(str10);
n10=Double.parseDouble(str11);
n11=Double.parseDouble(str12);
n12=Double.parseDouble(str13);
n13=Double.parseDouble(str15);
n14=Double.parseDouble(str16);
n15=Double.parseDouble(str18);
n16=Double.parseDouble(str20);
n17=Double.parseDouble(str21);
n18=Double.parseDouble(str22);
n19=Double.parseDouble(str23);
total1=(n4-n5)+(n11-n12)+(n14-n5)+(n14-n15);
expResult1=String.format("%.2f",total1);
//Upload PDF
descriptionTxtBox.clear();
descriptionTxtBox.sendKeys(str24);
WebElement uploadElement = fileUpload1;
uploadElement.clear();
uploadElement.sendKeys(str25);
commentTxtBox.clear();
commentTxtBox.sendKeys(str26);
SaveBtn1.click();
wLib.explicitWait(driver, 5,totalGainTxtBox);
actResult1=totalGainTxtBox.getAttribute("value");
totalincome=Double.parseDouble(actResult1);
Assert.assertEquals(actResult1, expResult1);
Reporter.log("TOTAL GAINS Verified Successfully : "+actResult1,true);	 
wLib = new WaitStatementLib();	
taxReturnLink.click();
wLib.explicitWait(driver, 60, taxCalSummaryLink);
taxCalSummaryLink.click();
totalincome=totalincome-annualExemptIndividuals+n6+n5+n18+n16-n19-n17;
calculation1=n17*entrepreneursReliefRate/100;
calculation2=(taxLimit1Uk-n17)*entrepreneursReliefRate/100;
calculation3=(totalincome-taxLimit1Uk)*BR_rate;
tot1=n18+n14-(n7+n9+n13+n13+n13);
fnltax=calculation1+calculation2+calculation3+tot1;
taxFinal=String.format("%.2f",fnltax);
taxFinalUI=taxForThisYear.getText().substring(1).replace(",","");
Assert.assertEquals(taxFinalUI, taxFinal);
Reporter.log("Final Tax for the year Verified Successfully : "+taxFinalUI,true);
}
public void readPDFCapitalGain(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
    
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,linkCapitalGain);
	 linkCapitalGain.click();
wLib.explicitWait(driver, 5,residentialPropertyNumberOfDisposalsTxtBox);
	 
string1=residentialPropertyNumberOfDisposalsTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string2=residentialPropertyDisposalProceedsTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string3=residentialPropertyAllowableCostsTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string4=residentialPropertyGainsInTheYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string5=residentialPropertyLossesInTheYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string6=residentialPropertyClaimOrElectionMadeTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string7=residentialPropertyGainOrLossRelatingToNRCGTTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string8=residentialPropertyNRCGTtaxAlreadyChargedTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string9=residentialPropertyGainOrLossFromRTTreturnTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string10=residentialPropertyRTTtaxAlreadyChargedTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string11=residentialPropertyCarriedInterestTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();

string12=propertyEtcTotalDisposalTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string13=propertyEtcDisposalProceedTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string14=propertyEtcCostsAndIndexationTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string15=propertyEtcGainsInTheYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string16=propertyEtcAttributedGainTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string17=propertyEtcLossesInTheYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string18=propertyEtcClaimOrElectionMadeTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string19=propertyEtcGainFromRTTreturnTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string20=propertyEtcRTTtaxAlreadyChargedTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();

string21=qSTotalDisposalTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string22=qSDisposalProceedTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string23=qSCostsAndIndexationTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string24=qSGainsInTheYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string25=qSLossesInTheYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string26=qSClaimOrElectionMadeTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string27=qSGainFromRTTreturnTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string28=qSRTTtaxAlreadyChargedTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();

string29=uQSTotalDisposalTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string30=uQSDisposalProceedTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string31=uQSCostsAndIndexationTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string32=uQSGainsInTheYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string33=uQSLossesInTheYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string34=uQSClaimOrElectionMadeTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string35=uQSGainFromRTTreturnTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string36=uQSRTTtaxAlreadyChargedTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string37=uQSGainsExceedingESSlimitTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string38=uQSGainsInvestedUnderSeedEISTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string39=uQSLossUsedAgainstCurrentYearIncomeTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string40=uQSUncappedLossUsedAgainstCurrentYearIncomeTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string41=uQSLossUsedAgainstPrevYearIncomeTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string42=uQSUncappedLossUsedAgainstPrevYearIncomeTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();

string43=lossBFAndUsedInYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string44=incomeLossesOfTheYearSetAgainstGainTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string45=lossToBeCarriedForwardTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string46=lossUsedAgainstEarlierYearsGainTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string47=entrepreneurReliefClaimOnDefGainBefore23June2010TxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string48=totalERGainForTheYearTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string49=adjustmentToCGTTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string50=nRDRTrustLiabilityTxtBox.getAttribute("value").replaceAll(".00", "").replace("", " ").trim();
string51=commentTxtBox.getAttribute("value");
driver.navigate().refresh();
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 60, taxReturnLink);
taxReturnLink.click();

taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,taxForThisYear);
totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
 Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 
filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
       // String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        
    Assert.assertTrue(output.contains(string1));
        Reporter.log("Number of disposals Verified: " +string1, true);
        
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Disposal proceeds verified: " +string2, true);
        
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Allowable costs verified Successfully : " +string3, true);
        
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Gains in the year, before losses, do not include any gains subject to non-resident Capital Gains Tax verified Successfully : " +string4, true);
        Assert.assertTrue(output.contains(string5));
        Reporter.log("Losses in the year (B)do not include any losses incurred on the disposal of a property subject to non-resident Capital Gains Tax Verified: " +string5, true);
        Assert.assertTrue(output.contains(string6));
        Reporter.log("If you are making any claim or election, put the relevant code in the box Verified: " +string6, true);
        Assert.assertTrue(output.contains(string7));
        Reporter.log("NRCGT Verified: " +string7, true);
        Assert.assertTrue(output.contains(string8));
        Reporter.log("Tax on gains in box above already charged Verified: " +string8, true);
        Assert.assertTrue(output.contains(string9));
        Reporter.log("overall gain or loss Verified: " +string9, true);
        Assert.assertTrue(output.contains(string10));
        Reporter.log("Tax on gains in box above already charged Verified: " +string10, true);
        Assert.assertTrue(output.contains(string11));
        Reporter.log("Pay from all employments Verified: " +string11, true);
        Assert.assertTrue(output.contains(string12));
        Reporter.log("Other property, assets and gains - Number of disposals Verified: " +string12, true);
        Assert.assertTrue(output.contains(string13));
        Reporter.log("Other property, assets and gains - Disposal proceeds Verified: " +string13, true);
        Assert.assertTrue(output.contains(string14));
        Reporter.log("Other property, assets and gains -Allowable costs (including purchase price) Verified: " +string14, true);
        Assert.assertTrue(output.contains(string15));
        Reporter.log("Other property, assets and gains -Gains in the year, before losse Verified: " +string15, true);
        Assert.assertTrue(output.contains(string16));
        Reporter.log("Other property, assets and gains - Attributed gains where personal losses cannot be set off Verified: " +string16, true);
        Assert.assertTrue(output.contains(string17));
        Reporter.log("Other property, assets and gains - Losses in the year Verified: " +string17, true);
        Assert.assertTrue(output.contains(string18));
        Reporter.log("Other property, assets and gains - If you are making any claim or election, put the relevant code in the box Verified: " +string18, true);
        Assert.assertTrue(output.contains(string19));
        Reporter.log("Other property, assets and gains - overall gain	or loss include the individual amounts of gains Verified: " +string19, true);
        Assert.assertTrue(output.contains(string20));
        Reporter.log("Other property, assets and gains - Tax on gains in box above already charged Verified: " +string20, true);
        Assert.assertTrue(output.contains(string21));
        Reporter.log("Listed shares and securities - Number of disposals Verified: " +string21, true);
        Assert.assertTrue(output.contains(string22));
        Reporter.log("Listed shares and securities - Disposal proceeds Verified: " +string22, true);
        Assert.assertTrue(output.contains(string23));
        Reporter.log("Listed shares and securities - Allowable costs (including purchase price) Verified: " +string23, true);
        Assert.assertTrue(output.contains(string24));
        Reporter.log("Listed shares and securities - Gains in the year, before losses Verified: " +string24, true);
        Assert.assertTrue(output.contains(string25));
        Reporter.log("Listed shares and securities - Losses in the year Verified: " +string25, true);
        Assert.assertTrue(output.contains(string26));
        Reporter.log("Listed shares and securities - If you are making any claim or election, put the relevant code in the box Verified: " +string26, true);
        Assert.assertTrue(output.contains(string27));
        Reporter.log("Listed shares and securities - gain or	loss include the individual amounts of gains and losses Verified: " +string27, true);
        Assert.assertTrue(output.contains(string28));
        Reporter.log("Listed shares and securities - Tax on gains in box above already charged Verified: " +string28, true);
        Assert.assertTrue(output.contains(string29));
        Reporter.log("Unlisted shares and securities - Number of disposals Verified: " +string29, true);
        Assert.assertTrue(output.contains(string30));
        Reporter.log("Unlisted shares and securities - Disposal proceeds Verified: " +string30, true);
        Assert.assertTrue(output.contains(string31));
        Reporter.log("Unlisted shares and securities - Allowable costs (including purchase price) Verified: " +string31, true);
        Assert.assertTrue(output.contains(string32));
        Reporter.log("Unlisted shares and securities - Gains in the year, before losses Verified: " +string32, true);
        Assert.assertTrue(output.contains(string33));
        Reporter.log("Unlisted shares and securities - Losses in the year Verified: " +string33, true);
        Assert.assertTrue(output.contains(string34));
        Reporter.log("Unlisted shares and securities - any claim or election Verified: " +string34, true);
        Assert.assertTrue(output.contains(string35));
        Reporter.log("Unlisted shares and securities -  overall gain or loss individual amounts of gains Verified: " +string35, true);
        Assert.assertTrue(output.contains(string36));
        Reporter.log("Unlisted shares and securities - Tax on gains in box above already charged Verified: " +string36, true);
        Assert.assertTrue(output.contains(string37));
        Reporter.log("Unlisted shares and securities - Gains exceeding the lifetime limit for Employee Shareholder Status shares Verified: " +string37, true);
        Assert.assertTrue(output.contains(string38));
        Reporter.log("Unlisted shares and securities - Gains invested under Seed Enterprise Investment	Scheme and qualifying for relief Verified: " +string38, true);
        Assert.assertTrue(output.contains(string39));
        Reporter.log("Unlisted shares and securities - Losses used against income amount claimed against 2017 - 18 income Verified: " +string39, true);
        Assert.assertTrue(output.contains(string40));
        Reporter.log("Unlisted shares and securities - Share Loss Relief which Enterprise Investment Scheme/Seed Enterprise Investment Scheme relief is attributable Verified: " +string40, true);
        Assert.assertTrue(output.contains(string41));
        Reporter.log("Unlisted shares and securities - Losses used against income amount claimed against 2016 - 17 income Verified: " +string41, true);
        Assert.assertTrue(output.contains(string42));
        Reporter.log("Unlisted shares and securities - Losses used against income amount claimed against 2016 - 17 income Verified: " +string42, true);
        Assert.assertTrue(output.contains(string43));
        Reporter.log("Losses and adjustments - Losses brought forward and used in-year Verified: " +string43, true);
        Assert.assertTrue(output.contains(string44));
        Reporter.log("Losses and adjustments - Income losses of 2017 - 18 set against gains Verified: " +string44, true);
        Assert.assertTrue(output.contains(string45));
        Reporter.log("Losses and adjustments - Losses available to be carried forward	 Verified: " +string45, true);
        Assert.assertTrue(output.contains(string46));
        Reporter.log("Losses and adjustments - Losses used against an earlier year's gain Verified: " +string46, true);
        Assert.assertTrue(output.contains(string47));
        Reporter.log("Losses and adjustments - Gains qualifying for Entrepreneurs’ Relief Gains before 23 June 2010 Verified: " +string47, true);
        Assert.assertTrue(output.contains(string48));
        Reporter.log("Losses and adjustments - Gains qualifying for Entrepreneurs’ Relief Gains after 23 June 2010 Verified: " +string48, true);
        Assert.assertTrue(output.contains(string49));
        Reporter.log("Losses and adjustments - Adjustments to Capital Gains Tax Verified: " +string49, true);
        Assert.assertTrue(output.contains(string50));
        Reporter.log("Losses and adjustments - Additional liability for non-resident or dual resident trusts Verified: " +string50, true);
        Assert.assertTrue(output.contains(string51));
        Reporter.log("Any Other Information Verified: " +string51, true);
        
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Income and Capital Gains Tax due Verified: " +totIncomTaxChar, true);
        
        Reporter.log("Self Assessment Forms PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
    }
public void delCGI(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,linkCapitalGain);
	linkCapitalGain.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	try {
wLib.explicitWait(driver,2,confirmDel);
if(confirmDel.isDisplayed()==true)
{
	wLib.explicitWait(driver, 5,confirmDel);
	confirmDel.click();
	wLib.explicitWait(driver, 5,popup1);
	driver.switchTo().activeElement();
	yesBtn.click();
	}
	}
	catch(Exception e){
Reporter.log("Delete button is not available",true);
	}
}

public void addPensionTaxRelief(WebDriver driver, String str1, String str2, String str3, String str4) throws Exception {
	wLib = new WaitStatementLib();
	delCGI(driver);
	addPensionTaxReliefForm(driver,str1, str2, str3, str4);
	wLib.explicitWait(driver, 10,form1OpenBtn);
	form1OpenBtn.click();
	
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,retirementAnnuityContractPaymentsTxtBox);
	string1=retirementAnnuityContractPaymentsTxtBox.getAttribute("value");
	string2=employerPensionSchemePaymentsTxtBox.getAttribute("value");
	string3=nonUKOverseasPensionSchemePaymentsTxtBox.getAttribute("value");
	string4=paymentsToRegisteredPensionSchemesTxtBox.getAttribute("value");
	savePensionBtn.click();
	n1=Double.parseDouble(string1);
	n2=Double.parseDouble(string2);
	n3=Double.parseDouble(string3);
	n4=Double.parseDouble(string4);
	total1=n1+n2+n3;
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string4=payFrmEmployer.getAttribute("value");
	string5=PrvtMedAndDntl.getAttribute("value");
	string6=BusnsTrvlAndSubstancTxtBox.getAttribute("value");
	popUpCancelBtn.click();
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,payFromAllEmployments);
	
	displayTotal=payFromAllEmployments.getText().substring(1).replace(",", "");
	Assert.assertEquals(displayTotal, string4);
	Reporter.log("Payment From employer verified: "+displayTotal, true);
	FinalCalculation=benefitAndExpensesReceived.getText().substring(1).replace(",", "");
	Assert.assertEquals(FinalCalculation, string5);
	Reporter.log("Private medical and dental insurance verified: "+FinalCalculation, true);
	FinalCalculation1=allowableExpenses.getText().substring(1).replace(",", "");
	Assert.assertEquals(FinalCalculation1, string6);
	Reporter.log("Business travel and subsistence expenses verified: "+FinalCalculation1, true);
	value1=TotalFromAllEmployment.getText().substring(1).replace(",", "");
	
	value2=TotalIncomeReceived.getText().substring(1).replace(",", "");
	Assert.assertEquals(value2, value1);
	Reporter.log("Total income received verifie : "+value2, true);
	totlIncome=Double.parseDouble(value2);
	totalIncome1=totlIncome-total1;
	expResult1=String.format("%.2f",totalIncome1);
	totIncomTaxChar=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	Assert.assertEquals(totIncomTaxChar, expResult1);
	Reporter.log("Total income on which tax is due verifie : "+totIncomTaxChar, true);
	calculation1=(taxLimit1Uk+n4)*BR_rate;
	calculation2=(totalIncome1-(taxLimit1Uk+n4))*HR_rate;
	finalAmount=calculation1+calculation2;
	taxFinal=String.format("%.2f",finalAmount);
	taxFinalUI=taxForThisYear.getText().substring(1).replace(",", "");
	Assert.assertEquals(taxFinalUI, taxFinal);
	Reporter.log("Balance for this year verified : "+taxFinalUI, true);
	dashBoardClient.click();
	dashBoardTotal=finalIncome.getText().substring(1).replace(",", "");
	Assert.assertEquals(value1, dashBoardTotal);
	Reporter.log("Total Income verified: "+value1, true);
}
public void readPDFPensionTaxRelief(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,paymentsToRegisteredPensionSchemesTxtBox);
	string1=paymentsToRegisteredPensionSchemesTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	string2=retirementAnnuityContractPaymentsTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	string3=employerPensionSchemePaymentsTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	string4=nonUKOverseasPensionSchemePaymentsTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	savePensionBtn.click();
	wLib.explicitWait(driver, 5,IncomeLink);
	IncomeLink.click();
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string5=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();
	string6=PrvtMedAndDntl.getAttribute("value").replace(".00","").replace("", " ").trim();
	string7=BusnsTrvlAndSubstancTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	popUpCancelBtn.click();	
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
       // String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Payments to registered pension schemes where basic rate tax relief will be claimed by your pension provider (called ‘relief at source’). Enter the payments and basic rate tax : Verified Successfully: " +string1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Payments to a retirement annuity contract where basic rate tax relief will not be claimed by your provider  verified: " +string2, true);
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Payments to your employer’s scheme which were not deducted from your pay before tax verified Successfully : " +string3, true);
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Payments to an overseas pension scheme which is not UK-registered which are eligible for tax relief and were not deducted from your pay before tax verified Successfully : " +string4, true);
        Assert.assertTrue(output.contains(string5));
        Reporter.log("Pay from this employment Verified Successfully: " +string5, true);
        Assert.assertTrue(output.contains(string6));
        Reporter.log("Private medical and dental insurance Verified Successfully: " +string6, true);
        Assert.assertTrue(output.contains(string7));
        Reporter.log("Business travel and subsistence expenses Verified Successfully: " +string7, true);
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Total Tax due Verified: " +totIncomTaxChar, true);
        Reporter.log("Self Assessment Forms PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
 
}
public void delPensionTaxRelief(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	
	cis=new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,paymentsToRegisteredPensionSchemesTxtBox);
	paymentsToRegisteredPensionSchemesTxtBox.clear();
	employerPensionSchemePaymentsTxtBox.clear();
	retirementAnnuityContractPaymentsTxtBox.clear();
	nonUKOverseasPensionSchemePaymentsTxtBox.clear();
	wLib.explicitWait(driver,5,savePensionBtn);
	savePensionBtn.click();
	
}
public void addPensionTaxReliefForm(WebDriver driver, String str1, String str2, String str3, String str4) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	
	cis=new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,paymentsToRegisteredPensionSchemesTxtBox);
	paymentsToRegisteredPensionSchemesTxtBox.clear();
	paymentsToRegisteredPensionSchemesTxtBox.sendKeys(str1);
	retirementAnnuityContractPaymentsTxtBox.clear();
	retirementAnnuityContractPaymentsTxtBox.sendKeys(str2);
	employerPensionSchemePaymentsTxtBox.clear();
	employerPensionSchemePaymentsTxtBox.sendKeys(str3);
	nonUKOverseasPensionSchemePaymentsTxtBox.clear();
	nonUKOverseasPensionSchemePaymentsTxtBox.sendKeys(str4);
	wLib.explicitWait(driver,5,savePensionBtn);
	savePensionBtn.click();
	
}
public void addCharitableGiving(WebDriver driver,String str1, String str2, String str3, String str4) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	
	try
	{
wLib.explicitWait(driver, 5,deleteCharityRecords);
if(deleteCharityRecords.isDisplayed()==true)
{
	deleteCharityRecords.click();
	
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,cnfmdel);
	cnfmdel.click();
	
	}
	}
	catch (Exception e) {
System.out.println("Charitable record not available");
	}
	wLib.explicitWait(driver, 5,openCharitableForm);
	openCharitableForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,dateTxtBox);
	dateTxtBox.clear();
	dateTxtBox.sendKeys(dateStart1);
	sharesOrSecuritiesGiftedToCharityTxtBox.clear();
	sharesOrSecuritiesGiftedToCharityTxtBox.sendKeys(str1);
	descriptionTxtBox.clear();
	descriptionTxtBox.sendKeys(str2);
	landAndBuildingsGiftedToCharityTxtBox.clear();
	landAndBuildingsGiftedToCharityTxtBox.sendKeys(str3);
	investmentsGiftedToNonUKCharitiesTxtBox.clear();
	investmentsGiftedToNonUKCharitiesTxtBox.sendKeys(str4);
	SaveBtn2.click();
	wLib.explicitWait(driver, 5,editCharityRecords);
	editCharityRecords.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,sharesOrSecuritiesGiftedToCharityTxtBox);
	string1=sharesOrSecuritiesGiftedToCharityTxtBox.getAttribute("value");
	string2=landAndBuildingsGiftedToCharityTxtBox.getAttribute("value");
	SaveBtn2.click();
	n1=Double.parseDouble(string1);
	n2=Double.parseDouble(string2);
	total1=n1+n2;
	clickIncome(driver);
	wLib.explicitWait(driver,5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string3=payFrmEmployer.getAttribute("value");
	string4=PrvtMedAndDntl.getAttribute("value");
	string5=BusnsTrvlAndSubstancTxtBox.getAttribute("value");
	popUpCancelBtn.click();
	wLib.explicitWait(driver,5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,payFromAllEmployments);
	
	displayTotal=payFromAllEmployments.getText().substring(1).replace(",", "");
	Assert.assertEquals(displayTotal, string3);
	Reporter.log("Payment From employer verified: "+displayTotal, true);
	FinalCalculation=benefitAndExpensesReceived.getText().substring(1).replace(",", "");
	Assert.assertEquals(FinalCalculation, string4);
	Reporter.log("Private medical and dental insurance verified: "+FinalCalculation, true);
	FinalCalculation1=allowableExpenses.getText().substring(1).replace(",", "");
	Assert.assertEquals(FinalCalculation1, string5);
	Reporter.log("Business travel and subsistence expenses verified: "+FinalCalculation1, true);
	value1=TotalFromAllEmployment.getText().substring(1).replace(",", "");
	value2=TotalIncomeReceived.getText().substring(1).replace(",", "");
	Assert.assertEquals(value2, value1);
	Reporter.log("Total income received verified : "+value2, true);
	totlIncome=Double.parseDouble(value2);
	totalIncome1=totlIncome-total1;
	expResult1=String.format("%.2f",totalIncome1);
	totIncomTaxChar=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	Assert.assertEquals(totIncomTaxChar, expResult1);
	Reporter.log("Total income on which tax is due verifie : "+totIncomTaxChar, true);
	amount3=(totalIncome1-taxLimit1Uk)*HR_rate;
	finalAmount=amount1+amount3;
	taxFinal=String.format("%.2f",finalAmount);
	taxFinalUI=taxForThisYear.getText().substring(1).replace(",", "");
	Assert.assertEquals(taxFinalUI, taxFinal);
	Reporter.log("Balance for this year verified : "+taxFinalUI, true);
	dashBoardClient.click();
	dashBoardTotal=finalIncome.getText().substring(1).replace(",", "");
	Assert.assertEquals(value1, dashBoardTotal);
	Reporter.log("Total Income verified: "+value1, true);
}
public void checkPdfEntryCharitableGiving(WebDriver driver, String Folder, String filename) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,editCharityRecords);
	editCharityRecords.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,sharesOrSecuritiesGiftedToCharityTxtBox);
	string1=sharesOrSecuritiesGiftedToCharityTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	string2=landAndBuildingsGiftedToCharityTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	string3=investmentsGiftedToNonUKCharitiesTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	cancelBtn.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string4=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();
	
	string5=PrvtMedAndDntl.getAttribute("value").replace(".00","").replace("", " ").trim();
	
	string6=BusnsTrvlAndSubstancTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	
	popUpCancelBtn.click();	
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Value of qualifying shares or securities gifted to charity Verified Successfully: " +string1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Value of qualifying land and buildings gifted to charity verified Successfully: " +string2, true);
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Value of qualifying investments gifted to non-UK charities verified Successfully : " +string3, true);
          Assert.assertTrue(output.contains(string4));
        Reporter.log("Pay from this employment Verified Successfully: " +string4, true);
        Assert.assertTrue(output.contains(string5));
        Reporter.log("Private medical and dental insurance Verified Successfully: " +string5, true);
        Assert.assertTrue(output.contains(string6));
        Reporter.log("Business travel and subsistence expenses Verified Successfully: " +string6, true);
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Total Tax due Verified: " +totIncomTaxChar, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
}
public void delCharitableGiving(WebDriver driver) throws Exception
{
	
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,deleteCharityRecords);
	deleteCharityRecords.click();
	
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,cnfmdel);
	cnfmdel.click();
	
}
public void AddgiftAidPaymentFull(WebDriver driver,String str1, String str2, String str3) throws Exception
{
wLib = new WaitStatementLib();
cis=new CISPage(driver);
wLib.explicitWait(driver, 5,linkGiftAidpayment);
linkGiftAidpayment.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,dateTxtBox);
dateTxtBox.clear();
dateTxtBox.sendKeys(dateStart);
giftAidPaymentsMadeInYearTxtBox.click();
giftAidPaymentsMadeInYearTxtBox.sendKeys(str1);
descriptionTxtBox.clear();
descriptionTxtBox.sendKeys(str2);
oneOffGiftAidPaymentsTxtBox.clear();
oneOffGiftAidPaymentsTxtBox.sendKeys(str3);
SaveBtn2.click();
}
public void giftAidPayment(WebDriver driver,String str1, String str2, String str3,String str4,String str5) throws Exception 
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();

try{
	wLib.explicitWait(driver, 5,deleteCharityRecords);
	if(deleteCharityRecords.isDisplayed()==true)
	{
	wLib.explicitWait(driver,5,deleteCharityRecords);
	deleteCharityRecords.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,cnfmdel);
	cnfmdel.click();
	}
}
catch (Exception e) {
	Reporter.log("Charitable income not available",true);
}
AddgiftAidPaymentFull(driver,str1, str2, str3);
wLib.explicitWait(driver, 5,displayRecordsBtn);
displayRecordsBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,giftAidPaymentsMadeInYearTxtBox);
string1=giftAidPaymentsMadeInYearTxtBox.getAttribute("value");
cancelBtn.click();	
otherGiftAidpayment(driver, str4, str5);
wLib.explicitWait(driver, 5,otherGiftAidpaymentLink);
otherGiftAidpaymentLink.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,giftAidPaymentsCarriedBackToPreviousYearTxtBox);
string2=giftAidPaymentsCarriedBackToPreviousYearTxtBox.getAttribute("value");
string3=giftAidPaymentsBroughtBackFromLaterYearTxtBox.getAttribute("value");
cancelBtn.click();
n1=Double.parseDouble(string1);
n2=Double.parseDouble(string2);
n3=Double.parseDouble(string3);
clickIncome(driver);
wLib.explicitWait(driver, 5,EmploymentLink);
EmploymentLink.click();
wLib.explicitWait(driver, 5,displayRecordsBtn);
displayRecordsBtn.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
string4=payFrmEmployer.getAttribute("value");
string5=PrvtMedAndDntl.getAttribute("value");
string6=BusnsTrvlAndSubstancTxtBox.getAttribute("value");
popUpCancelBtn.click();
n4=Double.parseDouble(string4);
n5=Double.parseDouble(string5);
n6=Double.parseDouble(string6);
total1=(n4+n5)-n6;
tax1=total1-personalAllowanceRate;
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,payFromAllEmployments);
displayTotal=payFromAllEmployments.getText().substring(1).replace(",", "");
Assert.assertEquals(displayTotal, string4);
Reporter.log("Payment From employer verified: "+displayTotal, true);
FinalCalculation=benefitAndExpensesReceived.getText().substring(1).replace(",", "");
Assert.assertEquals(FinalCalculation, string5);
Reporter.log("Private medical and dental insurance verified: "+FinalCalculation, true);
FinalCalculation1=allowableExpenses.getText().substring(1).replace(",", "");
Assert.assertEquals(FinalCalculation1, string6);
Reporter.log("Business travel and subsistence expenses verified: "+FinalCalculation1, true);
value1=TotalFromAllEmployment.getText().substring(1).replace(",", "");
value2=TotalIncomeReceived.getText().substring(1).replace(",", "");
Assert.assertEquals(value2, value1);
Reporter.log("Total income received verifie : "+value2, true);
expResult1=String.format("%.2f",tax1);
totIncomTaxChar=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
Assert.assertEquals(totIncomTaxChar, expResult1);
Reporter.log("Total income on which tax is due verifie : "+totIncomTaxChar, true);
amount3=(n1+(n1*taxedUKInterestRate))-(n2+(n2*taxedUKInterestRate))+(n3+(n3*taxedUKInterestRate));
calculation1=(taxLimit1Uk+amount3)*BR_rate;
calculation2=(tax1-(taxLimit1Uk+amount3))*HR_rate;
finalAmount=calculation1+calculation2;
taxFinal=String.format("%.2f",finalAmount);
taxFinalUI=taxForThisYear.getText().substring(1).replace(",", "");
Assert.assertEquals(taxFinalUI, taxFinal);
Reporter.log("Balance for this year verified : "+taxFinalUI, true);
dashBoardClient.click();
dashBoardTotal=finalIncome.getText().substring(1).replace(",", "");
Assert.assertEquals(value1, dashBoardTotal);
Reporter.log("Total Income verified: "+value1, true);
}
public void checkPdfEntryGiftAidpayments(WebDriver driver, String Folder, String filename) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,giftAidPaymentsMadeInYearTxtBox);
	string1=giftAidPaymentsMadeInYearTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	string2=oneOffGiftAidPaymentsTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	cancelBtn.click();
	wLib.explicitWait(driver, 5,otherGiftAidpaymentLink);
	otherGiftAidpaymentLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,giftAidPaymentsCarriedBackToPreviousYearTxtBox);
	string3=giftAidPaymentsCarriedBackToPreviousYearTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	string4=giftAidPaymentsBroughtBackFromLaterYearTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	cancelBtn.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver,5,payFrmEmployer);
	string5=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();
	string6=PrvtMedAndDntl.getAttribute("value").replace(".00","").replace("", " ").trim();
	string7=BusnsTrvlAndSubstancTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	popUpCancelBtn.click();	
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
       // String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Gift Aid payments made in the year Verified Successfully: " +string1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Total of any ‘one-off’ payments  verified Successfully: " +string2, true);
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Gift Aid payments made in this year but treated as if made in the previous year Verified Successfully: " +string3, true);
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Gift Aid payments made in previous year but to be treated as if made in this year Verified Successfully: " +string4, true);
        Assert.assertTrue(output.contains(string5));
        Reporter.log("Pay from this employment Verified Successfully: " +string5, true);
        Assert.assertTrue(output.contains(string6));
        Reporter.log("Private medical and dental insurance Verified Successfully: " +string6, true);
        Assert.assertTrue(output.contains(string7));
        Reporter.log("Business travel and subsistence expenses Verified Successfully: " +string7, true);
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Total Tax due Verified: " +totIncomTaxChar, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
}
public void delInfoGiftAid(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,delButton);
	delButton.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,cnfmdel);
	cnfmdel.click();	
	wLib.explicitWait(driver, 5,otherGiftAidpaymentLink);
	otherGiftAidpaymentLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,giftAidPaymentsCarriedBackToPreviousYearTxtBox);
	giftAidPaymentsCarriedBackToPreviousYearTxtBox.clear();
	giftAidPaymentsBroughtBackFromLaterYearTxtBox.clear();
	SaveBtn2.click();
}
public void addMarriageAllowance(WebDriver driver,String str1, String str2, String str3, String str4,String str5) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	addMAT(driver, str1, str2, str3, str4, str5);
	driver.navigate().refresh();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver,5,payFrmEmployer);
	string1=payFrmEmployer.getAttribute("value");
	string2=PrvtMedAndDntl.getAttribute("value");
	string3=BusnsTrvlAndSubstancTxtBox.getAttribute("value");
	popUpCancelBtn.click();
	n1=Double.parseDouble(string1);
	n2=Double.parseDouble(string2);
	n3=Double.parseDouble(string3);
	total1=(n1+n2)-n3;
	tax1=total1-(personalAllowanceRate-marriageAllowance);
	expResult1=String.format("%.2f",tax1);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,payFromAllEmployments);
	value1=payFromAllEmployments.getText().substring(1).replace(",", "");
	Assert.assertEquals(value1, string1);
	Reporter.log("Payment From employer verified: "+value1, true);
	value2=benefitAndExpensesReceived.getText().substring(1).replace(",", "");
	Assert.assertEquals(value2, string2);
	Reporter.log("Private medical and dental insurance verified: "+value2, true);
	t1=allowableExpenses.getText().substring(1).replace(",", "");
	Assert.assertEquals(t1, string3);
	Reporter.log("Business travel and subsistence expenses verified: "+t1, true);
	displayTotal=TotalFromAllEmployment.getText().substring(1).replace(",", "");
	FinalCalculation=TotalIncomeReceived.getText().substring(1).replace(",", "");
	Assert.assertEquals(FinalCalculation, displayTotal);
	Reporter.log("Total income received verified : "+FinalCalculation, true);
	taxdueOnInc1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	Assert.assertEquals(taxdueOnInc1, expResult1);
	Reporter.log("Total income on which tax is due verifie : "+taxdueOnInc1, true);
	calculation1=(tax1-taxLimit1Uk)*HR_rate;
	Totaltax=amount1+calculation1 -(marriageAllowance* BR_rate);
	totIncomTaxChar=String.format("%.2f",Totaltax);
	actualtax=taxForThisYear.getText().substring(1).replace(",", "");
	Assert.assertEquals(actualtax, totIncomTaxChar);
	Reporter.log("Total Tax verified : "+actualtax, true);
	
}

public void checkPdfEntryMarriageAllowance(WebDriver driver, String Folder, String filename) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,marriageAllowanceForm);
	marriageAllowanceForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,spouseFirstNameTxtBox);
	string1=spouseFirstNameTxtBox.getAttribute("value");
	string2=spouselastnameTxtBox.getAttribute("value");
	//string3=spouseNInumberTxtBox.getAttribute("value").replace("", " ").trim();
	//string4=dateOfMarriageSpouseTxtBox.getAttribute("value").replace("/","").replace("", " ").trim();
	cancelBtn.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string3=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();
	string4=PrvtMedAndDntl.getAttribute("value").replace(".00","").replace("", " ").trim();
	string5=BusnsTrvlAndSubstancTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	popUpCancelBtn.click();	
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 
	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        Reporter.log("Tax Calculation Summary for Marriage Allowance PDF data: " +output, true);
        Assert.assertTrue(output.contains(string1));
        Reporter.log("Spouse's first name Marriage Allowance Verified Successfully: " +string1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Spouse's last name Marriage Allowance verified Successfully: " +string2, true);
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Pay from this employment Verified Successfully: " +string3, true);
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Private medical and dental insurance Verified Successfully: " +string4, true);
        Assert.assertTrue(output.contains(string5));
        Reporter.log("Business travel and subsistence expenses Verified Successfully: " +string5, true);
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Total Tax due Verified: " +totIncomTaxChar, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
}
public void delMarriageAllowance(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,marriageAllowanceForm);
	marriageAllowanceForm.click();
	
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,receiveMarriageAllowanceTOChkBox);
	//receiveMarriageAllowancefromChkBox.click();
	receiveMarriageAllowanceTOChkBox.click();
	SaveBtn2.click();
	}

public void addStudentLoanRepaymentPlan1(WebDriver driver, String str1,String str2) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	
	try
	{
wLib.explicitWait(driver, 3,taxSummaaryMarriageAllowance);
	if(taxSummaaryMarriageAllowance.isDisplayed()==true)
	{

		delMarriageAllowance(driver);	
	}
	}
	catch (Exception e) {
System.out.println("marriage allawance income is not available");
	}
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver,5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
	listbox1 = new Select(studentLoanTypeLstBox);
	listbox1.selectByValue("1");
	amountTxtBox.clear();
	amountTxtBox.sendKeys(str2);
	repaidChckBox.click();
	SaveBtn2.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	calculation1=(n1-personalAllowanceRate)*BR_rate;
	calculation2=(Math.round((n1-plan1)*studentLoanRate))-n2;
	finalAmount=calculation1+calculation2;
	FinalCalculation=String.format("%.2f",finalAmount);
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	taxFinal=taxForThisYear.getText().substring(1).replace(",","");
	Assert.assertEquals(taxFinal,FinalCalculation);
	Reporter.log("Tax Calculation Verified Successfully: "+taxFinal,true);
}
public void addStudentLoanRepaymentPlan2(WebDriver driver, String str1,String str2) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	delStudentLoanRepayment(driver);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	try
	{
wLib.explicitWait(driver, 5,taxSummaaryMarriageAllowance);
	if(taxSummaaryMarriageAllowance.isDisplayed()==true)
	{
		delMarriageAllowance(driver);
	}
	}
	catch (Exception e) {
Reporter.log("marriage allawance income is not available",true);
	}
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
	listbox1 = new Select(studentLoanTypeLstBox);
	listbox1.selectByValue("2");
	amountTxtBox.clear();
	amountTxtBox.sendKeys(str2);
	repaidChckBox.click();
	SaveBtn2.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	calculation1=(n1-personalAllowanceRate)*BR_rate;
	calculation2=(Math.round((n1-plan2)*studentLoanRate))-n2;
	finalAmount=calculation1+calculation2;
	FinalCalculation=String.format("%.2f",finalAmount);
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	taxFinal=taxForThisYear.getText().substring(1).replace(",","");
	Assert.assertEquals(taxFinal,FinalCalculation);
	Reporter.log("Tax Calculation Verified Successfully: "+taxFinal,true);
}
public void addStudentLoanRepaymentPlan1_2(WebDriver driver, String str1,String str2) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	delStudentLoanRepayment(driver);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	try
	{
	wLib.explicitWait(driver, 5,taxSummaaryMarriageAllowance);
	if(taxSummaaryMarriageAllowance.isDisplayed()==true)
	{
		delMarriageAllowance(driver);	
	}
	}
	catch (Exception e) {
System.out.println("marriage allawance income is not available");
	}
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
	listbox1 = new Select(studentLoanTypeLstBox);
	listbox1.selectByValue("3");
	amountTxtBox.clear();
	amountTxtBox.sendKeys(str2);
	repaidChckBox.click();
	SaveBtn2.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	calculation1=(n1-personalAllowanceRate)*BR_rate;
	calculation2=(Math.round((n1-plan1_2)*studentLoanRate))-n2;
	finalAmount=calculation1+calculation2;
	FinalCalculation=String.format("%.2f",finalAmount);
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	taxFinal=taxForThisYear.getText().substring(1).replace(",","");
	Assert.assertEquals(taxFinal,FinalCalculation);
	Reporter.log("Tax Calculation Verified Successfully: "+taxFinal,true);
}
public void checkPdfEntryStudentLoan(WebDriver driver, String Folder, String filename) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string1=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Total Income: " +string1 ,true);
	popUpCancelBtn.click();	
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,studentLoanAmountTaxWindow);
	string2=studentLoanAmountTaxWindow.getText().substring(1).replace(",","").replace(".00","").replace("", " ").trim();
	Reporter.log("Student Loan Repayments: " +string2 ,true);
	totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        Reporter.log("Tax Calculation Summary for Student Loan PDF data: " +output, true);
       Assert.assertTrue(output.contains(string1));
        Reporter.log("Pay from this employment Verified Successfully: " +string1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log(" Student Loan repayments Verified Successfully: " +string2, true);
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Total Tax due Verified: " +totIncomTaxChar, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
}
public void delStudentLoanRepayment(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
	listbox1 = new Select(studentLoanTypeLstBox);
	listbox1.selectByValue("0");
	amountTxtBox.clear();
	try
	{
	if(repaidChckBox.isSelected()==true)
	repaidChckBox.click();
	}
	catch (Exception e) {
Reporter.log("Check box is not selected",true);
	}
	SaveBtn2.click();
	
	driver.navigate().refresh();
}
public void addChildBenefitCharge(WebDriver driver, String str1, String str2, String str3, String str4 ) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	delStudentLoanRepayment(driver);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	try
	{
wLib.explicitWait(driver, 5,taxSummaaryMarriageAllowance);
	if(taxSummaaryMarriageAllowance.isDisplayed()==true)
	{
		delMarriageAllowance(driver);
	}
	}
	catch (Exception e) {
Reporter.log("marriage allawance income is not available",true);
	}
	IncomeLink.click();
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,amountReceivedTxtBox);
	amountReceivedTxtBox.clear();
	NoOfchildrenTxtBox.clear();
	benifitStopDateTxtBox.clear();
	amountReceivedTxtBox.sendKeys(str2);
	NoOfchildrenTxtBox.sendKeys(str3);
	benifitStopDateTxtBox.sendKeys(str4);
	SaveBtn2.click();
	n1=Double.parseDouble(str1);
	n2=Double.parseDouble(str2);
	
	driver.navigate().refresh();
	if(n1>CBC_HR_thresholdMin && n1< CBC_HR_thresholdMax)
	{
calculation1=((n1-personalAllowanceRate)-taxLimit1Uk)*HR_rate;
calculation2=calculation1+amount1;
total1=(n1-CBC_HR_thresholdMin)/100;
total2=n2/100;
finalAmount=calculation2+(total1*total2);
FinalCalculation=String.format("%.2f",finalAmount);
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5, taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,taxForThisYear);
taxFinal=taxForThisYear.getText().substring(1).replace(",","");
Assert.assertEquals(taxFinal,FinalCalculation);
Reporter.log("Tax Calculation Verified Successfully: "+taxFinal,true);	
	}
	else if (n1>= CBC_HR_thresholdMax)
	{
calculation1=((n1-personalAllowanceRate)-taxLimit1Uk)*HR_rate;
calculation2=calculation1+amount1;
finalAmount=calculation2+n2;
FinalCalculation=String.format("%.2f",finalAmount);
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5, taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,taxForThisYear);
taxFinal=taxForThisYear.getText().substring(1).replace(",","");
Assert.assertEquals(taxFinal,FinalCalculation);
Reporter.log("Tax Calculation Verified Successfully: "+taxFinal,true);	
	}
	else if ((n1-personalAllowanceRate)>taxLimit1Uk && n1<=CBC_HR_thresholdMin)
	{
calculation1=((n1-personalAllowanceRate)-taxLimit1Uk)*HR_rate;
calculation2=calculation1+amount1;
finalAmount=calculation2;
FinalCalculation=String.format("%.2f",finalAmount);
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5, taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,taxForThisYear);
taxFinal=taxForThisYear.getText().substring(1).replace(",","");
Assert.assertEquals(taxFinal,FinalCalculation);
Reporter.log("Tax Calculation Verified Successfully: "+taxFinal,true);
	}
	
}
public void checkPdfEntryChildBenefit(WebDriver driver, String Folder, String filename) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 30,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 30,amountReceivedTxtBox);
	string1=amountReceivedTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Total amount of Child Benefit you and your partner got for the year : " +string1 ,true);
	string2=NoOfchildrenTxtBox.getAttribute("value");
	Reporter.log("Number of children you and your partner got Child Benefit: " +string2 ,true);
	cancelBtn.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string3=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Total Income: " +string3 ,true);
	popUpCancelBtn.click();	
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        Reporter.log("Tax Calculation Summary for Child Benefit PDF data: " +output, true);
       Assert.assertTrue(output.contains(string1));
        Reporter.log("Total amount of Child Benefit you and your partner got for the year Verified Successfully: " +string1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Number of children you and your partner got Child Benefit Verified Successfully: " +string2, true);
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Total Income Verified Successfully: " +string3 ,true);
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Total Tax due Verified: " +totIncomTaxChar, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
}
public void delChildBenefitCharge(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,amountReceivedTxtBox);
	amountReceivedTxtBox.clear();
	NoOfchildrenTxtBox.clear();
	benifitStopDateTxtBox.clear();
	SaveBtn2.click();
	
	driver.navigate().refresh();
}
public void addPaymentOnAccount(WebDriver driver, String str1, String str2, String str3)  throws Exception{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	delChildBenefitCharge(driver);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	try
	{
	wLib.explicitWait(driver, 5,taxSummaaryMarriageAllowance);
	if(taxSummaaryMarriageAllowance.isDisplayed()==true)
	{
		delMarriageAllowance(driver);	
	}
	}
	catch (Exception e) {
System.out.println("marriage allawance income is not available");
	}
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,paymentsOnAccountLink);
	paymentsOnAccountLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,claimToReducePaymentsOnAccountChkBox);
	claimToReducePaymentsOnAccountChkBox.click();
	firstPaymentOnAccountTxtBox.clear();
	notesTxtBox.clear();
	firstPaymentOnAccountTxtBox.sendKeys(str2);
	notesTxtBox.sendKeys(str3);
	SaveBtn2.click();
	driver.navigate().refresh();
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,firstPaymentonAccountAmount);
	string1=firstPaymentonAccountAmount.getText().substring(1).replace(",","");
	string2=totalDueByJanuaryAmount.getText().substring(1).replace(",","");
	string3=secondPaymentAmount.getText().substring(1).replace(",","");
	n1=Double.parseDouble(str1);//payment from employer
	n2=Double.parseDouble(str2);//First payment on account of next year
	n3=Double.parseDouble(string1);//First payment for next year on tax page same as str2
	n4=Double.parseDouble(string2);//Total due by end January and it is equal to balance tax for the year plus str2
	n5=Double.parseDouble(string3);//second payment same as str2
	if (n1>taxLimit1Uk)
	{
	calculation1=((n1-personalAllowanceRate)-taxLimit1Uk)*HR_rate;
	calculation2=calculation1+amount1;
	FinalCalculation=String.format("%.2f",calculation2);
	wLib.explicitWait(driver, 5, taxForThisYear);
	taxFinal=taxForThisYear.getText().substring(1).replace(",","");
	Assert.assertEquals(taxFinal,FinalCalculation);
	Reporter.log("Tax Calculation Verified Successfully: "+taxFinal,true);	
	if(calculation2>n2)
	{
	Assert.assertEquals(n3,n2);
	Reporter.log("First payment for next year on tax page Verified Successfully: "+n3,true);
	Assert.assertEquals(n5,n2);
	Reporter.log("Second payment for next year on tax page Verified Successfully: "+n5,true);
	finalAmount=calculation2+n2;
	FinalCalculation1=String.format("%.2f",finalAmount);
	Assert.assertEquals(string2,FinalCalculation1);
	Reporter.log("Total due by end January on tax page Verified Successfully: "+string2,true);
	}
	else
	{
System.out.println("No advanced payment added");
	}
	
	}
}
public void checkPdfEntryPaymentOnAccount(WebDriver driver, String Folder, String filename) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,paymentsOnAccountLink);
	paymentsOnAccountLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,firstPaymentOnAccountTxtBox);
	string1=firstPaymentOnAccountTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("First payment for next year on tax page: " +string1 ,true);
	string2=notesTxtBox.getAttribute("value");
	Reporter.log("Notes about Payment on Account: " +string2 ,true);
	cancelBtn.click();
	wLib.explicitWait(driver, 5,IncomeLink);
	IncomeLink.click();
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string3=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Total Income: " +string3 ,true);
	popUpCancelBtn.click();	
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
        Reporter.log("Tax Calculation Summary for Paymnet on Account PDF data: " +output, true);
       Assert.assertTrue(output.contains(string1));
        Reporter.log("First payment for next year on tax page Verified Successfully: " +string1, true);
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Notes about Payment on Account Verified Successfully: " +string2, true);
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Total Income Verified Successfully: " +string3 ,true);
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Total Tax due Verified: " +totIncomTaxChar, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
}
public void delPaymentOnAccount(WebDriver driver) throws Exception{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,paymentsOnAccountLink);
	paymentsOnAccountLink.click();
	cis.switchwindowNew(driver);
	
	try
	{
	wLib.explicitWait(driver, 5,claimToReducePaymentsOnAccountChkBox);
	if(claimToReducePaymentsOnAccountChkBox.isSelected()==true)
	{
wLib.explicitWait(driver, 5,claimToReducePaymentsOnAccountChkBox);	
claimToReducePaymentsOnAccountChkBox.click();
	
	}
	}
	catch (Exception e) {
Reporter.log("Payment on Account should be available",true);
	}
	SaveBtn2.click();
	driver.navigate().refresh();
}
public void addPayFromEmployer(WebDriver driver,String str1) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 30, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	driver.navigate().refresh();
}
public void finishingYourTaxReturn(WebDriver driver, String str1, String str2, String str3)  throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	delPaymentOnAccount(driver);
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,finishingTaxLink);
	finishingTaxLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,taxRoundedOffTxtBox);
	taxRoundedOffTxtBox.clear();
	wLib.explicitWait(driver, 5,otherInfoTxtBox);
	otherInfoTxtBox.clear();
	taxRoundedOffTxtBox.sendKeys(str2);
	notPaidEnoughOweTaxPrevYearChkBox.click();
	notPaidEnoughNotUseCodeChkBox.click();
	otherInfoTxtBox.sendKeys(str3);
	taxAdvisorChkBox.click();
	SaveBtn2.click();
	driver.navigate().refresh();
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxAlreadyRefunded);
	string1=taxAlreadyRefunded.getText().substring(1).replace(",","").replace(".00","");
	Reporter.log("Tax already refunded in the year: "+string1,true);
	taxFinal=taxForThisYear.getText().substring(1).replace(",","");
	Reporter.log("Balance for this year: "+taxFinal,true);
	
	n1=Double.parseDouble(str1);//payment from employer
	n2=Double.parseDouble(str2);//Entered Tax already refunded
	Assert.assertEquals(string1,str2);
	Reporter.log("Tax already refunded in the year Verified Successfully: "+string1,true);
	if (n1>taxLimit1Uk && n1<=taxLimit3)
	{
	calculation1=((n1-personalAllowanceRate)-taxLimit1Uk)*HR_rate;
	calculation2=calculation1+amount1;
	finalAmount=calculation2+n2;
	FinalCalculation=String.format("%.2f",finalAmount);
	Assert.assertEquals(taxFinal,FinalCalculation);
	Reporter.log("Balance for this year Verified Successfully: "+taxFinal,true);
	}
	else if (n1>personalAllowanceRate && n1<=taxLimit1Uk)
	{
calculation1=(n1-personalAllowanceRate)*BR_rate;
finalAmount=calculation1+n2;
FinalCalculation=String.format("%.2f",finalAmount);
Assert.assertEquals(taxFinal,FinalCalculation);
Reporter.log("Balance for this year Verified Successfully: "+taxFinal,true);
	}
}
public void checkPdfEntryFinishingTax(WebDriver driver, String Folder, String filename) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,finishingTaxLink);
	finishingTaxLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,taxRoundedOffTxtBox);
	string1=taxRoundedOffTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Tax refunded or set off by us or Jobcentre: " +string1 ,true);
	cancelBtn.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string2=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Total Income: " +string2 ,true);
	popUpCancelBtn.click();	
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        
        String output = new PDFTextStripper().getText(document);
        Reporter.log("Tax Calculation Summary for Finishing Tax PDF data: " +output, true);
       Assert.assertTrue(output.contains(string1));
        Reporter.log("Tax refunded or set off by us or Jobcentre Verified Successfully: " +string1, true);
        
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Total Income Verified Successfully: " +string2 ,true);
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Total Tax due Verified: " +totIncomTaxChar, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
}
public void delFinishingTaxReturn(WebDriver driver)  throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,finishingTaxLink);
	finishingTaxLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,taxRoundedOffTxtBox);
	taxRoundedOffTxtBox.clear();
	wLib.explicitWait(driver, 5,otherInfoTxtBox);
	otherInfoTxtBox.clear();
	try
	{
wLib.explicitWait(driver, 5,notPaidEnoughOweTaxPrevYearChkBox);
if(notPaidEnoughOweTaxPrevYearChkBox.isSelected()==true)
wLib.explicitWait(driver, 5,notPaidEnoughOweTaxPrevYearChkBox);
notPaidEnoughOweTaxPrevYearChkBox.click();
	
	}catch (Exception e) {
Reporter.log("First check box of Finising tax not checked",true);
	}
	
	try
	{
wLib.explicitWait(driver, 5,notPaidEnoughNotUseCodeChkBox);
if(notPaidEnoughNotUseCodeChkBox.isSelected()==true)
	wLib.explicitWait(driver, 5,notPaidEnoughNotUseCodeChkBox);
	notPaidEnoughNotUseCodeChkBox.click();
	
	}
	
	catch (Exception e) {
Reporter.log("second check box of Finising tax not checked",true);
	}
	
	try
	{
wLib.explicitWait(driver, 5,taxAdvisorChkBox);
if(taxAdvisorChkBox.isSelected()==true)
	wLib.explicitWait(driver, 5,taxAdvisorChkBox);
	taxAdvisorChkBox.click();
	
	}
	
	catch (Exception e) {
Reporter.log("third check box of Finising tax not checked",true);
	}
	
	SaveBtn2.click();
	driver.navigate().refresh();
}
public void addTaxUnderPaid(WebDriver driver, String str1, String str2, String str3) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,formOpenLink);
	formOpenLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,underpaidTaxForEarlierYearsIncludedInCodeTxtBox);
	underpaidTaxForEarlierYearsIncludedInCodeTxtBox.clear();
	wLib.explicitWait(driver, 5,underpaidTaxTxtBox);
	underpaidTaxTxtBox.clear();
	outstandingDebtTxtBox.clear();
	underpaidTaxForEarlierYearsIncludedInCodeTxtBox.sendKeys(str1);
	underpaidTaxTxtBox.sendKeys(str2);
	outstandingDebtTxtBox.sendKeys(str3);
	SaveBtn2.click();
	driver.navigate().refresh();
}
public void addUnderpaidTax(WebDriver driver, String str1, String str2, String str3, String str4)  throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	try
	{
wLib.explicitWait(driver, 5,taxSummaaryMarriageAllowance);
if(taxSummaaryMarriageAllowance.isDisplayed()==true)
	{

	delMarriageAllowance(driver);	
	}
	}
	catch (Exception e) {
Reporter.log("marriage allawance income is not available",true);
	}
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	addTaxUnderPaid(driver, str2, str3,  str4);

	n1=Double.parseDouble(str1);//payment from employer
	n2=Double.parseDouble(str2);//Underpaid tax for earlier years included in your tax code for current year
	n3=Double.parseDouble(str3);//Current year underpaid tax included in next year tax code
	n4=Double.parseDouble(str4);//Current year Outstanding debt included in tax code
	
	
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	taxFinal=taxForThisYear.getText().substring(1).replace(",","");
	Reporter.log("Balance for this year: "+taxFinal,true);
	if (n1>taxLimit1Uk && n1<=taxLimit3)
	{
	calculation1=((n1-personalAllowanceRate)-taxLimit1Uk)*HR_rate;
	calculation2=calculation1+amount1;
	finalAmount=(calculation2+n2)-n3;
	FinalCalculation=String.format("%.2f",finalAmount);
	Assert.assertEquals(taxFinal,FinalCalculation);
	Reporter.log("Balance for this year Verified Successfully: "+taxFinal,true);
	}
	else if (n1>personalAllowanceRate && n1<=taxLimit1Uk)
	{
calculation1=(n1-personalAllowanceRate)*BR_rate;
finalAmount=(calculation1+n2)-n3;
FinalCalculation=String.format("%.2f",finalAmount);
Assert.assertEquals(taxFinal,FinalCalculation);
Reporter.log("Balance for this year Verified Successfully: "+taxFinal,true);
	}
}
public void checkPdfEntryUnderpaidTax(WebDriver driver, String Folder, String filename) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,formOpenLink);
	formOpenLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 30,underpaidTaxForEarlierYearsIncludedInCodeTxtBox);
	string1=underpaidTaxForEarlierYearsIncludedInCodeTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Underpaid tax for earlier years included in your tax code: " +string1 ,true);
	string2=underpaidTaxTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Underpaid tax for this year: " +string2 ,true);
	string3=outstandingDebtTxtBox.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Outstanding debt included in your tax code for this year: " +string3 ,true);
	cancelBtn.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,displayRecordsBtn);
	displayRecordsBtn.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	string4=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();
	Reporter.log("Total Income: " +string4 ,true);
	wLib.explicitWait(driver, 5,popUpCancelBtn);
	popUpCancelBtn.click();	
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,taxForThisYear);
	totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
	Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 	filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
         String output = new PDFTextStripper().getText(document);
        Reporter.log("Tax Calculation Summary for Finishing Tax PDF data: " +output, true);
       Assert.assertTrue(output.contains(string1));
        Reporter.log("Underpaid tax for earlier years included in your tax code Verified Successfully: " +string1, true);
        
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Underpaid tax for earlier years included in your tax code Verified Successfully: " +string2, true);
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Outstanding debt included in your tax code for this year Verified Successfully: " +string3, true);
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Total Income Verified Successfully: " +string4 ,true);
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Total Tax due Verified: " +totIncomTaxChar, true);
        Reporter.log("PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
}
public void delUnderpaidTax(WebDriver driver)  throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,formOpenLink);
	formOpenLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,underpaidTaxForEarlierYearsIncludedInCodeTxtBox);
	underpaidTaxForEarlierYearsIncludedInCodeTxtBox.clear();
	wLib.explicitWait(driver, 5,underpaidTaxTxtBox);
	underpaidTaxTxtBox.clear();
	wLib.explicitWait(driver, 5,outstandingDebtTxtBox);
	outstandingDebtTxtBox.clear();
	SaveBtn2.click();
	driver.navigate().refresh();
}
public void checkPAYEECode(WebDriver driver, String str1) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();

	try
	{
wLib.explicitWait(driver, 2,taxSummaaryMarriageAllowance);
	if(taxSummaaryMarriageAllowance.isDisplayed()==true)
	{
		delMarriageAllowance(driver);
	}
	}
	catch (Exception e) {
Reporter.log("marriage allawance income is not available",true);
	}
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 30, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	driver.navigate().refresh();

	n1=Double.parseDouble(str1);//payment from employer
	
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 4, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 4,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,incomeTaxDue);
	totIncomTaxChar=incomeTaxDue.getText().substring(1).replace(",","");
	incomTaxdue1=Double.parseDouble(totIncomTaxChar);
	
	if (incomTaxdue1<pAYCode)
	{
taxFinalUI=payCodeAmountTaxSummary.getText().substring(1).replace(",","");
payCodeTaxSummary.isDisplayed();
Assert.assertEquals(taxFinalUI,totIncomTaxChar);
Reporter.log("Final Tax"+taxFinalUI,true);

	}
	else
	{
taxFinal=taxForThisYear.getText().substring(1).replace(",","");
Reporter.log("Balance for this year: "+taxFinal,true);
Assert.assertEquals(taxFinal, totIncomTaxChar);
Reporter.log("Final Tax"+taxFinal,true);
	}
}
public void selectEmailTemplate(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,SelfAssessmentLink);
	SelfAssessmentLink.click();
	wLib.explicitWait(driver, 5,emailTempLink);
	emailTempLink.click();
	wLib.explicitWait(driver, 5,emailTempOption);
	emailTemplate=emailTempOption.getText();
	Reporter.log("emailTemplate: "+emailTemplate,true);
	
}
public void FuncSendEmail(WebDriver driver ) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,emailOptionsLink);
	emailOptionsLink.click();
	wLib.explicitWait(driver, 5,emailOpenLink);
	emailOpenLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,emailTxtBox);
	emailTxtBox.clear();
	emailTxtBox.sendKeys(emailID);
	listbox1=new Select(emailTemplateListBox);
	listbox1.selectByVisibleText(emailTemplate);
	SaveBtn1.click();
	driver.navigate().refresh();
	wLib.explicitWait(driver, 5,successMessage);
	Assert.assertEquals(successMessage.getText(), "Success!");
	Reporter.log("Email Sent Successfully",true);
	driver.navigate().refresh();
	
	}
public void scheduledEmail(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,emailOptionsLink);
	emailOptionsLink.click();
	wLib.explicitWait(driver, 5,scheduleEmailLink);
	scheduleEmailLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,emailTempalateOption);
	emailTempalateOption.click();
	nextBtn.click();
	wLib.explicitWait(driver, 5,chooseTemplateOption);
	listbox1=new Select(chooseTemplateOption);
	listbox1.selectByVisibleText(emailTemplate);
	ls1 = new LibSA(driver);
	ls1.chooseDate(driver);
	dateTxtBox.clear();
	dateTxtBox.sendKeys(ls1.today);
	SaveBtn1.click();
	driver.navigate().refresh();
}
public void funcAddTaxPayment(WebDriver driver,String str1,String str2, String str3 ) throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkTaxPaymentsAlreadyMade);
	linkTaxPaymentsAlreadyMade.click();
	wLib.explicitWait(driver, 5,addTaxPaymentBtn);
	addTaxPaymentBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,descriptionTxtBox);
	descriptionTxtBox.clear();
	descriptionTxtBox.sendKeys(str1);
	amountTxtBox.clear();
	amountTxtBox.sendKeys(str2);
	SaveBtn2.click();
	driver.navigate().refresh();
	wLib.explicitWait(driver, 5,rowOneDisplay);
	string1=rowOneDisplay.getText();
	string2=rowTwoDisplay.getText().substring(1).replace(",","").replace(".00", "");
	Assert.assertEquals(string1, str1);
	Reporter.log("Advanced payment tax description verified successfully"+string1,true);
	Assert.assertEquals(string2, str2);
	Reporter.log("Advanced payment tax Amount verified successfully"+string2,true);
	clickIncome(driver);
	wLib.explicitWait(driver, 5,EmploymentLink);
	EmploymentLink.click();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5, payFrmEmployer);
	payFrmEmployer.sendKeys(str3);
	SaveBtn1.click();
	n1=Double.parseDouble(str2);
	n2=Double.parseDouble(str3);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	calculation1=(n2-personalAllowanceRate)*BR_rate;
	finalAmount=calculation1-n1;
	FinalCalculation=String.format("%.2f",finalAmount);
	wLib.explicitWait(driver, 5,taxForThisYear);
	taxFinal=taxForThisYear.getText().substring(1).replace(",","");
	Assert.assertEquals(taxFinal,FinalCalculation);
	Reporter.log("Tax Calculation Verified Successfully: "+taxFinal,true);
}
public void delTaxPayment(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,linkTaxPaymentsAlreadyMade);
	linkTaxPaymentsAlreadyMade.click();
	
	try
	{
wLib.explicitWait(driver, 2,delButton);
if(delButton.isDisplayed()==true)
{
	wLib.explicitWait(driver, 2,delButton);
	delButton.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,cnfmdel);
	cnfmdel.click();
	}
}
	catch (Exception e) {
Reporter.log("No Tax available",true);
	}
	
}
public void funcAddAdditionalInfo(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27) throws Exception 
{
	wLib = new WaitStatementLib();
	funcAddEmpIncomeWithTaxTakenOff(driver,str1,"","");
	wLib.explicitWait(driver, 5,additionalInformationLink);
	additionalInformationLink.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();
	wLib.explicitWait(driver, 5,taxTakenOff1TxtBox);
	taxTakenOff1TxtBox.clear();
	grossAmountTxtBox.clear();
	amountGainOnLifeInsuranceTxtBox.clear();
	numberOfYearsSinceLastPolicyGainTxtBox.clear();
	stockDividendsTxtBox.clear();
	nonQualifyingTxtBox.clear();
	shareSchemesTaxableAmountTxtBox.clear();
	lumpSumSalariesAndOtherPaymentsTxtBox.clear();
	lumpSumsOrBenefitsFromRetirementSchemesTxtBox.clear();
	redundancyAndOtherCompensationPaymentsTxtBox.clear();
	redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
	seafarersEarningsDeductionTxtBox.clear();
	nonUKTaxableForeignEarningsTxtBox.clear();
	foreignTaxNoCreditReliefClaimTxtBox.clear();
	UKpatentRoyaltyPaymentsTxtBox.clear();
	subscriptionsVentureTxtBox.clear();
	subscriptionsSharesTxtBox.clear();
	communityInvestmentTxtBox.clear();
	annualPaymentsTxtBox.clear();
	qualifyingLoanTxtBox.clear();
	postCessationTxtBox.clear();
	maintenancePaymentTxtBox.clear();
	paymentsTradeTxtBox.clear();
	//reliefClaimedTxtBox.clear();
	subscriptionsSharesUnderTxtBox.clear();
	socialInvestmentTxtBox.clear();
	taxTakenOff1TxtBox.sendKeys(str2);
	grossAmountTxtBox.sendKeys(str3);
	amountGainOnLifeInsuranceTxtBox.sendKeys(str4);
	numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str5);
	stockDividendsTxtBox.sendKeys(str6);
	nonQualifyingTxtBox.sendKeys(str7);
	shareSchemesTaxableAmountTxtBox.sendKeys(str8);
	lumpSumSalariesAndOtherPaymentsTxtBox.sendKeys(str9);
	lumpSumsOrBenefitsFromRetirementSchemesTxtBox.sendKeys(str10);
	redundancyAndOtherCompensationPaymentsTxtBox.sendKeys(str11);
	redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str12);
	seafarersEarningsDeductionTxtBox.sendKeys(str13);
	nonUKTaxableForeignEarningsTxtBox.sendKeys(str14);
	foreignTaxNoCreditReliefClaimTxtBox.sendKeys(str15);
	UKpatentRoyaltyPaymentsTxtBox.sendKeys(str16);
	subscriptionsVentureTxtBox.sendKeys(str17);
	subscriptionsSharesTxtBox.sendKeys(str18);
	communityInvestmentTxtBox.sendKeys(str19);
	annualPaymentsTxtBox.sendKeys(str20);
	qualifyingLoanTxtBox.sendKeys(str21);
	postCessationTxtBox.sendKeys(str22);
	maintenancePaymentTxtBox.sendKeys(str23);
	paymentsTradeTxtBox.sendKeys(str24);
	//reliefClaimedTxtBox.sendKeys(str25);
	subscriptionsSharesUnderTxtBox.sendKeys(str26);
	socialInvestmentTxtBox.sendKeys(str27);
	saveAdditionalInfoBtn.click();
	driver.navigate().refresh();
n1=Double.parseDouble(str1);
n2=Double.parseDouble(str2);
n3=Double.parseDouble(str3);
n4=Double.parseDouble(str4);
n5=Double.parseDouble(str5);
n6=Double.parseDouble(str6);
n7=Double.parseDouble(str7);
n8=Double.parseDouble(str8);
n9=Double.parseDouble(str9);
n10=Double.parseDouble(str10);
n11=Double.parseDouble(str11);
n12=Double.parseDouble(str12);
n13=Double.parseDouble(str13);
n14=Double.parseDouble(str14);
n15=Double.parseDouble(str15);
n16=Double.parseDouble(str16);
n17=Double.parseDouble(str17);
n18=Double.parseDouble(str18);
n19=Double.parseDouble(str19);
n20=Double.parseDouble(str20);
n21=Double.parseDouble(str21);
n22=Double.parseDouble(str22);
n23=Double.parseDouble(str23);
n24=Double.parseDouble(str24);
n25=Double.parseDouble(str25);
n26=Double.parseDouble(str26);
n27=Double.parseDouble(str27);
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 60, taxCalSummaryLink);
taxCalSummaryLink.click();
totlIncome= (((n1+n9 + n10 + n11)-(n13 + n14 + n15)) + ( n8 + n3 + n6 + n7 +n4)) - ((n22 + n21 + n24)+(n20*100/80) + personalAllowanceRate);
Reporter.log(String.format("%.2f",(n1+n9 + n10 + n11)),true);
Reporter.log(String.format("%.2f",(n13 + n14 + n15)),true);
Reporter.log(String.format("%.2f",(n8 + n3 + n6 + n7 +n4)),true);
Reporter.log(String.format("%.2f",(n20)),true);
Reporter.log(String.format("%.2f",(n20*100/80)),true);
Reporter.log(String.format("%.2f",(n22 + n21 + n24)),true);
expValue1=String.format("%.2f",(totlIncome));
wLib.explicitWait(driver, 5,totalIncomeOnWhichTaxIsDue);
totIncomTaxChar=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",","");
Assert.assertEquals(totIncomTaxChar,expValue1);
Reporter.log("correct Total Income: "+totIncomTaxChar,true);

}
public void readPDFAdditionalInfo(WebDriver driver, String Folder, String filename) throws EmptyFileException, IOException, Exception {
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5,additionalInformationLink); 
additionalInformationLink.click();
wLib.explicitWait(driver, 5, commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5, taxTakenOff1TxtBox);
string1=taxTakenOff1TxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("taxTakenOff1TxtBox: "+string1,true);
wLib.explicitWait(driver, 5, grossAmountTxtBox);
string2=grossAmountTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("grossAmountTxtBox: "+string2,true);
wLib.explicitWait(driver, 5, amountGainOnLifeInsuranceTxtBox);
string3=amountGainOnLifeInsuranceTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("amountGainOnLifeInsuranceTxtBox: "+string3,true);
wLib.explicitWait(driver, 5, numberOfYearsSinceLastPolicyGainTxtBox);
string4=numberOfYearsSinceLastPolicyGainTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("numberOfYearsSinceLastPolicyGainTxtBox: "+string4,true);
wLib.explicitWait(driver, 5, stockDividendsTxtBox);
string5=stockDividendsTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("stockDividendsTxtBox: "+string5,true);
wLib.explicitWait(driver, 5, nonQualifyingTxtBox);
string6=nonQualifyingTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("nonQualifyingTxtBox: "+string6,true);
wLib.explicitWait(driver, 5, shareSchemesTaxableAmountTxtBox);
string7=shareSchemesTaxableAmountTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("shareSchemesTaxableAmountTxtBox: "+string7,true);
wLib.explicitWait(driver, 5, lumpSumSalariesAndOtherPaymentsTxtBox);
string8=lumpSumSalariesAndOtherPaymentsTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("lumpSumSalariesAndOtherPaymentsTxtBox: "+string8,true);
wLib.explicitWait(driver, 5, lumpSumsOrBenefitsFromRetirementSchemesTxtBox);
string9=lumpSumsOrBenefitsFromRetirementSchemesTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("lumpSumsOrBenefitsFromRetirementSchemesTxtBox: "+string9,true);
wLib.explicitWait(driver, 5, redundancyAndOtherCompensationPaymentsTxtBox);
string10=redundancyAndOtherCompensationPaymentsTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("redundancyAndOtherCompensationPaymentsTxtBox: "+string10,true);
wLib.explicitWait(driver, 5, redundancyAndOtherCompensationTaxTakenOffTxtBox);
string11=redundancyAndOtherCompensationTaxTakenOffTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("redundancyAndOtherCompensationTaxTakenOffTxtBox: "+string11,true);
wLib.explicitWait(driver, 5, seafarersEarningsDeductionTxtBox);
string12=seafarersEarningsDeductionTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("seafarersEarningsDeductionTxtBox: "+string12,true);
wLib.explicitWait(driver, 5, nonUKTaxableForeignEarningsTxtBox);
string13=nonUKTaxableForeignEarningsTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("nonUKTaxableForeignEarningsTxtBox: "+string13,true);
wLib.explicitWait(driver, 5, foreignTaxNoCreditReliefClaimTxtBox);
string14=foreignTaxNoCreditReliefClaimTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("foreignTaxNoCreditReliefClaimTxtBox: "+string14,true);
wLib.explicitWait(driver, 5, UKpatentRoyaltyPaymentsTxtBox);
string15=UKpatentRoyaltyPaymentsTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("UKpatentRoyaltyPaymentsTxtBox: "+string15,true);
wLib.explicitWait(driver, 5, subscriptionsVentureTxtBox);
string16=subscriptionsVentureTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("subscriptionsVentureTxtBox: "+string16,true);
wLib.explicitWait(driver, 5, subscriptionsSharesTxtBox);
string17=subscriptionsSharesTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("subscriptionsSharesTxtBox: "+string17,true);
wLib.explicitWait(driver, 5, communityInvestmentTxtBox);
string18=communityInvestmentTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("communityInvestmentTxtBox: "+string18,true);
wLib.explicitWait(driver, 5, annualPaymentsTxtBox);
string19=annualPaymentsTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("annualPaymentsTxtBox: "+string19,true);
wLib.explicitWait(driver, 5, qualifyingLoanTxtBox);
string20=qualifyingLoanTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("qualifyingLoanTxtBox: "+string20,true);
wLib.explicitWait(driver, 5, postCessationTxtBox);
string21=postCessationTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("postCessationTxtBox: "+string21,true);
wLib.explicitWait(driver, 5, maintenancePaymentTxtBox);
string22=maintenancePaymentTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("maintenancePaymentTxtBox: "+string22,true);
wLib.explicitWait(driver, 5, paymentsTradeTxtBox);
string23=paymentsTradeTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("paymentsTradeTxtBox: "+string23,true);
//wLib.explicitWait(driver, 5, reliefClaimedTxtBox);
//string24=reliefClaimedTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
//Reporter.log("reliefClaimedTxtBox: "+string24,true);
wLib.explicitWait(driver, 5, subscriptionsSharesUnderTxtBox);
string25=subscriptionsSharesUnderTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("subscriptionsSharesUnderTxtBox: "+string25,true);
wLib.explicitWait(driver, 5, socialInvestmentTxtBox);
string26=socialInvestmentTxtBox.getAttribute("value").replace(".00", "").replace("", " ").trim();
Reporter.log("commentTxtBox: "+string26,true);

driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,EmploymentLink);
EmploymentLink.click();
wLib.explicitWait(driver, 5,displayRecordsBtn);
displayRecordsBtn.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
string28=payFrmEmployer.getAttribute("value").replace(".00","").replace("", " ").trim();

wLib.explicitWait(driver, 5, taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,taxForThisYear);
totIncomTaxChar =taxForThisYear.getText().substring(1).replace(",","").replace(".","").replace("", " ").trim();
 Reporter.log("Total Tax: " +totIncomTaxChar ,true);
 
filePath = path;
    Reporter.log("filePath" +filePath, true);
    driver.get(filePath + Folder + filename);
    
    file1=filePath + Folder + filename;
    URL url = new URL(driver.getCurrentUrl());
    InputStream is = url.openStream();
    BufferedInputStream fileToParse = new BufferedInputStream(is);
    PDDocument document = null;
    try {
        document = PDDocument.load(fileToParse);
        String output = new PDFTextStripper().getText(document);
       // String output1 = output.replaceAll("\\s+",""); 
        Reporter.log("Tax Calculation Summary PDF data: " +output, true);
        
    Assert.assertTrue(output.contains(string1));
        Reporter.log("Tax taken off Verified Successfully: " +string1, true);
        
        Assert.assertTrue(output.contains(string2));
        Reporter.log("Gross amount before tax verified Successfully: " +string2, true);
        
        Assert.assertTrue(output.contains(string3));
        Reporter.log("Gains on UK life insurance policy etc on which tax was treated as paid verified Successfully: " +string3, true);
        
        Assert.assertTrue(output.contains(string4));
        Reporter.log("Number of years the policy has been held or since the last gain verified Successfully: " +string4, true);
        Assert.assertTrue(output.contains(string5));
        Reporter.log("Stock dividends - the appropriate amount in cash/cash equivalent of the share capital Verified Successfully: " +string5, true);
        Assert.assertTrue(output.contains(string6));
        Reporter.log("Bonus issues of securities and redeemable shares and close company loans written off or released Verified Successfully: " +string6, true);
        Assert.assertTrue(output.contains(string7));
        Reporter.log("Share schemes – the taxable amount Verified Successfully: " +string7, true);
        Assert.assertTrue(output.contains(string8));
        Reporter.log("Taxable lump sums and certain income after the end of your job Verified Successfully: " +string8, true);
        Assert.assertTrue(output.contains(string9));
        Reporter.log("Lump sums or benefits received from an Employer Financed Retirement Benefits Scheme excluding pensions Verified Successfully: " +string9, true);
        Assert.assertTrue(output.contains(string10));
        Reporter.log("Redundancy, other lump sums and compensation payments (excluding £30,000 exemption) Verified Successfully: " +string10, true);
        Assert.assertTrue(output.contains(string11));
        Reporter.log("Tax taken off Verified: " +string11, true);
        Assert.assertTrue(output.contains(string12));
        Reporter.log("Seafarers’ Earnings Deduction Verified Successfully: " +string12, true);
        Assert.assertTrue(output.contains(string13));
        Reporter.log("Foreign earnings not taxable in the UK Verified Successfully: " +string13, true);
        Assert.assertTrue(output.contains(string14));
        Reporter.log("Foreign tax for which tax credit relief not claimed Verified Successfully: " +string14, true);
        Assert.assertTrue(output.contains(string15));
        Reporter.log("UK patent royalty payments made Verified Successfully: " +string15, true);
        Assert.assertTrue(output.contains(string16));
        Reporter.log("Subscriptions for Venture Capital Trust shares Verified Successfully: " +string16, true);
        Assert.assertTrue(output.contains(string17));
        Reporter.log("Subscriptions for shares under the Enterprise Investment Scheme Verified Successfully: " +string17, true);
        Assert.assertTrue(output.contains(string18));
        Reporter.log("Community Investment Tax Relief Verified Successfully: " +string18, true);
        Assert.assertTrue(output.contains(string19));
        Reporter.log("Annual payments made Verified Successfully: " +string19, true);
        Assert.assertTrue(output.contains(string20));
        Reporter.log("Qualifying loan interest payable in the year Verified Successfully: " +string20, true);
        Assert.assertTrue(output.contains(string21));
        Reporter.log("Post-cessation trade relief and certain other losses Verified Successfully: " +string21, true);
        Assert.assertTrue(output.contains(string22));
        Reporter.log("Maintenance payments(maximum £3,140) Verified Successfully: " +string22, true);
        Assert.assertTrue(output.contains(string23));
        Reporter.log("Payments to a trade union etc. for death benefits Verified Successfully: " +string23, true);
        Assert.assertTrue(output.contains(string24));
        Reporter.log("Relief claimed on redemption of bonus shares or securities Verified Successfully: " +string24, true);
        Assert.assertTrue(output.contains(string25));
        Reporter.log("Subscriptions for shares under the seed enterprise investment scheme Verified Successfully: " +string25, true);
        Assert.assertTrue(output.contains(string26));
        Reporter.log("Social Investment Tax Relief Verified Successfully: " +string26, true);
         Assert.assertTrue(output.contains(string28));
        Reporter.log("Pay from Employer Verified Successfully: " +string28, true);       
        Assert.assertTrue(output.contains(totIncomTaxChar));
        Reporter.log("Income Tax due Verified Successfully: " +totIncomTaxChar, true);
        
        Reporter.log("Self Assessment Forms PDF Verified successfully", true);
    } finally {
        if (document != null) {
            document.close();
        }
        fileToParse.close();
        is.close();
    }driver.navigate().back();
    }

public void funcDelAdditionalInfo(WebDriver driver) throws Exception {
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5,additionalInformationLink); 
additionalInformationLink.click();
wLib.explicitWait(driver, 5, commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5, confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
driver.navigate().refresh();
}
public void findTextOnPage(WebDriver driver) throws Exception 
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,body);	
	bodyText = body.getText();
// count occurrences of the string
	// search for the String within the text
	
while (bodyText.contains("Approved")){
	    // when match is found, increment the count
	    count1++;
	   
	    // continue searching from where you left off
	bodyText = bodyText.substring(bodyText.indexOf("Approved") + "Approved".length());
}
	Reporter.log("Value of Approved Status on First Page of Client List: "+String.valueOf(count1),true);
	 try
	    {
 wLib.explicitWait(driver, 5,linkNext);	
	    	if (linkNext.isDisplayed()==true)
	    	{
	    Reporter.log("Next Page Exist",true);
	    wLib.explicitWait(driver, 5,linkNext);	
	    linkNext.click();
	    wLib.explicitWait(driver, 5,body);	
	    bodyText = body.getText();
	    while (bodyText.contains("Approved")){
	        // when match is found, increment the count
	        count1++;
	       	    
	        // continue searching from where you left off
	    bodyText = bodyText.substring(bodyText.indexOf("Approved") + "Approved".length());
	    	}
	    }
	    }
catch (Exception e) {
	Reporter.log("Next page not available",true);
}
	
	Reporter.log("Value of Approved Status on Second Page of Client List: "+String.valueOf(count1),true);
	expResult1=String.format("%d",(count1));
	wLib.explicitWait(driver, 5,saDashboardLink);
	saDashboardLink.click();
	wLib.explicitWait(driver, 5,statusApprovedClientList);
	actResult1=statusApprovedClientList.getText();
	assertEquals(actResult1, expResult1);
	Reporter.log("Verified Number of Approved Status on Dashboard of SA: "+actResult1,true);
	
	}
public void checkClientList(WebDriver driver) throws Exception 
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,body);
	bodyText = body.getText();
// count occurrences of the string
	// search for the String within the text
while (bodyText.contains("1000000110")){
	    // when match is found, increment the count
	    count1++;
	    
	    
	    // continue searching from where you left off
	bodyText = bodyText.substring(bodyText.indexOf("1000000110") + "1000000110".length());
	}
Reporter.log("Number of clients on Client list page: "+count1,true);
try
	    {
	wLib.explicitWait(driver, 5,linkNext);	
	if (linkNext.isDisplayed()==true)
	    	{
	    Reporter.log("Next Page Exist",true);
	    wLib.explicitWait(driver, 5,linkNext);	
	    linkNext.click();
	    wLib.explicitWait(driver, 5,body);
	    bodyText = body.getText();
	    while (bodyText.contains("1000000110")){
	        // when match is found, increment the count
	        count1++;
	        
	        
	        // continue searching from where you left off
	    bodyText = bodyText.substring(bodyText.indexOf("1000000110") + "1000000110".length());
	    	}
	    }
	    }
catch (Exception e) {
	Reporter.log("Next page not available",true);
}
	Reporter.log("Number of clients on Client list page: "+count1,true);
	wLib.explicitWait(driver, 5,assignAccountantLink);
	assignAccountantLink.click();
	wLib.explicitWait(driver, 5,accountantLSTBox);	
	listbox1 = new Select(accountantLSTBox);
	listbox1.selectByVisibleText("All");
	wLib.explicitWait(driver, 5,searchBtn);	
	searchBtn.click();
	wLib.explicitWait(driver, 5,body);	
	bodyText = body.getText();
	// count occurrences of the string
	// search for the String within the text
	while (bodyText.contains("1000000110")){
    // when match is found, increment the count
    count2++;
    // continue searching from where you left off
bodyText = bodyText.substring(bodyText.indexOf("1000000110") + "1000000110".length());
}
System.out.println("Number of clients on Accountant page: "+count2);
assertEquals(count2, count1);
Reporter.log("Client list verified on Accountant Page: "+count2,true);
}
public void uploadClient(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,importClientLink);
	importClientLink.click();
	wLib.explicitWait(driver, 5,uploadClientTxtBox);
	uploadClientTxtBox.clear();
	uploadClientTxtBox.sendKeys("D:\\SelfAssessment\\listClient.csv");
	uploadClientBtn.click();
	wLib.explicitWait(driver, 5,importChkBox);
	importChkBox.click();
	wLib.explicitWait(driver, 5,importBtn);
	importBtn.click();
	wLib.explicitWait(driver, 5,SelfAssessmentLink);
	SelfAssessmentLink.click();
	wLib.explicitWait(driver, 5,ClientListLink);
	ClientListLink.click();
	wLib.explicitWait(driver, 5,body);
	bodyText = body.getText();
	Assert.assertTrue(bodyText.contains("Nom1"));
	Reporter.log("Client imported successfully",true);
	wLib.explicitWait(driver, 5,importClientLink);
	importClientLink.click();
	wLib.explicitWait(driver, 5,importCancelBtn);
	importCancelBtn.click();
	wLib.explicitWait(driver, 5,body);
	bodyText = body.getText();
	Assert.assertTrue(bodyText.contains("Self Assessment"));
	Reporter.log("Imported action cancelled successfully",true);
	}
public void emailTemplateFunc(WebDriver driver) throws Exception  {
	random = new Random();
	int x = random.nextInt(20) + 1;
	emailTemplatesLink.click();
	wLib.explicitWait(driver, 5,addNewTemplateBtn);
	addNewTemplateBtn.click();
	wLib.explicitWait(driver, 5,templateNameTxtBox);
	templateNameTxtBox.clear();
	templateNameTxtBox.sendKeys("New Tempalate "+x);
	value1=templateNameTxtBox.getAttribute("value");
	emailSubjectTxtBox.clear();
	emailSubjectTxtBox.sendKeys("Showing Tax balance");
	emailFrame.sendKeys("\n");
	emailFrame.sendKeys("[FIRST_NAME]\n");
	emailFrame.sendKeys("\n");
	emailFrame.sendKeys("[LAST_NAME]");
	emailFrame.sendKeys("\n");
	emailFrame.sendKeys("[UTR_NO]");
	emailFrame.sendKeys("\n");
	emailFrame.sendKeys("[PERSON_REF_NO]");
	SaveButton.click();
	wLib.explicitWait(driver, 5,body);
	bodyText = body.getText();
	Assert.assertTrue(bodyText.contains(value1));
	Reporter.log("Template Name verified successfully: "+value1,true);
}
public void scheduleEmailFunction(WebDriver driver)throws Exception {
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,scheduledEmailLink);
	scheduledEmailLink.click();
	wLib.explicitWait(driver, 5,firstNameScheduleMail);
	firstNameScheduleMail.clear();
	firstNameScheduleMail.sendKeys("Client");
	lastNameScheduleMail.clear();
	lastNameScheduleMail.sendKeys("Nom1");
	searchBtn.click();
	wLib.explicitWait(driver, 5,inputItemAllChkBox);
	inputItemAllChkBox.click();
	wLib.explicitWait(driver, 5,selectEmailTemplatesLstBox);
	listbox1 = new Select(selectEmailTemplatesLstBox);
	listbox1.selectByVisibleText("Testing Template");
	expResult1=emailSubjectTxtBox.getAttribute("value");
	ls1 = new LibSA(driver);
	ls1.chooseDate(driver);
	dateScheduleEmailTxtBox.clear();
	dateScheduleEmailTxtBox.sendKeys(ls1.today);
	wLib.explicitWait(driver, 5,sceduleEmailBtn);
	sceduleEmailBtn.click();
	wLib.explicitWait(driver, 5,ClientListLink);
	ClientListLink.click();
	wLib.explicitWait(driver, 5,selectClientScheduleEmail);
	selectClientScheduleEmail.click();
	cis = new CISPage(driver);
	cis.switchwindowForward(driver);
	wLib.explicitWait(driver, 5,emailOptionsLink);
	emailOptionsLink.click();
	WebElement element1=driver.findElement(By.xpath("//td[contains(text(),'"+expResult1+"')]"));
	actResult1=element1.getText();
	assertEquals(actResult1, expResult1);
	Reporter.log("Email Schedule successfully: "+actResult1, true);
}
public void addClientForeignIncome(WebDriver driver) throws Exception
{
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	wLib.explicitWait(driver, 5,clientForeignIncome);
	clientForeignIncome.click();
	
	cis.switchwindowForward(driver);
	
}
public void checkForeignIncomeOverseasSavingWithTaxRelief(WebDriver driver, String str1, String str2,String str3,String str4)throws Exception {
	
	addEmpIncome.click();
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5, payFrmEmployer);
	payFrmEmployer.sendKeys(str1);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,IncomeLink);
	IncomeLink.click();
	wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
//if you’re claiming Foreign Tax Credit Relief, copy column B here. If not, enter column B minus column C
listbox1 = new Select(countryCodeLstBox);
listbox1.selectByValue("99");
colBTxtBox.clear();
colBTxtBox.sendKeys(str2);
colCTxtBox.clear();
colCTxtBox.sendKeys(str3);
colEChkBox.click();
string1=colFTxtBox.getAttribute("value");
Assert.assertEquals(string1, str2);
Reporter.log("Taxable amount (F) verified: "+ string1,true);
colDTxtBox.clear();
colDTxtBox.sendKeys(str4);
SaveBtn2.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 60, delOverseasSavings);
//cancelBtn
}
public void checkForeignIncomeOverseasSavingWithoutTaxRelief(WebDriver driver, String str1, String str2,String str3,String str4)throws Exception {
addEmpIncome.click();
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 30, payFrmEmployer);
payFrmEmployer.sendKeys(str1);
SaveBtn1.click();
wLib.explicitWait(driver, 5,IncomeLink);
IncomeLink.click();
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
//if you’re claiming Foreign Tax Credit Relief, copy column B here. If not, enter column B minus column C
listbox1 = new Select(countryCodeLstBox);
listbox1.selectByValue("99");
colBTxtBox.clear();
colBTxtBox.sendKeys(str2);
colCTxtBox.clear();
colCTxtBox.sendKeys(str3);
//colEChkBox.click();
string1=colFTxtBox.getAttribute("value");
n1=Double.parseDouble(str2);
n2=Double.parseDouble(str3);
x1=n1-n2;
taxTotal=String.format("%.0f",(x1));
Assert.assertEquals(string1, taxTotal);
Reporter.log("Taxable amount (F) verified: "+ string1,true);
colDTxtBox.clear();
colDTxtBox.sendKeys(str4);
SaveBtn2.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 60, delOverseasSavings);
}
public void delForeignIncomeOverseasSaving(WebDriver driver)throws Exception {
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}


public void funcAddEmpIncomeWithTaxTakenOff(WebDriver driver,String str1, String str2, String str3) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 1,payFrmEmployer);	
	payFrmEmployer.sendKeys(str1);
	UkTaxTakenOffPay.sendKeys(str2);
	FxdExpnsDeductTxtBox.clear();
	FxdExpnsDeductTxtBox.sendKeys(str3);
	SaveBtn1.click();
	Reporter.log("Employment Income Added successfully",true);
	driver.navigate().refresh();
}
public void funcAddEmployerForMTR(WebDriver driver,String EmpName,String EmpPayRef)throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	clickEmployment(driver);
	/*try
	{
if(delButton.isDisplayed()==true)
{
do {
	delButton.click();
	wLib.explicitWait(driver,1, confirmDel);	
	confirmDel.click();
	driver.navigate().refresh();
}while(delButton.isDisplayed()==true);
}
	}
catch(Exception e) {
	
	Reporter.log("Employment income  not added before",true);	
}
	try {
if(delEmpName.isDisplayed()==true)
{
	do {
	delEmpName.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel) ;
	cnfmdel.click();
	driver.navigate().refresh();
}while(delEmpName.isDisplayed()==true);
}
	}
	catch (Exception e) {
Reporter.log("Employee Name not added before",true);
	}*/
	wLib.explicitWait(driver, 3,addEmploymentBtn);
	addEmploymentBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,EmployerName);
	EmployerName.sendKeys(EmpName);
	txtEmployerPAYERef.sendKeys(EmpPayRef);
	SaveBtn2.click();
	driver.navigate().refresh();
	WebElement empCellValue= driver.findElement(By.xpath("//td[contains(text(),'"+EmpName+"')] "));
	Assert.assertEquals(empCellValue.getText(), EmpName);
	Reporter.log("Employer Name added successfully",true);
	}
public void funcAddUntaxedInerest(WebDriver driver, String str1)throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 2,formOpenBtn);
	formOpenBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,dateTxtBox);
	dateTxtBox.clear();
	dateTxtBox.sendKeys(dateStart);
	interestAmountTxtBox.clear();
	interestAmountTxtBox.sendKeys(str1);
	unTaxedUKInterestRadioBtn.click();
	SaveBtn2.click();
	driver.navigate().refresh();
	Reporter.log("UnTaxed income added successfully",true);
	}
public void funcAddForeignInterest(WebDriver driver, String str1)throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 2,formOpenBtn);
	formOpenBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,dateTxtBox);
	dateTxtBox.clear();
	dateTxtBox.sendKeys(dateStart);
	interestAmountTxtBox.clear();
	interestAmountTxtBox.sendKeys(str1);
	foreignInterestRadioBtn.click();
	SaveBtn2.click();
	driver.navigate().refresh();
	Reporter.log("Foreign Interest income added successfully",true);
	}
public void addTestCase1(WebDriver driver, String EmpName,String EmpPayRef, String amt1, String amt2, String amt3, String amt4, String bankName, String acntNo) throws Exception {
	wLib = new WaitStatementLib();
	Reporter.log("Exceuting MTR Test Case 1",true);
	clickIncome(driver);
	funcAddEmployerForMTR(driver, EmpName, EmpPayRef);
	funcAddEmpIncomeWithTaxTakenOff(driver,amt1, amt2,"");
	clickIncome(driver);
	addBank(driver, bankName, bankName, acntNo);
	funcAddUntaxedInerest(driver,amt3);
	Reporter.log("Interest added Successfully",true);
	addPensionTaxReliefForm(driver, amt4, "", "", "");
	wLib.explicitWait(driver,5,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	n1=Double.parseDouble(amt1);
	n2=Double.parseDouble(amt3);
	n3=Double.parseDouble(amt2);
	n4=Double.parseDouble(amt4);
	//modified for checking failure
	totalincome = n1 + n2;
	taxDueInc = totalincome - (personalAllowanceRate);	
	taxTotal=String.format("%.2f",(taxDueInc));
	if (taxDueInc >0.00)
	{
	taxdueOnInc1="£"+taxTotal;
	wLib.explicitWait(driver,5,totalIncomeOnWhichTaxIsDue);
	actualtax=totalIncomeOnWhichTaxIsDue.getText().replaceAll(",","");
	Assert.assertEquals(actualtax,taxdueOnInc1 );
	Reporter.log("correct output",true);
	startedRatePayPension=SR_bandScott*startedRateScott;
	basicRatePayPension=(amtBasicRateScott + n4)*basicRateScott;
	intermediateRatePayPension=(n1-(personalAllowanceRate+SR_bandScott+(amtBasicRateScott + n4)))*intermediateRateScott;
	basicRateSaving=n2*percentageZero;
	incomeTaxCharged=startedRatePayPension+basicRatePayPension+intermediateRatePayPension+basicRateSaving;
	totIncomeTaxDue=incomeTaxCharged-n3;
	t1=String.format("%.2f",(incomeTaxCharged));
	t2=incomeTaxDue.getText().substring(1).replace(",", "");
	Assert.assertEquals(t2,t1);
	Reporter.log("Income tax due verified successfully: " +t2,true);
	taxFinal=String.format("%.2f",(totIncomeTaxDue));; 
	taxFinalUI=totalIncomeTaxDue.getText().substring(1);
	Assert.assertEquals(taxFinalUI,taxFinal);
	Reporter.log("Balance Tax fot the year verified successfully: " +taxFinalUI,true);
	}
	
	}
public void funcDelTest1(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 1",true);
	checkLockbutton(driver);
	clickIncome(driver);
	delBank(driver);
	clickEmployment(driver);
	delEmpInfo(driver);
	delPensionTaxRelief(driver);
	
}
public void addTestCase2(WebDriver driver, String EmpName,String EmpPayRef, String amt1, String amt2, String amt3, String amt4,String amt5,String amt6,String amt7,String bankName,String accNo ) throws Exception {
	Reporter.log("Exceuting MTR Test Case 2",true);
	clickIncome(driver);
	funcAddEmployerForMTR(driver, EmpName, EmpPayRef);
	funcAddEmpIncomeWithTaxTakenOff(driver, amt1, amt2,"");
	clickIncome(driver);
	addBank(driver, bankName, bankName, accNo);
	funcAddUntaxedInerest(driver,amt3);
	Reporter.log("Interest added Successfully",true);
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(amt4);
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(amt5);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(amt6);
	SaveBtn1.click();
	addTaxUnderPaid(driver, "", "", amt7);
	n1=Double.parseDouble(amt1);
	n2=Double.parseDouble(amt3);
	n3=Double.parseDouble(amt2);
	n4=Double.parseDouble(amt5);
	n5=Double.parseDouble(amt6);
	n6=Double.parseDouble(amt7);
	wLib = new WaitStatementLib();	
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	//modified for checking failure
	totalincome = n1 + n2 + (n4-n5);
	taxDueInc = totalincome - (personalAllowanceRate);	
	taxTotal=String.format("%.2f",(taxDueInc));
	if (taxDueInc >0.00)
	{
	taxdueOnInc1="£"+taxTotal;
	actualtax=totalIncomeOnWhichTaxIsDue.getText().replaceAll(",","");
	Assert.assertEquals(actualtax,taxdueOnInc1 );
	Reporter.log("correct output",true);
	d1= (taxDueInc-nilRate1)*BR_rate;
	t1=String.format("%.2f",(d1));
	wLib.explicitWait(driver, 5,incomeTaxDue);
	t2=incomeTaxDue.getText().substring(1).replace(",", "");
	Assert.assertEquals(t2,t1);
	Reporter.log("Income tax due verified successfully: " +t2,true);
	total2=d1-(n3-n6);
	taxFinal=String.format("%.2f",(total2));
	wLib.explicitWait(driver, 5,taxForThisYear);
	taxFinalUI=taxForThisYear.getText().substring(1).replace(",", "");
	Assert.assertEquals(taxFinalUI,taxFinal);
	Reporter.log("Balance Tax fot the year verified successfully: " +taxFinalUI,true);
	}
}
public void delTestCase2(WebDriver driver) throws Exception {
	Reporter.log("Deleting MTR Test Case 2",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	wLib.explicitWait(driver, 10,dividentLink);
	dividentLink.click();
	wLib.explicitWait(driver, 10,delInterest);
	delInterest.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 10,cnfmdel);
	cnfmdel.click();
	Reporter.log("Interest deleted successfully",true);
	wLib.explicitWait(driver, 2,delbank);
	delbank.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 30,cnfmdel);
	cnfmdel.click();
	driver.navigate().refresh();
	Reporter.log("Bank deleted successfully",true);
	clickEmployment(driver);
	delEmpInfo(driver);
	delProfit(driver);
	delUnderpaidTax(driver);
	}
public void verifyBankIncome(WebDriver driver) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
/*
try
{
	wLib.explicitWait(driver,1,delInterest);
if (delInterest.isDisplayed()==true)
{
do
{
wLib.explicitWait(driver, 1,delInterest);
delInterest.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 1,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
Reporter.log("Interest deleted successfully",true);
}while(delInterest.isDisplayed()==true);
}
}
catch (Exception e) {
	Reporter.log("Interest not added before",true);
}
try
{
wLib.explicitWait(driver,1,delbank);
if (delbank.isDisplayed()==true)
{
	
wLib.explicitWait(driver, 1,delbank);
delbank.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 1,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
	
}
catch (Exception e) {
	Reporter.log("Bank not added before",true);
}*/
}
public void addTestCase3(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33)throws Exception
{
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 3",true);
	verifyBankIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);
	Reporter.log("Interest added Successfully",true);
	addOtherDivident(driver,str4,"0.00","0.00");
	funcAddEmployerForMTR(driver, str8, str9);
	wLib.explicitWait(driver, 5,addEmpIncome);
	addEmpIncome.click();
	wLib.explicitWait(driver, 1,payFrmEmployer);	
	payFrmEmployer.sendKeys(str10);
	UkTaxTakenOffPay.sendKeys(str11);
	EarningPTtoUAPTxtBox.sendKeys(str33);
	SaveBtn1.click();
	Reporter.log("Employment Income Added successfully",true);
	driver.navigate().refresh();
	addPensionTaxReliefForm(driver,str5, str6, "", "");
	verifyGiftAid(driver);
	addGiftAidPayment(driver, str7);
	clickIncome(driver);
	wLib.explicitWait(driver, 5,selfEmploymentLink);
	selfEmploymentLink.click();
	//delSAFull(driver);
	wLib.explicitWait(driver, 10,frm1Btn);
	frm1Btn.click();
	businessNameTxtBox.clear();
	businessNameTxtBox.sendKeys(str12);
	descriptionofBusinessTxtBox.clear();
	descriptionofBusinessTxtBox.sendKeys(str13);
	booksAccoutsStartDateTxtBox.clear();
	booksAccoutsStartDateTxtBox.sendKeys(str14);
	businessBooksEnddateTxtBox.clear();
	businessBooksEnddateTxtBox.sendKeys(str15);
	businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
	wLib.explicitWait(driver, 2,trunoverTxtBox);
	//Business Income
	trunoverTxtBox.clear();
	trunoverTxtBox.sendKeys(str16);
	//Business Expenses
	goodsOfCostfullTxtBox.clear();
	goodsOfCostfullTxtBox.sendKeys(str17);
	wagesSalariesandOtherStaffCostsTxtBox.clear();
	wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str18);
	travelexpensesTxtBox.clear();
	travelexpensesTxtBox.sendKeys(str19);
	rentInsurancecostTxtBox.clear();
	rentInsurancecostTxtBox.sendKeys(str20);
	advertisingandEntertainmentCostTxtBox.clear();
	advertisingandEntertainmentCostTxtBox.sendKeys(str21);
	interestbankTxtBox.clear();
	interestbankTxtBox.sendKeys(str22);
	bankCreditandOtherFinancialChargesTxtBox.clear();
	bankCreditandOtherFinancialChargesTxtBox.sendKeys(str23);
	otherbusinessexpensesTxtBox.clear();
	otherbusinessexpensesTxtBox.sendKeys(str24);
	basisPeriodBeganTxtBox.clear();
	basisPeriodBeganTxtBox.sendKeys(str25);
	basisPeriodEndedTxtBox.clear();
	basisPeriodEndedTxtBox.sendKeys(str26);
	accountingperiodandProfitlossTxtBox.clear();
	accountingperiodandProfitlossTxtBox.sendKeys(str27);
	anyBusinessIncomeTxtBox.clear();
	anyBusinessIncomeTxtBox.sendKeys(str28);
	balanceStartPeriodTxtBox.clear();
	balanceStartPeriodTxtBox.sendKeys(str29);
	SaveBtn1.click();
	n1 = Double.parseDouble(str3);//3678.00
	n2 = Double.parseDouble(str4);//12750
	n3= Double.parseDouble(str5);//1000
	n4= Double.parseDouble(str6);//1200.00
	n5= Double.parseDouble(str7);//500
	n6 = Double.parseDouble(str10);//33254.00
	n7= Double.parseDouble(str11);//2000.00
	n8 = Double.parseDouble(str16);//74900.00
	n9 = Double.parseDouble(str17);//25000.00
	n10 = Double.parseDouble(str18);//2000.00
	n11 = Double.parseDouble(str19);//12000.00
	n12 = Double.parseDouble(str20);//10800.00
	n13 = Double.parseDouble(str21);//1400.00
	n14 = Double.parseDouble(str22);//5800.00
	n15 = Double.parseDouble(str23);//1500.00
	n16 = Double.parseDouble(str24);//1500.00
	n17 = Double.parseDouble(str27);//-1010.00
	n18 = Double.parseDouble(str28);//300.00
	n19 = Double.parseDouble(str29);//2600.00
	n23 = Double.parseDouble(str33);//24830
	//Balance Sheet
	//Capital Account
	
	wLib.explicitWait(driver, 5,editFullRecordsSE);
	editFullRecordsSE.click();
	total1=n9+n10+n11+n12+n13+n14+n15+n16;
	t1=String.format("%.2f",(total1));
	wLib.explicitWait(driver, 5,businessExpTotalExpensesTxtBox);
	value1=businessExpTotalExpensesTxtBox.getAttribute("value");
	Assert.assertEquals(value1, t1);
	Reporter.log("Total expenses Verified: "+value1,true);
	x1=Double.parseDouble(value1);
	totlIncome=n8-x1;
	t2=String.format("%.2f",(totlIncome));
	//Net profit or loss - Fetch Text
	string1=netProfitTxtBox.getAttribute("value");
	Assert.assertEquals(string1, t2);
	Reporter.log("Net profit Verified: "+string1,true);
	netBusinessProfit=Double.parseDouble(netBusinessProfitfortaxpurposeTxtBox.getAttribute("value"));
	adjustedProfit=Double.parseDouble(adjustedProfitTxtBox.getAttribute("value"));
	Assert.assertEquals(adjustedProfit,(netBusinessProfit+n17));
	Reporter.log("Adjusted profit for current tax year: " +adjustedProfitTxtBox,true);
	
	totalProfitFromBusiness=Double.parseDouble(totalProfitFromBusinessTxtBox.getAttribute("value"));
	Assert.assertEquals(totalProfitFromBusiness,(adjustedProfit+n18));	
	Reporter.log("Total taxable profit from this business Verified: "+totalProfitFromBusiness,true);
	string3=netprofitorlossTxtBox.getAttribute("value");
	Assert.assertEquals(string3,string1);
	Reporter.log("Capital amount Net profit Verified: "+string3,true);
	n20 = Double.parseDouble(string3);//14900.00
	
	balanceEndPeriod=Double.parseDouble(balanceEndPeriodTxtBox.getAttribute("value"));
	Assert.assertEquals(balanceEndPeriod,(n19+n20));
	Reporter.log("Balance at end of period Verified: "+balanceEndPeriod,true);
	Reporter.log("Total taxable profit from this business: "+string3,true);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,finishingTaxLink);
	finishingTaxLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,taxRoundedOffTxtBox);
	taxRoundedOffTxtBox.clear();
	otherInfoTxtBox.clear();
	taxRoundedOffTxtBox.sendKeys(str30);
	otherInfoTxtBox.sendKeys(str31);
	SaveBtn2.click();
	Reporter.log("Finsing Tax Information Added Successfully",true);
	addTaxUnderPaid(driver, "", "", str32);
	Reporter.log("outstanding Debit amount Added Successfully",true);
	n21=Double.parseDouble(str30);//600
	n22=Double.parseDouble(str32);//2000
	wLib = new WaitStatementLib();	
	taxReturnLink.click();
	wLib.explicitWait(driver, 60, taxCalSummaryLink);
	taxCalSummaryLink.click();
	expResult1=TotalIncomeReceived.getText().substring(1).replace(",", "");
	calculation1=Double.parseDouble(expResult1);
	total1=n6+totalProfitFromBusiness+n1+n2;
	Assert.assertEquals(calculation1,total1);
	Reporter.log("Total income received Verified: "+calculation1,true);
	expResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	calculation2=Double.parseDouble(expResult1);
	total2=calculation1 - (n4+personalAllowanceRate);
	Assert.assertEquals(calculation2,total2);
	Reporter.log("Total income on which tax is due Verified: "+calculation2,true);
	startedRatePayPension=SR_bandScott*startedRateScott;
	Reporter.log("startedRatePayPension: "+startedRatePayPension,true);
	basicRatePayPension=round((amtBasicRateScott+n3+(n5*giftAidRate))*basicRateScott,2);
	Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
	intermediateRatePayPension=round(amtIntermediateRateScott*intermediateRateScott,2);
	Reporter.log("Intermediate Rate of Pay Pension: "+intermediateRatePayPension,true);
	total3=round(SR_bandScott+(amtBasicRateScott+n3+(n5*giftAidRate))+amtIntermediateRateScott,2);
	Reporter.log("total of Started, Basic and Heigher amount of Pay Pension: "+total3,true);
	heigherRatePayPension=round((((n6+totalProfitFromBusiness)-(n4+personalAllowanceRate))-total3)*heigherRateScott,2);
	Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
	heigherRateSaving=round((n1-nilRate2)*(HR_rate),2);
	Reporter.log("Heigher Rate of Savingg: "+heigherRateSaving,true);
	heigherRateDividends=round((n2-SR_bandScott)*(dividendTaxHigherRate/100),2);
	Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
	taxDueInc=round(Double.parseDouble(incomeTaxDue.getText().substring(1).replace(",", "")),2);
	Reporter.log("taxDueInc: "+taxDueInc,true);
	incomeTaxCharged=round(startedRatePayPension+basicRatePayPension+intermediateRatePayPension+heigherRatePayPension+heigherRateSaving+heigherRateDividends,2);
	Reporter.log("Income Tax Charged amount: "+incomeTaxCharged,true);
	Assert.assertEquals(taxDueInc,incomeTaxCharged);
	Reporter.log("Income Tax due Verified Successfully: "+taxDueInc,true);
	totalTaxDeductedAmt=round(Double.parseDouble(totalTaxDeducted.getText().substring(1).replace(",", "")),2);
	Reporter.log("Total Tax Deducted Amount: "+totalTaxDeductedAmt,true);
	Assert.assertEquals(totalTaxDeductedAmt,n7-n22);
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeductedAmt,true);
	taxAlreadyRefundedAmt=round(Double.parseDouble(taxAlreadyRefunded.getText().substring(1).replace(",", "")),2);
	Reporter.log("Tax Already Refunded Amount: "+taxAlreadyRefundedAmt,true);
	Assert.assertEquals(taxAlreadyRefundedAmt,n21);
	Reporter.log("Tax already refunded in the year is Verified: "+taxAlreadyRefundedAmt,true);
	
}
public static double round(double value, int places) {
    if (places < 0) throw new IllegalArgumentException();

    long factor = (long) Math.pow(10, places);
    value = value * factor;
    long tmp = Math.round(value);
    return (double) tmp / factor;
}
public void funcDelMTRTest3(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 3",true);
	wLib = new WaitStatementLib();
	checkLockbutton(driver);
	clickIncome(driver);
	delInterestfromUKbanks(driver);
	Reporter.log("UnTaxed amount Deleted Successfully",true);
	clickEmployment(driver);
	delEmpInfo(driver);
	Reporter.log("Employment income Deleted Successfully",true);
	delSelfEmpFull(driver);
	Reporter.log("Self Employment income Deleted Successfully",true);
	clickIncome(driver);
	wLib.explicitWait(driver, 10,dividentLink);
	dividentLink.click();
	delOtherDivident(driver);
	Reporter.log("Divident income Deleted Successfully",true);
	delPensionTaxRelief(driver);
	Reporter.log("Paying into registered pension schemes and overseas pension schemes amount Deleted Successfully",true);
	delGiftAid(driver);
	Reporter.log("Gift Aid Payment amount Deleted Successfully",true);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,finishingTaxLink);
	finishingTaxLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,taxRoundedOffTxtBox);
	taxRoundedOffTxtBox.clear();
	otherInfoTxtBox.clear();
	SaveBtn2.click();
	Reporter.log("Finsing Tax Information Deleted Successfully",true);
	delUnderpaidTax(driver);
	Reporter.log("outstanding Debit amount Deleted Successfully",true);
	
}
public void addTestCase4(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 4",true);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);
	Reporter.log("Interest added Successfully",true);
	dividentUKCompanies(driver,str4,"",str5);
	funcAddEmployerForMTR(driver, str6, str7);
	funcAddEmpIncomeWithTaxTakenOff(driver, str8,str9,"");
	Reporter.log("Employment added Successfully",true);
	n1 = Double.parseDouble(str3);//1579.00
	n2 = Double.parseDouble(str5);//8500.00
	n3= Double.parseDouble(str8);//40511
	n4= Double.parseDouble(str9);//5732.2
	wLib = new WaitStatementLib();	
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,TotalIncomeReceived);
	displayTotal=TotalIncomeReceived.getText().substring(1).replace(",", "");
	calculation1=Double.parseDouble(displayTotal);
	totalincome=n1+n2+n3;
	Assert.assertEquals(calculation1,totalincome);
	Reporter.log("Total income received Verified: "+calculation1,true);
	totIncomTaxChar=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	calculation2=Double.parseDouble(totIncomTaxChar);
	tax1=totalincome-personalAllowanceRate;
	Assert.assertEquals(calculation2,tax1);
	Reporter.log("Total income on which tax is due Verified: "+calculation2,true);
	totalTaxDeductedAmt=round(Double.parseDouble(totalTaxDeducted.getText().substring(1).replace(",", "")),3);
	Assert.assertEquals(totalTaxDeductedAmt,n4);
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeductedAmt,true);
	taxdueOnInc1=incomeTaxDue.getText().substring(1).replace(",", "");
	calculation3=Double.parseDouble(taxdueOnInc1);
	dueTax1=taxLimit1Uk*BR_rate;
	dueTax2=round(((tax1-(taxLimit1Uk+nilRate2+dividentNillRate))*dividendTaxHigherRate)/100,2);
	taxDueInc=dueTax1+dueTax2;
	Assert.assertEquals(calculation3,taxDueInc);
	Reporter.log("Income Tax due Verified: "+calculation3,true);
	incomTaxdue1=taxDueInc-n4;
	if (incomTaxdue1<pAYCode)
	{
taxFinalUI=payCodeAmountTaxSummary.getText().substring(1).replace(",","");
payCodeTaxSummary.isDisplayed();
Assert.assertEquals(taxFinalUI,String.format("%.2f",incomTaxdue1));
Reporter.log("Balance  Tax for this year verified: "+taxFinalUI,true);

	}
	else
	{
taxFinal=taxForThisYear.getText().substring(1).replace(",","");
Reporter.log("Balance for this year: "+taxFinal,true);
Assert.assertEquals(taxFinal, String.format("%.2f",incomTaxdue1));
Reporter.log("Balance  Tax for this year verified: "+taxFinal,true);
	}
	}
public void delDividentEmpIncome(WebDriver driver)throws Exception
{
	clickIncome(driver);
	delBank(driver);
	deleteDivident(driver);
	driver.navigate().refresh();
	clickEmployment(driver);
	delEmpInfo(driver);
	driver.navigate().refresh();
}
public void funcDelMTRTest4(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 4",true);
	checkLockbutton(driver);
	delDividentEmpIncome(driver);
	
}
public void addUKInterestNew(WebDriver driver, String amt) throws Exception
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,formOpenBtn);
	formOpenBtn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,dateTxtBox);
	dateTxtBox.clear();
	dateTxtBox.sendKeys(dateStart);
	wLib.explicitWait(driver, 2,interestAmountTxtBox);
	interestAmountTxtBox.clear();
	interestAmountTxtBox.sendKeys(amt);
	taxedUKInterestRadioBtn.click();
	SaveBtn2.click();
	Reporter.log("Interest added Successfully",true);
	}
public String calculateDividentFrmUKCompany(WebDriver driver) throws InterruptedException
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,amountDividendsfromUKCompanies);
	string1=amountDividendsfromUKCompanies.getText();
	
	String divVal[]=string1.split("£");
	return divVal[2];
}
public String calculateDividentFrmUKCompany1(WebDriver driver) throws InterruptedException
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,amountDividendsfromUKCompanies);
	string1=amountDividendsfromUKCompanies.getText();
	
	String divVal[]=string1.split("£");
	return divVal[3];
}
public String calculateDividentFrmUKCompany2(WebDriver driver) throws InterruptedException
{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5,amountDividendsfromUKCompanies);
	string1=amountDividendsfromUKCompanies.getText();
	
	String divVal[]=string1.split("£");
	return divVal[4];
}
public void verifyGiftAid(WebDriver driver)
{
/*	try {
wLib.explicitWait(driver, 1,delButton) ;
if(delButton.isDisplayed()==true) 
{
	do {
	wLib.explicitWait(driver, 1,delButton);
	delButton.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel) ;
	cnfmdel.click();
	
}while(delButton.isDisplayed()==true);
}	
	}catch (Exception e) {
Reporter.log("Gift Aid Payments not added before",true);
	}*/
}
public void delSAFull(WebDriver driver)
{
try
{
	wLib.explicitWait(driver, 1,delDisplayFullRecords);	
if(delDisplayFullRecords.isDisplayed()==true)
{
	do {
wLib.explicitWait(driver, 1,delDisplayFullRecords);	
delDisplayFullRecords.click();
wLib.explicitWait(driver, 1,confirmDel);
confirmDel.click();
}while(delDisplayFullRecords.isDisplayed()==true);
}	
}
catch(Exception e)
{
	Reporter.log("No Self employment records available",true);	
}
}
public void addTestCase9(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19)throws Exception
{
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 9",true);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	addUKInterestNew(driver,str3);
	funcAddUntaxedInerest(driver,str4);
	dividentUKCompanies(driver,"Company1","",str5);
	addOtherUKIncome(driver,str6,"",str7,"",str8);
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	addGiftAidPayment(driver, str9);
	clickIncome(driver);
	wLib.explicitWait(driver, 5,selfEmploymentLink);
	selfEmploymentLink.click();
	/*try
	{
	wLib.explicitWait(driver, 5,delButton);
	delButton.click();
	wLib.explicitWait(driver, 5,confDel);
	confDel.click();
	}
	catch (Exception e)
	{
	    Reporter.log(e.getMessage(),true);
	}*/
	wLib.explicitWait(driver, 5,formOpenBtn);
	formOpenBtn.click();
	wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
	descriptionOfBusinessTxtBox.clear();
	descriptionOfBusinessTxtBox.sendKeys(str10);
	tradingEnddateTxtBox.clear();
	tradingEnddateTxtBox.sendKeys(str11);
	businessAccountsEnddateTxtBox.clear();
	businessAccountsEnddateTxtBox.sendKeys(dateEnd);
	businessIncomeTxtBox.clear();
	businessIncomeTxtBox.sendKeys(str12);
	costsOfGoodsBoughtForResaleTxtBox.clear();
	costsOfGoodsBoughtForResaleTxtBox.sendKeys(str13);
	otherCapitalAllowancesTxtBox.clear();
	otherCapitalAllowancesTxtBox.sendKeys(str14);
	totalBalancingChargesTxtBox.clear();
	totalBalancingChargesTxtBox.sendKeys(str15);
	ownGoodsAndServicesTxtBox.clear();
	ownGoodsAndServicesTxtBox.sendKeys(str16);
	anyOtherBusinessIncomeTxtBox.clear();
	anyOtherBusinessIncomeTxtBox.sendKeys(str17);
	SaveBtn1.click();
	driver.navigate().refresh();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys("1");
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str18);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str19);
	SaveBtn1.click();
	driver.navigate().refresh();
	n1=Double.parseDouble(str3);//365
	n2=Double.parseDouble(str4);//7283
	n3=Double.parseDouble(str5);//1510
	n4=Double.parseDouble(str6);//1500
	n5=Double.parseDouble(str7);//300
	n6=Double.parseDouble(str9);//2400
	n7=Double.parseDouble(str12);//14560
	n8=Double.parseDouble(str13);//13603
	n9=Double.parseDouble(str14);//1700
	n10=Double.parseDouble(str15);//3926
	n11=Double.parseDouble(str16);//720
	n12=Double.parseDouble(str17);//250
	n13=Double.parseDouble(str18);//7800
	n14=Double.parseDouble(str19);//4200
	total1 = n7-n8;//957
	total2=(total1+n10+n11)-n9;//3903
	total3=total2+n12;//4153
	totalIncome1=n13-n14;//3600
	otherIncomeAmt=n4;
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	dividendsFromUKCompaniesAmt=n3;
	wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
	Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(total3)));
	Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
	Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(totalIncome1)));
	Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);

	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(Math.round(n1*25/100)+n1+n2)));
	Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

	Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
	Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
	totlIncome=total3 + totalIncome1 + (Math.round((n1*25)/100)+n1+n2) + n3 + otherIncomeAmt;
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(total3 + totalIncome1 + (Math.round((n1*25)/100)+n1+n2) + n3 + n4)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome - personalAllowanceRate)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	dueTax1 = totlIncome - personalAllowanceRate;
	amount3= SR_band*percentageZero;
	amount4=(dueTax1-SR_band)*percentageZero;
	amount5 = n3* percentageZero;
	dueTax2 = amount3+amount4+amount5;
	dueTax3=((n6*100)/80)*BR_rate;
	Assert.assertEquals(calculationGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",((n6*100)/80)));
	Reporter.log("Calculation Of Gift Aid Payments verified: "+calculationGiftAidpayments.getText(),true);
	dueTax3=((n6*100)/80)*BR_rate;

	Assert.assertEquals(taxDueGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",(dueTax3)));
	Reporter.log("Tax Due on Gift Aid Payments verified: "+taxDueGiftAidpayments.getText(),true);

	Assert.assertEquals(incomeTaxDueAfterGifTAid.getText().substring(1).replace(",", ""),String.format("%.2f",(dueTax2+dueTax3)));
	Reporter.log("Total Income Tax Due After GifTAid verified: "+incomeTaxDueAfterGifTAid.getText(),true);
	taxBalance=(dueTax2+dueTax3)-((n1*25/100)+n5);
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",((dueTax2+dueTax3)-((n1*25/100)+n5))));
	Reporter.log("Tax For This Year verified: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest9(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 9",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
delGiftAid(driver);
delSEshort(driver);
delProfit(driver);
driver.navigate().refresh();
}
public void addTestCase10(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 10",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);//21005.00
	dividentUKCompanies(driver,"Company1","",str4);//16,000.00
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str5);//8239.00
	otherPensionsRetirementAnnuities.clear();
	otherPensionsRetirementAnnuities.sendKeys(str6);//4800.00
	taxTakenOffOtherPensions.clear();
	taxTakenOffOtherPensions.sendKeys(str7);//960.00
	stateBenefitsSaveBtn.click();
	
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,linkGiftAidpayment);
	addGiftAidPayment(driver, str8);
	n1=Double.parseDouble(str3);//21005.00
	n2=Double.parseDouble(str4);//16,000.00
	n3=Double.parseDouble(str5);//8239.00
	n4=Double.parseDouble(str6);//4800.00
	n5=Double.parseDouble(str7);//960.00
	n6=Double.parseDouble(str8);//2400.00
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,amountDividendsfromUKCompanies);
	string1=amountDividendsfromUKCompanies.getText();
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
	Reporter.log("Interest From UK banks Building 	verified: "+amountInterestFromUKbanksBuilding.getText(),true);	
	String divVal[]=string1.split("£");
	Assert.assertEquals(divVal[2].replace(",", ""),String.format("%.2f",(n2)));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n3+n4)));
	Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	totlIncome = n1+n2+n3+n4;
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome - personalAllowanceRate)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);	
	total1 = (n3+n4)-personalAllowanceRate; //1,189
	Reporter.log("total1: "+total1,true);
	basicRatePayPension=total1*(BR_rate);//£237.80
	Reporter.log("basicRatePayPension: "+basicRatePayPension,true);
	startedRateSaving=SR_band-total1;//3,811.00
	Reporter.log("startedRateSaving: "+startedRateSaving,true);
	//nilRate2-500
	total2=n1-(startedRateSaving+nilRate2);//
	Reporter.log("total2: "+total2,true);
	basicRateSaving=total2*(BR_rate);//3,338.80
	Reporter.log("basicRateSaving: "+basicRateSaving,true);
	//dividentNillRate-2000
	total3=n6*giftAidRate;
	Reporter.log("total3: "+total3,true);
	total4=((taxLimit1Uk+total3)-(total1+n1))-dividentNillRate;
	Reporter.log("total4: "+total4,true);
	basicRateDividends=(total4*dividendTaxBasicRate)/100;//997.95
	Reporter.log("basicRateDividends: "+basicRateDividends,true);
	total5=n2-(total4+dividentNillRate);
	Reporter.log("total5: "+total5,true);
	heigherRateDividends=(total5*dividendTaxHigherRate)/100;//225.55
	Reporter.log("heigherRateDividends: "+heigherRateDividends,true);
	totIncomeTaxDue=basicRatePayPension+basicRateSaving+basicRateDividends+heigherRateDividends;//£4,800.10
	Reporter.log("Total Income Tax Due: "+totIncomeTaxDue,true);
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue-n5)));
	Reporter.log("Balance  Tax for this year verified: "+ taxForThisYear.getText(),true);
	
}
public void funcDelMTRTest10(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 10",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
delGiftAid(driver);
driver.navigate().refresh();
}
public void addStudentLoanPlan2(WebDriver driver, String str1) throws Exception
{	
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
	listbox1 = new Select(studentLoanTypeLstBox);
	listbox1.selectByValue("2");
	amountTxtBox.clear();
	amountTxtBox.sendKeys(str1);
	repaidChckBox.click();
	SaveBtn2.click();
	Reporter.log("Plan 2 student loan added successfully",true);
	}
public void addStudentLoanPlan1(WebDriver driver, String str1) throws Exception
{	
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
	listbox1 = new Select(studentLoanTypeLstBox);
	listbox1.selectByValue("1");
	amountTxtBox.clear();
	amountTxtBox.sendKeys(str1);
	SaveBtn2.click();
	Reporter.log("Plan 2 student loan added successfully",true);
	}
public void addTestCase14(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 14",true);
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 2,dividentLink);
	dividentLink.click();
	addOtherDivident(driver,str1,"","");
	funcAddEmployerForMTR(driver,str2,str3);
	funcAddEmpIncomeWithTaxTakenOff(driver, str4,str5,"");
	addStudentLoanPlan2(driver, str6);
	addTaxUnderPaid(driver, "", "", str7);
	n1=Double.parseDouble(str1);//£12,750.00
	n2=Double.parseDouble(str4);//£33254.00
	n3=Double.parseDouble(str5);//£2000.00
	n4=Double.parseDouble(str6);//1343.16
	n5=Double.parseDouble(str7);//2000
	totalincome=n1+n2;
	taxDueInc=totalincome-personalAllowanceRate;
	wLib.explicitWait(driver, 2,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 2,taxCalSummaryLink);
	taxCalSummaryLink.click();
	total1 = n2 - personalAllowanceRate;//21,404.00
	basicRatePayPension =total1*(BR_rate);//4,280.80
	total2 =n1 - dividentNillRate;//10,750.00	
	basicRateDividends=total2*(dividendTaxBasicRate/100);//806.25
	totIncomeTaxDue=basicRatePayPension+basicRateDividends;
	studentLoanAmt =(Math.floor(((n1+n2)- plan2Threshold)*studentLoanRate)) -  (java.lang.Math.ceil(n4));//546.00
	Reporter.log("Calculated Value of  Student Loan repayments: "+studentLoanAmt,true);
	wLib.explicitWait(driver, 5,payFromAllEmployments);
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(n2)));
	Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
	string1=amountDividendsfromUKCompanies.getText();
	String divVal[]=string1.split("£");
	Assert.assertEquals(divVal[2].replace(",", ""),String.format("%.2f",(n1)));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
	Reporter.log("total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

	Assert.assertEquals(amtBasicRatePayPensionsTest14.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
	Reporter.log("Basic Rate of Pay Pensions verified:" + amtBasicRatePayPensionsTest14.getText(),true);

	Assert.assertEquals(amtNilRateDividentTest14.getText().substring(1).replace(",", ""),String.format("%.2f",(dividentNillRate)));
	Reporter.log("Nil Rate of Divident verified:" + amtNilRateDividentTest14.getText(),true);

	Assert.assertEquals(amtBasicRate.getText().substring(1).replace(",", ""),String.format("%.2f",(total2)));
	Reporter.log("Basic Rate of Dividends verified:" + amtBasicRate.getText(),true);
	
	Reporter.log("Basic Rate of Pay, pensions, profit etc.: " + String.format("%.2f",(basicRatePayPension)),true);
	Reporter.log("Nil rate of Dividends from companies etc. :"+ String.format("%.2f",(dividentNillRate*percentageZero)),true); 
	Reporter.log("Basic Rate of Dividends from companies etc.: "+String.format("%.2f",(basicRateDividends)),true); 
	
	
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
	totalTaxDeductedAmt=(totIncomeTaxDue+studentLoanAmt)-(n3-n5);
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
	Reporter.log("Balance  Tax for this year verified: "+ incomeTaxDue.getText(),true);
	}
public void funcDelMTRTest14(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 14",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	wLib.explicitWait(driver, 10,dividentLink);
	dividentLink.click();
	delOtherDivident(driver);
	Reporter.log("Other Divident Income Deleted Successfully",true);
	clickEmployment(driver);
	delEmpInfo(driver);
	Reporter.log("Employment Income Deleted Successfully",true);
	delStudentLoanRepayment(driver);
	Reporter.log("Student Loan Amount Deleted Successfully",true);
	delUnderpaidTax(driver);
	Reporter.log("Underpaid Tax amount Deleted Successfully",true);
}
public void addTestCase15(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21)throws Exception
{
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 15",true);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);
	Reporter.log("Interest added Successfully",true);
	addOtherDivident(driver,str4,"0.00","0.00");
	addPensionTaxReliefForm(driver,"", str5, "", "");
	clickIncome(driver);
	wLib.explicitWait(driver, 5,selfEmploymentLink);
	selfEmploymentLink.click();
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	businessNameTxtBox.clear();
	businessNameTxtBox.sendKeys(str6);
	descriptionofBusinessTxtBox.clear();
	descriptionofBusinessTxtBox.sendKeys(str7);
	booksAccoutsStartDateTxtBox.clear();
	booksAccoutsStartDateTxtBox.sendKeys(str8);
	businessBooksEnddateTxtBox.clear();
	businessBooksEnddateTxtBox.sendKeys(str9);
	businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
	wLib.explicitWait(driver, 5,trunoverTxtBox);
	//Business Income
	trunoverTxtBox.clear();
	trunoverTxtBox.sendKeys(str10);
	//Business Expenses
	goodsOfCostfullTxtBox.clear();
	goodsOfCostfullTxtBox.sendKeys(str11);
	wagesSalariesandOtherStaffCostsTxtBox.clear();
	wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str12);
	travelexpensesTxtBox.clear();
	travelexpensesTxtBox.sendKeys(str13);
	rentInsurancecostTxtBox.clear();
	rentInsurancecostTxtBox.sendKeys(str14);
	advertisingandEntertainmentCostTxtBox.clear();
	advertisingandEntertainmentCostTxtBox.sendKeys(str15);
	interestbankTxtBox.clear();
	interestbankTxtBox.sendKeys(str16);
	bankCreditandOtherFinancialChargesTxtBox.clear();
	bankCreditandOtherFinancialChargesTxtBox.sendKeys(str17);
	otherbusinessexpensesTxtBox.clear();
	otherbusinessexpensesTxtBox.sendKeys(str18);
	basisPeriodBeganTxtBox.clear();
	basisPeriodBeganTxtBox.sendKeys(dateStart);
	basisPeriodEndedTxtBox.clear();
	basisPeriodEndedTxtBox.sendKeys(dateEnd);
	accountingperiodandProfitlossTxtBox.clear();
	accountingperiodandProfitlossTxtBox.sendKeys(str19);
	anyBusinessIncomeTxtBox.clear();
	anyBusinessIncomeTxtBox.sendKeys(str20);
	n1 = Double.parseDouble(str3);//3678.00
	n2 = Double.parseDouble(str4);//12750.00
	n3= Double.parseDouble(str5);//1200.00
	n4 = Double.parseDouble(str10);//74900.00
	n5 = Double.parseDouble(str11);//25000.00
	n6 = Double.parseDouble(str12);//2000.00
	n7 = Double.parseDouble(str13);//12000.00
	n8 = Double.parseDouble(str14);//10800.00
	n9 = Double.parseDouble(str15);//1400.00
	n10 = Double.parseDouble(str16);//5800.00
	n11 = Double.parseDouble(str17);//1500.00
	n12 = Double.parseDouble(str18);//1500.00
	n13 = Double.parseDouble(str19);//-1010.00
	n14 = Double.parseDouble(str20);//300.00
	balanceStartPeriodTxtBox.clear();
	balanceStartPeriodTxtBox.sendKeys(str21);
	n15 = Double.parseDouble(str21);//2600.00
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,editFullRecordsSE);
	editFullRecordsSE.click();
	total1=n5+n6+n7+n8+n9+n10+n11+n12;
	t1=String.format("%.2f",(total1));
	value1=businessExpTotalExpensesTxtBox.getAttribute("value");
	Assert.assertEquals(value1, t1);
	Reporter.log("Total expenses Verified: "+value1,true);
	x1=Double.parseDouble(value1);
	totlIncome=n4-x1;
	t2=String.format("%.2f",(totlIncome));
	//Net profit or loss - Fetch Text
	string1=netProfitTxtBox.getAttribute("value");
	Assert.assertEquals(string1, t2);
	Reporter.log("Net profit Verified: "+string1,true);
	netBusinessProfit=Double.parseDouble(netBusinessProfitfortaxpurposeTxtBox.getAttribute("value"));
	adjustedProfit=Double.parseDouble(adjustedProfitTxtBox.getAttribute("value"));
	Assert.assertEquals(adjustedProfit,(netBusinessProfit+n13));
	Reporter.log("Adjusted profit for current tax year: " +adjustedProfitTxtBox,true);
	
	totalProfitFromBusiness=Double.parseDouble(totalProfitFromBusinessTxtBox.getAttribute("value"));
	Assert.assertEquals(totalProfitFromBusiness,(adjustedProfit+n14));	
	Reporter.log("Total taxable profit from this business Verified: "+totalProfitFromBusiness,true);
	string3=netprofitorlossTxtBox.getAttribute("value");
	Assert.assertEquals(string3,string1);
	Reporter.log("Capital amount Net profit Verified: "+string3,true);
	n16 = Double.parseDouble(string3);

	balanceEndPeriod=Double.parseDouble(balanceEndPeriodTxtBox.getAttribute("value"));
	Assert.assertEquals(balanceEndPeriod,(n15+n16));
	Reporter.log("Balance at end of period Verified: "+balanceEndPeriod,true);
	Reporter.log("Balance at end of period Verified: "+string3,true);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,form1OpenBtn);
	form1OpenBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
	listbox1 = new Select(studentLoanTypeLstBox);
	listbox1.selectByValue("1");
	SaveBtn2.click();
	wLib.explicitWait(driver, 5, taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	expResult1=TotalIncomeReceived.getText().substring(1).replace(",", "");
	calculation1=Double.parseDouble(expResult1);
	total1=totalProfitFromBusiness+n1+n2;
	Assert.assertEquals(calculation1,total1);
	Reporter.log("Total income received Verified: "+calculation1,true);
	expResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	calculation2=Double.parseDouble(expResult1);
	total2=calculation1 - (n3+personalAllowanceRate);
	Assert.assertEquals(calculation2,total2);
	Reporter.log("Total income on which tax is due Verified: "+calculation2,true);
	expResult1=incomeTaxDue.getText().substring(1).replace(",", "");
	calculation3=Double.parseDouble(expResult1);
	total1=calculation2-(n1+n2); //1,490.00
	dueTax1=total1*BR_rate; //£298.00
	dueTax2=n1*percentageZero; //£0.00
	dueTax3=dividentNillRate*percentageZero;//£0.00
	total2= n2-dividentNillRate;//£10750	
	dueTax4=(total2*dividendTaxBasicRate)/100;//£581.25
	taxDueInc=dueTax1+dueTax2+dueTax3+dueTax4;//879.25
	Assert.assertEquals(calculation3,taxDueInc);
	Reporter.log("Income Tax due Verified: "+calculation3,true);
	total3 = totalProfitFromBusiness - class4LPLAmt;
	total4=total3*class4LPLRate;
	total5=(totalProfitFromBusiness	+ n1 + n2)-n3;//29418
	total6=(total5-plan1Threshold)*studentLoanRate;//997.00
	Reporter.log("student Loan Amount: "+total6,true);
	Assert.assertEquals(amtBasicRatePayPensions.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
	Reporter.log("Pay, pensions, profit etc. (UK rate for England, Wales and Northern Ireland) -> Basic rate verified:" + amtBasicRatePayPensions.getText(),true);
	Assert.assertEquals(txtSavingsinterestStartingrate.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
	Reporter.log("Savings interest from banks or building societies, securities etc. -> Starting rate verified:" + txtSavingsinterestStartingrate.getText(),true);
	Reporter.log("Pay, pensions, profit etc. (UK rate for England, Wales and Northern Ireland) -> Basic rate: " + String.format("%.2f",(dueTax1)),true);
	Reporter.log("Savings interest from banks or building societies, securities etc. -> Starting rate: "+ String.format("%.2f",(dueTax2)),true); 
	Reporter.log("Dividends from companies etc. -> Nil rate: "+String.format("%.2f",(dueTax3)),true); 
	Reporter.log("Dividends from companies etc.-> Basic rate: "+String.format("%.2f",(dueTax4)),true); 
	Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",",""),String.format("%.2f",(total4)));
	Reporter.log("Amaount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
	Assert.assertEquals(studentLoanAmountTaxWindow.getText().substring(1).replace(",",""),String.format("%.2f",(Math.floor(total6))));
	Reporter.log("Student Loan repayments verified:" + studentLoanAmountTaxWindow.getText(),true);
	
}
public void funcDelMTRTest15(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 15",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	delSelfEmpFull(driver);
	clickIncome(driver);
	delInterestfromUKbanks(driver);
	delOtherDivident(driver);
	delStudentLoanRepayment(driver);
	delPensionTaxRelief(driver);
	
}
public void addTestCase16(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 16",true);
	wLib = new WaitStatementLib();
	clickIncome(driver);
	addBank(driver, str1, str1, str2);
	funcAddUntaxedInerest(driver, str3);
	Reporter.log("Interest added Successfully",true);
	addOtherDivident(driver,str4,"0.00","0.00");
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str5);
	stateBenefitsSaveBtn.click();
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str6);
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str7);
	rentRatesInsuranceEtcTxtBox.clear();
	rentRatesInsuranceEtcTxtBox.sendKeys(str8);
	repairsAndMaintenanceTxtBox.clear();
	repairsAndMaintenanceTxtBox.sendKeys(str9);
	intrstAndOthrFinancialChrgsTxtBox.clear();
	intrstAndOthrFinancialChrgsTxtBox.sendKeys(str10);
	legalManagmntAndPrfsnalFeesTxtBox.clear();
	legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str11);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str12);
	tenPercntWearAndTearAllowanceTxtBox.clear();
	tenPercntWearAndTearAllowanceTxtBox.sendKeys(str13);
	txtBoxLossBroughtForward.clear();
	txtBoxLossBroughtForward.sendKeys(str14);
	ResidentialfinancecostsTxtBox.clear();
	ResidentialfinancecostsTxtBox.sendKeys(str15);
	SaveBtn1.click();
	n1 = Double.parseDouble(str3);//n1 = 3678
	n2 = Double.parseDouble(str4);//n2 =12750
	n3 = Double.parseDouble(str5);//n3 = 6200
	n4 = Double.parseDouble(str7);//n4 = 131731
	n5 = Double.parseDouble(str8);//n5 = 218
	n6 = Double.parseDouble(str9);//n6 = 1817.00
	n7 = Double.parseDouble(str10);//n7 = 59000.00
	n8 = Double.parseDouble(str11);//n8 = 5527
	n9 = Double.parseDouble(str12);//n9 = 59
	n10 = Double.parseDouble(str13);//n10 = 13171
	n11 = Double.parseDouble(str14);//n11 =1197
	n12 = Double.parseDouble(str15);//n12 =29700
	wLib.explicitWait(driver, 5,adjustedProfitForTheYear);
	string1=adjustedProfitForTheYear.getAttribute("value");
	calculation1=Double.parseDouble(string1);
	string2=taxableProfitForTheYear.getAttribute("value");
	calculation2=Double.parseDouble(string2);
	total1=n4-(n5+n6+n7+n8+n9+n10);//51939.00
	total2=total1-n11;//50742.00	
	Assert.assertEquals(calculation1,total1);
	Reporter.log("Adjusted profit for the year verified successfully: "+calculation1,true);
	Assert.assertEquals(calculation2,total2);
	Reporter.log("Taxable profit for the year verified successfully: "+calculation2,true);
	total3=total1+n1+n2+n3;//£74,567.00	 
	total4 = n11+personalAllowanceRate+blindAllowance; 
	totalincome = total3-total4;//£59,130.00
	startedRatePayPension=SR_bandScott*startedRateScott;
	basicRatePayPension=amtBasicRateScott*basicRateScott;
	intermediateRatePayPension=amtIntermediateRateScott*intermediateRateScott;
	heigherRatePayPension=(totalincome-(SR_bandScott+amtBasicRateScott+amtIntermediateRateScott+n1+n2))*heigherRateScott;
	heigherRateSaving=(n1-nilRate2)*(HR_rate);
	heigherRateDividends=(n2-dividentNillRate)*(dividendTaxHigherRate/100);
	totIncomeTaxDue=startedRatePayPension+basicRatePayPension+intermediateRatePayPension+heigherRatePayPension+heigherRateSaving+heigherRateDividends;
	finalAmount=totIncomeTaxDue-(n12*reliefFinancerate);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
	Reporter.log("Amount of Profit From UK Land And Property is Verified: "+amountProfitFromUKLandAndProperty.getText(),true);

	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
	Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);

	string1=amountDividendsfromUKCompanies.getText();
	
	String divVal[]=string1.split("£");
	Assert.assertEquals(divVal[2].replace(",", ""),String.format("%.2f",(n2)));
	Reporter.log("Amount of Dividends from UK Companies is Verified: "+amountDividendsfromUKCompanies.getText(),true);
	wLib.explicitWait(driver, 5,amountUKpensionsAndStateBenefits);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n3)));
	Reporter.log("Amount of UK pensions and State Benefits is Verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	incomeTaxReliefAmt=n11;
	Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
	Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
	Assert.assertEquals(amtBlindPersonAllowance.getText().substring(1).replace(",", ""),String.format("%.2f",(blindAllowance)));
	Reporter.log("Amount of Blind Person Allowance is Verified: "+amtBlindPersonAllowance.getText(),true);
	
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(total3)));
	Reporter.log("Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);
	
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
	
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(finalAmount)));
	Reporter.log("Balance for the year is Verified: "+taxForThisYear.getText(),true);
	
}
public void funcDelMTRTest16(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 16",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	delBank(driver);
	delOtherDivident(driver);
	Reporter.log("State benefits, Pensions, Annuities,Bank Interest, Dividend Income & Other UK Income Deleted Successfully",true);
	clickIncome(driver);
	delProfit(driver);
	Reporter.log("All Incomes for test case 16 deleted successfully",true);
	
}
public void addTestCase17(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15)throws Exception
{
Reporter.log("Exceuting MTR Test Case 17",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
addOtherDivident(driver,str4,"0.00","0.00");
funcAddEmployerForMTR(driver, str5, str6);
funcAddEmpIncomeWithTaxTakenOff(driver,str7,str8,"");
addStudentLoanPlan2(driver, "");
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str9);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str10);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str11);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str12);
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str13);
SaveBtn1.click();
driver.navigate().refresh();
n1 = Double.parseDouble(str3);//n1 = 3678.00
n2 = Double.parseDouble(str4);//n2 =12,750.00
n3 = Double.parseDouble(str7);//n3 = 33254.00
n4 = Double.parseDouble(str8);//n4 = 2000.00
n5 = Double.parseDouble(str10);//n5 =17800.00
n6 = Double.parseDouble(str11);//n6 = 13000.00
n7 = Double.parseDouble(str12);//n7 = 1200.00
n8 = Double.parseDouble(str13);//n8 = 4000.00
n9 = Double.parseDouble(str14);//n9 = 1800.00
n10 = Double.parseDouble(str15);//n10 = 2000.00
string1=adjustedProfitForTheYear.getAttribute("value");
calculation1=Double.parseDouble(string1);
string2=taxableProfitForTheYear.getAttribute("value");
calculation2=Double.parseDouble(string2);
total1=n5-(n6+n7);//3600
total2=total1;//3600
Assert.assertEquals(calculation1,total1);
Reporter.log("Adjusted profit for the year verified successfully: "+calculation1,true);
Assert.assertEquals(calculation2,total2);
Reporter.log("Taxable profit for the year verified successfully: "+calculation2,true);
addPensionTaxReliefForm(driver,str14,"","","");

Reporter.log("Payments To Registered Pension Schemes added successfully",true);
addTaxUnderPaid(driver, "", "",  str15);
Reporter.log("Tax UnderPaid added successfully",true);
wLib.explicitWait(driver, 10,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 10,taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 10,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(n3)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
Reporter.log("Interest From UK banks Building 	verified: "+amountInterestFromUKbanksBuilding.getText(),true);	
string3=amountDividendsfromUKCompanies.getText();
String divVal[]=string3.split("£");
Assert.assertEquals(divVal[2].replace(",", ""),String.format("%.2f",(n2)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
totlIncome=n3+total1+n1+n2; //53282
tax1=totlIncome-personalAllowanceRate;
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(tax1)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
total3=(n3+total1)- (taxLimit1Uk+n9);//554
total4=personalAllowanceRate -((n1-nilRate2) + total3);//8118
total5=total3+total4;//8,672
basicRatePayPension = (n3+total1)-total5;//28182
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£5,636.40
Reporter.log("Calculated amount of basic Rate of Pay Pension: "+dueTax1,true);
basicRateDividends=((taxLimit1Uk+n9)-(basicRatePayPension+nilRate2))-dividentNillRate;//£5,618
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax2=(basicRateDividends*dividendTaxBasicRate)/100;//£421.35
Reporter.log("Calculated amount of Basic Rate of Dividends: "+dueTax2,true);
heigherRateDividends=n2-(basicRateDividends+dividentNillRate);//5132
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax3=(heigherRateDividends*dividendTaxHigherRate)/100;//1,667.90
Reporter.log("Calculated amount of Heigher Rate of Dividends: "+dueTax3,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));//7,725.65
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts=total1*reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//720.00
Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);
studentLoanAmt=Math.round(((totlIncome - n9)-plan2Threshold)*studentLoanRate);
Assert.assertEquals(studentLoanAmountTaxWindow.getText().substring(1).replace(",", ""),String.format("%.2f",(studentLoanAmt)));//2,383.00
Reporter.log("Student Loan repayments amount is verified: "+studentLoanAmountTaxWindow.getText(),true);
finalAmount=(totIncomeTaxDue-amtReliefForFinanceCosts+studentLoanAmt)-(n4-n10);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(finalAmount)));//£9,388.65
Reporter.log("Tax For This Year is verified: "+taxForThisYear.getText(),true);

}
public void funcDelMTRTest17(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 17",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	funcDelTest1(driver);
	clickIncome(driver);
	wLib.explicitWait(driver, 5,dividentLink);
	dividentLink.click();
	delOtherDivident(driver);
	clickIncome(driver);
	delProfit(driver);
	delStudentLoanRepayment(driver);
	delUnderpaidTax(driver);
	}
public void addTestCase18(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7)throws Exception
{
Reporter.log("Exceuting MTR Test Case 18",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
funcAddEmpIncomeWithTaxTakenOff(driver,str3,str4,str5);
addTaxUnderPaid(driver,str6, "",  str7);
Reporter.log("Tax UnderPaid added successfully",true);
n1 = Double.parseDouble(str3);//n1 = 37950.00
n2 = Double.parseDouble(str4);//n2 =5879.00
n3 = Double.parseDouble(str5);//n3 = 450.00
n4 = Double.parseDouble(str6);//n4 = 245.00
n5 = Double.parseDouble(str7);//n5 =400.00
wLib.explicitWait(driver, 10,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 10,taxCalSummaryLink);
taxCalSummaryLink.click();
totalincome=n1-n3;
tax1=totalincome - personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",(n3)));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(TotalIncomeReceived.getText(),TotalFromAllEmployment.getText());
Reporter.log("Total income received is verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(tax1)));
Reporter.log("Total from all employments is verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=tax1*BR_rate;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(basicRatePayPension)));//5,130.00
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
Assert.assertEquals(amtUnderpaidTaxForEarlierYears.getText().substring(1).replace(",", ""),String.format("%.2f",(n4)));//245
Reporter.log("Underpaid tax for earlier years is verifired successfully"+ amtUnderpaidTaxForEarlierYears.getText(),true);
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",(basicRatePayPension+n4)));//5,375.00
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDue1.getText(),true);
Totaltax=(n2-n5)-(basicRatePayPension+n4);
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));//5,375.00
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
}
public void delTestCase18(WebDriver driver) throws Exception 
{
	Reporter.log("Deleting MTR Test Case 18",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);	
	clickEmployment(driver);
	delEmpInfo(driver);
	delUnderpaidTax(driver);	
}
public void addTestCase19(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{	
	Reporter.log("Exceuting MTR Test Case 19",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);
	Reporter.log("Interest added Successfully",true);
	dividentUKCompanies(driver,str4,"",str5);
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str6);//8239.00
	stateBenefitsSaveBtn.click();
	funcAddEmployerForMTR(driver, str7, str8);
	funcAddEmpIncomeWithTaxTakenOff(driver, str9,"","");
	n1 = Double.parseDouble(str3);//n1 = 28845.00
	n2 = Double.parseDouble(str5);//n2 =6000.00
	n3 = Double.parseDouble(str6);//n3 = 6200.00
	n4 = Double.parseDouble(str9);//n4 = 9050.00
	wLib.explicitWait(driver, 10,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 10,taxCalSummaryLink);
	taxCalSummaryLink.click();
	dividendsFromUKCompaniesAmt=n2;
	wLib.explicitWait(driver, 5,payFromAllEmployments);
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(n4)));
	Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
	Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n3)));
	Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	totlIncome = n1+n2+n3+n4;
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome - personalAllowanceRate)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);	
	basicRatePayPension=(n3+n4)-personalAllowanceRate;//3400
	Reporter.log("basicRatePayPension: "+basicRatePayPension,true);
	dueTax1=round(basicRatePayPension*BR_rate,2);//£680.00
	Reporter.log("dueTax1: "+dueTax1,true);
	startedRateSaving=SR_band-basicRatePayPension;//£1,600
	Reporter.log("startedRateSaving: "+startedRateSaving,true);
	basicRateSaving=n1-(startedRateSaving+nilRate2);//£26,745
	Reporter.log("basicRateSaving: "+basicRateSaving,true);
	dueTax2=round(basicRateSaving*BR_rate,2);//£5,349.00
	Reporter.log("Basic Rate of Saving: "+dueTax2,true);
	basicRateDividends=(taxLimit1Uk-(n1+basicRatePayPension))-dividentNillRate;//£255
	dueTax3=round((basicRateDividends*dividendTaxBasicRate)/100,2);//£19.13
	Reporter.log("Basic Rate of Dividends: "+dueTax3,true);
	heigherRateDividends=n2-(basicRateDividends+dividentNillRate);//£3,745
	dueTax4=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//£1,217.13
	Reporter.log("dueTax4: "+dueTax4,true);
	totIncomeTaxDue=Math.round(dueTax1+dueTax2+dueTax3+dueTax4);//£7,265.26
	Reporter.log("Total Due tax: "+totIncomeTaxDue,true);
	Assert.assertEquals(incomeTaxDue.getText().substring(1,6).replace(",", ""),String.format("%.0f",(totIncomeTaxDue)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);	
}
public void delTestCase19(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 19",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	delDividentEmpIncome(driver);
}
public void addTestCase20(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 20",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	addUKInterestNew(driver,str3);
	funcAddUntaxedInerest(driver,str4);
	dividentUKCompanies(driver,str5,"",str6);
	funcAddEmployerForMTR(driver, str7, str8);
	funcAddEmpIncomeWithTaxTakenOff(driver,str9,"","");
	n1 = Double.parseDouble(str3);//n1 = 747.00
	n2 = Double.parseDouble(str4);//n2 =27500.00
	n3 = Double.parseDouble(str6);//n3 = 22500.00
	n4 = Double.parseDouble(str9);//n4 = 10850.00
	total1=n1*taxedUKInterestRate;
	total2=Math.floor(n1+total1+n2);
	wLib.explicitWait(driver, 10,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 10,taxCalSummaryLink);
	taxCalSummaryLink.click();
	dividendsFromUKCompaniesAmt=n3;
	wLib.explicitWait(driver, 5,payFromAllEmployments);
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(n4)));//£10,850.00	 
	Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(total2)));//£28,433.00	 
	Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));// £22,500.00	 
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	totlIncome = total2+n3+n4;
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome - personalAllowanceRate)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);	
	
	basicRateSaving=(n4+total2)-(personalAllowanceRate+SR_band+nilRate2);//21,933.00
	Reporter.log("basicRateSaving: "+basicRateSaving,true);
	dueTax1=round(basicRateSaving*BR_rate,2);//£4,386.60
	Reporter.log("Basic rate of Saving: "+dueTax1,true);
	
	basicRateDividends=(taxLimit1Uk-(total2-(personalAllowanceRate-n4)))-dividentNillRate;//5,067.00	
	dueTax2=round((basicRateDividends*dividendTaxBasicRate)/100,2);//£380.03
	Reporter.log("Basic rate of Dividend: "+dueTax2,true);
	heigherRateDividends=n3-(basicRateDividends+dividentNillRate);//£15,433.00	
	dueTax3=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//£5,015.73
	Reporter.log("Heigher Rate of Dividend: "+dueTax3,true);
	totIncomeTaxDue=Math.round(dueTax1+dueTax2+dueTax3);//£9,782.35
	Reporter.log("Income Tax Due amount: "+totIncomeTaxDue,true);
	Totaltax=Double.parseDouble(incomeTaxDue.getText().substring(1).replace(",", ""));
	finalAmount=Totaltax-total1;
	Assert.assertEquals(incomeTaxDue.getText().substring(1,6).replace(",", ""),String.format("%.0f",(totIncomeTaxDue)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);	
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(finalAmount)));
	Reporter.log("Balance for the year is Verified: "+taxForThisYear.getText(),true);
	
	
}
public void delTestCase20(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 20",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	delDividentEmpIncome(driver);
}
public void addTestCase21(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 21",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);
	dividentUKCompanies(driver,str4,"",str5);
	funcAddEmployerForMTR(driver, str6, str7);
	funcAddEmpIncomeWithTaxTakenOff(driver,str8,str9,"");
	n1 = Double.parseDouble(str3);//n1 = 37155.00
	n2 = Double.parseDouble(str5);//n2 =11238.00
	n3 = Double.parseDouble(str8);//n3 = 12850.00
	n4 = Double.parseDouble(str9);//n4 = 200.00
	total1=n1*taxedUKInterestRate;
	total2=Math.floor(n1+total1+n2);
	wLib.explicitWait(driver, 10,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 10,taxCalSummaryLink);
	taxCalSummaryLink.click();
	dividendsFromUKCompaniesAmt=n2;
	wLib.explicitWait(driver, 5,payFromAllEmployments);
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(n3)));//£12850.00 
	Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));//£28,433.00	 
	Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));// £22,500.00	 
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	totlIncome = n1+n2+n3;
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome - personalAllowanceRate)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);	
	basicRatePayPension=n3-personalAllowanceRate;//1,000.00	
	Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
	dueTax1=basicRatePayPension*BR_rate;//£200.00
	Reporter.log("Amount of Basic Rate of Pay Pension: "+dueTax1,true);
	startedRateSaving=SR_band-basicRatePayPension;//4000
	Reporter.log("Started Rate of Saving: "+startedRateSaving,true);
	basicRateSaving=(taxLimit1Uk-(basicRatePayPension+startedRateSaving))-nilRate2;//29,000.00	
	Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
	dueTax2=basicRateSaving*BR_rate;//£5,800.00
	Reporter.log("Amount of Basic Rate of Saving: "+dueTax2,true);
	heigherRateSaving=n1-taxLimit1Uk+basicRatePayPension;//£3,655.00	
	Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);	
	dueTax3=heigherRateSaving*HR_rate;//£1,462.00
	Reporter.log("Amount of Heigher Rate of Saving: "+dueTax3,true);
	heigherRateDividends=n2-dividentNillRate;//£9,238.00
	Reporter.log("Heigher Rate of Saving: "+heigherRateDividends,true);
	dueTax4=(heigherRateDividends*dividendTaxHigherRate)/100;//£3,002.35
	Reporter.log("Amount of Heigher Rate of Dividend: "+dueTax4,true);
	taxDueInc=dueTax1+dueTax2+dueTax3+dueTax4;//£10,464.35
	Reporter.log("Income Tax Due amount: "+taxDueInc,true);
	Totaltax=Double.parseDouble(incomeTaxDue.getText().substring(1).replace(",", ""));
	finalAmount=Totaltax-n4;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);	
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(finalAmount)));
	Reporter.log("Balance for the year is Verified: "+taxForThisYear.getText(),true);

}
public void delTestCase21(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 21",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	delDividentEmpIncome(driver);
}
public void addTestCase22(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8, String str9,String str10, String str11)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 22",true);
	wLib = new WaitStatementLib();
	clickIncome(driver);
	addBank(driver, str1, str1, str2);
	addUKInterestNew(driver,str3);
	funcAddUntaxedInerest(driver,str4);
	dividentUKCompanies(driver,str5,"",str6);
	wLib.explicitWait(driver, 5,selfEmploymentLink);
	selfEmploymentLink.click();
	wLib.explicitWait(driver, 5,formOpenBtn);
	formOpenBtn.click();
	wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
	descriptionOfBusinessTxtBox.clear();
	descriptionOfBusinessTxtBox.sendKeys(str7);
	businessIncomeTxtBox.clear();
	businessIncomeTxtBox.sendKeys(str8);
	costsOfGoodsBoughtForResaleTxtBox.clear();
	costsOfGoodsBoughtForResaleTxtBox.sendKeys(str9);
	annualInvestmentAllowanceTxtBox.clear();
	annualInvestmentAllowanceTxtBox.sendKeys(str10);
	allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.clear();
	allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.sendKeys(str11);
	SaveBtn1.click();
	driver.navigate().refresh();
	n1 = Double.parseDouble(str3);//365.00
	n2 = Double.parseDouble(str4);//7283.00
	n3 = Double.parseDouble(str6);//1510.00
	n4 = Double.parseDouble(str8);//32495.00	
	n5 = Double.parseDouble(str9);//8620.00
	n6 = Double.parseDouble(str10);//1200.00
	n7 = Double.parseDouble(str11);//800.00
	selfEmploymentIncome=(n4-n5)-(n6+n7);//£21,875.00
	Reporter.log("Self Employment Income: "+selfEmploymentIncome,true);
	x1=n1+(n1*taxedUKInterestRate);
	interestFromUKBanksBuildingAmt=(Math.floor(x1)+Math.floor(n2));//£7,739.00	 
	Reporter.log("Interest from UK banks, building societies and securities: "+interestFromUKBanksBuildingAmt,true);
	dividendsFromUKCompaniesAmt=n3;
	Reporter.log("Dividends from UK companies: "+dividendsFromUKCompaniesAmt,true);
	totalincome=selfEmploymentIncome+interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt;
	Reporter.log("Total income received: "+totalincome,true);
	total1=totalincome-personalAllowanceRate; 
	Reporter.log("Total income on which tax is due: "+total1,true);
	basicRatePayPension =(selfEmploymentIncome - personalAllowanceRate) * BR_rate;//£2,005.00
	Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
	basicRateSaving = (interestFromUKBanksBuildingAmt - nilRate1) * BR_rate;//£1,347.80
	Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);	
	totIncomeTaxDue = basicRatePayPension + basicRateSaving;//£	£3,352.80
	Reporter.log("Income Tax due   : "+totIncomeTaxDue,true);	
	class4Amt = (selfEmploymentIncome -class4LPLAmt)*class4LPLRate;//£1,210.58
	Reporter.log("Class 4 National Insurance contributions: "+class4Amt,true);	
	class2Amt=class2Rate*weeksYear;//£153.40
	Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);

	tax1= totIncomeTaxDue + (class4Amt + class2Amt);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
	Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
	Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
	Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));// £1510.00 
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	Assert.assertEquals(interOnBasicRate.getText().substring(1).replace(",", ""),String.format("%.2f",(basicRatePayPension)));//£2,005.00
	Reporter.log("Basic Rate of Pay, pension is verified: "+interOnBasicRate.getText(),true);
	Assert.assertEquals(calculationBasicRateSavings.getText().substring(1).replace(",", ""),String.format("%.2f",(basicRateSaving)));//£1,347.80
	Reporter.log("Basic Rate of Saving is verified: "+calculationBasicRateSavings.getText(),true);
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
	Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt)));
	Reporter.log("Amaount of Class 4 National Insurance contributions is verified:" + class4NationalInsurancecontributions1.getText(),true);
	Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
	Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
	total2=n1*taxedUKInterestRate;//£91.25	 
	class4_2Amt=tax1-total2;//4,625.53
	Assert.assertEquals(txtTotaltaxdeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(total2)));
	Reporter.log("Tax taken off amount is verified: "+txtTotaltaxdeducted.getText(),true);
	Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
	Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Due is verified: " + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
	Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
	Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);
	Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
	Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);
}
public void funcDelMTRTest22(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 22",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	delInterestfromUKbanks(driver);
	deleteDivident(driver);
	clickIncome(driver);
	delSEshort(driver);
}
public void addTestCase23(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
{
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 23",true);
	verifyBankIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);//3678.00
	Reporter.log("Interest added Successfully",true);
	addOtherDivident(driver,str4,"0.00","0.00");//12750
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str5);//1
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str6);//7800
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str7);//4200
	SaveBtn1.click();
	addTaxUnderPaid(driver, "", "", str8);//2000
	clickIncome(driver);
	funcAddEmployerForMTR(driver, str9, str10);
	funcAddEmpIncomeWithTaxTakenOff(driver, str11, str12,"");//33254.00, 2000.00
	n1=Double.parseDouble(str3);//3678.00
	n2=Double.parseDouble(str4);//12750
	n3=Double.parseDouble(str6);//7800
	n4=Double.parseDouble(str7);//4200
	n5=Double.parseDouble(str8);//2000
	n6=Double.parseDouble(str11);//33254.00
	n7=Double.parseDouble(str12);//2000
	profitFromUKLandAndProperty = n3-n4;//3600
	totalincome=profitFromUKLandAndProperty+n1+n2+n6;//53,282.00	 
	taxDueInc=totalincome-personalAllowanceRate;//41,432.00	 
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	dividendsFromUKCompaniesAmt=n2;
	wLib.explicitWait(driver, 5,payFromAllEmployments);
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(n6)));
	Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
	Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
	Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
	Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRatePayPension=(n1+profitFromUKLandAndProperty+n6)-(nilRate2+personalAllowanceRate);//£28,182.0
	dueTax1=basicRatePayPension*BR_rate;//£5,636.40
	Reporter.log("Basic Rate of Pay Pension: "+dueTax1,true);
	basicRateDividends=(taxLimit1Uk-(basicRatePayPension+nilRate2))-dividentNillRate;//£3,818.00
	dueTax2=(basicRateDividends*dividendTaxBasicRate)/100;//£286.35
	Reporter.log("Basic Rate of Dividends: "+dueTax2,true);
	heigherRateDividends=dividendsFromUKCompaniesAmt-(basicRateDividends+dividentNillRate);//£6,932.00	
	dueTax3=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//£2,252.90
	Reporter.log("Heigher Rate of Dividends: "+dueTax3,true);
	totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);	
	totalTaxDeductedAmt=n7-n5;
	Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
	taxBalance=totIncomeTaxDue-totalTaxDeductedAmt;
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
	Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest23(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 23",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	wLib.explicitWait(driver, 10,dividentLink);
	dividentLink.click();
	wLib.explicitWait(driver, 10,delInterest);
	delInterest.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 10,cnfmdel);
	cnfmdel.click();
	Reporter.log("Interest deleted successfully",true);
	wLib.explicitWait(driver, 2,delbank);
	delbank.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 30,cnfmdel);
	cnfmdel.click();
	driver.navigate().refresh();
	Reporter.log("Bank deleted successfully",true);
	delOtherDivident(driver);
	clickEmployment(driver);
	delEmpInfo(driver);
	delProfit(driver);
	delUnderpaidTax(driver);
	
}
public void addTestCase24(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10)throws Exception
{
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 24",true);
	clickIncome(driver);
	addBank(driver, str1, str1, str2);
	addUKInterestNew(driver,str3);
	funcAddUntaxedInerest(driver,str4);
	dividentUKCompanies(driver,"Company1","", str5);//11166.00
	addOtherUKIncome(driver,str6,"",str7,"",str8);//1500.00, 300, bee keeper
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	otherPensionsRetirementAnnuities.clear();
	otherPensionsRetirementAnnuities.sendKeys(str9);//37541.00
	taxTakenOffOtherPensions.clear();
	taxTakenOffOtherPensions.sendKeys(str10);//7508.20
	stateBenefitsSaveBtn.click();
	n1 = Double.parseDouble(str3);//21.00
	n2 = Double.parseDouble(str4);//811.00
	n3 = Double.parseDouble(str5);//11166.00
	n4 = Double.parseDouble(str6);//1500.00
	n5 = Double.parseDouble(str7);//300.00
	n6 = Double.parseDouble(str9);//37541.00
	n7 = Double.parseDouble(str10);//7508.20

	interestFromUKBanksBuildingAmt=Math.round(n1+(n1*taxedUKInterestRate))+n2; //£837.00
	Reporter.log("Interest From UK Banks and Building: "+interestFromUKBanksBuildingAmt,true);

	totalincome=interestFromUKBanksBuildingAmt+n3+n4+n6; //£51044
	Reporter.log("Total Income: "+totalincome,true);

	totalAllowance = blindAllowance + personalAllowanceRate; //£14,240
	Reporter.log("Total Allowance: "+totalAllowance,true);

	taxDueInc=totalincome-totalAllowance;//£36,804
	Reporter.log("Total income on which tax is due: "+taxDueInc,true);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	
	basicRatePayPension=taxDueInc-(n3+nilRate2);//£25,138
	dueTax1=basicRatePayPension*BR_rate;//£5,027.60
	basicRateDividends=(taxLimit1Uk-(basicRatePayPension+nilRate2))-dividentNillRate;//£6,862
	dueTax2=(basicRateDividends*dividendTaxBasicRate)/100;//£514.65
	Reporter.log("Basic Rate of Dividends: "+dueTax2,true);
	heigherRateDividends=n3-(basicRateDividends+dividentNillRate);//£2,304
	dueTax3=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//£748.80
	Reporter.log("Heigher Rate of Dividends: "+dueTax3,true);
	totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
	
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);	
	totalTaxDeductedAmt=n5+n7+(n1*taxedUKInterestRate);
	Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
	taxBalance=totalTaxDeductedAmt-totIncomeTaxDue;
	Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
	Reporter.log("Income Tax overpaid is verified: "+amtIncomeTaxoverpaid.getText(),true);
	}
	public void funcDelMTRTest24(WebDriver driver)throws Exception
	{
	Reporter.log("Deleting MTR Test Case 24",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	delBank(driver);
	deleteDivident(driver);
	delOtherUKIncome(driver);
	}
	public void addTestCase25(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38)throws Exception
	{
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 25",true);
	verifyBankIncome(driver);
	addBank(driver,str1, str1, str2);

	funcAddUntaxedInerest(driver,str3);

	Reporter.log("Interest added Successfully",true);

	addOtherDivident(driver,str4,"0.00","0.00");
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str5);
	stateBenefitsSaveBtn.click();
	addOtherUKIncome(driver,str6,"",str7,"",str8);
	funcAddEmployerForMTR(driver, str9, str10);
	funcAddEmpIncomeWithTaxTakenOff(driver, str11,"","");
	clickIncome(driver);
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str12);
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str13);
	intrstAndOthrFinancialChrgsTxtBox.clear();
	intrstAndOthrFinancialChrgsTxtBox.sendKeys(str14);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str15);
	ResidentialfinancecostsTxtBox.clear();
	ResidentialfinancecostsTxtBox.sendKeys(str16);
	SaveBtn1.click();
	driver.navigate().refresh();
	clickIncome(driver);
	wLib.explicitWait(driver, 10,selfEmploymentLink);
	selfEmploymentLink.click();
	/*try
	{
	wLib.explicitWait(driver,1,delButton);
	delButton.click();
	wLib.explicitWait(driver,1,confDel);
	confDel.click();
	}
	catch (Exception e)
	{
	   Reporter.log(e.getMessage(),true);
	}*/
	wLib.explicitWait(driver, 3,formOpenBtn);
	formOpenBtn.click();
	wLib.explicitWait(driver, 3,descriptionOfBusinessTxtBox);
	descriptionOfBusinessTxtBox.clear();
	descriptionOfBusinessTxtBox.sendKeys(str17);
	businessAccountsEnddateTxtBox.clear();
	businessAccountsEnddateTxtBox.sendKeys(dateEnd);
	businessIncomeTxtBox.clear();
	businessIncomeTxtBox.sendKeys(str18);
	costsOfGoodsBoughtForResaleTxtBox.clear();
	costsOfGoodsBoughtForResaleTxtBox.sendKeys(str19);
	annualInvestmentAllowanceTxtBox.clear();
	annualInvestmentAllowanceTxtBox.sendKeys(str20);
	allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.clear();
	allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.sendKeys(str21);
	otherCapitalAllowancesTxtBox.clear();
	otherCapitalAllowancesTxtBox.sendKeys(str22);
	SaveBtn1.click();
	driver.navigate().refresh();
	delSAFull(driver);
	wLib.explicitWait(driver, 10,frm1Btn);
	frm1Btn.click();
	businessNameTxtBox.clear();
	businessNameTxtBox.sendKeys(str23);
	descriptionofBusinessTxtBox.clear();
	descriptionofBusinessTxtBox.sendKeys(str24);
	booksAccoutsStartDateTxtBox.clear();
	booksAccoutsStartDateTxtBox.sendKeys(str25);
	businessBooksEnddateTxtBox.clear();
	businessBooksEnddateTxtBox.sendKeys(str26);
	businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
	wLib.explicitWait(driver, 2,trunoverTxtBox);
	//Business Income
	trunoverTxtBox.clear();
	trunoverTxtBox.sendKeys(str27);
	//Business Expenses
	goodsOfCostfullTxtBox.clear();
	goodsOfCostfullTxtBox.sendKeys(str28);
	wagesSalariesandOtherStaffCostsTxtBox.clear();
	wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str29);
	travelexpensesTxtBox.clear();
	travelexpensesTxtBox.sendKeys(str30);
	rentInsurancecostTxtBox.clear();
	rentInsurancecostTxtBox.sendKeys(str31);
	advertisingandEntertainmentCostTxtBox.clear();
	advertisingandEntertainmentCostTxtBox.sendKeys(str32);
	interestbankTxtBox.clear();
	interestbankTxtBox.sendKeys(str33);
	bankCreditandOtherFinancialChargesTxtBox.clear();
	bankCreditandOtherFinancialChargesTxtBox.sendKeys(str34);
	otherbusinessexpensesTxtBox.clear();
	otherbusinessexpensesTxtBox.sendKeys(str35);
	basisPeriodBeganTxtBox.clear();
	basisPeriodBeganTxtBox.sendKeys(dateStart);
	basisPeriodEndedTxtBox.clear();
	basisPeriodEndedTxtBox.sendKeys(dateEnd);
	accountingperiodandProfitlossTxtBox.clear();
	accountingperiodandProfitlossTxtBox.sendKeys(str36);
	anyBusinessIncomeTxtBox.clear();
	anyBusinessIncomeTxtBox.sendKeys(str37);
	balanceStartPeriodTxtBox.clear();
	balanceStartPeriodTxtBox.sendKeys(str38);
	SaveBtn1.click();
	driver.navigate().refresh();
	Reporter.log("All income for Test case 25 added Successfully",true);
	n1 = Double.parseDouble(str3);//3678.00
	n2 = Double.parseDouble(str4);//12750.00
	n3 = Double.parseDouble(str5);//6200.00
	n4 = Double.parseDouble(str6);//1500.00
	n5 = Double.parseDouble(str7);//300.00
	n6 = Double.parseDouble(str11);//9050.00
	n7 = Double.parseDouble(str13);//17,800.00
	n8 = Double.parseDouble(str14);//13,000.00
	n9 = Double.parseDouble(str15);//1,200.00
	n10 = Double.parseDouble(str16);//5,000.00
	n11 = Double.parseDouble(str18);//17995.00
	n12 = Double.parseDouble(str19);//14262.00
	n13 = Double.parseDouble(str20);//3733.00
	n14 = Double.parseDouble(str21);//1500.00
	n15 = Double.parseDouble(str21);//1000.00
	n16 = Double.parseDouble(str22);//1650.00	
	n17 = Double.parseDouble(str27);//74900.00
	n18 = Double.parseDouble(str28);//25000.00
	n19 = Double.parseDouble(str29);//2000.00
	n20 = Double.parseDouble(str30);//12000.00
	n21 = Double.parseDouble(str31);//10800.00
	n22 = Double.parseDouble(str32);//1400.00
	n23 = Double.parseDouble(str33);//5800.00
	n24 = Double.parseDouble(str34);//1500.00
	n25 = Double.parseDouble(str35);//1500.00
	n26 = Double.parseDouble(str36);//-1010.00	
	n27 = Double.parseDouble(str37);//300.00
	n28 = Double.parseDouble(str38);//2600.00
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	dividendsFromUKCompaniesAmt=n2;
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""), String.format("%.2f",n6));
	Reporter.log("Payment From employer verified: "+payFromAllEmployments.getText(), true);
	netBusinessProfit=(n17-(n18+n19+n20+n21+n22+n23+n24+n25));
	Reporter.log("Net Business Profit: "+netBusinessProfit,true);
	adjustedProfit=netBusinessProfit+n26;
	Reporter.log("Adjusted Profit: "+adjustedProfit,true);
	totalProfitFromBusiness=adjustedProfit+n27;
	Reporter.log("TotalProfit From Business: "+totalProfitFromBusiness,true);
	Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalProfitFromBusiness)));
	Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
	profitFromUKLandAndProperty=n7-(n8+n9);
	Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
	Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
	Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring	(1).replace(",", ""),String.format("%.2f",(n3)));
	Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	otherIncomeAmt=n4;
	Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
	Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
	totalincome=n6+totalProfitFromBusiness+profitFromUKLandAndProperty+n1+n2+n3+otherIncomeAmt;
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	taxDueInc=totalincome-personalAllowanceRate;
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRatePayPension=taxDueInc-(n2+nilRate2);//£25,868.00	
	dueTax1=basicRatePayPension*BR_rate;//£5,173.60
	Reporter.log("Basic Rate of Pay Pension: "+dueTax1,true);
	basicRateDividends=(taxLimit1Uk-(basicRatePayPension+nilRate2))-dividentNillRate;//£6,132.00	
	dueTax2=(basicRateDividends*dividendTaxBasicRate)/100;//£286.35
	Reporter.log("Basic Rate of Dividends: "+dueTax2,true);
	heigherRateDividends=dividendsFromUKCompaniesAmt-(basicRateDividends+dividentNillRate);//£4,618.00
	dueTax3=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//£1,500.85
	Reporter.log("Heigher Rate of Dividends: "+dueTax3,true);
	totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
	
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);	
	amtReliefForFinanceCosts=profitFromUKLandAndProperty*reliefFinancerate;
	Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//720.00
	Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);
	incomeTaxdueafterallowancesandreliefs=totIncomeTaxDue - amtReliefForFinanceCosts;
	Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
	Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);
	class4Amt = (totalProfitFromBusiness -class4LPLAmt)*class4LPLRate;//£518.94
	Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt)));
	Reporter.log("Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
	class2Amt=class2Rate*weeksYear;//£153.40
	Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
	Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
	class4_2Amt=incomeTaxdueafterallowancesandreliefs+class4Amt+class2Amt;
	Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
	Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Due is verified: " + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
	totalTaxDeductedAmt=class4_2Amt-n5;	
	Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
	Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);
	Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
	Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);
	}
	public void funcDelMTRTest25(WebDriver driver)throws Exception
	{
	Reporter.log("Deleting MTR Test Case 25",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	delBank(driver);
	delOtherUKIncome(driver);
	delOtherDivident(driver);
	clickIncome(driver);
	delProfit(driver);
	delSEshort(driver);
	delSelfEmpFull(driver);
	clickIncome(driver);
	clickEmployment(driver);
	delEmpInfo(driver);
	Reporter.log("Employment income Deleted Successfully",true);
	}
	public void addTestCase28(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16)throws Exception
	{
	Reporter.log("Exceuting MTR Test Case 28",true);
	wLib = new WaitStatementLib();
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);
	Reporter.log("Interest added Successfully",true);
	dividentUKCompanies(driver,str4,"",str5);
	funcAddEmployerForMTR(driver, str6, str7);
	funcAddEmpIncomeWithTaxTakenOff(driver, str8,str9,"");
	clickIncome(driver);
	wLib.explicitWait(driver, 5,linkCapitalGain);
	linkCapitalGain.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
	propertyEtcTotalDisposalTxtBox.clear();
	propertyEtcTotalDisposalTxtBox.sendKeys(str10);
	propertyEtcDisposalProceedTxtBox.clear();
	propertyEtcDisposalProceedTxtBox.sendKeys(str11);
	propertyEtcCostsAndIndexationTxtBox.clear();
	propertyEtcCostsAndIndexationTxtBox.sendKeys(str12);
	propertyEtcGainsInTheYearTxtBox.clear();
	propertyEtcGainsInTheYearTxtBox.sendKeys(str13);
	propertyEtcAttributedGainTxtBox.clear();
	propertyEtcAttributedGainTxtBox.sendKeys(str14);
	commentTxtBox.clear();
	commentTxtBox.sendKeys(str15);
	SaveBtn1.click();
	Reporter.log("Capital Gain Income added successfully",true);
	wLib.explicitWait(driver, 5,additionalInformationLink);
	additionalInformationLink.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();
	wLib.explicitWait(driver, 5,shareSchemesTaxableAmountTxtBox);
	shareSchemesTaxableAmountTxtBox.clear();
	shareSchemesTaxableAmountTxtBox.sendKeys(str16);
	saveAdditionalInfoBtn.click();
	Reporter.log("Share Scheme taxable amount added successfully",true);

n1 = Double.parseDouble(str3);//10120.00
n2 = Double.parseDouble(str5);//828319.10
n3 = Double.parseDouble(str8);//33254.00
n4 = Double.parseDouble(str9);//4280.80
n5 = Double.parseDouble(str11);//212000.00
n6 = Double.parseDouble(str12);//197000.00
n7 = Double.parseDouble(str13);//15000.00
n8 = Double.parseDouble(str14);//8,000.00
n9 = Double.parseDouble(str16);//6250.00
wLib = new WaitStatementLib();	
taxReturnLink.click();
wLib.explicitWait(driver, 60, taxCalSummaryLink);
taxCalSummaryLink.click();
totalincome=Math.round(n3+n9+n1+n2);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
startedRatePayPension=SR_bandScott*startedRateScott;
Reporter.log("Started Rate of Pay Pension: "+startedRatePayPension,true);
basicRatePayPension=amtBasicRateScott *basicRateScott;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
intermediateRatePayPension=round(amtIntermediateRateScott*intermediateRateScott,2);
Reporter.log("Intermediate Rate of Pay Pension: "+intermediateRatePayPension,true);
heigherRatePayPension=round(((n3+n9)-(SR_bandScott+amtBasicRateScott+amtIntermediateRateScott))*heigherRateScott,2);
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
heigherRateSaving=n1*HR_rate;
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
heigherRateDividends=round((taxLimit3-(n3+n9+n1)-dividentNillRate)*(dividendTaxHigherRate/100),2);
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
additionalRateDividends=(Math.round(n2)-(taxLimit3-(n3+n9+n1)-dividentNillRate)-dividentNillRate)*(dividendTaxAdditionalRate/100);
Reporter.log("Additional Rate of Dividends: "+additionalRateDividends,true);
taxDueInc=startedRatePayPension+basicRatePayPension+intermediateRatePayPension+heigherRatePayPension+heigherRateSaving+heigherRateDividends+additionalRateDividends;

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
Assert.assertEquals(txtTotaltaxdeducted.getText().substring(1).replace(",", ""),String.format("%.2f",n4)); //4280.80
Reporter.log("Amount of Total tax deducted is Verified: "+txtTotaltaxdeducted.getText(),true);
totIncomeTaxDue=taxDueInc-n4;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));//£318,824.82
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
capitalGainsTaxdueAmt=	annualExemptIndividuals*capitalGainsRateUpper;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));//£2,260.00
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=totIncomeTaxDue+capitalGainsTaxdueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));//£321,084.82
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),IncomeandCapitalGainsTaxdue.getText());//£321,084.82
Reporter.log("Amount of Balance for this year is Verified: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest28(WebDriver driver)throws Exception
	{
	Reporter.log("Deleting MTR Test Case 28",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	delInterestfromUKbanks(driver);
	deleteDivident(driver);
	clickEmployment(driver);
	delEmpInfo(driver);
	delCGI(driver);
	}
public void addMAT(WebDriver driver, String str1,String str2,String str3,String str4,String str5)throws Exception
{
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,marriageAllowanceForm);
	marriageAllowanceForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,5,receiveMarriageAllowanceTOChkBox);
	receiveMarriageAllowanceTOChkBox.click();
	spouseFirstNameTxtBox.clear();
	spouseFirstNameTxtBox.sendKeys(str1);
	spouselastnameTxtBox.clear();
	spouselastnameTxtBox.sendKeys(str2);
	spouseNInumberTxtBox.clear();
	spouseNInumberTxtBox.sendKeys(str3);
	spouseDOBTxtBox.clear();
	spouseDOBTxtBox.sendKeys(str4);
	dateOfMarriageSpouseTxtBox.clear();
	dateOfMarriageSpouseTxtBox.sendKeys(str5);
	SaveBtn2.click();
}
public void addTestCase29(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44,String str45,String str46) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 29",true);
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
wLib.explicitWait(driver, 5,businessNameTxtBox);
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str1);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str2);
businessAddressTxtBox.clear();
businessAddressTxtBox.sendKeys(str3);
businessPostCodeTxtBox.clear();
businessPostCodeTxtBox.sendKeys(str4);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(str5);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str6);//328938.00
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str7);
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str8);
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str9);
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str10);
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str11);
advertisingandEntertainmentCostTxtBox.clear();
advertisingandEntertainmentCostTxtBox.sendKeys(str12);
interestbankTxtBox.clear();
interestbankTxtBox.sendKeys(str13);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str14);
irrecoverabledebtsTxtBox.clear();
irrecoverabledebtsTxtBox.sendKeys(str15);
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str16);
depreciationProfitandLossTxtBox.clear();
depreciationProfitandLossTxtBox.sendKeys(str17);
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str18);
disexpCarandVanTxtBox.clear();
disexpCarandVanTxtBox.sendKeys(str19);
disexpDepreciationTxtBox.clear();
disexpDepreciationTxtBox.sendKeys(str20);
capitalAllowancesemissionsTxtBox.clear();
capitalAllowancesemissionsTxtBox.sendKeys(str21);
otherEnhancedCapitalAllowancesTxtBox.clear();
otherEnhancedCapitalAllowancesTxtBox.sendKeys(str22);
allowancesCessationBusinessTxtBox.clear();
allowancesCessationBusinessTxtBox.sendKeys(str23);
goodAndServicesTxtBox.clear();
goodAndServicesTxtBox.sendKeys(str24);
businessIncomeandOtherProfitTxtBox.clear();
businessIncomeandOtherProfitTxtBox.sendKeys(str25);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(str26);
lossBroughtForwardProfitTxtBox.clear();
lossBroughtForwardProfitTxtBox.sendKeys(str27);
equipMentandMachineryTxtBox.clear();
equipMentandMachineryTxtBox.sendKeys(str28);
OtherFixedAssestsTxtBox.clear();
OtherFixedAssestsTxtBox.sendKeys(str29);
stockAndWorkTxtBox.clear();
stockAndWorkTxtBox.sendKeys(str30);
tradeDebtorsTxtBox.clear();
tradeDebtorsTxtBox.sendKeys(str31);
bankSocietyBalancesTxtBox.clear();
bankSocietyBalancesTxtBox.sendKeys(str32);
cashinHandTxtBox.clear();
cashinHandTxtBox.sendKeys(str33);
currentAssestsandPaymentTxtBox.clear();
currentAssestsandPaymentTxtBox.sendKeys(str34);
tradeCreditorsTxtBox.clear();
tradeCreditorsTxtBox.sendKeys(str35);
loansOverdrawnandBankAccountTxtBox.clear();
loansOverdrawnandBankAccountTxtBox.sendKeys(str36);
liabilitiesandAccrualsTxtBox.clear();
liabilitiesandAccrualsTxtBox.sendKeys(str37);
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str38);
drawingTxtBox.clear();
drawingTxtBox.sendKeys(str39);
SaveBtn1.click();
clickIncome(driver);
addBank(driver,str40, str40, str41);
funcAddUntaxedInerest(driver,str42);
Reporter.log("Interest added Successfully",true);
dividentUKCompanies(driver,str43,"",str44);
addPensionTaxReliefForm(driver,"", str45, "", "");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
deficiencyReliefOnLifeInsuranceGainsTxtBox.clear();
deficiencyReliefOnLifeInsuranceGainsTxtBox.sendKeys(str46);
saveAdditionalInfoBtn.click();
n1 = Double.parseDouble(str6);// 328938.00
n2 = Double.parseDouble(str7);// 75512.00
n3 = Double.parseDouble(str8);//99532.00
n4 = Double.parseDouble(str9);// 3747.00
n5 = Double.parseDouble(str10);// 16128.00
n6 = Double.parseDouble(str11);// 6040.00
n7 = Double.parseDouble(str12);// 764.00
n8 = Double.parseDouble(str13);// 9523.00
n9 = Double.parseDouble(str14);// 2719.00
n10 = Double.parseDouble(str15);// 798.00
n11 = Double.parseDouble(str16);// 6284.00
n12 = Double.parseDouble(str17);// 8592.00
n13 = Double.parseDouble(str18);// 627.00
n14 = Double.parseDouble(str19);// 199.00
n15 = Double.parseDouble(str20);// 8592.00
n16 = Double.parseDouble(str21);// 1800.00
n17 = Double.parseDouble(str22);// 1200.00
n18 = Double.parseDouble(str23);// 165.00
n19 = Double.parseDouble(str24);// 921.00
n20 = Double.parseDouble(str25);// 921.00
n21 = Double.parseDouble(str27);// 7295.00
n22 = Double.parseDouble(str28);// 23400.00
n23 = Double.parseDouble(str29);// 269992.00
n24 = Double.parseDouble(str30);// 6464.00
n25 = Double.parseDouble(str31);// 2746.00
n26 = Double.parseDouble(str32);// 72645.00
n27 = Double.parseDouble(str33);// 2000.00
n28 = Double.parseDouble(str34);// 252.00
n29 = Double.parseDouble(str35);// 14864.00
n30 = Double.parseDouble(str36);// 93551.00
n31 = Double.parseDouble(str37);// 108416.00
n32 = Double.parseDouble(str38);// 132680.00
n33 = Double.parseDouble(str39);// 71605.00
n34 = Double.parseDouble(str42); //10120.00
n35 = Double.parseDouble(str44); //828319.10
n36 = Double.parseDouble(str45); //10010.00
n37 = Double.parseDouble(str46); //14755.00

taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
totalExpensesSelfEmpFull=n2+n3+n4+n5+n6+n7+n8+n9+n10+n11+n12+n13;//230266.00 
netProfitSelfEmpFull = n1 - totalExpensesSelfEmpFull;//98672.00
totalCapitalAllowancesSelfEmpFull = n16 + n17 + n18;//1800+1200+165 = 3165
totalDisallowableExpensesSelfEmpFull= n14 + n15;//8791.00
totalAdditiontoNetProfitSelfEmpFull = totalDisallowableExpensesSelfEmpFull + n19; //9712.00
totalDeductionfromNetProfitSelfEmpFull = totalCapitalAllowancesSelfEmpFull + n20;//4086.00
selfEmploymentIncome = netProfitSelfEmpFull + (totalDisallowableExpensesSelfEmpFull-totalCapitalAllowancesSelfEmpFull);//104298.00
interestFromUKBanksBuildingAmt = n34;
dividendsFromUKCompaniesAmt = Math.floor(n35);
totalincome = selfEmploymentIncome  + interestFromUKBanksBuildingAmt +dividendsFromUKCompaniesAmt;
incomeTaxReliefAmt = n21;
amtRetirementAnnuity = n36;
allowance1 = incomeTaxReliefAmt + amtRetirementAnnuity;
totlIncome = totalincome - allowance1;	
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",selfEmploymentIncome));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(PaymentsIntoRetirementAnnuity.getText().substring(1).replace(",", ""),String.format("%.2f",amtRetirementAnnuity));
Reporter.log("Payments into a retirement annuity contract etc. is Verified: "+PaymentsIntoRetirementAnnuity.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

startedRatePayPension=SR_bandScott;//2,000.00
dueTax1=round(startedRatePayPension*startedRateScott,2);//380.00
Reporter.log("Started Rate of Pay Pension: "+dueTax1,true);
basicRatePayPension=amtBasicRateScott;
dueTax2 = round(basicRatePayPension * basicRateScott,2);//2030
Reporter.log("Basic Rate of Pay Pension: "+dueTax2,true);
intermediateRatePayPension=amtIntermediateRateScott;//19,430.00	
dueTax3	= round(intermediateRatePayPension * intermediateRateScott,2);
heigherRatePayPension=(totlIncome-(dividendsFromUKCompaniesAmt + interestFromUKBanksBuildingAmt)) - (startedRatePayPension + basicRatePayPension +intermediateRatePayPension);	
dueTax4=round(heigherRatePayPension*heigherRateScott,2);
Reporter.log("Heigher Rate of Pay Pension: "+dueTax4,true);
heigherRateSaving= interestFromUKBanksBuildingAmt;//10,120.00	
dueTax5=heigherRateSaving*HR_rate;
Reporter.log("Heigher Rate of Saving: "+dueTax5,true);
heigherRateDividends=taxLimit3-((selfEmploymentIncome-allowance1) +interestFromUKBanksBuildingAmt + dividentNillRate);//27286
dueTax6 = round((heigherRateDividends*dividendTaxHigherRate)/100,2);
Reporter.log("Heigher Rate of Dividends: "+dueTax6,true);
additionalRateDividends = dividendsFromUKCompaniesAmt -(heigherRateDividends+ dividentNillRate);
dueTax7 = roundDown2((additionalRateDividends * dividendTaxAdditionalRate)/100);
Reporter.log("Additional Rate of Dividends: "+dueTax7,true);
totIncomeTaxDue = dueTax1+dueTax2+dueTax3+dueTax4+dueTax5+dueTax6+dueTax7;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
amtTaxAdjustment = roundDown2((n37 * dividendTaxHigherRate)/100) - roundDown2((n37 *dividendTaxBasicRate)/100); 
Reporter.log("Total Amount of Relief :"+incomeTaxReliefAmt,true);
Assert.assertEquals(deficiencyReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxAdjustment));
Reporter.log("Amount of Deficiency Relief is Verified: "+deficiencyReliefAmt.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtTaxAdjustment;
//Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxdueafterallowancesandreliefs));
Reporter.log("Income Tax due after allowances and reliefs: "+incomeTaxdueafterallowancesandreliefs,true);

class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",class4Amt1));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
total1=((selfEmploymentIncome-n21)-class4LPLAmt)-nIC_Band;//50,653
class4Amt=roundDown2(total1*class4UPLRate);//1,013.06
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs + class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);	
}

public void funcDelMTRTest29(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 29",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
delSelfEmpFull(driver);
}
public void addTestCase37(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 37",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);

funcAddUntaxedInerest(driver,str3);

Reporter.log("Interest added Successfully",true);
addOtherDivident(driver,str4,"0.00","0.00");
addMAT(driver, str5, str6, str7, str8, str9);
clickIncome(driver);
funcAddEmployerForMTR(driver, str10, str11);
funcAddEmpIncomeWithTaxTakenOff(driver, str12,"","");
clickIncome(driver);
wLib.explicitWait(driver, 10,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver,1,delButton);
delButton.click();
wLib.explicitWait(driver,1,confDel);
confDel.click();
}
catch (Exception e)
{
   Reporter.log(e.getMessage(),true);
}*/
wLib.explicitWait(driver, 3,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 3,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str13);
StartDatetxtbox.clear();
StartDatetxtbox.sendKeys(dateStart);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str14);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str15);
carVanAndTravelExpensesTxtBox.clear();
carVanAndTravelExpensesTxtBox.sendKeys(str16);
wagesSalariesAndStaffCostsTxtBox.clear();
wagesSalariesAndStaffCostsTxtBox.sendKeys(str17);
rentAndOtherPropertyCostsTxtBox.clear();
rentAndOtherPropertyCostsTxtBox.sendKeys(str18);
repairAndRenewalCostsTxtBox.clear();
repairAndRenewalCostsTxtBox.sendKeys(str19);
accountancyAndLegalFeesTxtBox.clear();
accountancyAndLegalFeesTxtBox.sendKeys(str20);
interestAndFinanceChargesTxtBox.clear();
interestAndFinanceChargesTxtBox.sendKeys(str21);
phoneAndOtherOfficeCostsTxtBox.clear();
phoneAndOtherOfficeCostsTxtBox.sendKeys(str22);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str23);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str24);
lossOfYearSetAgainstOtherIncomeTxtBox.clear();
lossOfYearSetAgainstOtherIncomeTxtBox.sendKeys(str25);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
PayClass2NICsvoluntarily.click();  
SaveBtn2.click(); 
n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//12750.00
n3 = Double.parseDouble(str12);//10850.00
n4 = Double.parseDouble(str14);//27643.00
n5 = Double.parseDouble(str15);//1200.00
n6 = Double.parseDouble(str16);//5200.00
n7 = Double.parseDouble(str17);//3900.00
n8 = Double.parseDouble(str18);//7320.00
n9 = Double.parseDouble(str19);//1109.00
n10 = Double.parseDouble(str20);//4200.00
n11 = Double.parseDouble(str21);//13642.00
n12 = Double.parseDouble(str22);//1602.00
n13 = Double.parseDouble(str23);//1260.00
n14 = Double.parseDouble(str24);//1340.00
n15 = Double.parseDouble(str25);//10450.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
dividendsFromUKCompaniesAmt=n2;
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""), String.format("%.2f",n3));
Reporter.log("Payment From employer verified: "+payFromAllEmployments.getText(), true);

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

totalincome=n1+n2+n3;
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
totalAllowance=(n15+personalAllowanceRate)-marriageAllowance;

totlIncome=totalincome-totalAllowance;
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateSaving=n1;
dueTax1=basicRateSaving*percentageZero;
Reporter.log("Basic Rate of Saving: "+dueTax1,true);
basicRateDividends=(n2+n3)-(totalAllowance+dividentNillRate);
dueTax2=(basicRateDividends*dividendTaxBasicRate)/100;
Reporter.log("Basic Rate of Dividends: "+dueTax2,true);

totIncomeTaxDue=dueTax1+dueTax2;

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

class2Amt=class2Rate*weeksYear;//£153.40
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);

Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt+totIncomeTaxDue)));
Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);
}

public void funcDelMTRTest37(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 37",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherDivident(driver);
clickIncome(driver);
delSEshort(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
PayClass2NICsvoluntarily.click();  
SaveBtn2.click();
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
Reporter.log("Employment income Deleted Successfully",true);
delMarriageAllowance(driver);
}
public void addTestCase38(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22)throws Exception
{
Reporter.log("Exceuting MTR Test Case 38",true);
wLib = new WaitStatementLib();
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
addOtherDivident(driver,str4,"0.00","0.00");
funcAddEmployerForMTR(driver,str5, str6);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.sendKeys(str7);
UkTaxTakenOffPay.sendKeys(str8);
PrvtMedAndDntl.sendKeys(str9);
GoodsEtcTxtBob.sendKeys(str10);
AccommodationProvidedByEmployerTxtBox.sendKeys(str11);
ProfFeesAndSubsTxtBox.sendKeys(str12);
SaveBtn1.click();
Reporter.log("Employer Income added successfully",true);
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str13);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str14);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str15);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str16);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str17);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str18);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str19);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str20);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str21);
commentTxtBox.clear();
commentTxtBox.sendKeys(str22);
SaveBtn1.click();
Reporter.log("Capital Gain Income added successfully",true);

n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//12750.00
n3 = Double.parseDouble(str7);//101000.00
n4 = Double.parseDouble(str8);// 20500.00
n5 = Double.parseDouble(str9);//500.00
n6 = Double.parseDouble(str10);//5000.00
n7 = Double.parseDouble(str11);//7500.00
n8 = Double.parseDouble(str12);//175.00
n9 = Double.parseDouble(str14);//37000.00
n10 = Double.parseDouble(str15);//12000.00
n11 = Double.parseDouble(str16);//25000
n12 = Double.parseDouble(str19);//25000
n13 = Double.parseDouble(str20);//25000
n14 = Double.parseDouble(str21);//20000
total1=(n3 +n5 +n6 +n7)-n8;//113,825.00
total2=total1+n1+n2;
totalincome = total2-blindAllowance;
amount3=(totalincome-(taxLimit1Uk+n1+n2))* HR_rate;//76,935.00	@ 40% =	£30,774.00
amount4=(n1-nilRate2)* HR_rate;//£3,178.00	@ 40% =	£1,271.20
amount5=((n2-dividentNillRate)* dividendTaxHigherRate)/100;//£7,750.00	@ 32.5% =	£2,518.75
totIncomeTaxDue= amount1+amount3+amount4+amount5;//£41,691.95
dueTax1=totIncomeTaxDue-n4;//£21,191.95

total3=((n11-n14)+n13)-annualExemptIndividualsProposed;//£18,300.00
Reporter.log("Other gains: "+total3,true);
dueTax2=(n14*entrepreneursReliefRate)/100;//£2,000.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+dueTax2,true);
dueTax3=total3*BR_rate;//£3,660.00
Reporter.log("20% of Other gains: "+dueTax3,true);
capitalGainsTaxdueAmt=dueTax2+dueTax3;//£5,660.00
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
fnltax=dueTax1+capitalGainsTaxdueAmt; // £26,931.95
Reporter.log("Income and Capital Gains Tax due: "+fnltax,true);
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
dividendsFromUKCompaniesAmt=n2;
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",(n5 +n6 +n7)));//13,000.00
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",(n8)));//175.00
Reporter.log("Amount of Allowable Expenses is Verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));//113,825.00
Reporter.log("Amount of Total From All Employment is Verified: "+TotalFromAllEmployment.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(total2)));//£130,253.00	 
Reporter.log("Amount of Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(amtBlindPersonAllowance.getText().substring(1).replace(",", ""),String.format("%.2f",(blindAllowance)));//£2,320.00
Reporter.log("Amount of Blind Person Allowance	is Verified: "+amtBlindPersonAllowance	.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));//£127,933.00
Reporter.log("Amount of Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));//3678
Reporter.log("Amount of Interest From UK banks Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));//12,750.00
Reporter.log("Amount of Dividends from UK Companies is Verified: "+calculateDividentFrmUKCompany(driver),true);

Assert.assertEquals(interOnBasicRate.getText().substring(1).replace(",", ""),String.format("%.2f",(amount1)));//6,700.00
Reporter.log("Amount of Pay, pensions, profit etc. (UK rate for England, Wales and Northern Ireland) -> Basic Rate is Verified: "+interOnBasicRate.getText(),true);

Assert.assertEquals(calculationHeigherRate1.getText().substring(1).replace(",", ""),String.format("%.2f",(amount3)));//31,202.00
Reporter.log("Amount of Pay, pensions, profit etc. (UK rate for England, Wales and Northern Ireland) -> Higher rate is Verified: "+calculationHeigherRate1.getText(),true);

Assert.assertEquals(calculationHeigherRate2.getText().substring(1).replace(",", ""),String.format("%.2f",(amount4)));//£1,271.20
Reporter.log("Amount of Savings interest from banks or building societies, securities etc. -> Higher rate is Verified: "+calculationHeigherRate2.getText(),true);

Assert.assertEquals(calculationHeigherRate3.getText().substring(1).replace(",", ""),String.format("%.2f",(amount5)));//£2,518.75
Reporter.log("Amount of Dividends from companies etc. -> Higher rate is Verified: "+calculationHeigherRate3.getText(),true);

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));//£41,691.95
Reporter.log("Amount of Income Tax Due is Verified: "+incomeTaxDue.getText(),true);

Assert.assertEquals(txtTotaltaxdeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(n4)));//£20,500.00
Reporter.log("Amount of Total tax deducted is Verified: "+txtTotaltaxdeducted.getText(),true);

Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(dueTax1)));//£21,191.95
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);

Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));//£5,740.00
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));//£26,931.95
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);

Assert.assertEquals(taxForThisYear.getText(),IncomeandCapitalGainsTaxdue.getText());//£26,931.95
Reporter.log("Amount of Balance for this year is Verified: "+taxForThisYear.getText(),true);

}
public void funcDelMTRTest38(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 38",true);
checkLockbutton(driver);
delCGI(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
delOtherDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
}
public void addTestCase40(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 40",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	//additional Information
	wLib.explicitWait(driver, 5,additionalInformationLink);
	additionalInformationLink.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();
	wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
	amountGainOnLifeInsuranceTxtBox.clear();
	amountGainOnLifeInsuranceTxtBox.sendKeys(str1);
	numberOfYearsSinceLastPolicyGainTxtBox.clear();
	numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str2);
	txtBoxNoTaxAmountGainOnPolicy.clear();
	txtBoxNoTaxAmountGainOnPolicy.sendKeys(str3);
	txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.clear();
	txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.sendKeys(str4);
	chkBoxHalfMinimumAllowanceTransferToYou.click();
	previousSpousesNameTxtBox.clear();
	previousSpousesNameTxtBox.sendKeys(str5);
	wLib.explicitWait(driver, 2,saveAdditionalInfoBtn);
	saveAdditionalInfoBtn.click();
	driver.navigate().refresh();
	try {
	wLib.explicitWait(driver, 2,chkBoxHalfMinimumAllowanceTransferToYou);
	Reporter.log(chkBoxHalfMinimumAllowanceTransferToYou.getAttribute("checked"),true);
	if(chkBoxHalfMinimumAllowanceTransferToYou.getAttribute("checked")!="checked")
	{
	
		chkBoxHalfMinimumAllowanceTransferToYou.click();
	}
	saveAdditionalInfoBtn.click();
	driver.navigate().refresh();
	}
	catch (Exception e) {
Reporter.log("Minimum allowance is to be given to you Check Box is clicked");
	}
	n1 = Double.parseDouble(str1);//5800.00
	n2 = Double.parseDouble(str3);//5715.00
	//income from property
	clickIncome(driver);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str6);
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str7);
	rentRatesInsuranceEtcTxtBox.clear();
	rentRatesInsuranceEtcTxtBox.sendKeys(str8);
	repairsAndMaintenanceTxtBox.clear();
	repairsAndMaintenanceTxtBox.sendKeys(str9);
	intrstAndOthrFinancialChrgsTxtBox.clear();
	intrstAndOthrFinancialChrgsTxtBox.sendKeys(str10);
	legalManagmntAndPrfsnalFeesTxtBox.clear();
	legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str11);
	costsOfServicProvidedTxtBox.clear();
	costsOfServicProvidedTxtBox.sendKeys(str12);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str13);
	txtBoxLossBroughtForward.clear();
	txtBoxLossBroughtForward.sendKeys(str14);
	ResidentialfinancecostsTxtBox.clear();
	ResidentialfinancecostsTxtBox.sendKeys(str15);
	SaveBtn1.click();
	n3 = Double.parseDouble(str7);//45000.00
	n4 = Double.parseDouble(str8);//1654.00
	n5 = Double.parseDouble(str9);//4000.00
	n6 = Double.parseDouble(str10);//1500.00
	n7 = Double.parseDouble(str11);//1200.00
	n8 = Double.parseDouble(str12);//480.00
	n9 = Double.parseDouble(str13);//6890.00
	n10 = Double.parseDouble(str14);//2691.00
	n11 = Double.parseDouble(str15);//500.00
	wLib.explicitWait(driver, 5,adjustedProfitForTheYear);
	string1=adjustedProfitForTheYear.getAttribute("value");
	calculation1=Double.parseDouble(string1);
	string2=taxableProfitForTheYear.getAttribute("value");
	calculation2=Double.parseDouble(string2);
	total1=n3-(n4+n5+n6+n7+n8+n9);//29276
	total2=total1-n10;//26585	
	Assert.assertEquals(calculation1,total1);
	Reporter.log("Adjusted profit for the year verified successfully: "+calculation1,true);
	Assert.assertEquals(calculation2,total2);
	Reporter.log("Taxable profit for the year verified successfully: "+calculation2,true);

	//foreign income
	clickIncome(driver);
	wLib.explicitWait(driver, 5,linkForeignIncome);
	linkForeignIncome.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();

	try{
	wLib.explicitWait(driver,1,delOverseasSavings);
	if(delOverseasSavings.isDisplayed()==true)
	{
	delOverseasSavings.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,1,cnfmdel);
	cnfmdel.click();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for overseas savings is not available",true);
	}
	try{
	wLib.explicitWait(driver,1,delDividendsForeignComaniesBtn);
	if(delDividendsForeignComaniesBtn.isDisplayed()==true)
	{
	delDividendsForeignComaniesBtn.click();

	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for Dividends from foreign companies is not available",true);
	}

	wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
	interestOtherincomefromoverseassavingsFormBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,countryCodeLstBox);
	listbox1=new Select(countryCodeLstBox);
	listbox1.selectByValue("230");
	wLib.explicitWait(driver,5,colBTxtBox);
	colBTxtBox.clear();
	colBTxtBox.sendKeys(str16);
	wLib.explicitWait(driver,5,colCTxtBox);
	colCTxtBox.clear();
	colCTxtBox.sendKeys(str17);
	n12=Double.parseDouble(str16);
	n13=Double.parseDouble(str17);
	wLib.explicitWait(driver,5,colFTxtBox);
	actualValue1=colFTxtBox.getAttribute("value");
	n14=Double.parseDouble(actualValue1);
	total3=n12-n13;
	expValue1=String.format("%.0f",(total3));
	Assert.assertEquals(actualValue1, expValue1);
	Reporter.log("Value of Text Box F for 'Interest and other income from overseas savings' Verified: "+actualValue1,true);
	wLib.explicitWait(driver,5,SaveBtn2);
	SaveBtn2.click();
	wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
	dividendsFromForeignCompanies.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,countryCodeLstBox);
	listbox1=new Select(countryCodeLstBox);
	listbox1.selectByValue("230");
	wLib.explicitWait(driver,5,colBTxtBox);
	colBTxtBox.clear();
	colBTxtBox.sendKeys(str18);
	wLib.explicitWait(driver,5,colCTxtBox);
	colCTxtBox.clear();
	colCTxtBox.sendKeys(str19);
	n15=Double.parseDouble(str18);
	n16=Double.parseDouble(str19);
	actualValue2=colFTxtBox.getAttribute("value");
	n17=Double.parseDouble(actualValue2);
	total4=n15-n16;
	expValue2=String.format("%.0f",(total4));
	Assert.assertEquals(actualValue2, expValue2);
	Reporter.log("Value of Text Box F for 'Dividends from foreign companies' Verified: "+actualValue2,true);
	wLib.explicitWait(driver,5,SaveBtn2);
	SaveBtn2.click();
	SaveBtn1.click();
	try
	{
	if (SaveBtn1.isDisplayed()==true)
	{
	SaveBtn1.click();
	}
	}
	catch (Exception e) {
	Reporter.log("Save button clicked in first attempt",true);
	}
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();
	wLib.explicitWait(driver, 5,txtBoxGainsOnForeignLifeInsurancePolicies);
	txtBoxGainsOnForeignLifeInsurancePolicies.clear();
	txtBoxGainsOnForeignLifeInsurancePolicies.sendKeys(str20);
	wLib.explicitWait(driver, 5,txtBoxNumberOfYears);
	txtBoxNumberOfYears.clear();
	txtBoxNumberOfYears.sendKeys(str21);
	txtBoxTreatedAsPaidReadTheNotes.clear();
	txtBoxTreatedAsPaidReadTheNotes.sendKeys(str22);
	n18=Double.parseDouble(str20);//60345.00
	n19=Double.parseDouble(str22);//12069.00
	SaveBtn1.click();
	try
	{
	if (SaveBtn1.isDisplayed()==true)
	{
	SaveBtn1.click();
	}
	}
	catch (Exception e) {
	Reporter.log("Save button clicked in first attempt",true);
	}
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	foreignIncomeCalc=n18+n14;
	dividendsFromForeignCompaniesCalc=n17;
	capitalGainsTaxdueAmt=n1+n2;
	Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
	Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
	Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
	Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
	Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
	Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
	Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
	Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);

	totalincome = total1 + foreignIncomeCalc + dividendsFromForeignCompaniesCalc + capitalGainsTaxdueAmt;
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

	totlIncome=totalincome-n10;//Deducted Loss brought forward amount of Income from property
	calculation1 = totlIncome - personalAllowanceRateMaxLimit;
	allowance1=calculation1/2;
	calculation2=personalAllowanceRate-allowance1;//11790
	totalAllowance=calculation2+n10;//14,481.00
	taxDueInc = totalincome - totalAllowance;//88,330.00
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRatePayPension = total2 - calculation2;//14,795.00
	Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
	dueTax1=basicRatePayPension*BR_rate;//£2,959.00
	Reporter.log("Amount of Basic Rate of Pay Pension: "+dueTax1,true);
	basicRateSaving=(taxLimit1Uk- ((total2-calculation2)+n17))-nilRate2;//17,930.00
	dueTax2=basicRateSaving*BR_rate;//3,586.00
	Reporter.log("Amount of Basic Rate of Saving: "+dueTax2,true);
	heigherRateSaving= taxDueInc - (basicRatePayPension+nilRate2+basicRateSaving+n17);//53,830.00
	Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
	dueTax3=heigherRateSaving*HR_rate;//21,532.00

	totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

	amtReliefForFinanceCosts=n11*reliefFinancerate;
	Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//720.00
	Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);

	notionalTaxFromGainsOnLifeAmt=(n18+n1)*capitalGainsRateUpper;
	Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
	Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: " + amtNotionalTaxFromGainsOnLife.getText(),true);

	fullGainAmt = n1+n2+n18;//AOI4 + AOI6 + AOI8 + FOR43 -71,860
	C17_Br_Rate = fullGainAmt * BR_rate;//14,372.00
	topSlicingReliefVal=(dueTax2+dueTax3) - C17_Br_Rate;//10,746.00
	Reporter.log("Top Slicing Relief Value: "+topSlicingReliefVal,true);
	Assert.assertEquals(topSlicingReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(topSlicingReliefVal)));
	Reporter.log("Amount of Top Slicing Relief is verifired successfully"+topSlicingReliefAmt.getText(),true);

	calculateMAT=MCA_2*MATrate;
	Reporter.log("calculateMAT: "+calculateMAT,true);
	amtMAT=Double.parseDouble(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""));
	Assert.assertEquals(amtMAT,calculateMAT);
	Reporter.log("Marriage Allowance Transfer is Verified: "+amtMAT,true);
	incomeTaxdueafterallowancesandreliefs=totIncomeTaxDue - (amtReliefForFinanceCosts+notionalTaxFromGainsOnLifeAmt+topSlicingReliefVal+calculateMAT);
	Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
	Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);

	}
	public void funcDelMTRTest40(WebDriver driver)throws Exception
	{
	Reporter.log("Deleting MTR Test Case 40",true);	
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	funcDelAdditionalInfo(driver);
	delProfit(driver);
	clickIncome(driver);
	linkForeignIncome.click();
	wLib.explicitWait(driver, 1,commonEditBtn);
	commonEditBtn.click();
	try{
	wLib.explicitWait(driver, 1,delOverseasSavings);
	if(delOverseasSavings.isDisplayed()==true)
	{
	wLib.explicitWait(driver, 1,delOverseasSavings);
	delOverseasSavings.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	driver.navigate().refresh();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for overseas savings is not available",true);
	}
	try{
	wLib.explicitWait(driver, 1,delDividendsForeignComaniesBtn);
	if(delDividendsForeignComaniesBtn.isDisplayed()==true)
	{
	wLib.explicitWait(driver, 1,delDividendsForeignComaniesBtn);
	delDividendsForeignComaniesBtn.click();

	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	driver.navigate().refresh();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for Dividends from foreign companies is not available",true);
	}
	wLib.explicitWait(driver, 2,confirmDel);
	confirmDel.click();
	wLib.explicitWait(driver, 5,popup1);
	driver.switchTo().activeElement();
	yesBtn.click();
	}
	public void addTestCase41(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11)throws Exception
	{
	wLib=new WaitStatementLib();
	cis=new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 41",true);
	clickIncome(driver);
	addBank(driver,str1,str1,str2);
	addUKInterestNew(driver,str3);
	funcAddUntaxedInerest(driver,str4);
	dividentUKCompanies(driver,"Company1","",str5);
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str6);//6200.00
	stateBenefitsSaveBtn.click();
	wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
	residenceRemittanceBasisLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,notResidentInUKChkBox);
	notResidentInUKChkBox.click();
	meetTheThirdAutomaticOverseasTestChkBox.click();
	hadAGapBetweenEmploymentsInThisTaxYearChkBox.click();
	hadAHomeOverseasChkBox.click();
	numberOfDaysSpentInUKTxtBox.clear();
	numberOfDaysSpentInUKTxtBox.sendKeys(str7);
	howManyTiesToUKTxtBox.clear();
	howManyTiesToUKTxtBox.sendKeys(str8);
	numberOfWorkdaysInUKForEmploymentTxtBox.clear();
	numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str9);
	numberOfWorkdaysSpentOverseasTxtBox.clear();
	numberOfWorkdaysSpentOverseasTxtBox.sendKeys(str10);
	personalAllowancesClaimOnOtherBasisChkBox.click();
	listbox1=new Select(countryOfNationalityOrResidence1LstBox);
	listbox1.selectByValue(str11);
	commentTxtBox.clear();
	commentTxtBox.sendKeys("Test1");
	SaveBtn1.click();
	n1=Double.parseDouble(str3);//365.00
	n2=Double.parseDouble(str4);//7283.00
	n3=Double.parseDouble(str5);//1510.00
	n4=Double.parseDouble(str6);//6200.00
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5,taxCalSummaryLink);
	taxCalSummaryLink.click();
	interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+ n2;
	dividendsFromUKCompaniesAmt = n3;
	UKPensionAndStateBenefitAmt=n4;
	totalincome = interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + dividendsFromUKCompaniesAmt;
	totlIncome =  totalincome - personalAllowanceRate;

	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	
	Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
	Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	startedRatePayPension = totlIncome - dividendsFromUKCompaniesAmt;
	Reporter.log("Started Rate of Pay Pension: "+startedRatePayPension,true);
	if (startedRatePayPension<=SR_band)
	{
	dueTax1 = 0;
	}
	basicRateDividends = dividendsFromUKCompaniesAmt;
	Reporter.log("Basic Rate of Dividend: "+basicRateDividends,true);
	if (basicRateDividends <= dividentNillRate)
	{
	dueTax2 = 0;
	}
	totIncomeTaxDue = dueTax1+dueTax2;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
	Reporter.log("Amount of Total Income Tax Due is Verified: "+incomeTaxDue.getText(),true);

	taxTreatedAsPaidOnDividendsFromUKCompanies = (basicRateDividends * dividendTaxBasicRate)/100;
	Assert.assertEquals(amtTaxCreditsDividendsFromUKCompanies.getText().substring(1).replace(",", ""),String.format("%.2f",taxTreatedAsPaidOnDividendsFromUKCompanies));
	Reporter.log("Amount of  7.5% tax credits on dividends from UK companies (not repayable) is Verified: "+amtTaxCreditsDividendsFromUKCompanies.getText(),true);

	totalTaxDeductedAmt=n1*taxedUKInterestRate;
	Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
	incomeTaxDueAmt = totalTaxDeductedAmt - totIncomeTaxDue;
	Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
	Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);

	}
	public void funcDelMTRTest41(WebDriver driver)throws Exception
	{
	Reporter.log("Deleting MTR Test Case 41",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
	residenceRemittanceBasisLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();	
	wLib.explicitWait(driver, 5,confirmDel);
	confirmDel.click();
	wLib.explicitWait(driver, 5,popup1);
	driver.switchTo().activeElement();
	yesBtn.click();
	clickIncome(driver);
	delBank(driver);
	deleteDivident(driver);
	}
	public void addTestCase42(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17)throws Exception
	{
	wLib=new WaitStatementLib();
	cis=new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 42",true);
	clickIncome(driver);
	wLib.explicitWait(driver, 10,dividentLink);
	dividentLink.click();
	dividentUKCompanies(driver,"Company1","",str1);//32000
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str2);//6200.00
	stateBenefitsSaveBtn.click();
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str3);
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str4);
	rentRatesInsuranceEtcTxtBox.clear();
	rentRatesInsuranceEtcTxtBox.sendKeys(str5);
	repairsAndMaintenanceTxtBox.clear();
	repairsAndMaintenanceTxtBox.sendKeys(str6);
	intrstAndOthrFinancialChrgsTxtBox.clear();
	intrstAndOthrFinancialChrgsTxtBox.sendKeys(str7);
	legalManagmntAndPrfsnalFeesTxtBox.clear();
	legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str8);
	costsOfServicProvidedTxtBox.clear();
	costsOfServicProvidedTxtBox.sendKeys(str9);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str10);
	txtBoxLossBroughtForward.clear();
	txtBoxLossBroughtForward.sendKeys(str11);
	ResidentialfinancecostsTxtBox.clear();
	ResidentialfinancecostsTxtBox.sendKeys(str12);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
	residenceRemittanceBasisLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,notResidentInUKChkBox);
	notResidentInUKChkBox.click();
	meetTheThirdAutomaticOverseasTestChkBox.click();
	hadAGapBetweenEmploymentsInThisTaxYearChkBox.click();
	hadAHomeOverseasChkBox.click();
	numberOfDaysSpentInUKTxtBox.clear();
	numberOfDaysSpentInUKTxtBox.sendKeys(str13);
	howManyTiesToUKTxtBox.clear();
	howManyTiesToUKTxtBox.sendKeys(str14);
	numberOfWorkdaysInUKForEmploymentTxtBox.clear();
	numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str15);
	numberOfWorkdaysSpentOverseasTxtBox.clear();
	numberOfWorkdaysSpentOverseasTxtBox.sendKeys(str16);
	personalAllowancesClaimOnOtherBasisChkBox.click();
	listbox1=new Select(countryOfNationalityOrResidence1LstBox);
	listbox1.selectByValue(str17);
	commentTxtBox.clear();
	commentTxtBox.sendKeys("Test1");
	SaveBtn1.click();

	n1 = Double.parseDouble(str1);//32000.00
	n2 = Double.parseDouble(str2);//6200.00
	n3 = Double.parseDouble(str4);//45000.00
	n4 = Double.parseDouble(str5);//1654.00
	n5 = Double.parseDouble(str6);//4000.00
	n6 = Double.parseDouble(str7);//1500.00
	n7 = Double.parseDouble(str8);//1200.00
	n8 = Double.parseDouble(str9);//480.00
	n9 = Double.parseDouble(str10);//6890.00
	n10 = Double.parseDouble(str11);//2691.00
	n11 = Double.parseDouble(str12);//500.00
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	profitFromUKLandAndProperty = n3-(n4+n5+n6+n7+n8+n9);//29276
	dividendsFromUKCompaniesAmt = n1;
	UKPensionAndStateBenefitAmt = n2;
	totalincome = profitFromUKLandAndProperty + UKPensionAndStateBenefitAmt + dividendsFromUKCompaniesAmt;
	incomeTaxReliefAmt = n10;
	amtIncomeExcludedFromCalculation = dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
	totlIncome =  totalincome - (incomeTaxReliefAmt + amtIncomeExcludedFromCalculation);

	Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",profitFromUKLandAndProperty));
	Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
	Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
	Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
		
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
	Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRatePayPension=totlIncome;
	dueTax1 = basicRatePayPension*BR_rate;
	Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);
	basicRateDividends = dividendsFromUKCompaniesAmt;
	dueTax2 = (basicRateDividends * dividendTaxBasicRate)/100;
	Reporter.log("Basic Rate of Dividend: "+dueTax2,true);
	totIncomeTaxDue=dueTax1 + dueTax2;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
	amtReliefForFinanceCosts = n11 * reliefFinancerate;
	Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));//100
	Reporter.log("Amount of Relief For Finance Costs is verifired successfully: "+dataReliefForFinanceCosts.getText(),true);
	incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtReliefForFinanceCosts;
	Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
	Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);

	taxTreatedAsPaidOnDividendsFromUKCompanies = (dividendsFromUKCompaniesAmt * dividendTaxBasicRate)/100;//2400
	Assert.assertEquals(amtTaxCreditsDividendsFromUKCompanies.getText().substring(1).replace(",", ""),String.format("%.2f",taxTreatedAsPaidOnDividendsFromUKCompanies));
	Reporter.log("Amount of  7.5% tax credits on dividends from UK companies (not repayable) is Verified: "+amtTaxCreditsDividendsFromUKCompanies.getText(),true);
	incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs - taxTreatedAsPaidOnDividendsFromUKCompanies;
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
	Reporter.log("Amount of Total Income Tax Due is Verified: "+taxForThisYear.getText(),true);
	}	
	public void funcDelMTRTest42(WebDriver driver)throws Exception
	{
	Reporter.log("Deleting MTR Test Case 42",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	delProfit(driver);
	wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
	residenceRemittanceBasisLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,confirmDel);
	confirmDel.click();
	wLib.explicitWait(driver, 5,popup1);
	driver.switchTo().activeElement();
	yesBtn.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 2,dividentLink);
	dividentLink.click();
	deleteDivident(driver);
	delUKPensionsAnnuities(driver);
	}
	public void addTestCase43(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17)throws Exception
	{
	wLib=new WaitStatementLib();
	cis=new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 43",true);
	clickIncome(driver);
	wLib.explicitWait(driver, 10,dividentLink);
	dividentLink.click();
	dividentUKCompanies(driver,"Company1","",str1);//32000
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str2);//6200.00
	stateBenefitsSaveBtn.click();
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str3);
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str4);
	rentRatesInsuranceEtcTxtBox.clear();
	rentRatesInsuranceEtcTxtBox.sendKeys(str5);
	repairsAndMaintenanceTxtBox.clear();
	repairsAndMaintenanceTxtBox.sendKeys(str6);
	intrstAndOthrFinancialChrgsTxtBox.clear();
	intrstAndOthrFinancialChrgsTxtBox.sendKeys(str7);
	legalManagmntAndPrfsnalFeesTxtBox.clear();
	legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str8);
	costsOfServicProvidedTxtBox.clear();
	costsOfServicProvidedTxtBox.sendKeys(str9);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str10);
	txtBoxLossBroughtForward.clear();
	txtBoxLossBroughtForward.sendKeys(str11);
	ResidentialfinancecostsTxtBox.clear();
	ResidentialfinancecostsTxtBox.sendKeys(str12);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
	residenceRemittanceBasisLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,notResidentInUKChkBox);
	notResidentInUKChkBox.click();
	meetTheThirdAutomaticOverseasTestChkBox.click();
	hadAGapBetweenEmploymentsInThisTaxYearChkBox.click();
	hadAHomeOverseasChkBox.click();
	numberOfDaysSpentInUKTxtBox.clear();
	numberOfDaysSpentInUKTxtBox.sendKeys(str13);
	howManyTiesToUKTxtBox.clear();
	howManyTiesToUKTxtBox.sendKeys(str14);
	numberOfWorkdaysInUKForEmploymentTxtBox.clear();
	numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str15);
	numberOfWorkdaysSpentOverseasTxtBox.clear();
	numberOfWorkdaysSpentOverseasTxtBox.sendKeys(str16);
	personalAllowancesClaimOnOtherBasisChkBox.click();
	listbox1=new Select(countryOfNationalityOrResidence1LstBox);
	listbox1.selectByValue(str17);
	commentTxtBox.clear();
	commentTxtBox.sendKeys("Test1");
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,marriageAllowanceForm);
	marriageAllowanceForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,receiveMarriageAllowancefromChkBox);
	receiveMarriageAllowancefromChkBox.click();
	SaveBtn2.click();
	n1 = Double.parseDouble(str1);//32000.00
	n2 = Double.parseDouble(str2);//6200.00
	n3 = Double.parseDouble(str4);//45000.00
	n4 = Double.parseDouble(str5);//1654.00
	n5 = Double.parseDouble(str6);//4000.00
	n6 = Double.parseDouble(str7);//1500.00
	n7 = Double.parseDouble(str8);//1200.00
	n8 = Double.parseDouble(str9);//480.00
	n9 = Double.parseDouble(str10);//6890.00
	n10 = Double.parseDouble(str11);//2691.00
	n11 = Double.parseDouble(str12);//500.00
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	profitFromUKLandAndProperty = n3-(n4+n5+n6+n7+n8+n9);//29276
	dividendsFromUKCompaniesAmt = n1;
	UKPensionAndStateBenefitAmt = n2;
	totalincome = profitFromUKLandAndProperty + UKPensionAndStateBenefitAmt + dividendsFromUKCompaniesAmt;
	incomeTaxReliefAmt = n10;
	amtIncomeExcludedFromCalculation = dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
	totlIncome =  totalincome - (incomeTaxReliefAmt + amtIncomeExcludedFromCalculation);

	Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",profitFromUKLandAndProperty));
	Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
	Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
	Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
		
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
	Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRatePayPension=totlIncome;
	dueTax1 = basicRatePayPension*BR_rate;
	Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);
	basicRateDividends = dividendsFromUKCompaniesAmt;
	dueTax2 = (basicRateDividends * dividendTaxBasicRate)/100;
	Reporter.log("Basic Rate of Dividend: "+dueTax2,true);
	totIncomeTaxDue=dueTax1 + dueTax2;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
	amtReliefForFinanceCosts = n11 * reliefFinancerate;
	Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));//100
	Reporter.log("Amount of Relief For Finance Costs is verifired successfully: "+dataReliefForFinanceCosts.getText(),true);
	incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtReliefForFinanceCosts;
	Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
	Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);

	taxTreatedAsPaidOnDividendsFromUKCompanies = (dividendsFromUKCompaniesAmt * dividendTaxBasicRate)/100;//2400
	Assert.assertEquals(amtTaxCreditsDividendsFromUKCompanies.getText().substring(1).replace(",", ""),String.format("%.2f",taxTreatedAsPaidOnDividendsFromUKCompanies));
	Reporter.log("Amount of  7.5% tax credits on dividends from UK companies (not repayable) is Verified: "+amtTaxCreditsDividendsFromUKCompanies.getText(),true);
	incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs - taxTreatedAsPaidOnDividendsFromUKCompanies;
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
	Reporter.log("Amount of Total Income Tax Due is Verified: "+taxForThisYear.getText(),true);
	}	
	public void funcDelMTRTest43(WebDriver driver)throws Exception
	{
	Reporter.log("Deleting MTR Test Case 43",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	delProfit(driver);
	wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
	residenceRemittanceBasisLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,confirmDel);
	confirmDel.click();
	wLib.explicitWait(driver, 5,popup1);
	driver.switchTo().activeElement();
	yesBtn.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 2,dividentLink);
	dividentLink.click();
	deleteDivident(driver);
	delUKPensionsAnnuities(driver);
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	wLib.explicitWait(driver, 5,marriageAllowanceForm);
	marriageAllowanceForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,receiveMarriageAllowancefromChkBox);
	receiveMarriageAllowancefromChkBox.click();
	SaveBtn2.click();
	}
	public void addTestCase44(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21)throws Exception
	{
	Reporter.log("Exceuting MTR Test Case 44",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,finishingTaxLink);
	finishingTaxLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,taxRoundedOffTxtBox);
	taxRoundedOffTxtBox.clear();
	taxRoundedOffTxtBox.sendKeys(str1);
	otherInfoTxtBox.clear();
	otherInfoTxtBox.sendKeys(str2);
	SaveBtn2.click();
	Reporter.log("Finsing Tax Information Added Successfully",true);
	wLib.explicitWait(driver, 5,additionalInformationLink);
	additionalInformationLink.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();
	shareSchemesTaxableAmountTxtBox.clear();
	shareSchemesTaxableAmountTxtBox.sendKeys(str3);
	subscriptionsSharesTxtBox.clear();
	subscriptionsSharesTxtBox.sendKeys(str4);
	socialInvestmentTxtBox.clear();
	socialInvestmentTxtBox.sendKeys(str5);
	wLib.explicitWait(driver, 5,saveAdditionalInfoBtn);
	saveAdditionalInfoBtn.click();
	driver.navigate().refresh();
	clickIncome(driver);
	funcAddEmployerForMTR(driver, str6, str7);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	payFrmEmployer.clear();
	payFrmEmployer.sendKeys(str8);
	UkTaxTakenOffPay.clear();
	UkTaxTakenOffPay.sendKeys(str9);
	CompanyCarsAndVans.clear();
	CompanyCarsAndVans.sendKeys(str10);
	FuelForCompanyCarsAndVans.clear();
	FuelForCompanyCarsAndVans.sendKeys(str11);
	PrvtMedAndDntl.clear();
	PrvtMedAndDntl.sendKeys(str12);
	FxdExpnsDeductTxtBox.clear();
	FxdExpnsDeductTxtBox.sendKeys(str13);
	SaveBtn1.click();
	Reporter.log("Employment Income Added successfully",true);
	driver.navigate().refresh();
	addEmpIncome.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	payFrmEmployer.clear();
	payFrmEmployer.sendKeys(str14);
	UkTaxTakenOffPay.clear();
	UkTaxTakenOffPay.sendKeys(str15);
	PrvtMedAndDntl.clear();
	PrvtMedAndDntl.sendKeys(str16);
	GoodsEtcTxtBob.clear();
	GoodsEtcTxtBob.sendKeys(str17);
	AccommodationProvidedByEmployerTxtBox.clear();
	AccommodationProvidedByEmployerTxtBox.sendKeys(str18);
	ProfFeesAndSubsTxtBox.clear();
	ProfFeesAndSubsTxtBox.sendKeys(str19);
	SaveBtn1.click();
	Reporter.log("Employment Income Added successfully",true);
	driver.navigate().refresh();
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,formOpenLink);
	formOpenLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,underpaidTaxForEarlierYearsIncludedInCodeTxtBox);
	underpaidTaxForEarlierYearsIncludedInCodeTxtBox.clear();
	underpaidTaxForEarlierYearsIncludedInCodeTxtBox.sendKeys(str20);
	wLib.explicitWait(driver, 5,underpaidTaxTxtBox);
	underpaidTaxTxtBox.clear();
	underpaidTaxTxtBox.sendKeys(str21);
	SaveBtn2.click();
	driver.navigate().refresh();
	n1=Double.parseDouble(str1); //671
	n2=Double.parseDouble(str3); //3020.00
	n3=Double.parseDouble(str4); //11000.00
	n4=Double.parseDouble(str5); //25000.00
	n5=Double.parseDouble(str8); //27515.00
	n6=Double.parseDouble(str9); //3728.00
	n7=Double.parseDouble(str10); //2250.00
	n8=Double.parseDouble(str11); //650.00
	n9=Double.parseDouble(str12); //75.00
	n10=Double.parseDouble(str13); //75.00
	n11=Double.parseDouble(str14); //101000.00
	n12=Double.parseDouble(str15); //20430.00
	n13=Double.parseDouble(str16); //500.00
	n14=Double.parseDouble(str17); //5000.00
	n15=Double.parseDouble(str18); //7500.00
	n16=Double.parseDouble(str19); //175.00
	n17=Double.parseDouble(str20); //221.00
	n18=Double.parseDouble(str21); //378.00
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	payFromAllEmploymentsAmt=n5+n11;
	benefitsAndExpensesReceivedAmt=n7+n8+n9+n13+n14+n15;
	allowableExpensesAmt = n10+n16;
	totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
	shareSchemesAmt=n2;
	totlIncome=totalFromAllEmployments+shareSchemesAmt;
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
	Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
	Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
	Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
	Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
	Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
	Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
	Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
	Assert.assertEquals(ShareschemesTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(shareSchemesAmt)));
	Reporter.log("Share schemes amount on Tax Summary page is verified: "+ShareschemesTaxSummary.getText(),true);	
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRatePayPension=taxLimit1Uk;
	Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
	dueTax1=basicRatePayPension*BR_rate;//6900
	heigherRatePayPension=totlIncome - basicRatePayPension;
	Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
	dueTax2=heigherRatePayPension*HR_rate;
	incomeTaxDueAmt=dueTax1+dueTax2;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxDueAmt)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
	enterpriseInvestmentSchemeReliefAmt = n3 * otherIncomeTaxReliefRate;
	socialInvestmentTaxReliefAmt = n4 * otherIncomeTaxReliefRate;
	underpaidTaxForEarlierYearsAmt = n17;
	tax1 = (incomeTaxDueAmt - (enterpriseInvestmentSchemeReliefAmt + socialInvestmentTaxReliefAmt)) +  underpaidTaxForEarlierYearsAmt;
	Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",(tax1)));
	Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDue1.getText(),true);
	totalTaxDeductedAmt=n6+n12+n18;
	Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
	totIncomeTaxDue=tax1-totalTaxDeductedAmt;
	Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
	fnltax=totIncomeTaxDue+n1;
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
	Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);

	}
	public void funcDelMTRTest44(WebDriver driver)throws Exception
	{
	Reporter.log("Deleting MTR Test Case 44",true);	
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,finishingTaxLink);
	finishingTaxLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,taxRoundedOffTxtBox);
	taxRoundedOffTxtBox.clear();
	otherInfoTxtBox.clear();
	SaveBtn2.click();
	Reporter.log("Finsing Tax Information Deleted Successfully",true);
	funcDelAdditionalInfo(driver);
	clickIncome(driver);
	clickEmployment(driver);
	delEmpInfo(driver);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver, 5,formOpenLink);
	formOpenLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,underpaidTaxForEarlierYearsIncludedInCodeTxtBox);
	underpaidTaxForEarlierYearsIncludedInCodeTxtBox.clear();
	underpaidTaxTxtBox.clear();
	SaveBtn2.click();
	driver.navigate().refresh();
	}
	public void addPartnershipInfo(WebDriver driver,String str1, String str2) throws Exception {
		wLib = new WaitStatementLib();
		cis = new CISPage(driver);
		clickIncome(driver);
		wLib.explicitWait(driver, 5,PartnershipLink);
		PartnershipLink.click();
		wLib.explicitWait(driver, 5,frm1Btn);
		frm1Btn.click();
		cis.switchwindowNew(driver);
		wLib.explicitWait(driver, 5,txtBoxDec);
		txtBoxDec.clear();
		txtBoxDec.sendKeys(str1);
		PartnerShipRefNoNew.sendKeys(str2);
		StartDatetxtbox.clear();
		StartDatetxtbox.sendKeys(dateStart);
		Endtxtbox.clear();
		Endtxtbox.sendKeys(dateEnd);
		wLib.explicitWait(driver, 5,SaveBtn2);
		SaveBtn2.click();
		driver.navigate().refresh();
	}
	public void addPartnershipInfo1(WebDriver driver,String str1,String str2,String str3,String str4 ) throws Exception {
		wLib = new WaitStatementLib();
		cis = new CISPage(driver);
		clickIncome(driver);
		wLib.explicitWait(driver, 5,PartnershipLink);
		PartnershipLink.click();
		wLib.explicitWait(driver, 5,frm1Btn);
		frm1Btn.click();
		cis.switchwindowNew(driver);
		wLib.explicitWait(driver, 5,txtBoxDec);
		txtBoxDec.clear();
		txtBoxDec.sendKeys(str1);
		PartnerShipRefNoNew.sendKeys(str2);
		StartDatetxtbox.clear();
		StartDatetxtbox.sendKeys(str3);
		Endtxtbox.clear();
		Endtxtbox.sendKeys(str4);
		wLib.explicitWait(driver, 5,SaveBtn2);
		SaveBtn2.click();
		driver.navigate().refresh();
	}
	public void addTestCase45(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39)throws Exception
	{
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 45",true);
	clickIncome(driver);
	funcAddEmployerForMTR(driver, str1, str2);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	payFrmEmployer.clear();
	payFrmEmployer.sendKeys(str3);
	TipsPaymentsNtOnP60.clear();
	TipsPaymentsNtOnP60.sendKeys(str4);
	isTeacherChkBox.click();
	SaveBtn1.click();
	Reporter.log("Employment Income Added successfully",true);
	driver.navigate().refresh();
	addEmpIncome.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	payFrmEmployer.clear();
	payFrmEmployer.sendKeys(str5);
	SaveBtn1.click();
	Reporter.log("Employment Income Added successfully",true);
	driver.navigate().refresh();
	addPartnershipInfo(driver,str6,str9);
	wLib.explicitWait(driver, 5,PartnershipFullFormLink);
	PartnershipFullFormLink.click();
	/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
	PartnerShipRefNo.clear();
	PartnerShipRefNo.sendKeys(str9);*/
	wLib.explicitWait(driver, 5,BasisBusinessStartDate);
	BasisBusinessStartDate.clear();
	wLib.explicitWait(driver, 5,BasisBusinessEndDate);
	BasisBusinessEndDate.clear();
	wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
	yourShareOfPartnershipProfitLoss.clear();
	wLib.explicitWait(driver, 5,lossFromThisTaxYearSetOffAgainstOtherIncome);
	lossFromThisTaxYearSetOffAgainstOtherIncome.clear();
	shareUKUntaxedSavingsIncomeTxtBox.clear();
	shareOfProfitOrLossFromUKPropertyTxtBox.clear();
	lossesBroughtForwardFromEarlierYearsSetOffAgainstProfitsTxtBox.clear();
	foreignIncomeResidentialFinanceCostsTxtBox.clear();
	shareOfProfitFromUKOrEEAFurnishedHolidayLettingsTxtBox.clear();
	shareOfOtherUntaxedForeignIncomeTxtBox.clear();
	totalForeignFaxTakenOffTxtBox.clear();
	dividendIncomeTxtBox.clear();
	shareOfTaxedIncomeTaxableTxtBox.clear();
	shareOfOtherTaxedIncomeTxtBox.clear();
	dividendIncomeTotalForeignTaxCreditTakenOffTxtBox.clear();
	deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.clear();
	BasisBusinessStartDate.sendKeys(str10);
	BasisBusinessEndDate.sendKeys(str11);
	yourShareOfPartnershipProfitLoss.sendKeys(str12);
	lossFromThisTaxYearSetOffAgainstOtherIncome.sendKeys(str13);
	payClass2NICsVoluntarilyChkBox.click();
	shareUKUntaxedSavingsIncomeTxtBox.sendKeys(str14);
	shareOfProfitOrLossFromUKPropertyTxtBox.sendKeys(str15);
	lossesBroughtForwardFromEarlierYearsSetOffAgainstProfitsTxtBox.sendKeys(str16);
	foreignIncomeResidentialFinanceCostsTxtBox.sendKeys(str17);
	shareOfProfitFromUKOrEEAFurnishedHolidayLettingsTxtBox.sendKeys(str18);
	shareOfOtherUntaxedForeignIncomeTxtBox.sendKeys(str19);
	totalForeignFaxTakenOffTxtBox.sendKeys(str20);
	dividendIncomeTxtBox.sendKeys(str21);
	shareOfTaxedIncomeTaxableTxtBox.sendKeys(str22);
	shareOfOtherTaxedIncomeTxtBox.sendKeys(str23);
	dividendIncomeTotalForeignTaxCreditTakenOffTxtBox.sendKeys(str24);
	deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.sendKeys(str25);
	SaveBtn1.click();
	driver.navigate().refresh();
	Class2Class4NICsForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
	PayClass2NICsvoluntarily.click();
	SaveBtn2.click(); 
	driver.navigate().refresh();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,linkForeignIncome);
	linkForeignIncome.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();

	try{
	wLib.explicitWait(driver,1,delOverseasSavings);
	if(delOverseasSavings.isDisplayed()==true)
	{
	delOverseasSavings.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,1,cnfmdel);
	cnfmdel.click();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for overseas savings is not available",true);
	}
	try{
	wLib.explicitWait(driver,1,delDividendsForeignComaniesBtn);
	if(delDividendsForeignComaniesBtn.isDisplayed()==true)
	{
	delDividendsForeignComaniesBtn.click();

	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for Dividends from foreign companies is not available",true);
	}

	wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
	interestOtherincomefromoverseassavingsFormBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,countryCodeLstBox);
	listbox1=new Select(countryCodeLstBox);
	listbox1.selectByValue("60");
	wLib.explicitWait(driver,5,colBTxtBox);
	colBTxtBox.clear();
	colBTxtBox.sendKeys(str26);
	wLib.explicitWait(driver,5,colDTxtBox);
	colDTxtBox.clear();
	colDTxtBox.sendKeys(str27);
	value1=colFTxtBox.getAttribute("value");
	wLib.explicitWait(driver,5,SaveBtn2);
	SaveBtn2.click();
	wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
	dividendsFromForeignCompanies.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,countryCodeLstBox);
	listbox1=new Select(countryCodeLstBox);
	listbox1.selectByValue("148");
	wLib.explicitWait(driver,5,colBTxtBox);
	colBTxtBox.clear();
	colBTxtBox.sendKeys(str28);
	wLib.explicitWait(driver,5,colCTxtBox);
	colCTxtBox.clear();
	colCTxtBox.sendKeys(str29);
	colEChkBox.click();
	value2=colFTxtBox.getAttribute("value");
	wLib.explicitWait(driver,5,SaveBtn2);
	SaveBtn2.click();
	SaveBtn1.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 2,linkCapitalGain);
	linkCapitalGain.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
	propertyEtcTotalDisposalTxtBox.clear();
	propertyEtcTotalDisposalTxtBox.sendKeys(str30);
	propertyEtcDisposalProceedTxtBox.clear();
	propertyEtcDisposalProceedTxtBox.sendKeys(str31);
	propertyEtcCostsAndIndexationTxtBox.clear();
	propertyEtcCostsAndIndexationTxtBox.sendKeys(str32);
	propertyEtcGainsInTheYearTxtBox.clear();
	propertyEtcGainsInTheYearTxtBox.sendKeys(str33);
	propertyEtcClaimOrElectionMadeTxtBox.clear();
	propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str34);
	uQSTotalDisposalTxtBox.clear();
	uQSTotalDisposalTxtBox.sendKeys(str35);
	uQSDisposalProceedTxtBox.clear();
	uQSDisposalProceedTxtBox.sendKeys(str36);
	uQSGainsInTheYearTxtBox.clear();
	uQSGainsInTheYearTxtBox.sendKeys(str37);
	totalERGainForTheYearTxtBox.clear();
	totalERGainForTheYearTxtBox.sendKeys(str38);
	commentTxtBox.clear();
	commentTxtBox.sendKeys(str39);
	SaveBtn1.click();
	n1=Double.parseDouble(str3); //8000
	n2=Double.parseDouble(str4); //50.00
	n3=Double.parseDouble(str5); //9050
	n4=Double.parseDouble(str12); //-3621.00
	n5=Double.parseDouble(str13); //3621.00
	n6=Double.parseDouble(str14); //426.00
	n7=Double.parseDouble(str15); //6421.00
	n8=Double.parseDouble(str16); //365.00
	n9=Double.parseDouble(str17); //240.00
	n10=Double.parseDouble(str18); //627.00
	n11=Double.parseDouble(str19); //1421.00
	n12=Double.parseDouble(str20); //142.00
	n13=Double.parseDouble(str21); //748.00
	n14=Double.parseDouble(str22); //1256.00
	n15=Double.parseDouble(str23); //250.00
	n16=Double.parseDouble(str24); //38.00
	n17=Double.parseDouble(str25); //252.00
	n18=Double.parseDouble(str26); //1263.00
	n19=Double.parseDouble(str27); //252.00
	n20=Double.parseDouble(str28); //422.00
	n21=Double.parseDouble(str29); //42.00
	n22=Double.parseDouble(str31); //37000.00
	n23=Double.parseDouble(str32); //12000.00
	n24=Double.parseDouble(str33); //25000.00
	n25=Double.parseDouble(str36); //25000.00
	n26=Double.parseDouble(str37); //25000.00
	n27=Double.parseDouble(str38); //20000.00
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	payFromAllEmploymentsAmt=n1+n2+n3;//17100
	profitFromPartnershipsAmt=(n6+n7+n10+n11+n13+n14+n15) - (n12+n16);
	foreignIncomeCalc=n18;
	dividendsFromForeignCompaniesCalc=n20;
	totalincome = payFromAllEmploymentsAmt + profitFromPartnershipsAmt + foreignIncomeCalc + dividendsFromForeignCompaniesCalc;
	incomeTaxReliefAmt=n5 + n8;
	totlIncome=totalincome - (incomeTaxReliefAmt+personalAllowanceRate);
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
	Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

	Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
	Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);

	Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
	Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);

	Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
	Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);

	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);


	Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
	Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRatePayPension= (payFromAllEmploymentsAmt + (((n11-n12)+n10+n7+n15)-(n16+n8)))-(personalAllowanceRate+n13);//£9,803.00
	Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
	dueTax1=basicRatePayPension*BR_rate;//£1,960.60

	basicRateSaving= totlIncome- (basicRatePayPension+n13+n20+nilRate1);//1,945.00
	Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
	dueTax2=basicRateSaving*BR_rate;//£389.00

	incomeTaxDueAmt=dueTax1+dueTax2;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxDueAmt)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
	amtReliefForFinanceCosts=n9*reliefFinancerate;
	Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//£48.00
	Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);
	class2Amt=class2Rate*weeksYear;//£153.40
	Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
	Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
	totalTaxDeductedAmt=n17+n19;//504
	Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
	total1 = payFromAllEmploymentsAmt+(((n11-n12)+n10+n7+n15)-(n16+n8)) + n8;//5639
	Reporter.log("total1:"+total1,true);
	total2 = n6 + n14 +n18;//2945
	Reporter.log("total2:"+total2,true);
	total3 = n13 + n20;//1170
	Reporter.log("total3:"+total3,true);
	total4 = (total1+total2+total3)-n8;//29,389
	Reporter.log("total4:"+total4,true);
	total5 =(n5+n8+personalAllowanceRate)-n8;//15,471
	Reporter.log("total5:"+total5,true);
	total6=total4-total5;//13918
	Reporter.log("total6:"+total6,true);
	total7=taxLimit1Uk-total6;//20582
	Reporter.log("total7:"+total7,true);
	total8=((n24-n27)+n26)-annualExemptIndividualsProposed;//£18,300.00
	Reporter.log("total8:"+total8,true);
	total9=total7-n27;//582
	Reporter.log("total9:"+total9,true);
	total10=total8-total9;//17,718.00	
	Reporter.log("total10:"+total10,true);
	gainsThatQualifyRorEntrepreneursAmt = (n27*entrepreneursReliefRate)/100;//£2,000.00
	otherGainsBasicAmt = (total9*entrepreneursReliefRate)/100;//£58.20
	otherGainsAmt = total10*capitalGainsRateUpper;//3,543.60
	capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt + otherGainsBasicAmt + otherGainsAmt;//£5,601.80
	Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));//£5,601.80
	Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
	fnltax=(((incomeTaxDueAmt-amtReliefForFinanceCosts)+class2Amt)-totalTaxDeductedAmt)+capitalGainsTaxdueAmt;
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
	Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);
	}
	public void delPartnershipInfo(WebDriver driver) throws Exception {
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	wLib.explicitWait(driver, 5,partnershipDel);
	partnershipDel.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
}
	public void delPartnershipFull(WebDriver driver) throws Exception
	{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5, PartnershipLink);
	PartnershipLink.click();
	wLib.explicitWait(driver, 5,delPartnershipFullBtn);
	delPartnershipFullBtn.click();
	wLib.explicitWait(driver, 5,confirmDel);
	confirmDel.click();
	
	}
	public void delPartnershipShort(WebDriver driver) throws Exception
	{
	wLib = new WaitStatementLib();
	wLib.explicitWait(driver, 5, PartnershipLink);
	PartnershipLink.click();
	wLib.explicitWait(driver, 5,delButton);
	delButton.click();
	wLib.explicitWait(driver, 5,confDel);
	confDel.click();
	
	}
	public void funcDelMTRTest45(WebDriver driver)throws Exception
	{
	Reporter.log("Deleting MTR Test Case 45",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	clickEmployment(driver);
	delEmpInfo(driver);
	delCGI(driver);
	delPartnershipFull(driver);
	delPartnershipInfo(driver);
	wLib.explicitWait(driver,5,Class2Class4NICsForm);
	Class2Class4NICsForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
	PayClass2NICsvoluntarily.click();
	wLib.explicitWait(driver,5,SaveBtn2);
	SaveBtn2.click(); 
	clickIncome(driver);
	wLib.explicitWait(driver, 5,linkForeignIncome);
	linkForeignIncome.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();

	try{
	wLib.explicitWait(driver,1,delOverseasSavings);
	if(delOverseasSavings.isDisplayed()==true)
	{
	delOverseasSavings.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,1,cnfmdel);
	cnfmdel.click();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for overseas savings is not available",true);
	}
	try{
	wLib.explicitWait(driver,1,delDividendsForeignComaniesBtn);
	if(delDividendsForeignComaniesBtn.isDisplayed()==true)
	{
	delDividendsForeignComaniesBtn.click();

	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for Dividends from foreign companies is not available",true);
	}
	wLib.explicitWait(driver, 5,confirmDel);
	confirmDel.click();
	wLib.explicitWait(driver, 5,popup1);
	driver.switchTo().activeElement();
	yesBtn.click();
	}
	
	public void addTestCase48(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8, String str9)throws Exception
	{
Reporter.log("Exceuting MTR Test Case 48",true);
wLib = new WaitStatementLib();
clickIncome(driver);
addBank(driver, str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str5);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str6);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str7);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str8);
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.clear();
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.sendKeys(str9);
SaveBtn1.click();
driver.navigate().refresh();
n1 = Double.parseDouble(str3);//22.00	
n2 = Double.parseDouble(str4);//2099.88	
n3 = Double.parseDouble(str6);//32495.00	
n4 = Double.parseDouble(str7);// 8620.00	
n5 = Double.parseDouble(str8);//1200.00	
n6 = Double.parseDouble(str9);//800.00	
total1=(n3-n4)-(n5+n6);//£21,875.00
Reporter.log("Profit from self-employment: "+total1,true);
x1=n1+(n1*taxedUKInterestRate);
total2=(Math.floor(x1)+Math.floor(n2));//£2,126.00	 
Reporter.log("Interest from UK banks, building societies and securities etc: "+total2,true);
total3=total1+total2;
Reporter.log("Total income received: "+total3,true);
total4=total3-personalAllowanceRate; 
Reporter.log("Total income on which tax is due: "+total4,true);
amount3 = (total4 - total2) * BR_rate;//£2005
Reporter.log("Basic rate of Pay, pensions, profit: "+amount3,true);
amount4 = (total2 - nilRate1) * BR_rate;//£225.20
Reporter.log("Basic rate of Savings interest from banks or building societies, securities etc: "+amount4,true);	
totIncomeTaxDue = amount3 + amount4;//£2230.20
Reporter.log("Total Income Tax Due: "+totIncomeTaxDue,true);	
total5 = total1 - class4LPLAmt;//£13451	
Reporter.log("total5: "+total5,true);	
total6=total5*class4LPLRate;//£1210.59
Reporter.log("Class 4 National Insurance contributions: "+total6,true);	
total7=total6+(class2Rate*weeksYear)+totIncomeTaxDue;
Reporter.log("Income Tax, Class 2 and Class 4 National Insurance contributions due: "+total7,true);	
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
Reporter.log("Profit From Self Employment verified : "+amountProfitFromSelfEmployment.getText(),true);
string1=amountInterestFromUKbanksBuilding.getText();

Assert.assertEquals(string1.substring(1).replace(",", ""),String.format("%.2f",(total2)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
string5=TotalIncomeReceived.getText();

Assert.assertEquals(string5.substring(1).replace(",", ""),String.format("%.2f",(total3)));
Reporter.log("Total Income Received verified : "+TotalIncomeReceived.getText(),true);
string6=totalIncomeOnWhichTaxIsDue.getText();
Assert.assertEquals(string6.substring(1).replace(",", ""),String.format("%.2f",(total4)));
Reporter.log("Total Income On Which Tax is Due verified : "+totalIncomeOnWhichTaxIsDue.getText(),true);
string7=amountPayPensionsProfitBasicRate.getText();
Assert.assertEquals(string7.substring(1).replace(",", ""),String.format("%.2f",(total4 - total2)));//£10,375.00	
Reporter.log("Pay Pensions Profit -> Basic Rate is verified : "+amountPayPensionsProfitBasicRate.getText(),true);	
Assert.assertEquals(interOnBasicRate.getText().substring(1).replace(",", ""),String.format("%.2f",(((total4 - total2) * BR_rate))));//£2,075.00
Reporter.log("Calculation of Pay, pensions, profit etc. (UK rate for England, Wales and Northern Ireland) is verified :" +interOnBasicRate.getText(),true);
Assert.assertEquals(amtBasicRate.getText().substring(1).replace(",", ""),String.format("%.2f",(total2 - nilRate1)));//£1,126.00	
Reporter.log("Savings interest from banks or building societies, securities etc. is verified :" +amtBasicRate.getText(),true);
Assert.assertEquals(calculateBasicRate.getText().substring(1).replace(",", ""),String.format("%.2f",(((total2 - nilRate1) * BR_rate))));//£225.20
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
Assert.assertEquals(amtClass4NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(total5)));
Reporter.log("Amaount of Class 4 National Insurance contributions is verified :" + amtClass4NationalInsurancecontributions.getText(),true);
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Rate*weeksYear)));
Reporter.log("Class 2 National Insurance contributions is verified :" + class2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(total7)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Due is verified: " + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(total7-(n1*taxedUKInterestRate))));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified :" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
Reporter.log("Balance Tax for the year verified is verified :" + taxForThisYear.getText(),true);
	 }	
	public void funcDelMTRTest48(WebDriver driver)throws Exception
	{
Reporter.log("Deleting MTR Test Case 48",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
try
{
wLib.explicitWait(driver, 5,delButton);
delButton.click();
wLib.explicitWait(driver, 5,confDel);
confDel.click();
}
catch (Exception e)
{
    Reporter.log(e.getMessage(),true);
}
	}
public void addTestCase49(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 49",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	clickIncome(driver);
	funcAddEmployerForMTR(driver, str1, str2);
	addEmpIncome.click();
	wLib.explicitWait(driver, 5,payFrmEmployer);
	payFrmEmployer.clear();
	payFrmEmployer.sendKeys(str3);
	UkTaxTakenOffPay.clear();
	UkTaxTakenOffPay.sendKeys(str4);
	CompanyCarsAndVans.clear();
	CompanyCarsAndVans.sendKeys(str5);
	FuelForCompanyCarsAndVans.clear();
	FuelForCompanyCarsAndVans.sendKeys(str6);
	PrvtMedAndDntl.clear();
	PrvtMedAndDntl.sendKeys(str7);
	FxdExpnsDeductTxtBox.clear();
	FxdExpnsDeductTxtBox.sendKeys(str8);
	EarningPTtoUAPTxtBox.sendKeys(str9);
	SaveBtn1.click();
	Reporter.log("Employment Income Added successfully",true);
	wLib.explicitWait(driver, 3,addEmploymentBtn);
	addEmploymentBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,EmployerName);
	EmployerName.sendKeys(str10);
	txtEmployerPAYERef.sendKeys(str11);
	SaveBtn2.click();
	addEmpIncome.click();
	wLib.explicitWait(driver, 1,payFrmEmployer);
	listbox1 = new Select(employerLstBox);
	listbox1.selectByVisibleText(str10);
	payFrmEmployer.clear();
	payFrmEmployer.sendKeys(str12);
	UkTaxTakenOffPay.clear();
	UkTaxTakenOffPay.sendKeys(str13);
	VochrCredcardExsMilg.clear();
	VochrCredcardExsMilg.sendKeys(str14);
	ProfFeesAndSubsTxtBox.clear();
	ProfFeesAndSubsTxtBox.sendKeys(str15);
	OtherExpensTxtBox.clear();
	OtherExpensTxtBox.sendKeys(str16);
	SaveBtn1.click();
	Reporter.log("Employment Income Added successfully",true);
	driver.navigate().refresh();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,selfEmploymentLink);
	selfEmploymentLink.click();
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	businessNameTxtBox.clear();
	businessNameTxtBox.sendKeys(str17);
	descriptionofBusinessTxtBox.clear();
	descriptionofBusinessTxtBox.sendKeys(str18);
	booksAccoutsStartDateTxtBox.clear();
	booksAccoutsStartDateTxtBox.sendKeys(dateStart);
	businessBooksEnddateTxtBox.clear();
	businessBooksEnddateTxtBox.sendKeys(dateEnd);
	businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
	wLib.explicitWait(driver, 2,trunoverTxtBox);
	//Business Income
	trunoverTxtBox.clear();
	trunoverTxtBox.sendKeys(str19);
	goodsOfCostfullTxtBox.clear();
	goodsOfCostfullTxtBox.sendKeys(str20);
	wagesSalariesandOtherStaffCostsTxtBox.clear();
	wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str21);
	repairandRenewalsPropertyTxtBox.clear();
	repairandRenewalsPropertyTxtBox.sendKeys(str22);
	bankCreditandOtherFinancialChargesTxtBox.clear();
	bankCreditandOtherFinancialChargesTxtBox.sendKeys(str23);
	irrecoverabledebtsTxtBox.clear();
	irrecoverabledebtsTxtBox.sendKeys(str24);
	annualinvestmentTxtBox.clear();
	annualinvestmentTxtBox.sendKeys(str25);
	basisPeriodBeganTxtBox.clear();
	basisPeriodBeganTxtBox.sendKeys(dateStart);
	basisPeriodEndedTxtBox.clear();
	basisPeriodEndedTxtBox.sendKeys(dateEnd);
	averagingAdjustment.clear();
	averagingAdjustment.sendKeys(str26);
	balanceStartPeriodTxtBox.clear();
	balanceStartPeriodTxtBox.sendKeys(str27);
	wLib.explicitWait(driver, 10,SaveBtn1);
	SaveBtn1.click();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 30,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str28);
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str29);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str30);
	SaveBtn1.click();
	n1=Double.parseDouble(str3);//27515.00
	n2=Double.parseDouble(str4);//3728.00
	n3=Double.parseDouble(str5);//2250.00
	n4=Double.parseDouble(str6);//650.00
	n5=Double.parseDouble(str7);//75.00
	n6=Double.parseDouble(str8);//75.00
	n7=Double.parseDouble(str9);//19091.00
	n8=Double.parseDouble(str12);//18500.00
	n9=Double.parseDouble(str13);//1450.00
	n10=Double.parseDouble(str14);//600.00
	n11=Double.parseDouble(str15);//150.00
	n12=Double.parseDouble(str16);//85.00
	n13=Double.parseDouble(str19);//82959.00
	n14=Double.parseDouble(str20);//19144.00
	n15=Double.parseDouble(str21);//3780.00
	n16=Double.parseDouble(str22);//4203.00
	n17=Double.parseDouble(str23);//216.00
	n18=Double.parseDouble(str24);//1317.00
	n19=Double.parseDouble(str25);//6350.00
	n20=Double.parseDouble(str26);//3000.00
	n21=Double.parseDouble(str27);//-76900.00
	n22=Double.parseDouble(str29);//7800.00
	n23=Double.parseDouble(str30);//4200.00
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	payFromAllEmploymentsAmt=n1+n8;
	benefitsAndExpensesReceivedAmt=n3+n4+n5+n10;
	allowableExpensesAmt = n6+n11+n12;
	totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
	selfEmploymentIncome =((n13-(n14+n15+n16+n17+n18))-n19)+n20;//50949
	AdjustedProfitForTheYear=n22-n23;	
	profitFromUKLandAndProperty =AdjustedProfitForTheYear;
	totalincome = totalFromAllEmployments + selfEmploymentIncome + profitFromUKLandAndProperty;
	reducedPersonalAllowanceAmt = personalAllowanceRate - Math.floor((totalincome-personalAllowanceRateMaxLimit) *AA_excess);
	totlIncome = totalincome - reducedPersonalAllowanceAmt;
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
	Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
	Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
	Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
	Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
	Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
	Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
	Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
	wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
	Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
	Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
	Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
	Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(amountReducedPersonalAllowance.getText().substring(1).replace(",", ""),String.format("%.2f",(reducedPersonalAllowanceAmt)));			
	Reporter.log("Reduced Personal Allowance is Verified: "+amountReducedPersonalAllowance.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRatePayPension=taxLimit1Uk;//£34500
	Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
	dueTax1=basicRatePayPension*BR_rate;//6,900.00
	heigherRatePayPension=totlIncome - basicRatePayPension;//59,393.00	
	Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
	dueTax2=heigherRatePayPension*HR_rate;//21,881.20

	totIncomeTaxDue=dueTax1+dueTax2;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
	total2=(max_NIC + nIC2_annual_limit)-((n7 * nIC1_rate)+class2Amount);
	Reporter.log("c16.24 value :"+total2,true);
	
	total3=round((class4UPLAmt-class4LPLAmt)-(total2 /class4LPLRate),2);
	Reporter.log("c16.27 value :"+total3,true);
	total4 = roundDown2(total3*class4UPLRate);
	Reporter.log("c16.28 value :"+total4,true);
	total5 =(selfEmploymentIncome - class4UPLAmt)*class4UPLRate;
	Reporter.log("c16.29 value :"+total5,true);
	class4Amt1 = total2 +total4 + total5;//1,725.78
	Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
	Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
	class2Amt = class2Rate * weeksYear;//£153.40
	Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
	class4_2Amt=class4Amt1+class2Amt;
	Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
	Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
	tot1=totIncomeTaxDue+class4_2Amt;//32,536.38
	Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(tot1)));
	Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
	totalTaxDeductedAmt=n2+n9;
	Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
	totalTaxDeductedAmt1=tot1 - totalTaxDeductedAmt;
	Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
	Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);
	Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
	Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);


}
public void funcDelMTRTest49(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 49",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delSelfEmpFull(driver);
driver.navigate().refresh();
delProfit(driver);
}
public void addTestCase50(WebDriver driver, String str1,String str2, String str3, String str4, String str5, String str6, String str7, String str8, String str9,String str10, String str11) throws Exception {
Reporter.log("Exceuting MTR Test Case 50",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
addOtherUKIncome(driver,str1,"",str2,"",str3);
funcAddEmployerForMTR(driver, str5, str6);
funcAddEmpIncomeWithTaxTakenOff(driver,str7, str8,"");
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
addGiftAidPayment(driver, str4);
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 30,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str9);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str10);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str11);
SaveBtn1.click();
n1 = Double.parseDouble(str1);//'7000.00
n2 = Double.parseDouble(str2);//'1400.00
n3 = Double.parseDouble(str4);//'2400.00
n4 = Double.parseDouble(str7);// 33254.00
n5 = Double.parseDouble(str8);//4350.80
n6 = Double.parseDouble(str10);//7800.00
n7 = Double.parseDouble(str11);//4200.00
total1 = n6-n7;//3,600.00
totalincome = n4+total1+n1;  //43,854.00
taxDueInc = totalincome - personalAllowanceRate;//£32004
totIncomeTaxDue= taxDueInc * BR_rate; //£6400.8
dueTax1=totIncomeTaxDue - (n5+n2);	//£720.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(n4)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
otherIncomeAmt=n1;
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
Assert.assertEquals(amtFromallemploymentsUKpensionsTest1.getText().substring(1).replace(",", ""),String.format("%.2f",(n5)));
Reporter.log("Amount of All Employments UK Pensions is verified: "+amtFromallemploymentsUKpensionsTest1.getText(),true); 
Assert.assertEquals(amtFromallemploymentsUKpensionsTest1.getText().substring(1).replace(",", ""),String.format("%.2f",(n5)));
Reporter.log("From all employments UK pensions verified: "+amtFromallemploymentsUKpensionsTest1.getText(),true);
Assert.assertEquals(amtBalanceofPAYEtax.getText(),amtFromallemploymentsUKpensionsTest1.getText());
Reporter.log("Amount of Balance of PAYE tax is verified: "+amtBalanceofPAYEtax.getText(),true);
Assert.assertEquals(otherIncomeTaxDeduction_test50.getText().substring(1).replace(",", ""),String.format("%.2f",(n2)));
Reporter.log("Amount of Tax Deduction of Other Income is verified: "+otherIncomeTaxDeduction_test50.getText(),true); 
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(dueTax1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
totIncomTaxChar=totalIncomeTaxDue.getText().substring(1).replace(",","");
incomTaxdue1=Double.parseDouble(totIncomTaxChar);
taxFinal=taxForThisYear.getText().substring(1).replace(",","");
Reporter.log("Balance for this year: "+taxFinal,true);
Assert.assertEquals(taxFinal, totIncomTaxChar);
Reporter.log("Final Tax"+taxFinal,true);
}
public void delGiftAid(WebDriver driver) throws Exception
{
wLib = new WaitStatementLib();
wLib.explicitWait(driver, 5,taxReliefsLink);
cis = new CISPage(driver);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,delButton);
delButton.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();	
driver.navigate().refresh();
}
public void delTestCase50(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 50",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delOtherUKIncome(driver);
Reporter.log("Other UK Income deleted successfully",true);
clickEmployment(driver);
delEmpInfo(driver);
Reporter.log("Employee Income deleted successfully",true);
delProfit(driver);
Reporter.log("Income from property deleted successfully",true);
delGiftAid(driver);
Reporter.log("Gift Aid amount deleted successfully",true);
}
public void addTestCase51(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24)throws Exception
{
	Reporter.log("Exceuting MTR Test Case 51",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	clickIncome(driver);
	wLib.explicitWait(driver, 5,dividentLink);
	dividentLink.click();
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str1);
	stateBenefitsSaveBtn.click();
	funcAddEmployerForMTR(driver, str2, str3);
	addEmpIncome.click();
	wLib.explicitWait(driver, 1,payFrmEmployer);
	payFrmEmployer.clear();
	payFrmEmployer.sendKeys(str4);
	UkTaxTakenOffPay.clear();
	UkTaxTakenOffPay.sendKeys(str5);
	VochrCredcardExsMilg.clear();
	VochrCredcardExsMilg.sendKeys(str6);
	ProfFeesAndSubsTxtBox.clear();
	ProfFeesAndSubsTxtBox.sendKeys(str7);
	OtherExpensTxtBox.clear();
	OtherExpensTxtBox.sendKeys(str8);
	SaveBtn1.click();
	Reporter.log("Employment Income Added successfully",true);
	clickIncome(driver);	
	wLib.explicitWait(driver, 5,selfEmploymentLink);
	selfEmploymentLink.click();
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	businessNameTxtBox.clear();
	businessNameTxtBox.sendKeys(str9);
	descriptionofBusinessTxtBox.clear();
	descriptionofBusinessTxtBox.sendKeys(str10);
	booksAccoutsStartDateTxtBox.clear();
	booksAccoutsStartDateTxtBox.sendKeys(str11);
	businessBooksEnddateTxtBox.clear();
	businessBooksEnddateTxtBox.sendKeys(str12);
	businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
	wLib.explicitWait(driver, 5,trunoverTxtBox);
	//Business Income
	trunoverTxtBox.clear();
	trunoverTxtBox.sendKeys(str13);
	//Business Expenses
	goodsOfCostfullTxtBox.clear();
	goodsOfCostfullTxtBox.sendKeys(str14);
	wagesSalariesandOtherStaffCostsTxtBox.clear();
	wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str15);
	travelexpensesTxtBox.clear();
	travelexpensesTxtBox.sendKeys(str16);
	rentInsurancecostTxtBox.clear();
	rentInsurancecostTxtBox.sendKeys(str17);
	advertisingandEntertainmentCostTxtBox.clear();
	advertisingandEntertainmentCostTxtBox.sendKeys(str18);
	interestbankTxtBox.clear();
	interestbankTxtBox.sendKeys(str19);
	bankCreditandOtherFinancialChargesTxtBox.clear();
	bankCreditandOtherFinancialChargesTxtBox.sendKeys(str20);
	otherbusinessexpensesTxtBox.clear();
	otherbusinessexpensesTxtBox.sendKeys(str21);
	basisPeriodBeganTxtBox.clear();
	basisPeriodBeganTxtBox.sendKeys(dateStart);
	basisPeriodEndedTxtBox.clear();
	basisPeriodEndedTxtBox.sendKeys(dateEnd);
	accountingperiodandProfitlossTxtBox.clear();
	accountingperiodandProfitlossTxtBox.sendKeys(str22);
	anyBusinessIncomeTxtBox.clear();
	anyBusinessIncomeTxtBox.sendKeys(str23);
	balanceStartPeriodTxtBox.clear();
	balanceStartPeriodTxtBox.sendKeys(str24);
	SaveBtn1.click();
	n1 = Double.parseDouble(str1);//6200.00
	n2 = Double.parseDouble(str13);//74900.00
	n3 = Double.parseDouble(str14);//25000.00
	n4 = Double.parseDouble(str15);//2000.00
	n5 = Double.parseDouble(str16);//12000.00
	n6 = Double.parseDouble(str17);//10800.00
	n7 = Double.parseDouble(str18);//1400.00
	n8 = Double.parseDouble(str19);//5800.00
	n9 = Double.parseDouble(str20);//1500.00
	n10 = Double.parseDouble(str21);//1500.00
	n11 = Double.parseDouble(str22);//-1010.00
	n12 = Double.parseDouble(str23);//300.00
	n13 = Double.parseDouble(str24);//2600.00

	n15=Double.parseDouble(str4);//18500.00
	n16=Double.parseDouble(str5);//1450.00
	n17=Double.parseDouble(str6);//600.00
	n18=Double.parseDouble(str7);//150.00
	n19=Double.parseDouble(str8);//85.00
	wLib.explicitWait(driver, 5,editFullRecordsSE);
	editFullRecordsSE.click();
	total1=n3+n4+n5+n6+n7+n8+n9+n10;
	t1=String.format("%.2f",(total1));
	value1=businessExpTotalExpensesTxtBox.getAttribute("value");
	Assert.assertEquals(value1, t1);
	Reporter.log("Total expenses Verified: "+value1,true);
	x1=Double.parseDouble(value1);
	total2=n2-x1;//14900
	t2=String.format("%.2f",(total2));
	//Net profit or loss - Fetch Text
	string1=netProfitTxtBox.getAttribute("value");
	Assert.assertEquals(string1, t2);
	Reporter.log("Net profit Verified: "+string1,true);
	netBusinessProfit=Double.parseDouble(netBusinessProfitfortaxpurposeTxtBox.getAttribute("value"));
	adjustedProfit=Double.parseDouble(adjustedProfitTxtBox.getAttribute("value"));
	Assert.assertEquals(adjustedProfit,(netBusinessProfit+n11));
	Reporter.log("Adjusted profit for current tax year: " +adjustedProfitTxtBox,true);
	
	totalProfitFromBusiness=Double.parseDouble(totalProfitFromBusinessTxtBox.getAttribute("value"));
	Assert.assertEquals(totalProfitFromBusiness,(adjustedProfit+n12));	
	Reporter.log("Total taxable profit from this business Verified: "+totalProfitFromBusiness,true);
	string2=netprofitorlossTxtBox.getAttribute("value");
	Assert.assertEquals(string2,string1);
	Reporter.log("Capital amount Net profit Verified: "+string2,true);
	n14 = Double.parseDouble(string2);
	balanceEndPeriod=Double.parseDouble(balanceEndPeriodTxtBox.getAttribute("value"));
	Assert.assertEquals(balanceEndPeriod,(n13+n14));
	Reporter.log("Balance at end of period Verified: "+balanceEndPeriod,true);
	Reporter.log("Balance at end of period Verified: "+string2,true);
	SaveBtn1.click();
	driver.navigate().refresh();
	Class2Class4NICsForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
	ExemptfromPayingClass4NICs.click();
	SaveBtn2.click(); 
	driver.navigate().refresh();
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	payFromAllEmploymentsAmt=n15;
	benefitsAndExpensesReceivedAmt=n17;
	allowableExpensesAmt = n18+n19;
	totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
	selfEmploymentIncome =totalProfitFromBusiness;
	UKPensionAndStateBenefitAmt=n1;
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
	Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	totalincome = totalFromAllEmployments +selfEmploymentIncome+UKPensionAndStateBenefitAmt;
	totlIncome =  totalincome - (personalAllowanceRate + blindAllowance);
	wLib.explicitWait(driver, 5,payFromAllEmployments);
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
	Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

	Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
	Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
	Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
	Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
		
	Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
	Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
	wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
	Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
	Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
	Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRatePayPension=totlIncome;
	dueTax1=basicRatePayPension*BR_rate;
	totIncomeTaxDue=dueTax1;
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
	totalTaxDeductedAmt=n16;
	Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
	fnltax=totIncomeTaxDue-totalTaxDeductedAmt;
	Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
	Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
}
public void funcDelMTRTest51(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 51",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delSelfEmpFull(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
clickEmployment(driver);
delEmpInfo(driver);
}
public void addTestCase52(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 52",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,totStatPension);
totStatPension.clear();
totStatPension.sendKeys(str4);//6200.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str5);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(str6);
dateOfMarriageOrCivilPartnershipTxtBox.clear();
dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str7);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 10,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str8);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str9);
businessAddressTxtBox.clear();
businessAddressTxtBox.sendKeys(str10);
businessPostCodeTxtBox.clear();
businessPostCodeTxtBox.sendKeys(str11);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
wLib.explicitWait(driver, 2,trunoverTxtBox);
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str12);
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str13);
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str14);
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str15);
repairandRenewalsPropertyTxtBox.clear();
repairandRenewalsPropertyTxtBox.sendKeys(str16);
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str17);
advertisingandEntertainmentCostTxtBox.clear();
advertisingandEntertainmentCostTxtBox.sendKeys(str18);
interestbankTxtBox.clear();
interestbankTxtBox.sendKeys(str19);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str20);
annualinvestmentTxtBox.clear();
annualinvestmentTxtBox.sendKeys(str21);
seCapitalAllowancesTxtBox.clear();
seCapitalAllowancesTxtBox.sendKeys(str22);
restrictedCostingTxtBox.clear();
restrictedCostingTxtBox.sendKeys(str23);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str24);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
ExemptfromPayingClass4NICs.click();  
SaveBtn2.click(); 
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 30,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str25);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str26);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str27);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//6200.00
n3 = Double.parseDouble(str12);//69203.00
n4 = Double.parseDouble(str13);//12688.00
n5 = Double.parseDouble(str14);//15430.00
n6 = Double.parseDouble(str15);//13211.00
n7 = Double.parseDouble(str16);//3256.00
n8 = Double.parseDouble(str17);//158.00
n9 = Double.parseDouble(str18);//2219.00
n10 = Double.parseDouble(str19);//1931.00
n11 = Double.parseDouble(str20);//287.00
n12 = Double.parseDouble(str21);//1000.00
n13 = Double.parseDouble(str22);//2000.00
n14 = Double.parseDouble(str23);//3000.00
n15 = Double.parseDouble(str24);//-12908.00
n16 = Double.parseDouble(str26);// 7800
n17 = Double.parseDouble(str27);// 4200
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt =n1;//3678
UKPensionAndStateBenefitAmt = n2;//6200
profitFromUKLandAndProperty =n16-n17;//£3,600
totalExpensesSelfEmpFull=n4+n5+n6+n7+n8+n9+n10+n11;//49180.00
netProfitSelfEmpFull = n3 - totalExpensesSelfEmpFull;//20023.00
totalCapitalAllowancesSelfEmpFull = n12 + n13 + n14;//6000
totalDeductionfromNetProfitSelfEmpFull = totalCapitalAllowancesSelfEmpFull;//6000
selfEmploymentIncome=netProfitSelfEmpFull-totalDeductionfromNetProfitSelfEmpFull; //14023.00
totalincome = selfEmploymentIncome + interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + profitFromUKLandAndProperty;
totlIncome = totalincome - personalAllowanceRate;
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",selfEmploymentIncome));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",profitFromUKLandAndProperty));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = totlIncome - interestFromUKBanksBuildingAmt;//11973
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£2394.60
basicRateSaving=interestFromUKBanksBuildingAmt-nilRate1;//£2678
Reporter.log("basicRateSaving: "+basicRateSaving,true);
dueTax2=round(basicRateSaving*BR_rate,2);//£535.60
Reporter.log("Basic Rate of Saving: "+dueTax2,true);
totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
calculateMAT=(maxMAT - (maxMAT/month))*MATrate;
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
incomeTaxdueafterallowancesandreliefs=totIncomeTaxDue - calculateMAT;
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxdueafterallowancesandreliefs));
Reporter.log("Income Tax due after allowances and reliefs: "+incomeTaxdueafterallowancesandreliefs,true);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxdueafterallowancesandreliefs));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}

public void funcDelMTRTest52(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 52",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
funcDelAdditionalInfo(driver);
delSelfEmpFull(driver);
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
ExemptfromPayingClass4NICs.click();  
SaveBtn2.click(); 
delProfit(driver);
}
public void addTestCase53(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44,String str45,String str46,String str47,String str48,String str49,String str50,String str51,String str52,String str53,String str54) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 53",true);
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
wLib.explicitWait(driver, 5,businessNameTxtBox);
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str1);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str2);
businessAddressTxtBox.clear();
businessAddressTxtBox.sendKeys(str3);
businessPostCodeTxtBox.clear();
businessPostCodeTxtBox.sendKeys(str4);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(str5);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str6);//328938.00
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str7);
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str8);
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str9);
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str10);
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str11);
advertisingandEntertainmentCostTxtBox.clear();
advertisingandEntertainmentCostTxtBox.sendKeys(str12);
interestbankTxtBox.clear();
interestbankTxtBox.sendKeys(str13);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str14);
irrecoverabledebtsTxtBox.clear();
irrecoverabledebtsTxtBox.sendKeys(str15);
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str16);
depreciationProfitandLossTxtBox.clear();
depreciationProfitandLossTxtBox.sendKeys(str17);
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str18);
disexpCarandVanTxtBox.clear();
disexpCarandVanTxtBox.sendKeys(str19);
disexpDepreciationTxtBox.clear();
disexpDepreciationTxtBox.sendKeys(str20);
capitalAllowancesemissionsTxtBox.clear();
capitalAllowancesemissionsTxtBox.sendKeys(str21);
otherEnhancedCapitalAllowancesTxtBox.clear();
otherEnhancedCapitalAllowancesTxtBox.sendKeys(str22);
allowancesCessationBusinessTxtBox.clear();
allowancesCessationBusinessTxtBox.sendKeys(str23);
goodAndServicesTxtBox.clear();
goodAndServicesTxtBox.sendKeys(str24);
businessIncomeandOtherProfitTxtBox.clear();
businessIncomeandOtherProfitTxtBox.sendKeys(str25);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(str26);
lossBroughtForwardProfitTxtBox.clear();
lossBroughtForwardProfitTxtBox.sendKeys(str27);
equipMentandMachineryTxtBox.clear();
equipMentandMachineryTxtBox.sendKeys(str28);
OtherFixedAssestsTxtBox.clear();
OtherFixedAssestsTxtBox.sendKeys(str29);
stockAndWorkTxtBox.clear();
stockAndWorkTxtBox.sendKeys(str30);
tradeDebtorsTxtBox.clear();
tradeDebtorsTxtBox.sendKeys(str31);
bankSocietyBalancesTxtBox.clear();
bankSocietyBalancesTxtBox.sendKeys(str32);
cashinHandTxtBox.clear();
cashinHandTxtBox.sendKeys(str33);
currentAssestsandPaymentTxtBox.clear();
currentAssestsandPaymentTxtBox.sendKeys(str34);
tradeCreditorsTxtBox.clear();
tradeCreditorsTxtBox.sendKeys(str35);
loansOverdrawnandBankAccountTxtBox.clear();
loansOverdrawnandBankAccountTxtBox.sendKeys(str36);
liabilitiesandAccrualsTxtBox.clear();
liabilitiesandAccrualsTxtBox.sendKeys(str37);
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str38);
drawingTxtBox.clear();
drawingTxtBox.sendKeys(str39);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str41);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str42);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();
wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("224");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str43);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str44);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver,5,SaveBtn2);
SaveBtn2.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
overseasPensionsSocialScurityBenefitsAndRoyalties.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str45);
wLib.explicitWait(driver, 2,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str46);
wLib.explicitWait(driver, 2,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver, 2,SaveBtn2);
SaveBtn2.click();
//driver.navigate().refresh();
wLib.explicitWait(driver, 2,foreignIncomeEditSummaryBtn);
foreignIncomeEditSummaryBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str53);
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str40);
wLib.explicitWait(driver, 5,totalRentsAndOtherReceiptsTxtBox);
totalRentsAndOtherReceiptsTxtBox.clear();
totalRentsAndOtherReceiptsTxtBox.sendKeys(str47);
propertyExpensesTxtBox.clear();
propertyExpensesTxtBox.sendKeys(str48);
wLib.explicitWait(driver, 5,foreignIncomeNumberOfOverseasLetPropertiesTxtBox);
foreignIncomeNumberOfOverseasLetPropertiesTxtBox.clear();
foreignIncomeNumberOfOverseasLetPropertiesTxtBox.sendKeys(str49);
foreignIncomePrivateUseAdjustmentsTxtBox.clear();
foreignIncomePrivateUseAdjustmentsTxtBox.sendKeys(str50);
foreignIncomeCostsOfReplacingDomesticItemsTxtBox.clear();
foreignIncomeCostsOfReplacingDomesticItemsTxtBox.sendKeys(str51);
foreignIncomeResidentialFinanceCostsTxtBox.clear();
foreignIncomeResidentialFinanceCostsTxtBox.sendKeys(str52);
wLib.explicitWait(driver, 5,txtBoxLossBroughtForward);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str54);
SaveBtn1.click();
try
{
if (SaveBtn1.isDisplayed()==true)
{
SaveBtn1.click();
}
}
catch (Exception e) {
Reporter.log("Save button clicked in first attempt",true);
}
n1 = Double.parseDouble(str6);// 328938.00
n2 = Double.parseDouble(str7);// 75512.00
n3 = Double.parseDouble(str8);//99532.00
n4 = Double.parseDouble(str9);// 3747.00
n5 = Double.parseDouble(str10);// 16128.00
n6 = Double.parseDouble(str11);// 6040.00
n7 = Double.parseDouble(str12);// 764.00
n8 = Double.parseDouble(str13);// 9523.00
n9 = Double.parseDouble(str14);// 2719.00
n10 = Double.parseDouble(str15);// 798.00
n11 = Double.parseDouble(str16);// 6284.00
n12 = Double.parseDouble(str17);// 8592.00
n13 = Double.parseDouble(str18);// 627.00
n14 = Double.parseDouble(str19);// 199.00
n15 = Double.parseDouble(str20);// 8592.00
n16 = Double.parseDouble(str21);// 1800.00
n17 = Double.parseDouble(str22);// 1200.00
n18 = Double.parseDouble(str23);// 165.00
n19 = Double.parseDouble(str24);// 921.00
n20 = Double.parseDouble(str25);// 921.00
n21 = Double.parseDouble(str27);// 7295.00
n22 = Double.parseDouble(str28);// 23400.00
n23 = Double.parseDouble(str29);// 269992.00
n24 = Double.parseDouble(str30);// 6464.00
n25 = Double.parseDouble(str31);// 2746.00
n26 = Double.parseDouble(str32);// 72645.00
n27 = Double.parseDouble(str33);// 2000.00
n28 = Double.parseDouble(str34);// 252.00
n29 = Double.parseDouble(str35);// 14864.00
n30 = Double.parseDouble(str36);// 93551.00
n31 = Double.parseDouble(str37);// 108416.00
n32 = Double.parseDouble(str38);// 132680.00
n33 = Double.parseDouble(str39);// 71605.00
n34 = Double.parseDouble(str40); //2442.00
n35 = Double.parseDouble(str41); //3562
n36 = Double.parseDouble(str42); //356
n37 = Double.parseDouble(str43); //2679
n38 = Double.parseDouble(str44); //401
n39 = Double.parseDouble(str45); //6741
n40 = Double.parseDouble(str46);//1685
n41 = Double.parseDouble(str47);//3602.00
n42 = Double.parseDouble(str48);//2510.00
n43 = Double.parseDouble(str50);//90.00
n44 = Double.parseDouble(str51);//360.00
n45 = Double.parseDouble(str52);//120.00
n46 = Double.parseDouble(str53);//822
n47 = Double.parseDouble(str54);//320.00
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
totalExpensesSelfEmpFull=n2+n3+n4+n5+n6+n7+n8+n9+n10+n11+n12+n13;//230266.00 
netProfitSelfEmpFull = n1 - totalExpensesSelfEmpFull;//98672.00
totalCapitalAllowancesSelfEmpFull = n16 + n17 + n18;//1800+1200+165 = 3165
totalDisallowableExpensesSelfEmpFull= n14 + n15;//8791.00
totalAdditiontoNetProfitSelfEmpFull = totalDisallowableExpensesSelfEmpFull + n19; //9712.00
totalDeductionfromNetProfitSelfEmpFull = totalCapitalAllowancesSelfEmpFull + n20;//4086.00
selfEmploymentIncome=netProfitSelfEmpFull + (totalDisallowableExpensesSelfEmpFull-totalCapitalAllowancesSelfEmpFull);//104298.00
foreignIncomeCalc=n35+n39+n46;//11,125
dividendsFromForeignCompaniesCalc=n37;//2679.00
totalincome = selfEmploymentIncome +foreignIncomeCalc + dividendsFromForeignCompaniesCalc;//118102
incomeTaxReliefAmt=n21 + n47;

if (totalincome > personalAllowanceRateMaxLimit)
{
total1 = totalincome-incomeTaxReliefAmt;
reducedPersonalAllowanceAmt=Math.round(personalAllowanceRate - ((total1-personalAllowanceRateMaxLimit) *AA_excess));
}
totlIncome=totalincome - (reducedPersonalAllowanceAmt + incomeTaxReliefAmt);	
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",selfEmploymentIncome));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(amountReducedPersonalAllowance.getText().substring(1).replace(",", ""),String.format("%.2f",(reducedPersonalAllowanceAmt)));			
Reporter.log("Reduced Personal Allowance is Verified: "+amountReducedPersonalAllowance.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
interestAndOtherIncomeFromOverseasSavings=n35;
basicRatePayPension=taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6900
heigherRatePayPension=totlIncome - (basicRatePayPension + interestAndOtherIncomeFromOverseasSavings + dividendsFromForeignCompaniesCalc);
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;
heigherRateSaving= interestAndOtherIncomeFromOverseasSavings - nilRate2;//3062
Reporter.log("Heigher Rate of Savingg: "+heigherRateSaving,true);
dueTax3=heigherRateSaving * HR_rate;//1224.80
heigherRateDividends= dividendsFromForeignCompaniesCalc - dividentNillRate;//679	
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax4=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//220.67

totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3 + dueTax4;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = n45 * reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//120.00
Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);
Assert.assertEquals(amtForeignTaxCreditRelief.getText().substring(1).replace(",", ""),String.format("%.2f",n34));
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - (n34 + amtReliefForFinanceCosts);

Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxdueafterallowancesandreliefs));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
total2=((selfEmploymentIncome-n21)-class4LPLAmt)-nIC_Band;//50,653
class4Amt=total2*class4UPLRate;//1,013.06
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs+class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);	
}

public void funcDelMTRTest53(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 53",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delSelfEmpFull(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
delDividendsForeignComaniesBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
delOverseasPensionsRoyaltiesBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,delSummaryFOR);
delSummaryFOR.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
}
public void addTestCase54(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
Reporter.log("Exceuting MTR Test Case 54",true);
wLib = new WaitStatementLib();
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","", str4);
addOtherDivident(driver,str5,"","");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis = new CISPage(driver);
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str6);
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str7,"",str8,"",str9);
n1 = Double.parseDouble(str3);//'6710.40
n2 = Double.parseDouble(str4);//'5009.93
n3 = Double.parseDouble(str5);//'224.47
n4 = Double.parseDouble(str6);// 6200.00
n5 = Double.parseDouble(str7);//1500.00
n6 = Double.parseDouble(str8);//300.00
double result = Math.floor(n2)+Math.floor(n3);
totalincome=Math.floor(n1)+result+n4+n5;
total1=totalincome-SR_band;
total2=totalincome -personalAllowanceRate;

totIncomeTaxDue=total1*percentageZero;

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,amountDividendsfromUKCompanies);
string1=amountDividendsfromUKCompanies.getText();
wLib.explicitWait(driver, 5,amountInterestFromUKbanksBuilding);
String divVal[]=string1.split("£");
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(Math.floor(n1))));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(divVal[3].replace(",", ""),String.format("%.2f",(result)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n4)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
otherIncomeAmt=n5;
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(total2)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(n6)));
Reporter.log("Amount of Tax Deduction of Other Income is verified: "+totalTaxDeducted.getText(),true); 
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",(n6)));
Reporter.log("Amount of Income Tax overpaid is verified: "+amtIncomeTaxoverpaid.getText(),true); 
}
public void delTestCase54(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 54",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
delOtherDivident(driver);
Reporter.log("Other UK Income deleted successfully",true);
}
public void addTestCase56(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 56",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);
statPensionLumpSum.clear();
statPensionLumpSum.sendKeys(str6);
taxtakenoffLumpsum.clear();
taxtakenoffLumpsum.sendKeys(str7);
stateBenefitsSaveBtn.click();
Reporter.log("State benefit added successfully",true);
funcAddEmployerForMTR(driver, str8, str9);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str10);//27515
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str11);//3728
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str12);//2250
FuelForCompanyCarsAndVans.clear();
FuelForCompanyCarsAndVans.sendKeys(str13);//650
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str14);//75
FxdExpnsDeductTxtBox.clear();
FxdExpnsDeductTxtBox.sendKeys(str15);//75
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,txtBoxNoTaxAmountGainOnPolicy);
txtBoxNoTaxAmountGainOnPolicy.clear();
txtBoxNoTaxAmountGainOnPolicy.sendKeys(str16);
txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.clear();
txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.sendKeys(str17);
wLib.explicitWait(driver, 2,saveAdditionalInfoBtn);
saveAdditionalInfoBtn.click();
n1=Double.parseDouble(str3); //22.00
n2=Double.parseDouble(str4); //2099.88
n3=Double.parseDouble(str5); //1600.00
n4=Double.parseDouble(str6); //16534.00
n5=Double.parseDouble(str7); //3520.00
n6=Double.parseDouble(str10); //27515.00
n7=Double.parseDouble(str11); //3728.00
n8=Double.parseDouble(str12); //2250.00
n9=Double.parseDouble(str13); //650.00
n10=Double.parseDouble(str14); //75.00
n11=Double.parseDouble(str15); //75.00
n12=Double.parseDouble(str16); //10000
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n6;
benefitsAndExpensesReceivedAmt=n8+n9+n10;
allowableExpensesAmt = n11;
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+Math.floor(n2);
UKPensionAndStateBenefitAmt = n3;
capitalGainsTaxdueAmt = n12;
totalincome = totalFromAllEmployments + interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + capitalGainsTaxdueAmt;
totlIncome=totalincome-personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = (totalFromAllEmployments+UKPensionAndStateBenefitAmt)-personalAllowanceRate; //20165
Reporter.log("basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//4033
basicRateSaving=totlIncome - (basicRatePayPension + nilRate1);//11126
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*(BR_rate);//2225.2
totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtStatePensionLumpSumPayment = n4 * (BR_rate);
Assert.assertEquals(statePensionLumpSumPaymentAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtStatePensionLumpSumPayment));
Reporter.log("State Pension lump sum payment verifired successfully"+statePensionLumpSumPaymentAmt.getText(),true);
tax1 = totIncomeTaxDue + amtStatePensionLumpSumPayment;
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDue1.getText(),true);
totalTaxDeductedAmt=n5+n7+(n1*taxedUKInterestRate);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=tax1-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
fnltax=totalTaxDeductedAmt1;
Assert.assertEquals(payCodeAmountTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Balance Tax for the year verified is verified:" + payCodeAmountTaxSummary.getText(),true);
}
public void funcDelTest56(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 56",true);
	checkLockbutton(driver);
	clickIncome(driver);
	delBank(driver);
	clickEmployment(driver);
	delEmpInfo(driver);
	funcDelAdditionalInfo(driver);
}
public void addTestCase57(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 57",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str4);//14473.97
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str5);//2894.79
anyOtherPensionsBenefits.clear();
anyOtherPensionsBenefits.sendKeys(str6);//1757.00
stateBenefitsSaveBtn.click();
addOtherDivident(driver,"0.00",str7, str8);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
addGiftAidPayment(driver, str9);
addCharitableIncome(driver,str10,"","");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str11);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(str12);
dateOfMarriageOrCivilPartnershipTxtBox.clear();
dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str13);
saveAdditionalInfoBtn.click();
n1=Double.parseDouble(str3);//2225.00
n2=Double.parseDouble(str4);//14473.97
n3=Double.parseDouble(str5);//2894.79
n4=Double.parseDouble(str6);//1757.00
n5=Double.parseDouble(str7);//267.00
n6=Double.parseDouble(str8);//80.10
n7=Double.parseDouble(str9);//240.00
n8=Double.parseDouble(str10);//2145.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=n1;//2225.00
UKPensionAndStateBenefitAmt=Math.floor(n2) + Math.floor(n4);//16230
dividendsFromForeignCompaniesCalc=n5;
totalincome = interestFromUKBanksBuildingAmt+dividendsFromForeignCompaniesCalc+UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt = n8;//2145.00 (REL9)
totlIncome =  totalincome -(personalAllowanceRate+incomeTaxReliefAmt);

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(giftofInvestmentsAndPropertyAmtTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
Reporter.log("Amount of Gift of investments and Property is Verified: "+giftofInvestmentsAndPropertyAmtTaxSummary.getText(),true);		

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension = totlIncome - (interestFromUKBanksBuildingAmt+dividendsFromForeignCompaniesCalc);
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate; //£447
totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
calculateMAT=(maxMAT - (maxMAT/month))*MATrate;
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
incomeTaxdueafterallowancesandreliefs=totIncomeTaxDue - calculateMAT;
if (incomeTaxdueafterallowancesandreliefs < 0)
{
incomeTaxdueafterallowancesandreliefs=0;
}
/*Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);*/
amtTaxdueonGiftAidpayments=java.lang.Math.ceil(n7*giftAidRate);//300.00
Assert.assertEquals(calculationGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxdueonGiftAidpayments));
Reporter.log("Calculation Of Gift Aid Payments verified: "+calculationGiftAidpayments.getText(),true);
taxdueonGiftAidpaymentsValue=amtTaxdueonGiftAidpayments*reliefFinancerate;//60
Assert.assertEquals(taxDueGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Tax Due on Gift Aid Payments verified: "+taxDueGiftAidpayments.getText(),true);
Assert.assertEquals(incomeTaxDueAfterGifTAid.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Total Income Tax Due After GifTAid verified: "+incomeTaxDueAfterGifTAid.getText(),true);

totalTaxDeductedAmt=n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

Totaltax=totalTaxDeductedAmt-taxdueonGiftAidpaymentsValue;//2834.79
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",Totaltax));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
}
public void funcDelMTRTest57(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 57",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherDivident(driver);
funcDelAdditionalInfo(driver);
delCharitableGiving(driver);
delInfoGiftAid(driver);
}


public void addTestCase58(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13)throws Exception
{
Reporter.log("Exceuting MTR Test Case 58",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
dividentUKCompanies(driver,str4,"",str5);
funcAddEmployerForMTR(driver, str6, str7);
funcAddEmpIncomeWithTaxTakenOff(driver, str8,str9,"");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,subscriptionsSharesTxtBox);
subscriptionsSharesTxtBox.clear();
subscriptionsSharesTxtBox.sendKeys(str10);
//reliefClaimedTxtBox.clear();
//reliefClaimedTxtBox.sendKeys(str11);
deficiencyReliefOnLifeInsuranceGainsTxtBox.clear();
deficiencyReliefOnLifeInsuranceGainsTxtBox.sendKeys(str13);
saveAdditionalInfoBtn.click();
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver,2,finishingTaxLink);
finishingTaxLink.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,10,taxRoundedOffTxtBox);
taxRoundedOffTxtBox.clear();
taxRoundedOffTxtBox.sendKeys(str12);
SaveBtn2.click();

n1=Double.parseDouble(str3);//10120.00
n2=Double.parseDouble(str5);//828319.10
n3=Double.parseDouble(str8);//33254.00
n4=Double.parseDouble(str9);//4280.80
n5=Double.parseDouble(str10);//10000.00
n6=Double.parseDouble(str11);//12000.00
n7=Double.parseDouble(str12);//617.00
n8=Double.parseDouble(str13);//14755
wLib = new WaitStatementLib();
taxReturnLink.click();
wLib.explicitWait(driver, 60, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n3;
interestFromUKBanksBuildingAmt=n1;
dividendsFromUKCompaniesAmt=Math.floor(n2);
totalincome = payFromAllEmploymentsAmt  + interestFromUKBanksBuildingAmt +dividendsFromUKCompaniesAmt;
totlIncome=totalincome-blindAllowance;

Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = payFromAllEmploymentsAmt;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate; //6650.8
basicRateSaving=taxLimit1Uk-basicRatePayPension;//1,246
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*BR_rate;//249.2
Reporter.log("Amount of Basic Rate of Saving: "+dueTax2,true);
heigherRateSaving=interestFromUKBanksBuildingAmt-(basicRateSaving + blindAllowance);//6484
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//2593.6
heigherRateDividends=taxLimit3 - (payFromAllEmploymentsAmt + interestFromUKBanksBuildingAmt + dividentNillRate)+ blindAllowance;//107016
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax4=(heigherRateDividends*dividendTaxHigherRate)/100;//34780.2
additionalRateDividends=dividendsFromUKCompaniesAmt -(heigherRateDividends+ dividentNillRate);
dueTax5= (additionalRateDividends*dividendTaxAdditionalRate)/100;//274054.44
Reporter.log("Additional Rate of Dividends: "+additionalRateDividends,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtTaxAdjustment = roundDown2((n8 * dividendTaxHigherRate)/100) - roundDown2((n8 *dividendTaxBasicRate)/100); 
Assert.assertEquals(deficiencyReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxAdjustment));
Reporter.log("Amount of Deficiency Relief is Verified: "+deficiencyReliefAmt.getText(),true);
enterpriseInvestmentSchemereliefAmt = n5*EIS_rate;
Assert.assertEquals(dataEnterpriseInvestmentSchemerelief.getText().substring(1).replace(",", ""),String.format("%.2f",(enterpriseInvestmentSchemereliefAmt)));
Reporter.log("Amount of Enterprise Investment Scheme Reliefis verifired successfully: "+dataEnterpriseInvestmentSchemerelief.getText(),true);
tax1 = totIncomeTaxDue - (amtTaxAdjustment + enterpriseInvestmentSchemereliefAmt);
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax relief amount is verifired successfully: "+tax1,true);
totalTaxDeductedAmt=n4;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=tax1-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
finalAmount = totalTaxDeductedAmt1 + n7; 
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""), String.format("%.2f",finalAmount));
Reporter.log("tax For This Year is Verified Successfully: "+taxForThisYear,true);
}
public void funcDelMTRTest58(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 58",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
funcDelAdditionalInfo(driver);
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver,2,finishingTaxLink);
finishingTaxLink.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,taxRoundedOffTxtBox);
taxRoundedOffTxtBox.clear();
otherInfoTxtBox.clear();
SaveBtn2.click();
}
public void addTestCase59(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31)throws Exception
{
Reporter.log("Exceuting MTR Test Case 59",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
clickIncome(driver);
wLib.explicitWait(driver, 10,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//6200.00
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str2,"",str3,"",str4);//1500.00, 300.00, bee keeper
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
verifyGiftAid(driver);
addGiftAidPayment(driver, str5);
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str6);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str7);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(str8);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(str9);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
wLib.explicitWait(driver, 5,trunoverTxtBox);
//Business Income
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str10);
//Business Expenses
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str11);
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str12);
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str13);
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str14);
advertisingandEntertainmentCostTxtBox.clear();
advertisingandEntertainmentCostTxtBox.sendKeys(str15);
interestbankTxtBox.clear();
interestbankTxtBox.sendKeys(str16);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str17);
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str18);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
accountingperiodandProfitlossTxtBox.clear();
accountingperiodandProfitlossTxtBox.sendKeys(str19);
anyBusinessIncomeTxtBox.clear();
anyBusinessIncomeTxtBox.sendKeys(str20);
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str21);
SaveBtn1.click();
 n1 = Double.parseDouble(str1);//6200
 n2 = Double.parseDouble(str2);//1500
 n3= Double.parseDouble(str3);//300.00
 n4= Double.parseDouble(str5);//2400
 n5 = Double.parseDouble(str10);//74900.00
 n6= Double.parseDouble(str11);//25000.00
 n7 = Double.parseDouble(str12);//2000.00
 n8 = Double.parseDouble(str13);//12000.00
 n9 = Double.parseDouble(str14);//10800.00
 n10 = Double.parseDouble(str15);//1400.00
 n11 = Double.parseDouble(str16);//5800.00
 n12 = Double.parseDouble(str17);//1500.00
 n13 = Double.parseDouble(str18);//1500.00
 n14 = Double.parseDouble(str19);//-1010.00
 n15 = Double.parseDouble(str20);//300.00
 n16 = Double.parseDouble(str21);//2600.00
 wLib.explicitWait(driver, 5,editFullRecordsSE);
 editFullRecordsSE.click();
 total1=n6+n7+n8+n9+n10+n11+n12+n13;
 t1=String.format("%.2f",(total1));
 wLib.explicitWait(driver, 5,businessExpTotalExpensesTxtBox);
 value1=businessExpTotalExpensesTxtBox.getAttribute("value");
 Assert.assertEquals(value1, t1);
 Reporter.log("Total expenses Verified: "+value1,true);
 x1=Double.parseDouble(value1);
 total2=n5-x1;
 t2=String.format("%.2f",(total2));
 //Net profit or loss - Fetch Text
 string1=netProfitTxtBox.getAttribute("value");
 Assert.assertEquals(string1, t2);
 Reporter.log("Net profit Verified: "+string1,true);
 netBusinessProfit=Double.parseDouble(netBusinessProfitfortaxpurposeTxtBox.getAttribute("value"));
 adjustedProfit=Double.parseDouble(adjustedProfitTxtBox.getAttribute("value"));
 Assert.assertEquals(adjustedProfit,(netBusinessProfit+n14));
 Reporter.log("Adjusted profit for current tax year: " +adjustedProfitTxtBox,true);
 totalProfitFromBusiness=Double.parseDouble(totalProfitFromBusinessTxtBox.getAttribute("value"));
 Assert.assertEquals(totalProfitFromBusiness,(adjustedProfit+n15)); 
 Reporter.log("Total taxable profit from this business Verified: "+totalProfitFromBusiness,true);
 string2=netprofitorlossTxtBox.getAttribute("value");
 Assert.assertEquals(string2,string1);
 Reporter.log("Capital amount Net profit Verified: "+string2,true);
 n17 = Double.parseDouble(string2);//14900.00
 balanceEndPeriod=Double.parseDouble(balanceEndPeriodTxtBox.getAttribute("value"));
 Assert.assertEquals(balanceEndPeriod,(n16+n17));
 Reporter.log("Balance at end of period Verified: "+balanceEndPeriod,true);
 Reporter.log("Total taxable profit from this business: "+string2,true);
 SaveBtn1.click();
 driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str22);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str23);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str24);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str25);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str26);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str27);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str28);
lossBFAndUsedInYearTxtBox.clear();
lossBFAndUsedInYearTxtBox.sendKeys(str29);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str30);
commentTxtBox.clear();
commentTxtBox.sendKeys(str31);
SaveBtn1.click();
n18 = Double.parseDouble(str23);// 12000.00
n19 = Double.parseDouble(str24);// 12000.00
n20 = Double.parseDouble(str27);// 27000.00
n21 = Double.parseDouble(str28);// 27000.00
n22 = Double.parseDouble(str29);// 9000.00
n23 = Double.parseDouble(str30);// 12000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome =totalProfitFromBusiness;
UKPensionAndStateBenefitAmt=n1;
otherIncomeAmt = n2;
totalincome = selfEmploymentIncome + UKPensionAndStateBenefitAmt + otherIncomeAmt;
totlIncome =  totalincome - personalAllowanceRate;
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",otherIncomeAmt));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totlIncome;
dueTax1=basicRatePayPension*BR_rate;	
totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=totIncomeTaxDue-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
					
gainsThatQualifyRorEntrepreneursAmt=n23*capitalGainsRateLower;//£1,200.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
total6=(((n19-n23)+0+n21)-n22)-annualExemptIndividualsProposed;//£6,300
otherGainsBasicAmt=total6*capitalGainsRateLower;//£630
Reporter.log("20% of Other gains: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt;//£2,460.00
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=totalTaxDeductedAmt1+capitalGainsTaxdueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest59(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 59",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
dividentLink.click();
delUKPensionsAnnuities(driver);
delOtherUKIncome(driver);
delInfoGiftAid(driver);
delCGI(driver);
clickIncome(driver);
delSelfEmpFull(driver);
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
}
public void addTestCase60(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8)throws Exception
{
Reporter.log("Exceuting MTR Test Case 60",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","", str4);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str6,"",str7,"",str8);
n1 = Double.parseDouble(str3);//45500.00
n2 = Double.parseDouble(str4);//3678.00
n3 = Double.parseDouble(str5);//10350.00
n4 = Double.parseDouble(str6);//1500.00
n5 = Double.parseDouble(str7);//300.00
otherIncomeAmt=n4;
totalincome=n1+n2+n3+otherIncomeAmt;
totlIncome=totalincome-personalAllowanceRate;
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
dividendsFromUKCompaniesAmt=n2;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",n1));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n3)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateSaving=(taxLimit1Uk-SR_band)-nilRate2;//29,000.00	
Reporter.log("basic Rate of Saving: "+basicRateSaving,true);
dueTax1=basicRateSaving*BR_rate;//£5,800.00
heigherRateSaving=totlIncome - (SR_band + nilRate2 + n2 +basicRateSaving);//11,000.00	
dueTax2=heigherRateSaving*HR_rate;//£4,400.00
heigherRateDividends=n2-dividentNillRate;
dueTax3=(heigherRateDividends*dividendTaxHigherRate)/100;//545.35
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;//£10,745.35
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
totalTaxDeductedAmt=totIncomeTaxDue-n5;//10,445.35
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));//£318,824.82
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}
public void delTestCase60(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 60",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delBank(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
Reporter.log("Other UK Income deleted successfully",true);
}
public void addTestCase61(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10)throws Exception
{
Reporter.log("Exceuting MTR Test Case 61",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
addOtherDivident(driver,str4,"0.00","0.00");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str6,"",str7,"",str8);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
AddgiftAidPaymentFull(driver,str9, "", str10);

n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//12750.00
n3 = Double.parseDouble(str5);//6200.00
n4 = Double.parseDouble(str6);//7000.00
n5 = Double.parseDouble(str7);//1400.00
n6 = Double.parseDouble(str9);//3,450.00
n7 = Double.parseDouble(str10);//3,000.00
totalincome=n1+n2+n3+n4;
totlIncome=totalincome-personalAllowanceRate;
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
dividendsFromUKCompaniesAmt=n2;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",n1));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n3)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
otherIncomeAmt=n4;
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
//SR_band + nilRate2 + n2 +
basicRatePayPension = (n3+otherIncomeAmt)-personalAllowanceRate; //1,350.00
Reporter.log("basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//270.00
startedRateSaving=SR_band-basicRatePayPension;//3,650.00	
Reporter.log("started Rate of Saving: "+startedRateSaving,true);
nilAmountsaving=n1-startedRateSaving;//28.00
basicRateDividends=n2-dividentNillRate;//£10,750.00
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax2=(basicRateDividends*dividendTaxBasicRate)/100;//£806.25
totIncomeTaxDue=dueTax1+dueTax2;//£1,076.25
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(n5)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=n5-totIncomeTaxDue;//323.75
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",(taxBalance)));//323.75
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase61(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 61",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
delBank(driver);
delOtherUKIncome(driver);
delOtherDivident(driver);
delGiftAid(driver);
}
public void addTestCase62(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15)throws Exception
{
Reporter.log("Exceuting MTR Test Case 62",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","", str4);
addOtherDivident(driver,"0.00",str5,str6);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str7);
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str8,"",str9,"",str10);
funcAddEmployerForMTR(driver, str11, str12);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str13);
TipsPaymentsNtOnP60.clear();
TipsPaymentsNtOnP60.sendKeys(str14);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,stockDividendsTxtBox);
stockDividendsTxtBox.clear();
stockDividendsTxtBox.sendKeys(str15);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();

n1 = Double.parseDouble(str3);//4598.00
n2 = Double.parseDouble(str4);//2450.00
n3 = Double.parseDouble(str5);//165.00
n4 = Double.parseDouble(str6);//14.00
n5 = Double.parseDouble(str7);//6200.00
n6 = Double.parseDouble(str8);//1500.00
n7 = Double.parseDouble(str9);//300.00
n8 = Double.parseDouble(str13);//8000.00
n9 = Double.parseDouble(str14);//50.00
n10 = Double.parseDouble(str15);//3065.99
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n8+n9;
dividendsFromForeignCompaniesCalc=n3;
dividendsFromUKCompaniesAmt=(Math.floor(n2))+(Math.floor(n10));//5,515.00
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""), String.format("%.2f",payFromAllEmploymentsAmt));
Reporter.log("Payment From employer verified: "+payFromAllEmployments.getText(), true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(Math.floor(n1))));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n5)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
otherIncomeAmt=n6;
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);

totalincome=payFromAllEmploymentsAmt+dividendsFromForeignCompaniesCalc+dividendsFromUKCompaniesAmt+n1+n5+n6;
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
totlIncome= totalincome - personalAllowanceRate;
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);


basicRatePayPension=(payFromAllEmploymentsAmt+n5+otherIncomeAmt)-personalAllowanceRate;//£3,900.00	
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate; //£780.00
startedRateSaving=SR_band-basicRatePayPension;//1100.00
Reporter.log("Started Rate of Saving: "+startedRateSaving,true);
basicRateSaving=n1-(startedRateSaving+nilRate1);//2,498.00	
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*(BR_rate);//499.60
basicRateDividends=(dividendsFromUKCompaniesAmt+n3)-dividentNillRate;
Reporter.log("Basic Rate of Dividend: "+basicRateDividends,true);
dueTax3=round((basicRateDividends*dividendTaxBasicRate)/100,2);//276.00
taxDueInc=dueTax1+dueTax2+dueTax3;
Reporter.log("Income Tax Due amount: "+taxDueInc,true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totIncomeTaxDue=taxDueInc-n7;//1,255.60
wLib.explicitWait(driver, 5,totalIncomeTaxDue);
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));//
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(payCodeAmountTaxSummary.getText(),totalIncomeTaxDue.getText());
Reporter.log("Amount of Balance for this year is Verified: "+payCodeAmountTaxSummary.getText(),true);
}
public void delTestCase62(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 62",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
delOtherDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase63(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
Reporter.log("Exceuting MTR Test Case 14",true);
wLib = new WaitStatementLib();
clickIncome(driver);
wLib.explicitWait(driver, 2,dividentLink);
dividentLink.click();
addOtherDivident(driver,str1,"","");
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str2);//1
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str3);//7800
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str4);//4200
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str5);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str6);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str7);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str8);
commentTxtBox.clear();
commentTxtBox.sendKeys(str9);
SaveBtn1.click();
n1 = Double.parseDouble(str1);//£12,750.00
n2 = Double.parseDouble(str3);//7800
n3 = Double.parseDouble(str4);//4200
n4 = Double.parseDouble(str6);//99000.00
n5 = Double.parseDouble(str7);//9000.00
n6 = Double.parseDouble(str8);//90000.00
wLib.explicitWait(driver, 2,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 2,taxCalSummaryLink);
taxCalSummaryLink.click();
dividendsFromUKCompaniesAmt = n1;
profitFromUKLandAndProperty = n2-n3;//3600
totalincome=dividendsFromUKCompaniesAmt+profitFromUKLandAndProperty;
totlIncome = totalincome - personalAllowanceRate;
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateDividends=totlIncome-dividentNillRate;
Reporter.log("Basic Rate of Dividend: "+basicRateDividends,true);
dueTax1=round((basicRateDividends*dividendTaxBasicRate)/100,2);//466.00
totIncomeTaxDue=dueTax1;//7,371.40
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

otherGainsBasicAmt=(taxLimit1Uk - totlIncome)*capitalGainsRateLower;
Reporter.log("Other gains basic Amount: "+otherGainsBasicAmt,true);
otherGainsAmt = ((n6-(taxLimit1Uk+annualExemptIndividualsProposed))+totlIncome)*capitalGainsRateUpper;
Reporter.log("Other gains Amount: "+otherGainsAmt,true);
capitalGainsTaxdueAmt=otherGainsBasicAmt + otherGainsAmt;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=totIncomeTaxDue+ capitalGainsTaxdueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));//£12210
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest63(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 63",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 10,dividentLink);
dividentLink.click();
delOtherDivident(driver);
clickIncome(driver);
delCGI(driver);
clickIncome(driver);
delProfit(driver);
}
public void addTestCase64(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 64",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
addOtherDivident(driver,str4,"0.00","0.00");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,totStatPension);
totStatPension.clear();
totStatPension.sendKeys(str5);//6200.00
stateBenefitsSaveBtn.click();
Reporter.log("Total State Pension added Successfully",true);
addOtherUKIncome(driver,str6,"",str7,"",str8);//1500.00, 300.00
Reporter.log("Other UK Income added Successfully",true);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
addGiftAidPayment(driver, str9);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,giftInterestAfterTaxTxtBox);
giftInterestAfterTaxTxtBox.clear();
giftInterestAfterTaxTxtBox.sendKeys(str10);
taxTakenOff1TxtBox.clear();
taxTakenOff1TxtBox.sendKeys(str11);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str12);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 2,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str13);
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str14);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str15);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str16);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str17);
qSClaimOrElectionMadeTxtBox.clear();
qSClaimOrElectionMadeTxtBox.sendKeys(str18);
entrepreneurReliefClaimOnDefGainBefore23June2010TxtBox.clear();
entrepreneurReliefClaimOnDefGainBefore23June2010TxtBox.sendKeys(str19);
commentTxtBox.clear();
commentTxtBox.sendKeys(str20);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//12750.00
n3= Double.parseDouble(str5);//6200.00
n4= Double.parseDouble(str6);//1500.00
n5 = Double.parseDouble(str7);//300.00
n6= Double.parseDouble(str9);//2400.00
n7 = Double.parseDouble(str10);//421.20
n8 = Double.parseDouble(str11);//105.30
n9 = Double.parseDouble(str12);//526.50
n10 = Double.parseDouble(str15);//65000.00
n11 = Double.parseDouble(str16);//25000.00
n12 = Double.parseDouble(str17);//40000.00
n13 = Double.parseDouble(str19);//56250.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
//interestFromUKBanksBuildingAmt = n9+n1;
interestFromUKBanksBuildingAmt = Math.floor(n9)+n1;
dividendsFromUKCompaniesAmt = n2;
UKPensionAndStateBenefitAmt=n3;
otherIncomeAmt = n4;
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt +otherIncomeAmt;
totlIncome= totalincome - personalAllowanceRate;
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",otherIncomeAmt));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateDividends=totlIncome-(dividentNillRate+interestFromUKBanksBuildingAmt);
Reporter.log("Basic Rate of Dividend: "+basicRateDividends,true);
dueTax1=round((basicRateDividends*dividendTaxBasicRate)/100,2);//276.00
totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n5 + n8;//£405.30
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=totIncomeTaxDue-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
total1=(taxLimit1Uk +(n6*giftAidRate))-totlIncome;//£24,696
Reporter.log("Other gains basic Amount: "+total1,true);
otherGainsBasicAmt=total1*capitalGainsRateLower;//£2,469.60
Reporter.log("Calculated Amount of Other gains basic: "+otherGainsBasicAmt,true);
total2= ((n12 - annualExemptIndividualsProposed) - total1);//3604
Reporter.log("Other gains Amount: "+total2,true);	
otherGainsAmt = total2 *capitalGainsRateUpper;//720.80
Reporter.log("Calculated amount of Other gains: "+otherGainsAmt,true);
capitalGainsTaxdueAmt=otherGainsBasicAmt+otherGainsAmt;//£3190.40
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=totalTaxDeductedAmt1+capitalGainsTaxdueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);

}
public void funcDelMTRTest64(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 64",true);
	wLib = new WaitStatementLib();
	checkLockbutton(driver);
	clickIncome(driver);
	delBank(driver);
	delOtherUKIncome(driver);
	delOtherDivident(driver);
	funcDelAdditionalInfo(driver);
	delCGI(driver);
	delInfoGiftAid(driver);
	}
public void addTestCase65(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 65",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,totStatPension);
totStatPension.clear();
totStatPension.sendKeys(str4);//6200.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str5);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(dateOfBirthCivilPartner);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver, 5,delButton);
delButton.click();
wLib.explicitWait(driver, 5,confDel);
confDel.click();
}
catch (Exception e)
{
    System.out.println(e.getMessage());
}*/
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str6);
tradingEnddateTxtBox.clear();
tradingEnddateTxtBox.sendKeys(str7);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str8);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str9);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str10);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str11);
ownGoodsAndServicesTxtBox.clear();
ownGoodsAndServicesTxtBox.sendKeys(str12);
anyOtherBusinessIncomeTxtBox.clear();
anyOtherBusinessIncomeTxtBox.sendKeys(str13);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
ExemptfromPayingClass4NICs.click();  
SaveBtn2.click(); 
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 30,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str14);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str15);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str16);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//6200
n3= Double.parseDouble(str8);//14560.00
n4= Double.parseDouble(str9);//13603.00
n5 = Double.parseDouble(str10);//1700.00
n6= Double.parseDouble(str11);//3926.00
n7 = Double.parseDouble(str12);//720.00
n8 = Double.parseDouble(str13);//250.00
n9 = Double.parseDouble(str15);//7800.00
n10 = Double.parseDouble(str16);//4200.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome=((n3-n4)+(n6+n7)-n5)+n8;//4153
profitFromUKLandAndProperty =n9-n10;//3600
interestFromUKBanksBuildingAmt =n1;
UKPensionAndStateBenefitAmt=n2;
totalincome = selfEmploymentIncome + profitFromUKLandAndProperty  + interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt;
totlIncome= totalincome - personalAllowanceRate;
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = totlIncome - interestFromUKBanksBuildingAmt;//2103
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£420.60
startedRateSaving=SR_band - basicRatePayPension;//2897
Reporter.log("Started Rate of Saving: "+startedRateSaving,true); 
basicRateSaving=n1-startedRateSaving;//781
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true); 
totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);	
calculateMAT=maxMAT*MATrate;//869.50
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
 
}
public void funcDelMTRTest65(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 65",true);
	wLib = new WaitStatementLib();
	checkLockbutton(driver);
	clickIncome(driver);
	delBank(driver);
	funcDelAdditionalInfo(driver);
	delSEshort(driver);
	driver.navigate().refresh();
	Class2Class4NICsForm.click();
	cis.switchwindowNew(driver);
	ExemptfromPayingClass4NICs.click();  
	SaveBtn2.click(); 
	delProfit(driver);
	}
public void addTestCase66(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 66",true);
clickIncome(driver);
addBank(driver,str1,str1,str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str6);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str7);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str8);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str9);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str10);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str11);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str12);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str13);
lossBFAndUsedInYearTxtBox.clear();
lossBFAndUsedInYearTxtBox.sendKeys(str14);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str15);
commentTxtBox.clear();
commentTxtBox.sendKeys(str16);
SaveBtn1.click();
n1=Double.parseDouble(str3);//365.00
n2=Double.parseDouble(str4);//7283.00
n3=Double.parseDouble(str5);//1510.00
n4=Double.parseDouble(str8);//12000.00
n5=Double.parseDouble(str9);//12000.00
n6=Double.parseDouble(str12);//27000.00
n7=Double.parseDouble(str13);//27000.00
n8=Double.parseDouble(str14);//9000.00
n9=Double.parseDouble(str15);//12000.00
wLib = new WaitStatementLib();
taxReturnLink.click();
wLib.explicitWait(driver, 60, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt = n3;
totalincome=interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt;
totlIncome=totalincome - personalAllowanceRate;
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Amount of Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
calculateMAT=maxMAT*MATrate;//869.50
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
totalTaxDeductedAmt=n1*taxedUKInterestRate;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);

gainsThatQualifyRorEntrepreneursAmt=n9*capitalGainsRateLower;//£1,200.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
total1=(((n5-n9)+0+n7)-n8)-annualExemptIndividualsProposed;//£6,300
otherGainsBasicAmt=total1*capitalGainsRateLower;//£630
Reporter.log("20% of Other gains: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt;//£2,460.00
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=capitalGainsTaxdueAmt-totalTaxDeductedAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest66(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 66",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
delCGI(driver);
}
public void addTestCase67(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29)throws Exception
{
Reporter.log("Exceuting MTR Test Case 67",true);
wLib = new WaitStatementLib();
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//3678
addOtherDivident(driver,str4,"","");//12750.00
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis = new CISPage(driver);
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);//6200.00
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str6,"",str7,"",str8);//1500.00, 300.00, bee keeper
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str9);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(dateOfBirthCivilPartner);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str10);
rentIncomeTextBox.sendKeys(str11);
fHLUKTraditionalAccountingChkBox.click();
UKExpensesTxtBox.sendKeys(str12);
loanInterestTxtBox.sendKeys(str13);
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str14);
allowablePropertyExpensesTxtBox.sendKeys(str15);
privateUseAdjustmentTxtBox.sendKeys(str16);
balancingChargesTxtBox.sendKeys(str17);
capitalAllowancesTxtBox.sendKeys(str18);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str19);
propertyIncomeAllowanceChkBox.click();
taxTakenOffTxtBox.clear();
taxTakenOffTxtBox.sendKeys(str20);
revrsePremAndInducTxtBox.clear();
revrsePremAndInducTxtBox.sendKeys(str21);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str22);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str23);
costsOfServicProvidedTxtBox.clear();
costsOfServicProvidedTxtBox.sendKeys(str24);
balancingTaxableChargesTxtBox.clear();
balancingTaxableChargesTxtBox.sendKeys(str25);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str26);
tenPercntWearAndTearAllowanceTxtBox.clear();
tenPercntWearAndTearAllowanceTxtBox.sendKeys(str27);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str28);
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str29);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//12750.00
n3= Double.parseDouble(str5);//6200.00
n4= Double.parseDouble(str6);//1500.00
n5 = Double.parseDouble(str7);//300.00
n6= Double.parseDouble(str11);//16254.00
n7 = Double.parseDouble(str12);//2960.00
n8 = Double.parseDouble(str13);//4521.00
n9 = Double.parseDouble(str14);//364.00
n10 = Double.parseDouble(str15);//27.00
n11 = Double.parseDouble(str16);//370.00
n12 = Double.parseDouble(str17);//567.00
n13 = Double.parseDouble(str18);//1420.00
n14 = Double.parseDouble(str19);//15611.00
n15 = Double.parseDouble(str20);//1696.00
n16 = Double.parseDouble(str21);//302.00
n17 = Double.parseDouble(str22);//472.00
n18 = Double.parseDouble(str23);//1460.00
n19 = Double.parseDouble(str24);//1900.00
n20 = Double.parseDouble(str25);//622.00
n21 = Double.parseDouble(str26);//1540.00
n22 = Double.parseDouble(str27);//770.00
n23 = Double.parseDouble(str28);//7462
n24 = Double.parseDouble(str29);//486.67
FHLAdjustedProfitForTheYear=(n6+n11+n12) - (n7+n8+n9+n10+n13);//7899.00
AdjustedProfitForTheYear=(n14+n16+n20)-(n17+n18+n19+n21+n22);//10393.00
profitFromUKLandAndProperty=FHLAdjustedProfitForTheYear+AdjustedProfitForTheYear;//18,292.00
wLib.explicitWait(driver, 2,calculateFHLUKAdjustedProfitForTheYear);	
Assert.assertEquals(calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",(FHLAdjustedProfitForTheYear)));
Reporter.log("Adjusted profit for the year verified successfully"+calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),true);
wLib.explicitWait(driver, 5,adjustedProfitForTheYear);
Assert.assertEquals(adjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",(AdjustedProfitForTheYear)));
Reporter.log("Adjusted profit for the year verified successfully: "+adjustedProfitForTheYear.getAttribute("value"),true);

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
dividendsFromUKCompaniesAmt=n2;
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",n1)); 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n3)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
otherIncomeAmt = n4;
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
totalincome=profitFromUKLandAndProperty+ n1+n2+n3+otherIncomeAmt;
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

incomeTaxReliefAmt=n23;
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
totlIncome = totalincome - (incomeTaxReliefAmt + personalAllowanceRate);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
total1 = profitFromUKLandAndProperty+n3+otherIncomeAmt;//25992
basicRatePayPension = (total1-n23)-personalAllowanceRate;//6680.00
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£1336.00
basicRateSaving=n1-nilRate1;//£2,678.00	
Reporter.log("basicRateSaving: "+basicRateSaving,true);
dueTax2=round(basicRateSaving*BR_rate,2);//£535.60
Reporter.log("Basic Rate of Saving: "+dueTax2,true);
basicRateDividends=n2-dividentNillRate;//£10,750.00
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax3=(basicRateDividends*dividendTaxBasicRate)/100;//£806.25
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;//£2,677.85
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
amtReliefForFinanceCosts=Math.round(n24)*reliefFinancerate;//97.40
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));
Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);
total2 =(((total1 + n1 + n2)-n23) - AA_limit)*AA_excess;//3,029
total3 = maxMAT - total2; //5666
calculateMAT=total3*MATrate;//566.60
amtMAT=Double.parseDouble(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""));
Assert.assertEquals(amtMAT,calculateMAT);
Reporter.log("Marriage Allowance Transfer is Verified: "+amtMAT,true);
incomeTaxdueafterallowancesandreliefs=totIncomeTaxDue - (amtReliefForFinanceCosts+calculateMAT);
Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);
totalTaxDeductedAmt=n15 + n5;//£1996.00
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=incomeTaxdueafterallowancesandreliefs - totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase67(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 67",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delBank(driver);
delOtherDivident(driver);
delOtherUKIncome(driver);
clickIncome(driver);
delProfit(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase68(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 68",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
addOtherDivident(driver,str4,"0.00","0.00");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis = new CISPage(driver);
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
addGiftAidPayment(driver, str6);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str7);
saveAdditionalInfoBtn.click();
n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//12750.00
n3= Double.parseDouble(str5);//8052.00
n4= Double.parseDouble(str6);//2400.00
wLib = new WaitStatementLib();
taxReturnLink.click();
wLib.explicitWait(driver, 60, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt =n1;
dividendsFromUKCompaniesAmt=n2;
UKPensionAndStateBenefitAmt = n3;
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
totlIncome=totalincome-personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateDividends=totlIncome-(interestFromUKBanksBuildingAmt+dividentNillRate);//£6952
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax1=(basicRateDividends*dividendTaxBasicRate)/100;//521.40
totIncomeTaxDue=dueTax1;//521.40
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
calculateMAT=maxMAT * MATrate;
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
incomeTaxdueafterallowancesandreliefs=totIncomeTaxDue - calculateMAT;
if (incomeTaxdueafterallowancesandreliefs < 0)
{
incomeTaxdueafterallowancesandreliefs=0;
}
amtTaxdueonGiftAidpayments=java.lang.Math.ceil(n4*giftAidRate);//3000.00
taxdueonGiftAidpaymentsValue=amtTaxdueonGiftAidpayments*reliefFinancerate;//600
fnltax=taxdueonGiftAidpaymentsValue;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+taxForThisYear.getText(),true);
}

public void funcDelMTRTest68(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 68",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherDivident(driver);
delGiftAid(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase69(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 69",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str1);//14473.97
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str2);//2894.79
anyOtherPensionsBenefits.clear();
anyOtherPensionsBenefits.sendKeys(str3);//1757.00
stateBenefitsSaveBtn.click();
Reporter.log("State benefit added successfully",true);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str4);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str5);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str6);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str7);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str8);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str9);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str10);
lossBFAndUsedInYearTxtBox.clear();
lossBFAndUsedInYearTxtBox.sendKeys(str11);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str12);
commentTxtBox.clear();
commentTxtBox.sendKeys(str13);
SaveBtn1.click();

n1 = Double.parseDouble(str1);//14473.97
n2 = Double.parseDouble(str2);//2894.79
n3 = Double.parseDouble(str3);//1757.00	
n4 = Double.parseDouble(str5);// 12000.00
n5 = Double.parseDouble(str6);// 12000.00
n6 = Double.parseDouble(str9);// 27000.00
n7 = Double.parseDouble(str10);// 27000.00
n8 = Double.parseDouble(str11);// 9000.00
n9 = Double.parseDouble(str12);// 12000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
UKPensionAndStateBenefitAmt=Math.floor(n1)+n3;
totalincome=UKPensionAndStateBenefitAmt;
totlIncome =  totalincome - personalAllowanceRate;
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);	


Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totlIncome;
dueTax1=basicRatePayPension*BR_rate;	
totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n2;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
incomeTaxDueAmt=totalTaxDeductedAmt-totIncomeTaxDue;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);

gainsThatQualifyRorEntrepreneursAmt=n9*capitalGainsRateLower;//£1,200.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
total1=(((n5-n9)+0+n7)-n8)-annualExemptIndividualsProposed;//£6,300
otherGainsBasicAmt=total1*capitalGainsRateLower;//£630
Reporter.log("20% of Other gains: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt;//£2,460.00
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax = incomeTaxDueAmt - capitalGainsTaxdueAmt;
Assert.assertEquals(amtIncomeTaxoverpaid1.getText().substring(1).replace(",", ""),String.format("%.2f",Totaltax));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
}
public void funcDelMTRTest69(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 69",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
dividentLink.click();
delUKPensionsAnnuities(driver);
clickIncome(driver);
delCGI(driver);
}

public void addTestCase70(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7, String str8, String str9)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 70",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
dividentUKCompanies(driver,"Company1","",str4);
addOtherDivident(driver,str5,"0.00","0.00");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis = new CISPage(driver);
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str6);
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str7);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(str8);
dateOfMarriageOrCivilPartnershipTxtBox.clear();
dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str9);
saveAdditionalInfoBtn.click();
n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//12750.00
n3= Double.parseDouble(str5);//8052.00
n4= Double.parseDouble(str6);//2400.00
wLib = new WaitStatementLib();
taxReturnLink.click();
wLib.explicitWait(driver, 60, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt =Math.floor(n1);
dividendsFromUKCompaniesAmt=Math.floor(n2)+Math.floor(n3);
UKPensionAndStateBenefitAmt = n4;
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
totlIncome=totalincome-personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
startedRateSaving=totlIncome-dividentNillRate;//4293
Reporter.log("startedRateSaving: "+startedRateSaving,true);
dueTax1=startedRateSaving*percentageZero;//0.00
basicRateDividends=dividentNillRate;//£2000
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax2=basicRateDividends*percentageZero;//0.00
totIncomeTaxDue=dueTax1+dueTax2;//0.00
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
calculateMAT=(maxMAT - (maxMAT/month))*MATrate;
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
incomeTaxdueafterallowancesandreliefs=totIncomeTaxDue - calculateMAT;
if (incomeTaxdueafterallowancesandreliefs < 0)
{
incomeTaxdueafterallowancesandreliefs=0;
}
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+taxForThisYear.getText(),true);
}

public void funcDelMTRTest70(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 70",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
delOtherDivident(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCaseDUMMY(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29)throws Exception
{
Reporter.log("Exceuting MTR Test Case",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//3678
addOtherDivident(driver,str4,"","");//12750.00
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);//6200.00
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str6,"",str7,"",str8);//1500.00, 300.00, bee keeper
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str9);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(dateOfBirthCivilPartner);
saveAdditionalInfoBtn.click();
clickIncome(driver);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str10);
rentIncomeTextBox.sendKeys(str11);
fHLUKTraditionalAccountingChkBox.click();
UKExpensesTxtBox.sendKeys(str12);
loanInterestTxtBox.sendKeys(str13);
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str14);
allowablePropertyExpensesTxtBox.sendKeys(str15);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str16);
propertyIncomeAllowanceChkBox.click();
privateUseAdjustmentTxtBox.sendKeys(str17);
balancingChargesTxtBox.sendKeys(str18);
capitalAllowancesTxtBox.sendKeys(str19);

taxTakenOffTxtBox.clear();
taxTakenOffTxtBox.sendKeys(str20);
revrsePremAndInducTxtBox.clear();
revrsePremAndInducTxtBox.sendKeys(str21);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str22);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str23);
costsOfServicProvidedTxtBox.clear();
costsOfServicProvidedTxtBox.sendKeys(str24);
balancingTaxableChargesTxtBox.clear();
balancingTaxableChargesTxtBox.sendKeys(str25);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str26);
tenPercntWearAndTearAllowanceTxtBox.clear();
tenPercntWearAndTearAllowanceTxtBox.sendKeys(str27);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str28);
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str29);
SaveBtn1.click();
}
public void addTestCase71(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 71",true);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str1);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(str2);
dateOfMarriageOrCivilPartnershipTxtBox.clear();
dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str3);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str4);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str5);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
wLib.explicitWait(driver, 2,trunoverTxtBox);
//Business Income
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str6);
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str7);
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str8);
repairandRenewalsPropertyTxtBox.clear();
repairandRenewalsPropertyTxtBox.sendKeys(str9);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str10);
irrecoverabledebtsTxtBox.clear();
irrecoverabledebtsTxtBox.sendKeys(str11);
annualinvestmentTxtBox.clear();
annualinvestmentTxtBox.sendKeys(str12);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
averagingAdjustment.clear();
averagingAdjustment.sendKeys(str13);
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str14);
wLib.explicitWait(driver, 10,SaveBtn1);
SaveBtn1.click();
n1=Double.parseDouble(str6);//82959.00
n2=Double.parseDouble(str7);//19144.00
n3=Double.parseDouble(str8);//3780.00
n4=Double.parseDouble(str9);//4203.00
n5=Double.parseDouble(str10);//216.00
n6=Double.parseDouble(str11);//1317.00
n7=Double.parseDouble(str12);//6350.00
n8=Double.parseDouble(str13);//3000.00
n9=Double.parseDouble(str14);//-76900.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome = ((n1-(n2+n3+n4+n5+n6))-n7)+n8;//50949
totalincome= selfEmploymentIncome;
totlIncome =  totalincome - personalAllowanceRate;
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;//34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6,900.00
heigherRatePayPension = totlIncome-basicRatePayPension;//4599	
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//1839.60

totIncomeTaxDue = dueTax1 + dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

calculateMAT=(MCA - (MCA/month))*MATrate;
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer Amount is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
tax1 = totIncomeTaxDue - calculateMAT;
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class4Amt=((selfEmploymentIncome-class4LPLAmt)-nIC_Band)*class4UPLRate;//91.98
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully: "+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
incomeTaxDueAmt = class4_2Amt + tax1;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
}
public void funcDelMTRTest71(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 71",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delSelfEmpFull(driver);
driver.navigate().refresh();
funcDelAdditionalInfo(driver);
}
public void addTestCase73(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 73",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//3770.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str2);//3121.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str3);//624.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
verifyGiftAid(driver);
addGiftAidPayment(driver, str4);//950
otherGiftAidpayment(driver, str5, "");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str6);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(dateOfBirthCivilPartner);
saveAdditionalInfoBtn.click();
clickIncome(driver);
funcAddEmployerForMTR(driver, str7, str8);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str9);//8000.00
TipsPaymentsNtOnP60.clear();
TipsPaymentsNtOnP60.sendKeys(str10);//50.00
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 30,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str11);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str12);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str13);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 2,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str14);
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str15);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str16);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str17);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str18);
qSClaimOrElectionMadeTxtBox.clear();
qSClaimOrElectionMadeTxtBox.sendKeys(str19);
entrepreneurReliefClaimOnDefGainBefore23June2010TxtBox.clear();
entrepreneurReliefClaimOnDefGainBefore23June2010TxtBox.sendKeys(str20);
commentTxtBox.clear();
commentTxtBox.sendKeys(str21);
SaveBtn1.click();
n1=Double.parseDouble(str1);//3770.00
n2=Double.parseDouble(str2);//3121.00
n3=Double.parseDouble(str3);//624.2
n4=Double.parseDouble(str4);//950.00
n5=Double.parseDouble(str5);//300.00
n6=Double.parseDouble(str9);//8000.00
n7=Double.parseDouble(str10);//50.00
n8=Double.parseDouble(str12);//7800.00
n9=Double.parseDouble(str13);//4200.00
n10=Double.parseDouble(str16);//65000.00
n11=Double.parseDouble(str17);//25000.0
n12=Double.parseDouble(str18);//40000.00
n13=Double.parseDouble(str20);//56250.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n6+n7;//8050.00
profitFromUKLandAndProperty =n8-n9;//3600
UKPensionAndStateBenefitAmt=n1+n2;//6891‬
totalincome = payFromAllEmploymentsAmt + profitFromUKLandAndProperty  +  UKPensionAndStateBenefitAmt;
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
totlIncome= totalincome - personalAllowanceRate;
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = totlIncome;
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£420.60
totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

calculateMAT=maxMAT*MATrate;//869.50
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
tax1 = totIncomeTaxDue - calculateMAT;
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully: "+tax1,true);

totalTaxDeductedAmt=n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totalTaxDeductedAmt -tax1;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",(taxBalance)));//323.75
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
totalTaxDeductedAmt1=totalTaxDeductedAmt-totIncomeTaxDue;
total1=n12-annualExemptIndividualsProposed;//£28,300
Reporter.log("Other gains basic Amount: "+total1,true);
otherGainsBasicAmt=total1*capitalGainsRateLower;//£2,830
capitalGainsTaxdueAmt=otherGainsBasicAmt;//£3190.40
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=capitalGainsTaxdueAmt-taxBalance;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest73(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 73",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 2,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
clickEmployment(driver);
delEmpInfo(driver);
delCGI(driver);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
delInfoGiftAid(driver);
funcDelAdditionalInfo(driver);
delProfit(driver);
}
public void addTestCase74(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 74",true);
addPensionTaxReliefForm(driver, str1, "", "", "");

clickIncome(driver);
funcAddEmployerForMTR(driver, str2, str3);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str4);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str5);
VochrCredcardExsMilg.clear();
VochrCredcardExsMilg.sendKeys(str6);
ProfFeesAndSubsTxtBox.clear();
ProfFeesAndSubsTxtBox.sendKeys(str7);
OtherExpensTxtBox.clear();
OtherExpensTxtBox.sendKeys(str8);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str9);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str10);
isCloseCompanyChkBox.click();
isDirectorChkBox.click();
dateTxtBox.clear();
dateTxtBox.sendKeys(str11);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str12);
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str13);
OtherBenefitsTxtBox.clear();
OtherBenefitsTxtBox.sendKeys(str14);
expensesPaymentsReceivedtxtBox.clear();
expensesPaymentsReceivedtxtBox.sendKeys(str15);
BusnsTrvlAndSubstancTxtBox.clear();
BusnsTrvlAndSubstancTxtBox.sendKeys(str16);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
n1 = Double.parseDouble(str1);//14418.00
n2=Double.parseDouble(str4);//18500.00
n3=Double.parseDouble(str5);//1450.00
n4=Double.parseDouble(str6);//600.00
n5=Double.parseDouble(str7);//150.00
n6=Double.parseDouble(str8);//85.00
n7=Double.parseDouble(str9);//55750.00
n8=Double.parseDouble(str10);//11970.00
n9=Double.parseDouble(str12);//3600.00
n10=Double.parseDouble(str13);//350.00
n11=Double.parseDouble(str14);//7500.00
n12=Double.parseDouble(str15);//4500.00
n13=Double.parseDouble(str16);//5000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n2 + n7;//74250
benefitsAndExpensesReceivedAmt = n4 + n9 + n10 + n11 + n12;//£16,550.00	 
allowableExpensesAmt =n5 + n6 + n13;//£5,235.00	 
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;

totalincome = totalFromAllEmployments;
totlIncome=totalincome - personalAllowanceRate;
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk + n1;//£48,918
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//9,783.60
heigherRatePayPension=totlIncome - basicRatePayPension;//24,797.00
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//9,918.80
totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n3 + n8;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totIncomeTaxDue - totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxBalance)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),totalIncomeTaxDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase74(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 74",true);
checkLockbutton(driver);
clickIncome(driver);	
clickEmployment(driver);
delEmpInfo(driver);
delPensionTaxRelief(driver);
}
public void addTestCase75(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 75",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","",str4);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);
stateBenefitsSaveBtn.click();
driver.navigate().refresh();
addPensionTaxReliefForm(driver,"",str6, "", "");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str7);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(str8);
dateOfMarriageOrCivilPartnershipTxtBox.clear();
dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str9);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
funcAddEmployerForMTR(driver, str10, str11);
funcAddEmpIncomeWithTaxTakenOff(driver, str12,str13,"");
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str14);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str15);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
wLib.explicitWait(driver, 2,trunoverTxtBox);
//Business Income
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str16);
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str17);
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str18);
repairandRenewalsPropertyTxtBox.clear();
repairandRenewalsPropertyTxtBox.sendKeys(str19);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str20);
irrecoverabledebtsTxtBox.clear();
irrecoverabledebtsTxtBox.sendKeys(str21);
annualinvestmentTxtBox.clear();
annualinvestmentTxtBox.sendKeys(str22);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
averagingAdjustment.clear();
averagingAdjustment.sendKeys(str23);
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str24);
wLib.explicitWait(driver, 10,SaveBtn1);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
n1=Double.parseDouble(str3);//10120.00
n2=Double.parseDouble(str4);//828319.10
n3=Double.parseDouble(str5);//6200.00
n4=Double.parseDouble(str6);//1200.00
n5=Double.parseDouble(str12);//33254.00
n6=Double.parseDouble(str13);//4280.80
n7=Double.parseDouble(str16);//82959.00
n8=Double.parseDouble(str17);//19144.00
n9=Double.parseDouble(str18);//3780.00
n10=Double.parseDouble(str19);//4203.00
n11=Double.parseDouble(str20);//216.00
n12=Double.parseDouble(str21);//1317.00
n13=Double.parseDouble(str22);//6350.00
n14=Double.parseDouble(str23);//3000.00
n15=Double.parseDouble(str24);//-76900.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n5;
selfEmploymentIncome = ((n7-(n8+n9+n10+n11+n12))-n13)+n14;
interestFromUKBanksBuildingAmt=n1;
dividendsFromUKCompaniesAmt=Math.floor(n2);
UKPensionAndStateBenefitAmt=n3;
totalincome = payFromAllEmploymentsAmt + selfEmploymentIncome + interestFromUKBanksBuildingAmt +dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
totlIncome=totalincome-n4;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;//£34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6,900.00
heigherRatePayPension=totlIncome - (basicRatePayPension+dividendsFromUKCompaniesAmt+interestFromUKBanksBuildingAmt);//54,703.00
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//21,881.20
heigherRateSaving= n1;//10,120.00	
Reporter.log("Heigher Rate of Savingg: "+heigherRateSaving,true);
dueTax3=round((heigherRateSaving*HR_rate),2);//4,048.00
heigherRateDividends=(taxLimit3 - (((payFromAllEmploymentsAmt+selfEmploymentIncome+UKPensionAndStateBenefitAmt) - n4 ) + 	interestFromUKBanksBuildingAmt)) - dividentNillRate;//48,677.00	
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax4=(heigherRateDividends*dividendTaxHigherRate)/100;//15,820.03
additionalRateDividends=dividendsFromUKCompaniesAmt -(heigherRateDividends+ dividentNillRate);
dueTax5= (additionalRateDividends*dividendTaxAdditionalRate)/100;//296,281.60
Reporter.log("Additional Rate of Dividends: "+additionalRateDividends,true);
totIncomeTaxDue = dueTax1 + dueTax2 + dueTax3 + dueTax4 + dueTax5;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
calculateMAT=(MCA - (MCA/month))*MATrate;
Reporter.log("Married Couple's Allowance: "+calculateMAT,true);
amtMAT=Double.parseDouble(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""));
Assert.assertEquals(amtMAT,calculateMAT);
Reporter.log("Marriage Allowance Transfer Amount is Verified: "+amtMAT,true);
totalTaxDeductedAmt=n6;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totIncomeTaxDue-(totalTaxDeductedAmt+calculateMAT);
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxBalance)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),totalIncomeTaxDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase75(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 75",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delBank(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
delSelfEmpFull(driver);
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
delPensionTaxRelief(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
Reporter.log("Employment income Deleted Successfully",true);
}


public void addTestCase76(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 76",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 10,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
taxableIncapacityBenefit.clear();
taxableIncapacityBenefit.sendKeys(str6);
taxTakenOff.clear();
taxTakenOff.sendKeys(str7);
stateBenefitsSaveBtn.click();
Reporter.log("banks name Added successfully",true);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
addGiftAidPayment(driver, str8);

n1=Double.parseDouble(str3); //321.00
n2=Double.parseDouble(str4); //1625.00
n3=Double.parseDouble(str5); //128.00
n4=Double.parseDouble(str6); //2092.00
n5=Double.parseDouble(str7); //418.40
n6=Double.parseDouble(str8); //2400.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt=n3;
UKPensionAndStateBenefitAmt=n4;
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
totlIncome = totalincome - (personalAllowanceRate + blindAllowance);
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtBlindPersonAllowance.getText().substring(1).replace(",", ""),String.format("%.2f",(blindAllowance)));
Reporter.log("Amount of Blind Person Allowance is Verified: "+amtBlindPersonAllowance.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Amount of Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtTaxdueonGiftAidpayments=java.lang.Math.ceil(n6*giftAidRate);
Assert.assertEquals(calculationGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxdueonGiftAidpayments));
Reporter.log("Calculation Of Gift Aid Payments verified: "+calculationGiftAidpayments.getText(),true);
taxdueonGiftAidpaymentsValue=amtTaxdueonGiftAidpayments*reliefFinancerate;
Assert.assertEquals(taxDueGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Tax Due on Gift Aid Payments verified: "+taxDueGiftAidpayments.getText(),true);
Assert.assertEquals(incomeTaxDueAfterGifTAid.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Total Income Tax Due After GifTAid verified: "+incomeTaxDueAfterGifTAid.getText(),true);
totalTaxDeductedAmt=n5 + (n1*taxedUKInterestRate);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=taxdueonGiftAidpaymentsValue - totalTaxDeductedAmt;
 	
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+totalIncomeTaxDue.getText(),true);
}
public void funcDelMTRTest76(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 76",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
delGiftAid(driver);
}
public void addTestCase77(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32)throws Exception
{
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 77",true);
 n1 = Double.parseDouble(str1);//12750.00
 n2 = Double.parseDouble(str2);//6200
 n3= Double.parseDouble(str3);//1500
 n4= Double.parseDouble(str4);//300.00
 n5 = Double.parseDouble(str8);//33254.00
 n6= Double.parseDouble(str9);//4280.80
 n7 = Double.parseDouble(str11);//7800
 n8 = Double.parseDouble(str12);//4200.00
 n9 = Double.parseDouble(str13);//1200.00
 n10 = Double.parseDouble(str14);//2400
 n11 = Double.parseDouble(str18);//74900
 n12 = Double.parseDouble(str19);//25000
 n13 = Double.parseDouble(str20);//2000
 n14 = Double.parseDouble(str21);//12000
 n15 = Double.parseDouble(str22);//10800
 n16 = Double.parseDouble(str23);//1400
 n17 = Double.parseDouble(str24);//5800
 n18 = Double.parseDouble(str25);//1500
 n19 = Double.parseDouble(str26);//1500
 n20 = Double.parseDouble(str27);//-1010
 n21 = Double.parseDouble(str28);//300
 n22 = Double.parseDouble(str29);//2600
 n23 = Double.parseDouble(str30);//617
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click(); 
addOtherDivident(driver,str1,"0.00","0.00"); 
wLib.explicitWait(driver, 5,frm1Btn);
 frm1Btn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 5,totStatPension);
 totStatPension.clear();
 totStatPension.sendKeys(str2);//6200.00
 stateBenefitsSaveBtn.click();
 Reporter.log("Total State Pension added Successfully",true);
 addOtherUKIncome(driver,str3,"",str4,"",str5);//1500.00, 300.00
 Reporter.log("Other UK Income added Successfully",true);
 funcAddEmployerForMTR(driver, str6, str7);
 funcAddEmpIncomeWithTaxTakenOff(driver, str8,str9,"");//33254.00, 2000.00
 Reporter.log("Payment from employer is added Successfully",true);
 clickIncome(driver);
 wLib.explicitWait(driver, 5,incmFrmProLink);
 incmFrmProLink.click();
 wLib.explicitWait(driver, 5, editBtn);
 editBtn.click();
 wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
 noOfPropertiesRentedOutTxtBox.clear();
 noOfPropertiesRentedOutTxtBox.sendKeys(str10);//1
 totalIncomePropertyLinkTxtBox.clear();
 totalIncomePropertyLinkTxtBox.sendKeys(str11);//7800.00
 othrPropertyExpensesTxtBox.clear();
 othrPropertyExpensesTxtBox.sendKeys(str12);//4200.00
 SaveBtn1.click();
 driver.navigate().refresh();
 total1=n7-n8;//3600.00
 wLib.explicitWait(driver, 5,adjustedProfitForTheYear);
 string1=adjustedProfitForTheYear.getAttribute("value");
 calculation1=Double.parseDouble(string1);
 string2=taxableProfitForTheYear.getAttribute("value");
 calculation2=Double.parseDouble(string2);
 Assert.assertEquals(calculation1,total1);
 Reporter.log("Adjusted profit for the year verified successfully: "+calculation1,true);
 Assert.assertEquals(calculation2,total1);
 Reporter.log("Taxable profit for the year verified successfully: "+calculation2,true);
 Reporter.log("Income from Property added Successfully",true);
 addPensionTaxReliefForm(driver,"",str13,"","");
 Reporter.log("Payment to a retirement annuity added Successfully",true);
 verifyGiftAid(driver);
 addGiftAidPayment(driver, str14);
 Reporter.log("Payment gift aid added Successfully",true);
 clickIncome(driver);
 wLib.explicitWait(driver, 5,selfEmploymentLink);
 selfEmploymentLink.click();
 //delSAFull(driver);
 wLib.explicitWait(driver, 10,frm1Btn);
 frm1Btn.click();
 businessNameTxtBox.clear();
 businessNameTxtBox.sendKeys(str15);
 descriptionofBusinessTxtBox.clear();
 descriptionofBusinessTxtBox.sendKeys(str16);
 booksAccoutsStartDateTxtBox.clear();
 booksAccoutsStartDateTxtBox.sendKeys(dateStart);
 businessBooksEnddateTxtBox.clear();
 businessBooksEnddateTxtBox.sendKeys(str17);
 businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
 wLib.explicitWait(driver, 2,trunoverTxtBox);
 //Business Income
 trunoverTxtBox.clear();
 trunoverTxtBox.sendKeys(str18);//74900.00
 //Business Expenses
 goodsOfCostfullTxtBox.clear();
 goodsOfCostfullTxtBox.sendKeys(str19);//25000.00
 wagesSalariesandOtherStaffCostsTxtBox.clear();
 wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str20);//2000.00
 travelexpensesTxtBox.clear();
 travelexpensesTxtBox.sendKeys(str21);//12000.00
 rentInsurancecostTxtBox.clear();
 rentInsurancecostTxtBox.sendKeys(str22);//10800.00
 advertisingandEntertainmentCostTxtBox.clear();
 advertisingandEntertainmentCostTxtBox.sendKeys(str23);//1400.00
 interestbankTxtBox.clear();
 interestbankTxtBox.sendKeys(str24);//5800.00
 bankCreditandOtherFinancialChargesTxtBox.clear();
 bankCreditandOtherFinancialChargesTxtBox.sendKeys(str25);//1500.00
 otherbusinessexpensesTxtBox.clear();
 otherbusinessexpensesTxtBox.sendKeys(str26);//1500.00
 basisPeriodBeganTxtBox.clear();
 basisPeriodBeganTxtBox.sendKeys(dateStart);
 basisPeriodEndedTxtBox.clear();
 basisPeriodEndedTxtBox.sendKeys(dateEnd);
 accountingperiodandProfitlossTxtBox.clear();
 accountingperiodandProfitlossTxtBox.sendKeys(str27);//-1010.00
 anyBusinessIncomeTxtBox.clear();
 anyBusinessIncomeTxtBox.sendKeys(str28);//300.00
 //Balance Sheet
 //Capital Account
 balanceStartPeriodTxtBox.clear();
 balanceStartPeriodTxtBox.sendKeys(str29);//2600.00
 SaveBtn1.click();
 wLib.explicitWait(driver, 5,editFullRecordsSE);
 editFullRecordsSE.click();
 total2=n12+n13+n14+n15+n16+n17+n18+n19;
 t1=String.format("%.2f",(total2));
 wLib.explicitWait(driver, 5,businessExpTotalExpensesTxtBox);
 value1=businessExpTotalExpensesTxtBox.getAttribute("value");
 Assert.assertEquals(value1, t1);
 Reporter.log("Total expenses Verified: "+value1,true);
 x1=Double.parseDouble(value1);
 totlIncome=n11-x1;
 t2=String.format("%.2f",(totlIncome));
 //Net profit or loss - Fetch Text
 string1=netProfitTxtBox.getAttribute("value");
 Assert.assertEquals(string1, t2);
 Reporter.log("Net profit Verified: "+string1,true);
 netBusinessProfit=Double.parseDouble(netBusinessProfitfortaxpurposeTxtBox.getAttribute("value"));
 adjustedProfit=Double.parseDouble(adjustedProfitTxtBox.getAttribute("value"));
 Assert.assertEquals(adjustedProfit,(netBusinessProfit+n20));
 Reporter.log("Adjusted profit for current tax year: " +adjustedProfitTxtBox,true);
 totalProfitFromBusiness=Double.parseDouble(totalProfitFromBusinessTxtBox.getAttribute("value"));
 Assert.assertEquals(totalProfitFromBusiness,(adjustedProfit+n21)); 
 Reporter.log("Total taxable profit from this business Verified: "+totalProfitFromBusiness,true);
 string3=netprofitorlossTxtBox.getAttribute("value");
 Assert.assertEquals(string3,string1);
 Reporter.log("Capital amount Net profit Verified: "+string3,true);
 n24 = Double.parseDouble(string3);//14900.00
 balanceEndPeriod=Double.parseDouble(balanceEndPeriodTxtBox.getAttribute("value"));
 Assert.assertEquals(balanceEndPeriod,(n22+n24));
 Reporter.log("Balance at end of period Verified: "+balanceEndPeriod,true);
 Reporter.log("Total taxable profit from this business: "+string3,true);
 SaveBtn1.click();
 driver.navigate().refresh();
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 
 wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);

 ExemptfromPayingClass4NICs.click();
 
 SaveBtn2.click(); 
 driver.navigate().refresh();
 
 Reporter.log("Self Employment Income added Successfully",true);
 wLib.explicitWait(driver, 5,linkOtherTaxInformation);
 linkOtherTaxInformation.click();
 wLib.explicitWait(driver,2,finishingTaxLink);
 finishingTaxLink.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 2,taxRoundedOffTxtBox);
 taxRoundedOffTxtBox.clear();
 otherInfoTxtBox.clear();
 taxRoundedOffTxtBox.sendKeys(str30);
 otherInfoTxtBox.sendKeys(str31);
 SaveBtn2.click();
 wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str32);
spousesDateOfBirthTxtBox.clear();
spousesDateOfBirthTxtBox.sendKeys(dateOfBirthCivilPartner);
saveAdditionalInfoBtn.click();
wLib.explicitWait(driver,2,taxReturnLink);
taxReturnLink.click();
 wLib.explicitWait(driver,5, taxCalSummaryLink);
taxCalSummaryLink.click();
totalincome=n5+totalProfitFromBusiness +total1 +n1+n2+n3;
totlIncome=totalincome-(n9+personalAllowanceRate);
actResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
expResult1 = String.format("%.2f",(totlIncome));
Assert.assertEquals(actResult1,expResult1);
Reporter.log("Verified Total income on which tax is due"+actResult1,true);
basicRatePayPension=taxLimit1Uk+(giftAidRate*n10);
dueTax1=basicRatePayPension*BR_rate;
Reporter.log("basic Rate of Pay Pension: "+dueTax1,true);
heigherRatePayPension=totlIncome-((taxLimit1Uk+(giftAidRate*n10))+n1);
dueTax2=heigherRatePayPension*HR_rate;
Reporter.log("heigher Rate of Pay Pension: "+dueTax2,true);
heigherRateDividends=(n1-dividentNillRate);
dueTax3=heigherRateDividends*(dividendTaxHigherRate/100);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
amtMAT=MCA*MATrate;
Reporter.log("amtMAT: "+amtMAT,true);
finalAmount = (totIncomeTaxDue-(amtMAT+n6+n4))+n23;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""), String.format("%.2f",finalAmount));
Reporter.log("tax For This Year is Verified Successfully: "+taxForThisYear,true);
}
public void funcDelMTRTest77(WebDriver driver)throws Exception
{
 Reporter.log("Deleting MTR Test Case 77",true);
 wLib = new WaitStatementLib();
 checkLockbutton(driver);
 clickIncome(driver);
 wLib.explicitWait(driver, 10,dividentLink);
dividentLink.click();
delOtherDivident(driver);
delOtherUKIncome(driver);
Reporter.log("Income of Other UK is Deleted Successfully",true);
delUKPensionsAnnuities(driver);
clickEmployment(driver);
delEmpInfo(driver);
Reporter.log("Employment income Deleted Successfully",true);
delSelfEmpFull(driver);
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
Reporter.log("Self Employment income Deleted Successfully",true);
delProfit(driver);
Reporter.log("Income from property Deleted Successfully",true);
delGiftAid(driver);
Reporter.log("Gift Aid Payment amount Deleted Successfully",true);
delPensionTaxRelief(driver);
Reporter.log("Pension Tax Relief is Deleted Successfully",true);
cis=new CISPage(driver);
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver, 5,finishingTaxLink);
finishingTaxLink.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,taxRoundedOffTxtBox);
taxRoundedOffTxtBox.clear();
wLib.explicitWait(driver, 5,otherInfoTxtBox);
otherInfoTxtBox.clear();
SaveBtn2.click();
driver.navigate().refresh();
Reporter.log("Finishing Tax Return is Deleted Successfully",true);
funcDelAdditionalInfo(driver);
Reporter.log("Underpaid Tax Information is Deleted Successfully",true);
}
public void addTestCase78(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44,String str45,String str46,String str47,String str48,String str49) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 78",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//6710.40
dividentUKCompanies(driver,str4,"",str5);//£5,009.93
addOtherDivident(driver,str6,"0.00","0.00");//£224.47
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,totStatPension);
totStatPension.clear();
totStatPension.sendKeys(str7);
statPensionLumpSum.clear();
statPensionLumpSum.sendKeys(str8);
taxtakenoffLumpsum.clear();
taxtakenoffLumpsum.sendKeys(str9);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str10);//14473.97
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str11);//2894.79
stateBenefitsSaveBtn.click();
Reporter.log("State benefit added successfully",true);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
AddgiftAidPaymentFull(driver,str12, "", str13);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,giftInterestAfterTaxTxtBox);
giftInterestAfterTaxTxtBox.clear();
giftInterestAfterTaxTxtBox.sendKeys(str14);
taxTakenOff1TxtBox.clear();
taxTakenOff1TxtBox.sendKeys(str15);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str16);
communityInvestmentTxtBox.clear();
communityInvestmentTxtBox.sendKeys(str17);
qualifyingLoanTxtBox.clear();
qualifyingLoanTxtBox.sendKeys(str18);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str19);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str20);
otherAllowableBusinessExpensesTxtBox.clear();
otherAllowableBusinessExpensesTxtBox.sendKeys(str21);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str22);
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.clear();
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.sendKeys(str23);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str24);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
Reporter.log("Self Employment Income added Successfully",true);
addPartnershipInfo(driver, str25, str26);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str26);*/
CashBasisChkBox.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str27);
otherBusinessIncomeTxtBox.clear();
otherBusinessIncomeTxtBox.sendKeys(str28);
shareOfUnTaxedInterestEtc.clear();
shareOfUnTaxedInterestEtc.sendKeys(str29);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str30);
rentIncomeTextBox.sendKeys(str31);
fHLUKTraditionalAccountingChkBox.click();
UKExpensesTxtBox.sendKeys(str32);
loanInterestTxtBox.sendKeys(str33);
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str34);
allowablePropertyExpensesTxtBox.sendKeys(str35);
privateUseAdjustmentTxtBox.sendKeys(str36);
balancingChargesTxtBox.sendKeys(str37);
capitalAllowancesTxtBox.sendKeys(str38);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str39);
propertyIncomeAllowanceChkBox.click();
taxTakenOffTxtBox.clear();
taxTakenOffTxtBox.sendKeys(str40);
revrsePremAndInducTxtBox.clear();
revrsePremAndInducTxtBox.sendKeys(str41);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str42);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str43);
costsOfServicProvidedTxtBox.clear();
costsOfServicProvidedTxtBox.sendKeys(str44);
balancingTaxableChargesTxtBox.clear();
balancingTaxableChargesTxtBox.sendKeys(str45);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str46);
tenPercntWearAndTearAllowanceTxtBox.clear();
tenPercntWearAndTearAllowanceTxtBox.sendKeys(str47);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str48);
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str49);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//6710.40
n2 = Double.parseDouble(str5);//5009.93
n3= Double.parseDouble(str6);//224.47
n4= Double.parseDouble(str7);//9620.00
n5 = Double.parseDouble(str8);//30275.00
n6= Double.parseDouble(str9);//12110.00
n7 = Double.parseDouble(str10);//43651.00
n8 = Double.parseDouble(str11);//8730.20
n9 = Double.parseDouble(str12);//3450.00
n10 = Double.parseDouble(str13);//3000.00
n11 = Double.parseDouble(str14);//4139.31
n12 = Double.parseDouble(str15);//1034.83
n13 = Double.parseDouble(str16);//5174.14
n14 = Double.parseDouble(str17);//1200.00
n15 = Double.parseDouble(str18);//2360.00
n16 = Double.parseDouble(str20);//17995.00
n17 = Double.parseDouble(str21);//14262.00
n18 = Double.parseDouble(str22);//1500.00
n19 = Double.parseDouble(str23);//1000.00
n20 = Double.parseDouble(str24);//1650.00
n21 = Double.parseDouble(str27);//6745.00
n22 = Double.parseDouble(str28);//1200.00
n23 = Double.parseDouble(str29);//322.00
n24 = Double.parseDouble(str31);//16254.00
n25 = Double.parseDouble(str32);//2960.00
n26 = Double.parseDouble(str33);//4521.00
n27= Double.parseDouble(str34);//364.00
n28= Double.parseDouble(str35);//27.00
n29 = Double.parseDouble(str36);//370.00
n30= Double.parseDouble(str37);//567.00
n31 = Double.parseDouble(str38);//1420.00
n32 = Double.parseDouble(str39);//15611.00
n33 = Double.parseDouble(str40);//1696.00
n34 = Double.parseDouble(str41);//302.00
n35 = Double.parseDouble(str42);//472.00
n36 = Double.parseDouble(str43);//1460.00
n37 = Double.parseDouble(str44);//1900.00
n38 = Double.parseDouble(str45);//622.00
n39 = Double.parseDouble(str46);//1540.00
n40 = Double.parseDouble(str47);//770.00
n41 = Double.parseDouble(str48);//7462.00
n42 = Double.parseDouble(str49);//486.67
FHLAdjustedProfitForTheYear=(n24 + n29 + n30) - (n25 +n26+n27+n28+n31);//7899.00
AdjustedProfitForTheYear=(n32 + n34 + n38) - (n35+n36+n37+n39+n40);//10393.00
profitFromUKLandAndProperty=FHLAdjustedProfitForTheYear+AdjustedProfitForTheYear;//18,292.00
wLib.explicitWait(driver, 2,calculateFHLUKAdjustedProfitForTheYear);	
Assert.assertEquals(calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",(FHLAdjustedProfitForTheYear)));
Reporter.log("Adjusted profit for the year verified successfully"+calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),true);
wLib.explicitWait(driver, 5,adjustedProfitForTheYear);
Assert.assertEquals(adjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",(AdjustedProfitForTheYear)));
Reporter.log("Adjusted profit for the year verified successfully: "+adjustedProfitForTheYear.getAttribute("value"),true);
}
public void delTestCase78(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 78",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delBank(driver);
delOtherDivident(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
delSEshort(driver);
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
delProfit(driver);
Reporter.log("Income from property Deleted Successfully",true);
clickIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
delGiftAid(driver);
Reporter.log("Gift Aid Payment amount Deleted Successfully",true);
}
public void addTestCase79(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17, String str18, String str19, String str20, String str21, String str22, String str23, String str24, String str25)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 79",true);
clickIncome(driver);
addBank(driver,str1,str1,str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str6);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str7);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("9");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str8);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str9);
SaveBtn2.click();

wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("20");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str10);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str11);
wLib.explicitWait(driver,5,SaveBtn2);
SaveBtn2.click();

wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
overseasPensionsSocialScurityBenefitsAndRoyalties.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("75");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str12);
wLib.explicitWait(driver, 2,SaveBtn2);
SaveBtn2.click();

wLib.explicitWait(driver, 2,dividendIncomeReceivedByAPersonAbroadBtn);
dividendIncomeReceivedByAPersonAbroadBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("75");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str13);
colCTxtBox.clear();
colCTxtBox.sendKeys(str14);
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();

wLib.explicitWait(driver, 2,incomeReceivedByPersonAbroadBtn);
incomeReceivedByPersonAbroadBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("75");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str15);
colCTxtBox.clear();
colCTxtBox.sendKeys(str16);
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();
residentialFinanceCostReliefTxtBox.clear();
residentialFinanceCostReliefTxtBox.sendKeys(str17);
unUsedTOAAresidentialFinanceCostsBroughtForwardTxtBox.clear();
unUsedTOAAresidentialFinanceCostsBroughtForwardTxtBox.sendKeys(str18);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,notResidentInUKChkBox);
residentInUKForPreviousYearChkBox.click();
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str19);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str20);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str21);


listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue(str22);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str23);
domiciledOutsideTheUKForTaxChkBox.click();
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str24);
remittancebasisclaimChkBox.click();
uKResidentFor12OutOf14YearsChkBox.click();
nominatedIncomeAmountTxtBox.clear();
nominatedIncomeAmountTxtBox.sendKeys(str25);
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();

n1=Double.parseDouble(str3);//365.00
n2=Double.parseDouble(str4);//7283.00
n3=Double.parseDouble(str5);//1510.00
n4=Double.parseDouble(str6);//4213.00
n5=Double.parseDouble(str7);//4
n6 = Double.parseDouble(str8);//4227.00
n7 = Double.parseDouble(str9);//507.00
n8 = Double.parseDouble(str10);//16200.00
n9 = Double.parseDouble(str11);//2430.00
n10 = Double.parseDouble(str12);//4620.00
n11 = Double.parseDouble(str13);//1263.00
n12 = Double.parseDouble(str14);//189.00
n13 = Double.parseDouble(str15);//6291.00
n14 = Double.parseDouble(str16);//2076.00
n15 = Double.parseDouble(str17);//800.00
n16 = Double.parseDouble(str18);//100.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
foreignIncomeCalc=(n6 - n7) + (n8 - n9) + n10 + (n13 - n14);
dividendsFromForeignCompaniesCalc = n11 - n12;
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt = n3;
capitalGainsTaxdueAmt=n4;

totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + foreignIncomeCalc + dividendsFromForeignCompaniesCalc + capitalGainsTaxdueAmt;
totlIncome =  totalincome;
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",dividendsFromForeignCompaniesCalc));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
		
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=foreignIncomeCalc;
dueTax1 = basicRatePayPension*BR_rate;
Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);
basicRateSaving=(taxLimit1Uk- basicRatePayPension)-nilRate2;//7045
dueTax2=basicRateSaving*BR_rate;//1409
Reporter.log("Amount of Basic Rate of Saving: "+dueTax2,true);
heigherRateSaving= (interestFromUKBanksBuildingAmt + capitalGainsTaxdueAmt) - (basicRateSaving + nilRate2);//4407
dueTax3=heigherRateSaving * HR_rate;//1762
Reporter.log("Heigher Rate of Saving: "+dueTax3,true);	
heigherRateDividends= (dividendsFromForeignCompaniesCalc + dividendsFromUKCompaniesAmt) - dividentNillRate;//584
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax4=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//189.80

totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3 + dueTax4;//8752
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = (n15 + n16)*reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));//180
Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);
notionalTaxFromGainsOnLifeAmt = n4 * capitalGainsRateUpper;
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: " + amtNotionalTaxFromGainsOnLife.getText(),true);
incomeTaxReliefAmt = amtReliefForFinanceCosts + notionalTaxFromGainsOnLifeAmt;
remittanceBasisCharge_nonDomiciles = res_non_dom_High_ch;
Assert.assertEquals(amtRemittanceBasisChargeNonBomiciles.getText().substring(1).replace(",", ""),String.format("%.2f",remittanceBasisCharge_nonDomiciles));
Reporter.log("Amount of Remittance Basis Charge for Non Bomiciles is Verified: "+amtRemittanceBasisChargeNonBomiciles.getText(),true);
incomeTaxDueAmt = (totIncomeTaxDue - incomeTaxReliefAmt) + remittanceBasisCharge_nonDomiciles;
totalTaxDeductedAmt = n1 * taxedUKInterestRate;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = incomeTaxDueAmt - 	totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest79(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 79",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
delDividendsForeignComaniesBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
delOverseasPensionsRoyaltiesBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,delDividendIncomeReceivedPersonAbroad);
delDividendIncomeReceivedPersonAbroad.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,delOtherIncomeRemittedForeignIncome);
delOtherIncomeRemittedForeignIncome.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
funcDelAdditionalInfo(driver);
}
public void addTestCase80(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 80",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str6);//3770.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str7);//3121.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str8);//624.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver,2,finishingTaxLink);
finishingTaxLink.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,10,taxRoundedOffTxtBox);
taxRoundedOffTxtBox.clear();
taxRoundedOffTxtBox.sendKeys(str9);
SaveBtn2.click();

n1 = Double.parseDouble(str3);//321.00
n2 = Double.parseDouble(str4);//1625.00
n3 = Double.parseDouble(str5);//128.00
n4 = Double.parseDouble(str6);//3770.00
n5 = Double.parseDouble(str7);//3121.00
n6 = Double.parseDouble(str8);//624.2
n7 = Double.parseDouble(str9);//865.00

wLib = new WaitStatementLib();
taxReturnLink.click();
wLib.explicitWait(driver, 60, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt=n3;
UKPensionAndStateBenefitAmt=n4+n5;//6891
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
totlIncome=totalincome-personalAllowanceRate;
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);

totalTaxDeductedAmt=n6 + (n1*taxedUKInterestRate);
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totalTaxDeductedAmt-totIncomeTaxDue;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Income Tax overpaid is verified: "+amtIncomeTaxoverpaid.getText(),true);
taxAlreadyRefundedAmt=n7;
Assert.assertEquals(taxAlreadyRefunded.getText().substring(1).replace(",", ""),	String.format("%.2f",taxAlreadyRefundedAmt));
Reporter.log("Tax already refunded in the year is verified: "+taxAlreadyRefunded.getText(),true);
fnltax = taxAlreadyRefundedAmt - taxBalance;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",fnltax));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest80(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 80",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver,2,finishingTaxLink);
finishingTaxLink.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,10,taxRoundedOffTxtBox);
taxRoundedOffTxtBox.clear();
SaveBtn2.click();
}
public void addTestCase82(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 82",true);
verifyBankIncome(driver);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,totStatPension);
totStatPension.clear();
totStatPension.sendKeys(str1);//9620
statPensionLumpSum.clear();
statPensionLumpSum.sendKeys(str2);//27876
taxtakenoffLumpsum.clear();
taxtakenoffLumpsum.sendKeys(str3);//5575.20
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str4);//35475.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str5);//7095.00
stateBenefitsSaveBtn.click();
Reporter.log("State benefit added successfully",true);
addOtherUKIncome(driver,str6,"",str7,"",str8);
addPensionTaxReliefForm(driver, str9, "", "", str10);
AddgiftAidPaymentFull(driver,str11, "", "");
otherGiftAidpayment(driver, str12, str13);
n1 = Double.parseDouble(str1);//9620.00
n2 = Double.parseDouble(str2);//27876.00
n3= Double.parseDouble(str3);//5575.20
n4= Double.parseDouble(str4);//35475.00
n5 = Double.parseDouble(str5);//7095.00
n6= Double.parseDouble(str6);//376.18
n7 = Double.parseDouble(str7);//75.23
n8 = Double.parseDouble(str9);//1275.00
n9 = Double.parseDouble(str10);//161.00
n10 = Double.parseDouble(str11);//1000.00
n11 = Double.parseDouble(str12);//100.00
n12 = Double.parseDouble(str13);//200.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
UKPensionAndStateBenefitAmt=n1+n4;
otherIncomeAmt = Math.floor(n6);
totalincome = UKPensionAndStateBenefitAmt + otherIncomeAmt;
amtRetirementAnnuity = n9;
allowance1 = amtRetirementAnnuity + personalAllowanceRate;
totlIncome=totalincome - allowance1;

Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",otherIncomeAmt));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(PaymentsIntoRetirementAnnuity.getText().substring(1).replace(",", ""),String.format("%.2f",amtRetirementAnnuity));//161
Reporter.log("Payments into a retirement annuity contract etc. is Verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
total1 = (n10 - n11)+n12;
startedRatePayPension=SR_bandScott;//2,000.00
dueTax1=round(startedRatePayPension*startedRateScott,2);//380.00
Reporter.log("Started Rate of Pay Pension: "+dueTax1,true);
basicRatePayPension=amtBasicRateScott + Math.round(total1*giftAidRate) + n8;//12800	
dueTax2 = round(basicRatePayPension * basicRateScott,2);//2030
Reporter.log("Basic Rate of Pay Pension: "+dueTax2,true);
intermediateRatePayPension = totlIncome - (startedRatePayPension + basicRatePayPension);//18660
dueTax3	= intermediateRatePayPension * intermediateRateScott ;
Reporter.log("intermediate Rate of Pay Pension: "+dueTax3,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
amtStatePensionLumpSumPayment = n2 * intermediateRateScott;
Reporter.log("State Pension lump sum payment verifired successfully"+amtStatePensionLumpSumPayment,true);
Assert.assertEquals(statePensionLumpSumPaymentAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtStatePensionLumpSumPayment));
Reporter.log("State Pension lump sum payment verifired successfully"+statePensionLumpSumPaymentAmt.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue + amtStatePensionLumpSumPayment;
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax due amount is verifired successfully"+incomeTaxDue1.getText(),true);
totalTaxDeductedAmt=n3+n5+n7;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
fnltax = totalTaxDeductedAmt - incomeTaxDueAmt;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",fnltax));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);

}
public void funcDelMTRTest82(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 82",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
delOtherUKIncome(driver);
delPensionTaxRelief(driver);
delInfoGiftAid(driver);
}
public void addTestCase84(WebDriver driver, String str1, String str2, String str3, String str4, String str5, String str6, String str7, String str8, String str9, String str10, String str11, String str12, String str13, String str14, String str15, String str16, String str17, String str18, String str19, String str20, String str21, String str22, String str23, String str24, String str25, String str26)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 84",true);
addMAT(driver, str1, str2, str3, str4, str5);
clickIncome(driver);
funcAddEmployerForMTR(driver, str6, str7);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
listbox1 = new Select(employerLstBox);
listbox1.selectByVisibleText(str6);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str8);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str9);
VochrCredcardExsMilg.clear();
VochrCredcardExsMilg.sendKeys(str10);
ProfFeesAndSubsTxtBox.clear();
ProfFeesAndSubsTxtBox.sendKeys(str11);
OtherExpensTxtBox.clear();
OtherExpensTxtBox.sendKeys(str12);
EarningPTtoUAPTxtBox.sendKeys(str13);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 10,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 3,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 3,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str14);
StartDatetxtbox.clear();
StartDatetxtbox.sendKeys(dateStart);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str15);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str16);
carVanAndTravelExpensesTxtBox.clear();
carVanAndTravelExpensesTxtBox.sendKeys(str17);
wagesSalariesAndStaffCostsTxtBox.clear();
wagesSalariesAndStaffCostsTxtBox.sendKeys(str18);
rentAndOtherPropertyCostsTxtBox.clear();
rentAndOtherPropertyCostsTxtBox.sendKeys(str19);
repairAndRenewalCostsTxtBox.clear();
repairAndRenewalCostsTxtBox.sendKeys(str20);
accountancyAndLegalFeesTxtBox.clear();
accountancyAndLegalFeesTxtBox.sendKeys(str21);
interestAndFinanceChargesTxtBox.clear();
interestAndFinanceChargesTxtBox.sendKeys(str22);
phoneAndOtherOfficeCostsTxtBox.clear();
phoneAndOtherOfficeCostsTxtBox.sendKeys(str23);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str24);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str25);
lossOfYearSetAgainstOtherIncomeTxtBox.clear();
lossOfYearSetAgainstOtherIncomeTxtBox.sendKeys(str26);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
PayClass2NICsvoluntarily.click();  
SaveBtn2.click(); 
n1 = Double.parseDouble(str8);//18500.00
n2 = Double.parseDouble(str9);//1450.00
n3 = Double.parseDouble(str10);//600.00
n4 = Double.parseDouble(str11);//150.00
n5 = Double.parseDouble(str12);//85.00
n6 = Double.parseDouble(str13);//10076.00
n7 = Double.parseDouble(str15);//27643.00
n8 = Double.parseDouble(str16);//1200.00
n9 = Double.parseDouble(str17);//5200.00
n10 = Double.parseDouble(str18);//3900.00
n11 = Double.parseDouble(str19);//7320.00
n12 = Double.parseDouble(str20);//1109.00
n13 = Double.parseDouble(str21);//4200.00
n14 = Double.parseDouble(str22);//13642.00
n15 = Double.parseDouble(str23);//1602.00
n16 = Double.parseDouble(str24);//1260.00
n17 = Double.parseDouble(str25);//1340.00
n18 = Double.parseDouble(str26);//10450.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n1;
benefitsAndExpensesReceivedAmt = n3;
allowableExpensesAmt = n4 + n5;
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
totalincome = totalFromAllEmployments;
incomeTaxReliefAmt = n18;
totlIncome = totalincome - (marriageAllowance + incomeTaxReliefAmt + personalAllowanceRate);
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f", allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f", totalFromAllEmployments));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f", totalincome));
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f", totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class2Amt=class2Rate*weeksYear;//£153.40
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
totIncomeTaxDue = incomeTaxDueAmt + class2Amt;
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt = n2;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f", totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+ totalTaxDeducted.getText(),true);
taxBalance= totalTaxDeductedAmt - totIncomeTaxDue;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
}

public void funcDelMTRTest84(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 84",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delSEshort(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
PayClass2NICsvoluntarily.click();  
SaveBtn2.click();
delMarriageAllowance(driver);	
}
public void addTestCase85(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 85",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
dividentUKCompanies(driver,"Company1","", str1);
addOtherDivident(driver,str2,"0.00","0.00"); 
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str3);
statPensionLumpSum.clear();
statPensionLumpSum.sendKeys(str4);
taxtakenoffLumpsum.clear();
taxtakenoffLumpsum.sendKeys(str5);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str6);
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str7);
stateBenefitsSaveBtn.click();

addOtherUKIncome(driver,str8,"",str9,"",str10);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver, 5,delButton);
delButton.click();
wLib.explicitWait(driver, 5,confDel);
confDel.click();
}
catch (Exception e)
{
    System.out.println(e.getMessage());
}*/
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str11);
tradingEnddateTxtBox.clear();
tradingEnddateTxtBox.sendKeys(str12);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str13);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str14);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str15);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str16);
ownGoodsAndServicesTxtBox.clear();
ownGoodsAndServicesTxtBox.sendKeys(str17);
anyOtherBusinessIncomeTxtBox.clear();
anyOtherBusinessIncomeTxtBox.sendKeys(str18);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
ExemptfromPayingClass4NICs.click();  
SaveBtn2.click();
driver.navigate().refresh();
addPartnershipInfo1(driver,str19,str22,str20,str21);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipFullFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str22);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(str23);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(str24);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str25);
shareUKUntaxedSavingsIncomeTxtBox.clear();
shareUKUntaxedSavingsIncomeTxtBox.sendKeys(str26);
SaveBtn1.click();
n1=Double.parseDouble(str1);//42769.00
n2=Double.parseDouble(str2);//7965.00

n3=Double.parseDouble(str3);//9620.00
n4=Double.parseDouble(str4);//30275.00
n5=Double.parseDouble(str5);//12110.00
n6=Double.parseDouble(str6);//43651.00
n7=Double.parseDouble(str7);//8730.20

n8=Double.parseDouble(str8);//376.18
n9=Double.parseDouble(str9);//75.23

n10=Double.parseDouble(str13);//14560.00
n11=Double.parseDouble(str14);//13603.00
n12=Double.parseDouble(str15);//1700.00
n13=Double.parseDouble(str16);//3926.00
n14=Double.parseDouble(str17);//720.00
n15=Double.parseDouble(str18);//250.00
n16=Double.parseDouble(str25);//62583.00
n17=Double.parseDouble(str26);//331.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome=((n10-n11)+(n13+n14)-n12)+n15;//4153
profitFromPartnershipsAmt = n16+n17;//62914
dividendsFromUKCompaniesAmt=n1 + n2;
UKPensionAndStateBenefitAmt=n3+n6;
otherIncomeAmt = Math.floor(n8);
totalincome = selfEmploymentIncome + profitFromPartnershipsAmt+ dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt + otherIncomeAmt;
if(totalincome >=150000)
{
totlIncome =  totalincome ;
}
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);

Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);

Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",otherIncomeAmt));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
startedRatePayPension=SR_bandScott;//2,000.00
dueTax1=round(startedRatePayPension*startedRateScott,2);//380.00
Reporter.log("Started Rate of Pay Pension: "+dueTax1,true);
basicRatePayPension=amtBasicRateScott ;//10,150.00	
dueTax2 = round(basicRatePayPension * basicRateScott,2);//2030
Reporter.log("Basic Rate of Pay Pension: "+dueTax2,true);
intermediateRatePayPension=amtIntermediateRateScott;//19,430.00	
dueTax3	= round(intermediateRatePayPension * intermediateRateScott,2);//4,080.30
Reporter.log("intermediate Rate of Pay Pension: "+dueTax3,true);
heigherRatePayPension=(totlIncome-(dividendsFromUKCompaniesAmt + n17)) - (startedRatePayPension + basicRatePayPension +intermediateRatePayPension);//88803	
dueTax4=round(heigherRatePayPension*heigherRateScott,2);//12,408.00
Reporter.log("Heigher Rate of Pay Pension: "+dueTax4,true);
heigherRateSaving= n17;//10,120.00	
dueTax5=round((heigherRateSaving*HR_rate),2);
Reporter.log("Heigher Rate of Saving: "+dueTax5,true);
heigherRateDividends=taxLimit3-(selfEmploymentIncome +profitFromPartnershipsAmt+otherIncomeAmt +UKPensionAndStateBenefitAmt +dividentNillRate);//27286
dueTax6=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//8867.95
Reporter.log("Heigher Rate of Dividends: "+dueTax6,true);
additionalRateDividends=dividendsFromUKCompaniesAmt -(heigherRateDividends+ dividentNillRate);
dueTax7= round((additionalRateDividends*dividendTaxAdditionalRate)/100,2);//8171.68
Reporter.log("Additional Rate of Dividends: "+dueTax7,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5+dueTax6+dueTax7;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
amtStatePensionLumpSumPayment = n4 * topRateScott;
Assert.assertEquals(statePensionLumpSumPaymentAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtStatePensionLumpSumPayment));
Reporter.log("State Pension lump sum payment verifired successfully"+statePensionLumpSumPaymentAmt.getText(),true);
tax1 = totIncomeTaxDue + amtStatePensionLumpSumPayment;
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDue1.getText(),true);
totalTaxDeductedAmt=n5+n7+n9;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=tax1-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
}

public void funcDelMTRTest85(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 85",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delSEshort(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
deleteDivident(driver);
delOtherDivident(driver);
delOtherUKIncome(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);
}
public void addTestCase87(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44,String str45,String str46,String str47,String str48,String str49,String str50,String str51,String str52,String str53,String str54,String str55,String str56,String str57) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 87",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//10120.00
dividentUKCompanies(driver,"Company1","",str4);//£828319.10
addPensionTaxReliefForm(driver,"",str5,"", "");
verifyGiftAid(driver);
addGiftAidPayment(driver, str6);
addCharitableIncome(driver,str7,"","");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
annualPaymentsTxtBox.clear();
annualPaymentsTxtBox.sendKeys(str8);
paymentsTradeTxtBox.clear();
paymentsTradeTxtBox.sendKeys(str9);
deficiencyReliefOnLifeInsuranceGainsTxtBox.clear();
deficiencyReliefOnLifeInsuranceGainsTxtBox.sendKeys(str57);
wLib.explicitWait(driver, 5,saveAdditionalInfoBtn);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
wLib.explicitWait(driver, 5,businessNameTxtBox);
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str10);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str11);
businessAddressTxtBox.clear();
businessAddressTxtBox.sendKeys(str12);
businessPostCodeTxtBox.clear();
businessPostCodeTxtBox.sendKeys(str13);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(str14);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str15);//328938.00
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str16);
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str17);
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str18);
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str19);
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str20);
advertisingandEntertainmentCostTxtBox.clear();
advertisingandEntertainmentCostTxtBox.sendKeys(str21);
interestbankTxtBox.clear();
interestbankTxtBox.sendKeys(str22);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str23);
irrecoverabledebtsTxtBox.clear();
irrecoverabledebtsTxtBox.sendKeys(str24);
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str25);
depreciationProfitandLossTxtBox.clear();
depreciationProfitandLossTxtBox.sendKeys(str26);
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str27);
disexpCarandVanTxtBox.clear();
disexpCarandVanTxtBox.sendKeys(str28);
disexpDepreciationTxtBox.clear();
disexpDepreciationTxtBox.sendKeys(str29);
capitalAllowancesemissionsTxtBox.clear();
capitalAllowancesemissionsTxtBox.sendKeys(str30);
otherEnhancedCapitalAllowancesTxtBox.clear();
otherEnhancedCapitalAllowancesTxtBox.sendKeys(str31);
allowancesCessationBusinessTxtBox.clear();
allowancesCessationBusinessTxtBox.sendKeys(str32);
goodAndServicesTxtBox.clear();
goodAndServicesTxtBox.sendKeys(str33);
businessIncomeandOtherProfitTxtBox.clear();
businessIncomeandOtherProfitTxtBox.sendKeys(str34);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(str35);
lossBroughtForwardProfitTxtBox.clear();
lossBroughtForwardProfitTxtBox.sendKeys(str36);
equipMentandMachineryTxtBox.clear();
equipMentandMachineryTxtBox.sendKeys(str37);
OtherFixedAssestsTxtBox.clear();
OtherFixedAssestsTxtBox.sendKeys(str38);
stockAndWorkTxtBox.clear();
stockAndWorkTxtBox.sendKeys(str39);
tradeDebtorsTxtBox.clear();
tradeDebtorsTxtBox.sendKeys(str40);
bankSocietyBalancesTxtBox.clear();
bankSocietyBalancesTxtBox.sendKeys(str41);
cashinHandTxtBox.clear();
cashinHandTxtBox.sendKeys(str42);
currentAssestsandPaymentTxtBox.clear();
currentAssestsandPaymentTxtBox.sendKeys(str43);
tradeCreditorsTxtBox.clear();
tradeCreditorsTxtBox.sendKeys(str44);
loansOverdrawnandBankAccountTxtBox.clear();
loansOverdrawnandBankAccountTxtBox.sendKeys(str45);
liabilitiesandAccrualsTxtBox.clear();
liabilitiesandAccrualsTxtBox.sendKeys(str46);
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str47);
drawingTxtBox.clear();
drawingTxtBox.sendKeys(str48);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str49);
loanInterestTxtBox.clear();
loanInterestTxtBox.sendKeys(str50);
legalManagementOthrProfessionalFeesTxtBox.clear();
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str51);
privateUseAdjustmentTxtBox.clear();
privateUseAdjustmentTxtBox.sendKeys(str52);
lossToCarryForwardTxtBox.clear();
lossToCarryForwardTxtBox.sendKeys(str53);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str54);
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str55);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str56);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//10120.00
n2 = Double.parseDouble(str4);//828319.10
n3 = Double.parseDouble(str5);// 10010.00
n4 = Double.parseDouble(str6);// 240.00
n5 = Double.parseDouble(str7);// 2145.00
n6 = Double.parseDouble(str8);// 470.00
n7 = Double.parseDouble(str9);// 88.00
n8 = Double.parseDouble(str15);// 328938.00
n9 = Double.parseDouble(str16);// 75512.00
n10 = Double.parseDouble(str17);//99532.00
n11 = Double.parseDouble(str18);// 3747.00
n12 = Double.parseDouble(str19);// 16128.00
n13 = Double.parseDouble(str20);// 6040.00
n14 = Double.parseDouble(str21);// 764.00
n15 = Double.parseDouble(str22);// 9523.00
n16 = Double.parseDouble(str23);// 2719.00
n17 = Double.parseDouble(str24);// 798.00
n18 = Double.parseDouble(str25);// 6284.00
n19 = Double.parseDouble(str26);// 8592.00
n20 = Double.parseDouble(str27);// 627.00
n21 = Double.parseDouble(str28);// 199.00
n22 = Double.parseDouble(str29);// 8592.00
n23 = Double.parseDouble(str30);// 1800.00
n24 = Double.parseDouble(str31);// 1200.00
n25 = Double.parseDouble(str32);// 165.00
n26 = Double.parseDouble(str33);// 921.00
n27 = Double.parseDouble(str34);// 921.00
n28 = Double.parseDouble(str36);// 7295.00
n29 = Double.parseDouble(str37);// 23400.00
n30 = Double.parseDouble(str38);// 269992.00
n31 = Double.parseDouble(str39);// 6464.00
n32 = Double.parseDouble(str40);// 2746.00
n33 = Double.parseDouble(str41);// 72645.00
n34 = Double.parseDouble(str42);// 2000.00
n35 = Double.parseDouble(str43);// 252.00
n36 = Double.parseDouble(str44);// 14864.00
n37 = Double.parseDouble(str45);// 93551.00
n38 = Double.parseDouble(str46);// 108416.00
n39 = Double.parseDouble(str47);// 132680.00
n40 = Double.parseDouble(str48);// 71605.00
n41 = Double.parseDouble(str50);// 4555.00
n42 = Double.parseDouble(str51);// 2320.00
n43 = Double.parseDouble(str52);// 1150.00
n44 = Double.parseDouble(str53);// 5725.00
n45 = Double.parseDouble(str54);// 45005.00
n46 = Double.parseDouble(str55);// 4880.00
n47 = Double.parseDouble(str56);// 3775.00
n48 = Double.parseDouble(str57);// 33000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
totalExpensesSelfEmpFull=n9+n10+n11+n12+n13+n14+n15+n16+n17+n18+n19+n20;//230266.00 
netProfitSelfEmpFull = n8 - totalExpensesSelfEmpFull;//98672.00
totalCapitalAllowancesSelfEmpFull = n23 + n24 + n25;//1800+1200+165 = 3165
totalDisallowableExpensesSelfEmpFull= n21 + n22;//8791.00
totalAdditiontoNetProfitSelfEmpFull = totalDisallowableExpensesSelfEmpFull + n26; //9712.00
totalDeductionfromNetProfitSelfEmpFull = totalCapitalAllowancesSelfEmpFull + n27;//4086.00
selfEmploymentIncome=netProfitSelfEmpFull + (totalDisallowableExpensesSelfEmpFull-totalCapitalAllowancesSelfEmpFull);//104298.00
AdjustedProfitForTheYear=n45 - (n46 + n47);//36350.00
profitFromUKLandAndProperty = AdjustedProfitForTheYear;
interestFromUKBanksBuildingAmt = n1;//10120.00
dividendsFromUKCompaniesAmt=Math.floor(n2);//828319.00
totalincome = selfEmploymentIncome + profitFromUKLandAndProperty + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt;
incomeTaxReliefAmt=n7+n28;
amtAnnuities = n6 * giftAidRate;
amtRetirementAnnuity = n3;
total1 = amtRetirementAnnuity + incomeTaxReliefAmt + amtAnnuities + n5;
totlIncome = totalincome - total1;
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Amount of Profit From UK Land And Property is Verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(PaymentsIntoRetirementAnnuity.getText().substring(1).replace(",", ""),String.format("%.2f",amtRetirementAnnuity));//10010.00 
Reporter.log("Payments into a retirement annuity contract etc. is Verified: "+PaymentsIntoRetirementAnnuity.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(annuitiesAmtTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(amtAnnuities)));
Reporter.log("Amount of Annuties is Verified: "+annuitiesAmtTaxSummary.getText(),true);
Assert.assertEquals(giftofInvestmentsAndPropertyAmtTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(n5)));
Reporter.log("Amount of Gift of investments and Property is Verified: "+giftofInvestmentsAndPropertyAmtTaxSummary.getText(),true);		
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
startedRatePayPension=SR_bandScott;//2,000.00
dueTax1=startedRatePayPension*startedRateScott;//380.00
Reporter.log("Started Rate of Pay Pension: "+dueTax1,true);
basicRatePayPension=amtBasicRateScott + Math.round(n4*giftAidRate);//10,450.00	
dueTax2 = basicRatePayPension * basicRateScott;//2,090.00
Reporter.log("Basic Rate of Pay Pension: "+dueTax2,true);
intermediateRatePayPension=amtIntermediateRateScott;//19,430.00	
Reporter.log("intermediate Rate of Pay Pension: "+dueTax3,true);
dueTax3	= round(intermediateRatePayPension * intermediateRateScott,2);//4,080.30
heigherRatePayPension = (totlIncome-(interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt))-(startedRatePayPension+basicRatePayPension+intermediateRatePayPension);//88,642.50	
dueTax4 = heigherRatePayPension * heigherRateScott;//36,343.43
heigherRateSaving=interestFromUKBanksBuildingAmt;//10,120.00		
dueTax5=round(heigherRateSaving*(HR_rate),2);//2,485.66
heigherRateDividends=(taxLimit3 + (n4 * giftAidRate))-(startedRatePayPension+basicRatePayPension+intermediateRatePayPension+heigherRatePayPension+heigherRateSaving+dividentNillRate);//72,360.00	
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax6=(heigherRateDividends*dividendTaxHigherRate)/100;//23,517.00
additionalRateDividends=dividendsFromUKCompaniesAmt -(heigherRateDividends+ dividentNillRate);
dueTax7= (additionalRateDividends*dividendTaxAdditionalRate)/100;//296,281.60
Reporter.log("Additional Rate of Dividends: "+additionalRateDividends,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5+dueTax6+dueTax7;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
total1=roundDown2((heigherRateDividends * dividendTaxHigherRate)/100) - roundDown2((heigherRateDividends *dividendTaxBasicRate)/100);
Reporter.log("total1: "+total1,true);
total2 = n48 - heigherRateDividends;
Reporter.log("total2: "+total2,true);
total3 = (total2 * heigherRateScott) - (total2 *BR_rate);
Reporter.log("total3: "+total3,true);
amtTaxAdjustment =  round(total1 +total3,1);
Assert.assertEquals(deficiencyReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxAdjustment));
Reporter.log("Amount of Deficiency Relief is Verified: "+deficiencyReliefAmt.getText(),true);
amtTaxdueonGiftAidpayments=n4*giftAidRate;//300
Assert.assertEquals(calculationGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxdueonGiftAidpayments));
Reporter.log("Calculation Of Gift Aid Payments verified: "+calculationGiftAidpayments.getText(),true);
taxdueonGiftAidpaymentsValue=amtTaxdueonGiftAidpayments*reliefFinancerate;//60
Assert.assertEquals(taxDueGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Tax Due on Gift Aid Payments verified: "+taxDueGiftAidpayments.getText(),true);
taxDueOnAnnuityAndRoyaltyPaymentsAmt =Math.floor(amtAnnuities) * BR_rate;
Assert.assertEquals(amtTaxDueOnAnnuityAndRoyaltyPayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxDueOnAnnuityAndRoyaltyPaymentsAmt));
Reporter.log("Tax Due on Gift Aid Payments verified: "+amtTaxDueOnAnnuityAndRoyaltyPayments.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtTaxAdjustment;
incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs + taxDueOnAnnuityAndRoyaltyPaymentsAmt;
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
total4=((selfEmploymentIncome-n28)-class4LPLAmt)-nIC_Band;//50,653
class4Amt=round(total4*class4UPLRate,2);//1,013.06
Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
taxBalance = class4_2Amt + incomeTaxDueAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}
public void delTestCase87(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 87",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delInterestfromUKbanks(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
delPensionTaxRelief(driver);
delCharitableGiving(driver);
delGiftAid(driver);
delSelfEmpFull(driver);
delProfit(driver);
}
public void addTestCase88(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44,String str45,String str46,String str47,String str48,String str49,String str50,String str51,String str52,String str53,String str54,String str55,String str56,String str57,String str58,String str59) throws Exception
{
Reporter.log("Exceuting MTR Test Case 88",true);
wLib = new WaitStatementLib();
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//10120.00
dividentUKCompanies(driver,str4,str5,str6);//828319.10
addPensionTaxReliefForm(driver,"",str7, "","");
driver.navigate().refresh();
addCharitableIncome(driver,str8,"","");
addGiftAidPayment(driver, str9);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
annualPaymentsTxtBox.clear();
annualPaymentsTxtBox.sendKeys(str10);//470.00
paymentsTradeTxtBox.clear();
paymentsTradeTxtBox.sendKeys(str11);//88.00
deficiencyReliefOnLifeInsuranceGainsTxtBox.clear();
deficiencyReliefOnLifeInsuranceGainsTxtBox.sendKeys(str59);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
wLib.explicitWait(driver, 5,businessNameTxtBox);
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str12);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str13);
businessAddressTxtBox.clear();
businessAddressTxtBox.sendKeys(str14);
businessPostCodeTxtBox.clear();
businessPostCodeTxtBox.sendKeys(str15);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(str16);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(str17);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str18);//328938.00
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str19);//75512.00
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str20);//99532.00

travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str21);//3747.00
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str22);//16128.00
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str23);//6040.00
advertisingandEntertainmentCostTxtBox.clear();
advertisingandEntertainmentCostTxtBox.sendKeys(str24);//764.00
interestbankTxtBox.clear();
interestbankTxtBox.sendKeys(str25);//9523.00
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str26);//2719.00
irrecoverabledebtsTxtBox.clear();
irrecoverabledebtsTxtBox.sendKeys(str27);//798.00
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str28);//6284.00
depreciationProfitandLossTxtBox.clear();
depreciationProfitandLossTxtBox.sendKeys(str29);//8592.00
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str30);//627.00
disexpCarandVanTxtBox.clear();
disexpCarandVanTxtBox.sendKeys(str31);//199.00
disexpDepreciationTxtBox.clear();
disexpDepreciationTxtBox.sendKeys(str32);//8592.00
capitalAllowancesemissionsTxtBox.clear();
capitalAllowancesemissionsTxtBox.sendKeys(str33);//1800.00
otherEnhancedCapitalAllowancesTxtBox.clear();
otherEnhancedCapitalAllowancesTxtBox.sendKeys(str34);//1200.00
allowancesCessationBusinessTxtBox.clear();
allowancesCessationBusinessTxtBox.sendKeys(str35);//165.00
goodAndServicesTxtBox.clear();
goodAndServicesTxtBox.sendKeys(str36);//921.00
businessIncomeandOtherProfitTxtBox.clear();
businessIncomeandOtherProfitTxtBox.sendKeys(str37);//921.00
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
lossBroughtForwardProfitTxtBox.clear();
lossBroughtForwardProfitTxtBox.sendKeys(str38);//7295.00
equipMentandMachineryTxtBox.clear();
equipMentandMachineryTxtBox.sendKeys(str39);//23400.00
OtherFixedAssestsTxtBox.clear();
OtherFixedAssestsTxtBox.sendKeys(str40);//269992.00
stockAndWorkTxtBox.clear();
stockAndWorkTxtBox.sendKeys(str41);//6464.00
tradeDebtorsTxtBox.clear();
tradeDebtorsTxtBox.sendKeys(str42);//2746.00
bankSocietyBalancesTxtBox.clear();
bankSocietyBalancesTxtBox.sendKeys(str43);//72645.00
cashinHandTxtBox.clear();
cashinHandTxtBox.sendKeys(str44);//2000.00
currentAssestsandPaymentTxtBox.clear();
currentAssestsandPaymentTxtBox.sendKeys(str45);//252.00
tradeCreditorsTxtBox.clear();
tradeCreditorsTxtBox.sendKeys(str46);//14864.00
loansOverdrawnandBankAccountTxtBox.clear();
loansOverdrawnandBankAccountTxtBox.sendKeys(str47);//93551.00
liabilitiesandAccrualsTxtBox.clear();
liabilitiesandAccrualsTxtBox.sendKeys(str48);//108416.00
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str49);//132680.00
drawingTxtBox.clear();
drawingTxtBox.sendKeys(str50);//71605.00
wLib.explicitWait(driver, 10,SaveBtn1);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.sendKeys(str51);//6
loanInterestTxtBox.clear();
loanInterestTxtBox.sendKeys(str52);//4555.00
legalManagementOthrProfessionalFeesTxtBox.clear();
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str53);//2320.00
privateUseAdjustmentTxtBox.clear();
privateUseAdjustmentTxtBox.sendKeys(str54);//1150.00
lossToCarryForwardTxtBox.clear();
lossToCarryForwardTxtBox.sendKeys(str55);//5725.00
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str56);//45005.00
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str57);//4880.00
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str58);//3775.00
SaveBtn1.click();
n1 = Double.parseDouble(str3);//10120.00
n2 = Double.parseDouble(str6);//828319.10
n3 = Double.parseDouble(str7);// 10010.00
n4 = Double.parseDouble(str8);// 2145.00
n5 = Double.parseDouble(str9);// 240.00
n6 = Double.parseDouble(str10);// 470.00
n7 = Double.parseDouble(str11);// 88.00
n8 = Double.parseDouble(str18);// 328938.00
n9 = Double.parseDouble(str19);// 75512.00
n10 = Double.parseDouble(str20);//99532.00
n11 = Double.parseDouble(str21);// 3747.00
n12 = Double.parseDouble(str22);// 16128.00
n13 = Double.parseDouble(str23);// 6040.00
n14 = Double.parseDouble(str24);// 764.00
n15 = Double.parseDouble(str25);// 9523.00
n16 = Double.parseDouble(str26);// 2719.00
n17 = Double.parseDouble(str27);// 798.00
n18 = Double.parseDouble(str28);// 6284.00
n19 = Double.parseDouble(str29);// 8592.00
n20 = Double.parseDouble(str30);// 627.00
n21 = Double.parseDouble(str31);// 199.00
n22 = Double.parseDouble(str32);// 8592.00
n23 = Double.parseDouble(str33);// 1800.00
n24 = Double.parseDouble(str34);// 1200.00
n25 = Double.parseDouble(str35);// 165.00
n26 = Double.parseDouble(str36);// 921.00
n27 = Double.parseDouble(str37);// 921.00
n28 = Double.parseDouble(str38);// 7295.00
n29 = Double.parseDouble(str39);// 23400.00
n30 = Double.parseDouble(str40);// 269992.00
n31 = Double.parseDouble(str41);// 6464.00
n32 = Double.parseDouble(str42);// 2746.00
n33 = Double.parseDouble(str43);// 72645.00
n34 = Double.parseDouble(str44);// 2000.00
n35 = Double.parseDouble(str45);// 252.00
n36 = Double.parseDouble(str46);// 14864.00
n37 = Double.parseDouble(str47);// 93551.00
n38 = Double.parseDouble(str48);// 108416.00
n39 = Double.parseDouble(str49);// 132680.00
n40 = Double.parseDouble(str50);// 71605.00
n41 = Double.parseDouble(str52);// 4555.00
n42 = Double.parseDouble(str53);// 2320.00
n43 = Double.parseDouble(str54);// 1150.00
n44 = Double.parseDouble(str55);// 5725.00
n45 = Double.parseDouble(str56);// 45005.00
n46 = Double.parseDouble(str57);// 4880.00
n47 = Double.parseDouble(str58);// 3775.00
n48 = Double.parseDouble(str59);// 33000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
totalExpensesSelfEmpFull=n9+n10+n11+n12+n13+n14+n15+n16+n17+n18+n19+n20;//230266.00 
netProfitSelfEmpFull = n8 - totalExpensesSelfEmpFull;//98672.00
totalCapitalAllowancesSelfEmpFull = n23 + n24 + n25;//1800+1200+165 = 3165
totalDisallowableExpensesSelfEmpFull= n21 + n22;//8791.00
totalAdditiontoNetProfitSelfEmpFull = totalDisallowableExpensesSelfEmpFull + n26; //9712.00
totalDeductionfromNetProfitSelfEmpFull = totalCapitalAllowancesSelfEmpFull + n27;//4086.00
selfEmploymentIncome=netProfitSelfEmpFull + (totalDisallowableExpensesSelfEmpFull-totalCapitalAllowancesSelfEmpFull);//104298.00
AdjustedProfitForTheYear=n45 - (n46 + n47);//36350.00
profitFromUKLandAndProperty = AdjustedProfitForTheYear;
interestFromUKBanksBuildingAmt = n1;//10120.00
dividendsFromUKCompaniesAmt=Math.floor(n2);//828319.00
totalincome = selfEmploymentIncome + profitFromUKLandAndProperty + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt;
incomeTaxReliefAmt=n7+n28;
amtAnnuities = n6 * giftAidRate;
amtRetirementAnnuity = n3;
total1 = amtRetirementAnnuity + incomeTaxReliefAmt + amtAnnuities + n4;
totlIncome = totalincome - total1;
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Amount of Profit From UK Land And Property is Verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(PaymentsIntoRetirementAnnuity.getText().substring(1).replace(",", ""),String.format("%.2f",amtRetirementAnnuity));//10010.00 
Reporter.log("Payments into a retirement annuity contract etc. is Verified: "+PaymentsIntoRetirementAnnuity.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(annuitiesAmtTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(amtAnnuities)));
Reporter.log("Amount of Annuties is Verified: "+annuitiesAmtTaxSummary.getText(),true);
Assert.assertEquals(giftofInvestmentsAndPropertyAmtTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(n4)));
Reporter.log("Amount of Gift of investments and Property is Verified: "+giftofInvestmentsAndPropertyAmtTaxSummary.getText(),true);		
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = taxLimit1Uk + (n5*giftAidRate);
dueTax1=basicRatePayPension*BR_rate;
Reporter.log("Basic Rate of Pay Pension: "+dueTax1,true);
heigherRatePayPension=(totlIncome-(interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt))-(basicRatePayPension);//85,722.50	

dueTax2=heigherRatePayPension*HR_rate;//34,289.00
Reporter.log("Heigher Rate of Pay Pension: "+dueTax2,true);
heigherRateSaving=interestFromUKBanksBuildingAmt;//10,120.00		
dueTax3=heigherRateSaving*HR_rate;//4,048.00
Reporter.log("Heigher Rate of saving: "+dueTax3,true);
heigherRateDividends = (taxLimit3+(n5*giftAidRate))-(basicRatePayPension + heigherRatePayPension + heigherRateSaving + dividentNillRate);//17,657.50
Reporter.log("heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax4=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//5,738.69
Reporter.log("heigher Rate of Dividends: "+dueTax4,true);
additionalRateDividends=dividendsFromUKCompaniesAmt -(heigherRateDividends+ dividentNillRate);//808,661.50	
dueTax5= round((additionalRateDividends*dividendTaxAdditionalRate)/100,2);//308,100.03
Reporter.log("Additional Rate of Dividends: "+dueTax5,true);
totIncomeTaxDue = dueTax1 + dueTax2 + dueTax3 + dueTax4 + dueTax5;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
total5=((heigherRateDividends * dividendTaxHigherRate)/100) - ((heigherRateDividends *dividendTaxBasicRate)/100);
Reporter.log("total5: "+total5,true);
total6 = n48 - heigherRateDividends;
Reporter.log("total6: "+total6,true);
total7 = (total6 * HR_rate) - (total6 *BR_rate);
Reporter.log("total7: "+total7,true);
amtTaxAdjustment =  round(total5 +total7,2);
Assert.assertEquals(deficiencyReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxAdjustment));
Reporter.log("Amount of Deficiency Relief is Verified: "+deficiencyReliefAmt.getText(),true);
amtTaxdueonGiftAidpayments=n5*giftAidRate;//300
Assert.assertEquals(calculationGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxdueonGiftAidpayments));
Reporter.log("Calculation Of Gift Aid Payments verified: "+calculationGiftAidpayments.getText(),true);
taxdueonGiftAidpaymentsValue = amtTaxdueonGiftAidpayments*reliefFinancerate;//60
Assert.assertEquals(taxDueGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Tax Due on Gift Aid Payments verified: "+taxDueGiftAidpayments.getText(),true);
taxDueOnAnnuityAndRoyaltyPaymentsAmt =Math.floor(amtAnnuities) * BR_rate;
Assert.assertEquals(amtTaxDueOnAnnuityAndRoyaltyPayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxDueOnAnnuityAndRoyaltyPaymentsAmt));
Reporter.log("Tax Due on Gift Aid Payments verified: "+amtTaxDueOnAnnuityAndRoyaltyPayments.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtTaxAdjustment;
incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs + taxDueOnAnnuityAndRoyaltyPaymentsAmt;
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
total4=((selfEmploymentIncome-n28)-class4LPLAmt)-nIC_Band;//50,653
class4Amt=round(total4*class4UPLRate,2);//1,013.06
Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
taxBalance = class4_2Amt + incomeTaxDueAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase88(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 88",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delInterestfromUKbanks(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
delPensionTaxRelief(driver);
delCharitableGiving(driver);
delGiftAid(driver);
delSelfEmpFull(driver);
delProfit(driver);
}
public void addTestCase90(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 90",true);
addPensionTaxReliefForm(driver,str1, str2, "", "");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,giftInterestAfterTaxTxtBox);
giftInterestAfterTaxTxtBox.clear();
giftInterestAfterTaxTxtBox.sendKeys(str3);//768
wLib.explicitWait(driver, 5,taxTakenOff1TxtBox);
taxTakenOff1TxtBox.clear();
taxTakenOff1TxtBox.sendKeys(str4);//192
wLib.explicitWait(driver, 5,grossAmountTxtBox);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str5);//960
stockDividendsTxtBox.clear();
stockDividendsTxtBox.sendKeys(str6);//208.00
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver,5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver,5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str7);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str8);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
arrangementChkBox.click();
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str9);//175264
businessIncomeOtherTxtBox.clear();
businessIncomeOtherTxtBox.sendKeys(str10);//5460
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str11);//10640
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str12);//2421
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str13);//25623
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str14);//640
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str15);//1562
disexpCarandVanTxtBox.clear();
disexpCarandVanTxtBox.sendKeys(str16);//561
disexpRentTxtBox.clear();
disexpRentTxtBox.sendKeys(str17);//2135
restrictedCostingTxtBox.clear();
restrictedCostingTxtBox.sendKeys(str18);//4500.00
balancingChargeOnSalesTxtBox.clear();
balancingChargeOnSalesTxtBox.sendKeys(str19);//620.00
adjustmentChangeofAccountTxtBox.clear();
adjustmentChangeofAccountTxtBox.sendKeys(str20);//15200.00
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
lossBroughtForwardProfitTxtBox.clear();
lossBroughtForwardProfitTxtBox.sendKeys(str21);//5692.00
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str22);//15000.00
adjustmentProfitTxtBox.clear();
adjustmentProfitTxtBox.sendKeys(str23);//15200.00
SaveBtn1.click();
n1 = Double.parseDouble(str1);//3205
n2 = Double.parseDouble(str2);//681
n3 = Double.parseDouble(str3);//768
n4 = Double.parseDouble(str4);//192
n5 = Double.parseDouble(str5);//960
n6 = Double.parseDouble(str6);//208
n7 = Double.parseDouble(str9);//175264
n8 = Double.parseDouble(str10);//5460
n9 = Double.parseDouble(str11);//10640
n10 = Double.parseDouble(str12);//2421
n11 = Double.parseDouble(str13);//25623
n12 = Double.parseDouble(str14);//640
n13 = Double.parseDouble(str15);//1562
n14 = Double.parseDouble(str16);//561
n15 = Double.parseDouble(str17);//2135
n16 = Double.parseDouble(str18);//4500
n17 = Double.parseDouble(str19);//620
n18 = Double.parseDouble(str20);//15200
n19 = Double.parseDouble(str21);//5692
n20 = Double.parseDouble(str22);//15000
n21 = Double.parseDouble(str23);//15200
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
totalExpensesSelfEmpFull=n9+n10+n11+n12+n13;//40886.00
netProfitSelfEmpFull = (n7 +  n8)- totalExpensesSelfEmpFull;//139838.00
totalCapitalAllowancesSelfEmpFull = n16;//4500
totalDisallowableExpensesSelfEmpFull= n14 + n15;//2696.00
totalAdditiontoNetProfitSelfEmpFull = totalDisallowableExpensesSelfEmpFull + n17; //3316.00
totalDeductionfromNetProfitSelfEmpFull = totalCapitalAllowancesSelfEmpFull;//4500.00
netBusinessProfitForTaxPurpose=(netProfitSelfEmpFull-totalDeductionfromNetProfitSelfEmpFull)+ totalAdditiontoNetProfitSelfEmpFull;//138654.00
selfEmploymentIncome=netBusinessProfitForTaxPurpose + n18;//153854.00
interestFromUKBanksBuildingAmt=n5;//960.00
dividendsFromUKCompaniesAmt=n6;//208.00	 
totalincome = selfEmploymentIncome + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt;//155,022.00	 
incomeTaxReliefAmt=n19;
totlIncome = totalincome - (n2 + incomeTaxReliefAmt);//148,649.00	 	 

Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f", selfEmploymentIncome));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk + n1;//£37,705.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate; //£7,541.00
heigherRatePayPension=totlIncome - (basicRatePayPension + nilRate2+ dividendsFromUKCompaniesAmt);//110,236.00	
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//44,094.40
totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
totalProfitFromBusiness=selfEmploymentIncome - n19;//148162.00
class4Amt=((((totalProfitFromBusiness) - n21)-class4LPLAmt)-nIC_Band)*class4UPLRate;//1,732.24
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue +class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=incomeTaxDueAmt - n4;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Income Tax, Class 2 and Class 4 National Insurance contributions due is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);	
Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);

}
public void funcDelMTRTest90(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 90",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
delSelfEmpFull(driver);
delPensionTaxRelief(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase91(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44,String str45,String str46,String str47,String str48,String str49,String str50,String str51,String str52,String str53,String str54,String str55) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 91",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//3770
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str2);//3121
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str3);//624.2
stateBenefitsSaveBtn.click();
addPensionTaxReliefForm(driver,str4, str5, "", "");
verifyGiftAid(driver);
addGiftAidPayment(driver, str6);
otherGiftAidpayment(driver, str7, "");
clickIncome(driver);
funcAddEmployerForMTR(driver, str14, str15);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str16);//27515
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str17);//3728
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str18);//2250
FuelForCompanyCarsAndVans.clear();
FuelForCompanyCarsAndVans.sendKeys(str19);//650
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str20);//75
FxdExpnsDeductTxtBox.clear();
FxdExpnsDeductTxtBox.sendKeys(str21);//75
EarningPTtoUAPTxtBox.clear();
EarningPTtoUAPTxtBox.sendKeys(str22);//19091.00
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,giftInterestAfterTaxTxtBox);
giftInterestAfterTaxTxtBox.clear();
giftInterestAfterTaxTxtBox.sendKeys(str8);//768
wLib.explicitWait(driver, 5,taxTakenOff1TxtBox);
taxTakenOff1TxtBox.clear();
taxTakenOff1TxtBox.sendKeys(str9);//192
wLib.explicitWait(driver, 5,grossAmountTxtBox);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str10);//960
wLib.explicitWait(driver, 5,stockDividendsTxtBox);
stockDividendsTxtBox.clear();
stockDividendsTxtBox.sendKeys(str11);//490.5
wLib.explicitWait(driver, 5,nonUKTaxableForeignEarningsTxtBox);
nonUKTaxableForeignEarningsTxtBox.clear();
nonUKTaxableForeignEarningsTxtBox.sendKeys(str12);//2000
wLib.explicitWait(driver, 5,qualifyingLoanTxtBox);
qualifyingLoanTxtBox.clear();
qualifyingLoanTxtBox.sendKeys(str13);//1000
wLib.explicitWait(driver, 5, saveAdditionalInfoBtn);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str23);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str24);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
arrangementChkBox.click();
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str25);//175264
businessIncomeOtherTxtBox.clear();
businessIncomeOtherTxtBox.sendKeys(str26);//5460
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str27);//10640
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str28);//2421
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str29);//25623
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str30);//640
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str31);//1562
disexpCarandVanTxtBox.clear();
disexpCarandVanTxtBox.sendKeys(str32);//561
disexpRentTxtBox.clear();
disexpRentTxtBox.sendKeys(str33);//2135
restrictedCostingTxtBox.clear();
restrictedCostingTxtBox.sendKeys(str34);//4500.00
balancingChargeOnSalesTxtBox.clear();
balancingChargeOnSalesTxtBox.sendKeys(str35);//620.00
adjustmentChangeofAccountTxtBox.clear();
adjustmentChangeofAccountTxtBox.sendKeys(str36);//15200.00
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
lossBroughtForwardProfitTxtBox.clear();
lossBroughtForwardProfitTxtBox.sendKeys(str37);//5692.00
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str38);//15000.00
adjustmentProfitTxtBox.clear();
adjustmentProfitTxtBox.sendKeys(str39);//15200.00
SaveBtn1.click();
clickIncome(driver);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str40);
rentIncomeTextBox.sendKeys(str41);//38247
fHLUKTraditionalAccountingChkBox.click();
UKExpensesTxtBox.sendKeys(str42);//26542.00
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str43);//9023.00
capitalAllowancesTxtBox.sendKeys(str44);//48014.00
lossToCarryForwardTxtBox.sendKeys(str45);//45332.00
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str46);//38400.00
propertyIncomeAllowanceChkBox.click();
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str47);//5900.00
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str48);//4216.00
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str49);//29168.00
legalManagmntAndPrfsnalFeesTxtBox.clear();
legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str50);//900
balancingTaxableChargesTxtBox.clear();
balancingTaxableChargesTxtBox.sendKeys(str51);//1521.00
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str52);//3621.00
lossSetOffAgainstTotlIncmOfTheYearTxtBox.clear();
lossSetOffAgainstTotlIncmOfTheYearTxtBox.sendKeys(str53);//2100.00
lossToCarryForwardIncludingUnusedLossesTxtBox.clear();
lossToCarryForwardIncludingUnusedLossesTxtBox.sendKeys(str54);//1784.00
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str55);//9723.00
SaveBtn1.click();
driver.navigate().refresh();
n1=Double.parseDouble(str1);//3770
n2=Double.parseDouble(str2);//3121
n3=Double.parseDouble(str3);//624.2
n4=Double.parseDouble(str4);//3205
n5=Double.parseDouble(str5);//681
n6=Double.parseDouble(str6);//950
n7=Double.parseDouble(str7);//300
n8=Double.parseDouble(str8);//768
n9=Double.parseDouble(str9);//192
n10=Double.parseDouble(str10);//960
n11=Double.parseDouble(str11);//490.50
n12=Double.parseDouble(str12);//2000
n13=Double.parseDouble(str13);//1000
n14=Double.parseDouble(str16);//27515
n15=Double.parseDouble(str17);//3728
n16=Double.parseDouble(str18);//2250
n17=Double.parseDouble(str19);//650
n18=Double.parseDouble(str20);//75
n19=Double.parseDouble(str21);//75
n20=Double.parseDouble(str22);//19091.00
n21=Double.parseDouble(str25);//175264
n22=Double.parseDouble(str26);//5460
n23=Double.parseDouble(str27);//10640
n24=Double.parseDouble(str28);//2421
n25=Double.parseDouble(str29);//25623
n26=Double.parseDouble(str30);//640
n27=Double.parseDouble(str31);//1562
n28=Double.parseDouble(str32);//561
n29=Double.parseDouble(str33);//2135
n30=Double.parseDouble(str34);//4500.00
n31=Double.parseDouble(str35);//620.00
n32=Double.parseDouble(str36);//15200.00
n33=Double.parseDouble(str37);//5692.00
n34=Double.parseDouble(str38);//15000.00
n35=Double.parseDouble(str39);//15200.00
n36=Double.parseDouble(str41);//38247
n37=Double.parseDouble(str42);//26542.00
n38=Double.parseDouble(str43);//9023.00
n39=Double.parseDouble(str44);//48014.00
n40=Double.parseDouble(str45);//45332.00
n41=Double.parseDouble(str46);//38400.00
n42=Double.parseDouble(str47);//5900.00
n43=Double.parseDouble(str48);//4216.00
n44=Double.parseDouble(str49);//29168.00
n45=Double.parseDouble(str50);//900
n46=Double.parseDouble(str51);//1521.00
n47=Double.parseDouble(str52);//3621.00
n48=Double.parseDouble(str53);//2100.00
n49=Double.parseDouble(str54);//1784.00
n50=Double.parseDouble(str55);//9723.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n14;//27,515.00	 
benefitsAndExpensesReceivedAmt=n16+n17+n18;//2,975.00
allowableExpensesAmt = n19;//75.00	 
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt) - allowableExpensesAmt;//30,415.00	 
selfEmploymentIncome = ((((n21+n22)-(n23+n24+n25+n26+n27))+(n28+n29+n31))-n30)+n32;//153,854.00	 
interestFromUKBanksBuildingAmt=n10;//960.00	 
dividendsFromUKCompaniesAmt=(Math.floor(n11));//490.00	 
UKPensionAndStateBenefitAmt=n1+n2;//6,891.00
totalincome = (totalFromAllEmployments +selfEmploymentIncome+interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt+UKPensionAndStateBenefitAmt)-n12;//190,610.00
total2 =n5 + (n33 +n13 +n48);//9,473.00	  
totlIncome =  totalincome -total2 ;//181,137.00	 
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
	
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(nonUKTaxableForeignEarnings.getText().substring(1).replace(",", ""),String.format("%.2f",(n12)));//2000
Reporter.log("Non UK Taxable Foreign Earnings is verified: "+ nonUKTaxableForeignEarnings.getText(),true);	

wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=Math.round(taxLimit1Uk+(n17*giftAidRate)+n4);//£38,518.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate; //£7,703.60
heigherRatePayPension=taxLimit2;//115,500.00
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//46,200.00
additionalRatePayPension=Math.floor(((((UKPensionAndStateBenefitAmt + selfEmploymentIncome + payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt - (n19 + n12)))-n33)- (n48 + n13 + n5)) - (basicRatePayPension + heigherRatePayPension));//25,669.00
Reporter.log("Additional Rate of Pay Pension: "+additionalRatePayPension,true);
dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;//11,551.05
additionalRateSaving=interestFromUKBanksBuildingAmt;//960
Reporter.log("Additional Rate of Saving: "+additionalRateSaving,true);
dueTax4=(additionalRateSaving*advancedRatePercentage)/100;//432.00
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
total3 = n20 * nIC1_rate;
Reporter.log("total3: "+total3,true);
total4 = max_NIC + nIC2_annual_limit;
Reporter.log("total4: "+total4,true);
total5 = total4 - (total3 + class2Amount);
Reporter.log("total5: "+total5,true);
total6 = round(total5 / class4LPLRate,2);
Reporter.log("total6: "+total6,true);
total7 = class4UPLAmt - class4LPLAmt;
Reporter.log("total7: "+total7,true);
total8 = round(total7 - total6,2);
Reporter.log("total8: "+total8,true);
total9 = roundDown2(total8*class4UPLRate);
Reporter.log("total9: "+total9,true);
total10 = (((selfEmploymentIncome-n33)-n35) - class4UPLAmt) * class4UPLRate;
Reporter.log("total10: "+total10,true);
class4Amt=roundDown2(total5 + total9 + total10);
Reporter.log("Class 4 National Insurance contributions: "+class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt+class2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue+class4_2Amt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Due is verified: " + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=(totIncomeTaxDue +class4_2Amt) - ((n3+n15) +n9);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);
}
public static double roundDown2(double d) {
    return ((long)(d * 1e2)) / 1e2;
    
}
public void funcDelMTRTest91(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 91",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 2,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
clickEmployment(driver);
delEmpInfo(driver);
delSelfEmpFull(driver);
delPensionTaxRelief(driver);
delInfoGiftAid(driver);
funcDelAdditionalInfo(driver);
delProfit(driver);
}
public void addGiftAidPayment(WebDriver driver,String str1) throws Exception 
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
wLib.explicitWait(driver, 5,linkGiftAidpayment) ;
linkGiftAidpayment.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,dateTxtBox);
dateTxtBox.clear();
dateTxtBox.sendKeys(dateStart);
giftAidPaymentsMadeInYearTxtBox.click();
wLib.explicitWait(driver, 5,giftAidPaymentsMadeInYearTxtBox);
giftAidPaymentsMadeInYearTxtBox.sendKeys(str1);
SaveBtn2.click();
driver.navigate().refresh();
}
public void addCharitableIncome(WebDriver driver, String str1, String str2, String str3) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
wLib.explicitWait(driver, 5,openCharitableForm);
openCharitableForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,dateTxtBox);
dateTxtBox.clear();
dateTxtBox.sendKeys(dateStart);
sharesOrSecuritiesGiftedToCharityTxtBox.clear();
sharesOrSecuritiesGiftedToCharityTxtBox.sendKeys(str1);
landAndBuildingsGiftedToCharityTxtBox.clear();
landAndBuildingsGiftedToCharityTxtBox.sendKeys(str2);
investmentsGiftedToNonUKCharitiesTxtBox.clear();
investmentsGiftedToNonUKCharitiesTxtBox.sendKeys(str3);
SaveBtn2.click();
driver.navigate().refresh();
}
public void otherGiftAidpayment(WebDriver driver, String str1, String str2) throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);	
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,otherGiftAidpaymentLink);
otherGiftAidpaymentLink.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,giftAidPaymentsCarriedBackToPreviousYearTxtBox);
giftAidPaymentsCarriedBackToPreviousYearTxtBox.clear();
giftAidPaymentsCarriedBackToPreviousYearTxtBox.sendKeys(str1);
giftAidPaymentsBroughtBackFromLaterYearTxtBox.clear();
giftAidPaymentsBroughtBackFromLaterYearTxtBox.sendKeys(str2);
SaveBtn2.click();
}
public void addTestCase92(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 92",true);
clickIncome(driver);
wLib.explicitWait(driver, 10,dividentLink);
dividentLink.click();
addOtherUKIncome(driver,"","","",str1,str2);
addPensionTaxReliefForm(driver,str3,"","","");
addGiftAidPayment(driver, str4);
otherGiftAidpayment(driver, str5, str6);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,giftInterestAfterTaxTxtBox);
giftInterestAfterTaxTxtBox.clear();
giftInterestAfterTaxTxtBox.sendKeys(str7);
taxTakenOff1TxtBox.clear();
taxTakenOff1TxtBox.sendKeys(str8);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str9);
subscriptionsSharesTxtBox.clear();
subscriptionsSharesTxtBox.sendKeys(str10);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
addPartnershipInfo(driver,str11,str12);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str12);*/
CashBasisChkBox.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str13);
adjustmentForChangeOfAccountingPractice.clear();
adjustmentForChangeOfAccountingPractice.sendKeys(str14);
lossesBroughtForward.clear();
lossesBroughtForward.sendKeys(str15);
otherBusinessIncomeTxtBox.clear();
otherBusinessIncomeTxtBox.sendKeys(str16);
adjustmentToClass4NICProfits.sendKeys(str17);
shareOfUnTaxedInterestEtc.sendKeys(str18);
shareOfTaxTakenOffTradingIncome.sendKeys(str19);
SaveBtn1.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver,2,finishingTaxLink);
finishingTaxLink.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,10,taxRoundedOffTxtBox);
taxRoundedOffTxtBox.clear();
taxRoundedOffTxtBox.sendKeys(str20);
SaveBtn2.click();

n1=Double.parseDouble(str1); //1265.00
n2=Double.parseDouble(str3); //1800.00
n3=Double.parseDouble(str4); //1000.00
n4=Double.parseDouble(str5); //100.00
n5=Double.parseDouble(str6); //200.00
n6=Double.parseDouble(str7); //4139.31
n7=Double.parseDouble(str8); //1034.83
n8=Double.parseDouble(str9); //5174.14
n9=Double.parseDouble(str10); //2440
n10=Double.parseDouble(str13); //64000.00
n11=Double.parseDouble(str14); //16512.00
n12=Double.parseDouble(str15); //15625.00
n13=Double.parseDouble(str16); //9620.00
n14=Double.parseDouble(str17); //16512.00
n15=Double.parseDouble(str18); //1540.00
n16=Double.parseDouble(str19); //5640.00
n17=Double.parseDouble(str20); //650
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
shareOfTotalTaxableProfits=((((n10+n11)-n12)+n13)+n12);
profitFromPartnershipsAmt= shareOfTotalTaxableProfits+n15;//91672
interestFromUKBanksBuildingAmt = Math.floor(n8);//5,174.00	 
otherIncomeAmt=n1;
totalincome = profitFromPartnershipsAmt + interestFromUKBanksBuildingAmt + otherIncomeAmt;
incomeTaxReliefAmt=n12;
totlIncome = totalincome - (incomeTaxReliefAmt + personalAllowanceRate);
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
total1=((n3-n4)+n5);
basicRatePayPension=(total1*giftAidRate)+taxLimit1Uk+n2;//37,675
dueTax1=basicRatePayPension*BR_rate;//7,535.00
Reporter.log("Basic Rate of Pay Pension: "+dueTax1,true);
heigherRatePayPension=((shareOfTotalTaxableProfits+n1)-n12)-(basicRatePayPension + personalAllowanceRate);
dueTax2=round(heigherRatePayPension*HR_rate,2);
Reporter.log("Heigher Rate of Pay Pension: "+dueTax2,true);
heigherRateSaving=(n15+interestFromUKBanksBuildingAmt)-nilRate2;//6,214.14	
dueTax3=round(heigherRateSaving*(HR_rate),2);//2,485.66
Reporter.log("Heigher Rate of Saving: "+dueTax3,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
enterpriseInvestmentSchemereliefAmt=n9*EIS_rate;
Assert.assertEquals(dataEnterpriseInvestmentSchemerelief.getText().substring(1).replace(",", ""),String.format("%.2f",(enterpriseInvestmentSchemereliefAmt)));
Reporter.log("Amount of Enterprise Investment Scheme Reliefis verifired successfully: "+dataEnterpriseInvestmentSchemerelief.getText(),true);

class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class4Amt=(((((n10+n11)-n12)+n13)- n14)-(class4LPLAmt+nIC_Band))*class4UPLRate;//232.90
Reporter.log("sharePartnershipProfit:"+(shareOfTotalTaxableProfits - n14),true);
Reporter.log("Class 4 value:"+(class4LPLAmt+nIC_Band),true);
Reporter.log("Lower rate amount of Class 4 National Insurance contributions:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
totalTaxDeductedAmt=(totIncomeTaxDue-enterpriseInvestmentSchemereliefAmt)+class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt1=totalTaxDeductedAmt - (n16+n7);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Income Tax, Class 2 and Class 4 National Insurance contributions due is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);	
taxAlreadyRefundedAmt=n17;
Assert.assertEquals(taxAlreadyRefunded.getText().substring(1).replace(",", ""),	String.format("%.2f",taxAlreadyRefundedAmt));
Reporter.log("Tax already refunded in the year is verified: "+taxAlreadyRefunded.getText(),true);
fnltax = totalTaxDeductedAmt1 +taxAlreadyRefundedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",fnltax));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase92(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 92",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delOtherUKIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
delPensionTaxRelief(driver);
delInfoGiftAid(driver);
funcDelAdditionalInfo(driver);
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver,2,finishingTaxLink);
finishingTaxLink.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,10,taxRoundedOffTxtBox);
taxRoundedOffTxtBox.clear();
SaveBtn2.click();
}
public void addTestCase93(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 93",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,totStatPension);
totStatPension.clear();
totStatPension.sendKeys(str1);
statPensionLumpSum.clear();
statPensionLumpSum.sendKeys(str2);
taxtakenoffLumpsum.clear();
taxtakenoffLumpsum.sendKeys(str3);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str4);
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str5);
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str6,str7,str8,"",str9);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,giftInterestAfterTaxTxtBox);
giftInterestAfterTaxTxtBox.clear();
giftInterestAfterTaxTxtBox.sendKeys(str10);
taxTakenOff1TxtBox.clear();
taxTakenOff1TxtBox.sendKeys(str11);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str12);
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str13);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str14);
saveAdditionalInfoBtn.click();
addPartnershipInfo(driver,str15,str16);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str16);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str17);
adjustmentBasisPeriodAccountingPeriod.clear();
adjustmentBasisPeriodAccountingPeriod.sendKeys(str18);
lossFromThisTaxYearSetOffAgainstOtherIncome.clear();
lossFromThisTaxYearSetOffAgainstOtherIncome.sendKeys(str19);
shareOfUnTaxedInterestEtc.clear();
shareOfUnTaxedInterestEtc.sendKeys(str20);
shareOfTaxTakenOffByContractors.clear();
shareOfTaxTakenOffByContractors.sendKeys(str21);
SaveBtn1.click();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
PayClass2NICsvoluntarily.click();
SaveBtn2.click(); 
driver.navigate().refresh();
n1= Double.parseDouble(str1);//9620.00
n2 = Double.parseDouble(str2);//30275.00
n3= Double.parseDouble(str3);//12110.00
n4 = Double.parseDouble(str4);//43651.00
n5 = Double.parseDouble(str5);//8730.20
n6 = Double.parseDouble(str6);//6020.00
n7 = Double.parseDouble(str7);//1000.00
n8 = Double.parseDouble(str8);//1004.00
n9 = Double.parseDouble(str10);//421.20
n10 = Double.parseDouble(str11);//105.30
n11 = Double.parseDouble(str12);//526.50
n12 = Double.parseDouble(str13);//4213.00
n13 = Double.parseDouble(str17);//-6250.00
n14 = Double.parseDouble(str18);//750.00
n15 = Double.parseDouble(str19);//5500.00
n16 = Double.parseDouble(str20);//1540.00
n17 = Double.parseDouble(str21);//469.00
n18 = Double.parseDouble(str14);//4
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromPartnershipsAmt=n16;//1540
interestFromUKBanksBuildingAmt = Math.floor(n11);//526
UKPensionAndStateBenefitAmt=n1+n4;//53271
otherIncomeAmt = n6 - n7;//5020
capitalGainsTaxdueAmt=n12;//4213
totalincome = interestFromUKBanksBuildingAmt + profitFromPartnershipsAmt+  UKPensionAndStateBenefitAmt + otherIncomeAmt+capitalGainsTaxdueAmt;//64570
incomeTaxReliefAmt=n15;//5500
totlIncome =  totalincome - (incomeTaxReliefAmt+personalAllowanceRate);//47350
savingInc=profitFromPartnershipsAmt+interestFromUKBanksBuildingAmt+capitalGainsTaxdueAmt;//6,279‬
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);

Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",otherIncomeAmt));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;//34,500.00	
Reporter.log("Basic Rate Pay of Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6900
heigherRatePayPension=totlIncome - (savingInc+basicRatePayPension);//6441
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//2576.4
heigherRateSaving=savingInc - nilRate2;//5779
Reporter.log("heigherRateSaving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//£2311.6
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;//11788
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
notionalTaxFromGainsOnLifeAmt=n12*BR_rate;
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: " + amtNotionalTaxFromGainsOnLife.getText(),true);
fullGainAmt = n12;
Reporter.log("fullGainAmt: "+fullGainAmt,true);
sliceGainAmt = Math.floor(n12/n18);
Reporter.log("sliceGainAmt: "+sliceGainAmt,true);
basicRateLiability = round((fullGainAmt / sliceGainAmt),4);
Reporter.log("basicRateLiability: "+basicRateLiability,true);
total1 =  (fullGainAmt * HR_rate)-(fullGainAmt * BR_rate);
Reporter.log("c17.31: "+total1,true);
total2= roundDown2((n9 - (sliceGainAmt * BR_rate))*basicRateLiability);
Reporter.log("c17.47: "+total2,true);
topSlicingReliefVal=round(total1 - total2,2);//.02
Reporter.log("Top Slicing Relief Value: "+topSlicingReliefVal,true);
/*Assert.assertEquals(topSlicingReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(topSlicingReliefVal)));
Reporter.log("Amount of Top Slicing Relief is verifired successfully"+topSlicingReliefAmt.getText(),true);*/
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue-notionalTaxFromGainsOnLifeAmt;
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
amtStatePensionLumpSumPayment = n2 * HR_rate;
Reporter.log("State Pension Lump Sum Payment: "+amtStatePensionLumpSumPayment,true);
Assert.assertEquals(statePensionLumpSumPaymentAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtStatePensionLumpSumPayment));
Reporter.log("State Pension lump sum payment verifired successfully"+statePensionLumpSumPaymentAmt.getText(),true);

totalTaxDeductedAmt=incomeTaxdueafterallowancesandreliefs + class2Amt + amtStatePensionLumpSumPayment;
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);

totalTaxDeductedAmt1=n3+n5+n17+n10+n8;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totalTaxDeductedAmt - totalTaxDeductedAmt1;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}
public void delTestCase93(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 93",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);	
delOtherUKIncome(driver);
funcDelAdditionalInfo(driver);	
clickIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
PayClass2NICsvoluntarily.click();
SaveBtn2.click(); 
driver.navigate().refresh();
}
public void addTestCase94(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 94",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
addOtherDivident(driver,"0.00",str4, str5);
addPensionTaxReliefForm(driver,"", str6, "", "");
addCharitableIncome(driver,"",str7,"");
addPartnershipInfo1(driver,str8,str9,str10,str11);
wLib.explicitWait(driver, 5,PartnershipFullFormLink);
PartnershipFullFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str9);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(str10);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(str11);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str12);
overlapReliefUsedThisYear.clear();
overlapReliefUsedThisYear.sendKeys(str13);
lossesBroughtForward.clear();
lossesBroughtForward.sendKeys(str14);
otherBusinessIncomeTxtBox.clear();
otherBusinessIncomeTxtBox.sendKeys(str15);
shareUKUntaxedSavingsIncomeTxtBox.clear();
shareUKUntaxedSavingsIncomeTxtBox.sendKeys(str16);
shareOfForeignUntaxedSavingsIncomeTxtBox.clear();
shareOfForeignUntaxedSavingsIncomeTxtBox.sendKeys(str17);
totalForeignTaxTakenOffTxtBox.clear();
totalForeignTaxTakenOffTxtBox.sendKeys(str18);
shareOfProfitOrLossFromUKPropertyTxtBox.clear();
shareOfProfitOrLossFromUKPropertyTxtBox.sendKeys(str19);
lossSetOffAgainstTotalIncomeTxtBox.clear();
lossSetOffAgainstTotalIncomeTxtBox.sendKeys(str20);
shareOfProfitFromUKOrEEAFurnishedHolidayLettingsTxtBox.clear();
shareOfProfitFromUKOrEEAFurnishedHolidayLettingsTxtBox.sendKeys(str21);
shareOfOtherUntaxedUKIncomeTxtBox.clear();
shareOfOtherUntaxedUKIncomeTxtBox.sendKeys(str22);
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.clear();
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.sendKeys(str23);
overlapReliefUsedThisYearTxtBox.clear();
overlapReliefUsedThisYearTxtBox.sendKeys(str24);
shareOfAnyTaxTakenOffTradingIncomeTxtBox.clear();
shareOfAnyTaxTakenOffTradingIncomeTxtBox.sendKeys(str25);
SaveBtn1.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
deficiencyReliefOnLifeInsuranceGainsTxtBox.clear();
deficiencyReliefOnLifeInsuranceGainsTxtBox.sendKeys(str26);
saveAdditionalInfoBtn.click();
n1=Double.parseDouble(str3);//2225.00
n2=Double.parseDouble(str4);//267.00
n3=Double.parseDouble(str5);//80.10
n4=Double.parseDouble(str6);//10010.00
n5=Double.parseDouble(str7);//29980.00

n6=Double.parseDouble(str12);//105602.00
n7=Double.parseDouble(str13);//5645.00
n8=Double.parseDouble(str14);//10152.00
n9=Double.parseDouble(str15);//1126.00
n10=Double.parseDouble(str16);//1265.00
n11=Double.parseDouble(str17);//245.00
n12=Double.parseDouble(str18);//24.00
n13=Double.parseDouble(str19);//-6400
n14=Double.parseDouble(str20);//6400.00
n15=Double.parseDouble(str21);//2126.00
n16=Double.parseDouble(str22);//16570.00
n17=Double.parseDouble(str23);//9225.00
n18=Double.parseDouble(str24);//1622.00
n19=Double.parseDouble(str25);//1267.00
n20=Double.parseDouble(str26);//33000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
shareOfTotalTaxableProfits= ((n6-n7)-n8)+n9;
Reporter.log("shareOfTotalTaxableProfits: "+shareOfTotalTaxableProfits,true);
profitFromPartnershipsAmt = (shareOfTotalTaxableProfits + ((n15 + (n16 - n17))-n18)) + (n8 + n17) + (n10 + (n11 - n12));
Reporter.log("profitFromPartnershipsAmt: "+profitFromPartnershipsAmt ,true);
total1 = ((((n6 -n7) - n8) + n9) + ((n15  + (n16 - n17)) - n18)); //98780
amtRetirementAnnuity = n4;
total2 = amtRetirementAnnuity + n5 + (n7 + (n14 - n7)) + personalAllowanceRate + blindAllowance;//60,630
total3 = ((total1 - total2) - taxLimit1Uk) + ((n1 + n10 + (n11-n12) ) - nilRate2);
interestFromUKBanksBuildingAmt=n1;//2225.00
dividendsFromForeignCompaniesCalc=n2;//267.00
totalincome = interestFromUKBanksBuildingAmt+dividendsFromForeignCompaniesCalc+profitFromPartnershipsAmt;
incomeTaxReliefAmt=total2 + n8 + n17;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(PaymentsIntoRetirementAnnuity.getText().substring(1).replace(",", ""),String.format("%.2f",amtRetirementAnnuity));//10010.00 
Reporter.log("Payments into a retirement annuity contract etc. is Verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(giftofInvestmentsAndPropertyAmtTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",n5));
Reporter.log("Amount of Gift of investments and Property is Verified: "+giftofInvestmentsAndPropertyAmtTaxSummary.getText(),true);
amtTaxAdjustment = (total3*HR_rate) - (total3*BR_rate); // 1372.2
Reporter.log("Total Amount of Relief :"+incomeTaxReliefAmt,true);
Assert.assertEquals(deficiencyReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxAdjustment));
Reporter.log("Amount of Deficiency Relief is Verified: "+deficiencyReliefAmt.getText(),true);

}
public void funcDelMTRTest94(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 94",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherDivident(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);
delCharitableGiving(driver);
delPensionTaxRelief(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase95(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44) throws Exception
{
Reporter.log("Exceuting MTR Test Case 95",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
clickIncome(driver);
dividentLink.click();
addOtherDivident(driver,str1,"0.00","0.00");
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
AddgiftAidPaymentFull(driver,str2, str3, "");
addPartnershipInfo1(driver,str4,str5,str6,str7);
wLib.explicitWait(driver, 5,PartnershipFullFormLink);
PartnershipFullFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str5);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(str6);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(str7);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str8);
adjustmentBasisPeriodAccountingPeriod.clear();
adjustmentForChangeOfAccountingPractice.clear();
foreignTaxclaimedAsDeduction.clear();
adjustmentToProfitsChargeableToClass4NICsTxtBox.clear();
shareUKUntaxedSavingsIncomeTxtBox.clear();
adjustmentToUKIncomeForBasisPeriodTxtBox.clear();
shareOfForeignUntaxedSavingsIncomeTxtBox.clear();
untaxedAdjustmentToIncomeForBasisPeriodTxtBox.clear();
shareOfOtherUntaxedUKIncomeTxtBox.clear();
untaxedUKIncomeAdjustmentToIncomeForBasisPeriodTxtBox.clear();
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.clear();
shareOfIncomeFromOffshoreFundsTxtBox.clear();
adjustmentToIncomeOffshoreForBasisPeriodTxtBox.clear();
totalForeignTaxTakenOffAndForeignTaxTxtBox.clear();
shareOfOtherUntaxedForeignIncomeTxtBox.clear();
adjustmentToUntaxedIncomeForBasisPeriodTxtBox.clear();
totalForeignFaxTakenOffTxtBox.clear();
untaxedResidentialFinanceCostsTxtBox.clear();
dividendIncomeTxtBox.clear();
shareOfTaxedIncomeTaxableTxtBox.clear();
dividendIncomeTotalForeignTaxTakenOffTxtBox.clear();
shareOfOtherTaxedIncomeTxtBox.clear();
dividendIncomeTotalForeignTaxCreditTakenOffTxtBox.clear();
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.clear();
shareOfCISDeductionsMadeByContractorsTxtBox.clear();
adjustmentBasisPeriodAccountingPeriod.sendKeys(str9);
adjustmentForChangeOfAccountingPractice.sendKeys(str10);
foreignTaxclaimedAsDeduction.sendKeys(str11);
adjustmentToProfitsChargeableToClass4NICsTxtBox.sendKeys(str12);
shareUKUntaxedSavingsIncomeTxtBox.sendKeys(str13);
adjustmentToUKIncomeForBasisPeriodTxtBox.sendKeys(str14);
shareOfForeignUntaxedSavingsIncomeTxtBox.sendKeys(str15);
untaxedAdjustmentToIncomeForBasisPeriodTxtBox.sendKeys(str16);
shareOfOtherUntaxedUKIncomeTxtBox.sendKeys(str17);
untaxedUKIncomeAdjustmentToIncomeForBasisPeriodTxtBox.sendKeys(str18);
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.sendKeys(str19);
shareOfIncomeFromOffshoreFundsTxtBox.sendKeys(str20);
adjustmentToIncomeOffshoreForBasisPeriodTxtBox.sendKeys(str21);
totalForeignTaxTakenOffAndForeignTaxTxtBox.sendKeys(str22);
shareOfOtherUntaxedForeignIncomeTxtBox.sendKeys(str23);
adjustmentToUntaxedIncomeForBasisPeriodTxtBox.sendKeys(str24);
totalForeignFaxTakenOffTxtBox.sendKeys(str25);
untaxedResidentialFinanceCostsTxtBox.sendKeys(str26);
untaxedUnusedResidentialFinanceCostsBroughtForwardTxtBox.sendKeys(str27);
dividendIncomeTxtBox.sendKeys(str28);
shareOfTaxedIncomeTaxableTxtBox.sendKeys(str29);
dividendIncomeTotalForeignTaxTakenOffTxtBox.sendKeys(str30);
shareOfOtherTaxedIncomeTxtBox.sendKeys(str31);
dividendIncomeTotalForeignTaxCreditTakenOffTxtBox.sendKeys(str32);
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.sendKeys(str33);
shareOfCISDeductionsMadeByContractorsTxtBox.sendKeys(str34);
SaveBtn1.click(); 
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 2,editBtn);
editBtn.click();
wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str35);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str36);
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str37);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str38);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str39);
legalManagmntAndPrfsnalFeesTxtBox.clear();
legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str40);
costsOfServicProvidedTxtBox.clear();
costsOfServicProvidedTxtBox.sendKeys(str41);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str42);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str43);
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str44);
SaveBtn1.click();
n1 = Double.parseDouble(str1);// 12750.00
n2 = Double.parseDouble(str2);// 3450.00
n3 = Double.parseDouble(str3);// 3450.00
n4 = Double.parseDouble(str8);// 222960
n5 = Double.parseDouble(str9);// -44592.00
n6 = Double.parseDouble(str10);// 11560.00
n7 = Double.parseDouble(str11);// 1263.00
n8 = Double.parseDouble(str12);// 8269.00
n9 = Double.parseDouble(str13);// 21569.00
n10 = Double.parseDouble(str14);// -4314.00
n11 = Double.parseDouble(str15);// 1620.00
n12 = Double.parseDouble(str16);// -324
n13 = Double.parseDouble(str17);// 13625.00
n14 = Double.parseDouble(str18);// -2725.00
n15 = Double.parseDouble(str19);// 1122.00
n16 = Double.parseDouble(str20);// 6791.00
n17 = Double.parseDouble(str21);// -1359.00
n18 = Double.parseDouble(str22);// 671.00
n19 = Double.parseDouble(str23);// 10640.00
n20 = Double.parseDouble(str24);// -2128.00
n21 = Double.parseDouble(str25);// 1064.00
n22 = Double.parseDouble(str26);// 400.00
n23 = Double.parseDouble(str27);// 50.00
n24 = Double.parseDouble(str28);// 1365.00
n25 = Double.parseDouble(str29);// 5462.00
n26 = Double.parseDouble(str30);// 547.00
n27 = Double.parseDouble(str31);// 216.00
n28 = Double.parseDouble(str32);// 182.00
n29 = Double.parseDouble(str33);// 11245.00
n30 = Double.parseDouble(str34);// 8670.00
n31 = Double.parseDouble(str36);// 45000.00
n32 = Double.parseDouble(str37);// 1654.00
n33 = Double.parseDouble(str38);// 4000.00
n34 = Double.parseDouble(str39);// 1500.00
n35 = Double.parseDouble(str40);// 1200.00
n36 = Double.parseDouble(str41);// 480.00
n37 = Double.parseDouble(str42);// 6890.00
n38 = Double.parseDouble(str43);// 2691.00
n39 = Double.parseDouble(str44);// 500.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromPartnershipsAmt = (n4+n5+n6+n9+n10+n11+n12+n13+n14+n16+n17+n19+n20+n24+n25+n27)-(n7+n18+n21+n26+n28);//236639
profitFromUKLandAndProperty = n31-(n32+n33+n34+n35+n36+n37);//29276.00
dividendsFromUKCompaniesAmt = n1;
totalincome = profitFromPartnershipsAmt + profitFromUKLandAndProperty + dividendsFromUKCompaniesAmt;//£278665 
incomeTaxReliefAmt=n15+n38;
totlIncome =  totalincome -incomeTaxReliefAmt;

Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Amount of Profit From UK Land And Property is Verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));//£12,750.00 Stock: £1,093.00) £13,843.00	 
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk+ Math.round(n2*giftAidRate);//38813
Reporter.log("Basic Rate Pay of Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//7762.6
heigherRatePayPension=taxLimit2;//115,500.00
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//46,200.00

total1 = (((n4+n5+n6)-n7)+((n13+n14)-n15)+((n16+n17)-n18)+((n19+n20)-n21)+n27)-n28;//210686
total2 = total1 + n15;//211808
total3 = total2 + profitFromUKLandAndProperty;//2,41,084
total4 = total3 - (n15 + n38); // 2,37,271
additionalRatePayPension = total4 - (basicRatePayPension + heigherRatePayPension);//82958
Reporter.log("Additional Rate of Pay Pension: "+additionalRatePayPension,true);
dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;//37331.1
additionalRateSaving=(n9+n10+n11+n12+(n25-n26));//23466
Reporter.log("Additional Rate of Saving: "+additionalRateSaving,true);
dueTax4=(additionalRateSaving*advancedRatePercentage)/100;//10559.7
additionalRateDividends=totlIncome - (basicRatePayPension+heigherRatePayPension+additionalRatePayPension+additionalRateSaving+dividentNillRate);//12115
dueTax5= (additionalRateDividends*dividendTaxAdditionalRate)/100;//4615.81
Reporter.log("Additional Rate of Dividends: "+additionalRateDividends,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

amtReliefForFinanceCosts = (n22 + n23 +n39)*reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//190

incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtReliefForFinanceCosts;
Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
total5=((((n4+n5+n6)-n7)-n8)-class4LPLAmt)-nIC_Band;//134,046.00	
class4Amt=total5*class4UPLRate;//2,680.92
Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully: "+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
incomeTaxDueAmt=incomeTaxdueafterallowancesandreliefs+class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);

totalTaxDeductedAmt=incomeTaxDueAmt - (n29+n30);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);	
}
public void funcDelMTRTest95(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 95",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
dividentLink.click();
delOtherDivident(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);
delInfoGiftAid(driver);
delProfit(driver);
}
public void addTestCase96(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44,String str45,String str46,String str47,String str48,String str49,String str50,String str51,String str52,String str53,String str54,String str55,String str56,String str57,String str58, String str59) throws Exception
{
Reporter.log("Exceuting MTR Test Case 96",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
clickIncome(driver);
dividentLink.click();
addOtherDivident(driver,str1,"0.00","0.00");
taxReliefsLink.click();
verifyGiftAid(driver);
addGiftAidPayment(driver, str2);
otherGiftAidpayment(driver, str3, "");
driver.navigate().refresh();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str4);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str5);
wLib.explicitWait(driver, 5,stockDividendsTxtBox);
stockDividendsTxtBox.clear();
stockDividendsTxtBox.sendKeys(str6);
nonQualifyingTxtBox.clear();
nonQualifyingTxtBox.sendKeys(str7);
qualifyingLoanTxtBox.clear();
qualifyingLoanTxtBox.sendKeys(str8);
postCessationTxtBox.clear();
postCessationTxtBox.sendKeys(str9);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
addPartnershipInfo(driver,str10, str11);
wLib.explicitWait(driver, 5,PartnershipFullFormLink);
PartnershipFullFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str11);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(str12);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(str13);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str14);
adjustmentBasisPeriodAccountingPeriod.clear();
adjustmentForChangeOfAccountingPractice.clear();
foreignTaxclaimedAsDeduction.clear();
adjustmentToProfitsChargeableToClass4NICsTxtBox.clear();
shareUKUntaxedSavingsIncomeTxtBox.clear();
adjustmentToUKIncomeForBasisPeriodTxtBox.clear();
shareOfForeignUntaxedSavingsIncomeTxtBox.clear();
untaxedAdjustmentToIncomeForBasisPeriodTxtBox.clear();
shareOfOtherUntaxedUKIncomeTxtBox.clear();
untaxedUKIncomeAdjustmentToIncomeForBasisPeriodTxtBox.clear();
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.clear();
shareOfIncomeFromOffshoreFundsTxtBox.clear();
adjustmentToIncomeOffshoreForBasisPeriodTxtBox.clear();
totalForeignTaxTakenOffAndForeignTaxTxtBox.clear();
shareOfOtherUntaxedForeignIncomeTxtBox.clear();
adjustmentToUntaxedIncomeForBasisPeriodTxtBox.clear();
totalForeignFaxTakenOffTxtBox.clear();
untaxedResidentialFinanceCostsTxtBox.clear();
dividendIncomeTxtBox.clear();
shareOfTaxedIncomeTaxableTxtBox.clear();
dividendIncomeTotalForeignTaxTakenOffTxtBox.clear();
shareOfOtherTaxedIncomeTxtBox.clear();
dividendIncomeTotalForeignTaxCreditTakenOffTxtBox.clear();
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.clear();
shareOfCISDeductionsMadeByContractorsTxtBox.clear();
adjustmentBasisPeriodAccountingPeriod.sendKeys(str15);
adjustmentForChangeOfAccountingPractice.sendKeys(str16);
foreignTaxclaimedAsDeduction.sendKeys(str17);
adjustmentToProfitsChargeableToClass4NICsTxtBox.sendKeys(str18);
shareUKUntaxedSavingsIncomeTxtBox.sendKeys(str19);
adjustmentToUKIncomeForBasisPeriodTxtBox.sendKeys(str20);
shareOfForeignUntaxedSavingsIncomeTxtBox.sendKeys(str21);
untaxedAdjustmentToIncomeForBasisPeriodTxtBox.sendKeys(str22);
shareOfOtherUntaxedUKIncomeTxtBox.sendKeys(str23);
untaxedUKIncomeAdjustmentToIncomeForBasisPeriodTxtBox.sendKeys(str24);
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.sendKeys(str25);
shareOfIncomeFromOffshoreFundsTxtBox.sendKeys(str26);
adjustmentToIncomeOffshoreForBasisPeriodTxtBox.sendKeys(str27);
totalForeignTaxTakenOffAndForeignTaxTxtBox.sendKeys(str28);
shareOfOtherUntaxedForeignIncomeTxtBox.sendKeys(str29);
adjustmentToUntaxedIncomeForBasisPeriodTxtBox.sendKeys(str30);
totalForeignFaxTakenOffTxtBox.sendKeys(str31);
untaxedResidentialFinanceCostsTxtBox.sendKeys(str32);
dividendIncomeTxtBox.sendKeys(str33);
shareOfTaxedIncomeTaxableTxtBox.sendKeys(str34);
dividendIncomeTotalForeignTaxTakenOffTxtBox.sendKeys(str35);
shareOfOtherTaxedIncomeTxtBox.sendKeys(str36);
dividendIncomeTotalForeignTaxCreditTakenOffTxtBox.sendKeys(str37);
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.sendKeys(str38);
shareOfCISDeductionsMadeByContractorsTxtBox.sendKeys(str39);
SaveBtn1.click(); 
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 2,editBtn);
editBtn.click();
wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str40);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str41);
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str42);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str43);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str44);
legalManagmntAndPrfsnalFeesTxtBox.clear();
legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str45);
costsOfServicProvidedTxtBox.clear();
costsOfServicProvidedTxtBox.sendKeys(str46);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str47);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str48);
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str49);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str50);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str51);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str52);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str53);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str54);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str55);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str56);
lossBFAndUsedInYearTxtBox.clear();
lossBFAndUsedInYearTxtBox.sendKeys(str57);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str58);
commentTxtBox.clear();
commentTxtBox.sendKeys(str59);
SaveBtn1.click();
n1 = Double.parseDouble(str1);// 12750.00
n2 = Double.parseDouble(str2);// 950.00
n3 = Double.parseDouble(str3);// 300.00
n4 = Double.parseDouble(str4);// 10000
n5 = Double.parseDouble(str6);// 817.00
n6 = Double.parseDouble(str7);// 276.00
n7 = Double.parseDouble(str8);// 228.00
n8 = Double.parseDouble(str9);// 1295.00
n9 = Double.parseDouble(str14);// 222960
n10 = Double.parseDouble(str15);// -44592.00
n11 = Double.parseDouble(str16);// 11560.00
n12 = Double.parseDouble(str17);// 1263.00
n13 = Double.parseDouble(str18);// 8269.00
n14 = Double.parseDouble(str19);// 21569.00
n15 = Double.parseDouble(str20);// -4314.00
n16 = Double.parseDouble(str21);// 1620.00
n17 = Double.parseDouble(str22);// -324
n18 = Double.parseDouble(str23);// 13625.00
n19 = Double.parseDouble(str24);// -2725.00
n20 = Double.parseDouble(str25);// 1122.00
n21 = Double.parseDouble(str26);// 6791.00
n22 = Double.parseDouble(str27);// -1359.00
n23 = Double.parseDouble(str28);// 671.00
n24 = Double.parseDouble(str29);// 10640.00
n25 = Double.parseDouble(str30);// -2128.00
n26 = Double.parseDouble(str31);// 1064.00
n27 = Double.parseDouble(str32);// 450.00
n28 = Double.parseDouble(str33);// 1365.00
n29 = Double.parseDouble(str34);// 5462.00
n30 = Double.parseDouble(str35);// 547.00
n31 = Double.parseDouble(str36);// 216.00
n32 = Double.parseDouble(str37);// 182.00
n33 = Double.parseDouble(str38);// 11245.00
n34 = Double.parseDouble(str39);// 8670.00
n35 = Double.parseDouble(str41);// 45000.00
n36 = Double.parseDouble(str42);// 1654.00
n37 = Double.parseDouble(str43);// 4000.00
n38 = Double.parseDouble(str44);// 1500.00
n39 = Double.parseDouble(str45);// 1200.00
n40 = Double.parseDouble(str46);// 480.00
n41 = Double.parseDouble(str47);// 6890.00
n42 = Double.parseDouble(str48);// 2691.00
n43 = Double.parseDouble(str49);// 500.00
n44 = Double.parseDouble(str51);// 12000.00
n45 = Double.parseDouble(str52);// 12000.00
n46 = Double.parseDouble(str55);// 27000.00
n47 = Double.parseDouble(str56);// 27000.00
n48 = Double.parseDouble(str57);// 9000.00
n49 = Double.parseDouble(str58);// 12000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromPartnershipsAmt = (n9+n10+n11+n14+n15+n16+n17+n18+n19+n21+n22+n24+n25+n28+n29+n31)-(n12+n23+n26+n30+n32);//236639
profitFromUKLandAndProperty = n35-(n36+n37+n38+n39+n40+n41);//29276.00
dividendsFromUKCompaniesAmt = n1 + n5 + n6;//13,843.00
capitalGainsTaxdueAmt = n4;
incomeTaxReliefAmt=n20+n42+n7+n8;
totalincome = profitFromPartnershipsAmt + profitFromUKLandAndProperty + dividendsFromUKCompaniesAmt+capitalGainsTaxdueAmt;//£289,758.00	 
totlIncome =  totalincome -incomeTaxReliefAmt;
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Amount of Profit From UK Land And Property is Verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));//£12,750.00 Stock: £1,093.00) £13,843.00	 
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk+ Math.round((n2-n3)*giftAidRate);//35,313.00	
Reporter.log("Basic Rate Pay of Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£7,062.60
heigherRatePayPension=taxLimit2;//115,500.00
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//46,200.00
total1 = (((n9+n10+n11)-n12)+((n18+n19)-n20)+((n21+n22)-n23)+((n24+n25)-n26)+n31)-n32;//210686
total2 = total1 + n20;//211808
total3 = total2 + profitFromUKLandAndProperty;//2,41,084
total4 = total3 - (n20 + n42); // 2,37,271
total5 = total4 - (n7+n8);
additionalRatePayPension = total5 - (basicRatePayPension + heigherRatePayPension);//84,935
Reporter.log("Additional Rate of Pay Pension: "+additionalRatePayPension,true);
dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;//38,220.75
additionalRateSaving=(n14+n15+n16+n17+(n29-n30))+capitalGainsTaxdueAmt;//33,466
Reporter.log("Additional Rate of Saving: "+additionalRateSaving,true);
dueTax4=(additionalRateSaving*advancedRatePercentage)/100;//15,059.70	
additionalRateDividends=totlIncome - (basicRatePayPension+heigherRatePayPension+additionalRatePayPension+additionalRateSaving+dividentNillRate);//13,208.00
dueTax5= (additionalRateDividends*dividendTaxAdditionalRate)/100;//5,032.25
Reporter.log("Additional Rate of Dividends: "+additionalRateDividends,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = (n27 +n43)*reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//190
Reporter.log("Amount of Relief For Finance Costs is verifired successfully: "+dataReliefForFinanceCosts.getText(),true);
notionalTaxFromGainsOnLifeAmt=n4 * capitalGainsRateUpper;//2000
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies is verifired successfully"+amtNotionalTaxFromGainsOnLife.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue-(amtReliefForFinanceCosts+notionalTaxFromGainsOnLifeAmt);
Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
total6=((((n9+n10+n11)-n12)-n13)-class4LPLAmt)-nIC_Band;//134,046.00	
class4Amt=total6*class4UPLRate;//2,680.92
Assert.assertEquals(class4NationalInsurancecontributions2_test96.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt)));
Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions2_test96.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully: "+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
totalTaxDeductedAmt=incomeTaxdueafterallowancesandreliefs+class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt1=totalTaxDeductedAmt - (n33+n34);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);	
gainsThatQualifyRorEntrepreneursAmt=(n49*entrepreneursReliefRate)/100;//£1,200.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
total6=(((n45-n49)+0+n47)-n48)-annualExemptIndividualsProposed;//£6,300
otherGainsBasicAmt=total6*BR_rate;//£1,260.00
Reporter.log("20% of Other gains: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt;//£2,460.00
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
fnltax=totalTaxDeductedAmt1+ capitalGainsTaxdueAmt;//98,177.9
Assert.assertEquals(AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}
public void funcDelMTRTest96(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 96",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
dividentLink.click();
delOtherDivident(driver);
delInfoGiftAid(driver);
funcDelAdditionalInfo(driver);
delCGI(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);
delProfit(driver);
}
public void addTestCase97(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20)throws Exception
{
Reporter.log("Exceuting MTR Test Case 97",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","", str4);
addOtherDivident(driver,"0.00",str5,str6);
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver, 5,form1OpenBtn);
form1OpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
listbox1 = new Select(studentLoanTypeLstBox);
listbox1.selectByValue("1");
amountTxtBox.clear();
amountTxtBox.sendKeys(str7);
repaidChckBox.click();
SaveBtn2.click();
clickIncome(driver);
funcAddEmployerForMTR(driver, str8, str9);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str10);
TipsPaymentsNtOnP60.clear();
TipsPaymentsNtOnP60.sendKeys(str11);
isTeacherChkBox.click();
SaveBtn1.click();
wLib.explicitWait(driver, 3,addEmploymentBtn);
addEmploymentBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 1,EmployerName);
EmployerName.sendKeys(str12);
txtEmployerPAYERef.sendKeys(str13);
SaveBtn2.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
listbox1 = new Select(employerLstBox);
listbox1.selectByVisibleText(str12);
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str14);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str15);
VochrCredcardExsMilg.clear();
VochrCredcardExsMilg.sendKeys(str16);
ProfFeesAndSubsTxtBox.clear();
ProfFeesAndSubsTxtBox.sendKeys(str17);
OtherExpensTxtBox.clear();
OtherExpensTxtBox.sendKeys(str18);
SaveBtn1.click();
addTaxUnderPaid(driver, str19, str20, "");
n1=Double.parseDouble(str3);//4598.00
n2=Double.parseDouble(str4);//2450.00
n3=Double.parseDouble(str5);//165.00
n4=Double.parseDouble(str6);//14.00
n5=Double.parseDouble(str7);//15.30
n6=Double.parseDouble(str10);//8000.00
n7=Double.parseDouble(str11);//50.00
n8=Double.parseDouble(str14);//18500.00
n9=Double.parseDouble(str15);//1450.00
n10=Double.parseDouble(str16);//600.00
n11=Double.parseDouble(str17);//150.00
n12=Double.parseDouble(str18);//85.00
n13=Double.parseDouble(str19);//221.00
n14=Double.parseDouble(str20);//378.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt =n1;
dividendsFromForeignCompaniesCalc=n3;
dividendsFromUKCompaniesAmt=Math.floor(n2);
payFromAllEmploymentsAmt=n6+n7+n8;//£26,550
benefitsAndExpensesReceivedAmt = n10;//£600 
allowableExpensesAmt =n11+n12;//£235.00	 
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
totalincome = totalFromAllEmployments+interestFromUKBanksBuildingAmt+dividendsFromForeignCompaniesCalc+dividendsFromUKCompaniesAmt;
totlIncome =  totalincome -personalAllowanceRate;
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totalFromAllEmployments-personalAllowanceRate;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate; //£780.00
basicRateSaving=n1-nilRate1;//3598.00	
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*(BR_rate);//719.60
basicRateDividends=(dividendsFromUKCompaniesAmt+dividendsFromForeignCompaniesCalc)-dividentNillRate;
Reporter.log("Basic Rate of Dividend: "+basicRateDividends,true);
dueTax3=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//466.00
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
studentLoanRate=Math.floor((totalincome - plan1Threshold) * studentLoanRate)- java.lang.Math.ceil(n5);
tax1 = totIncomeTaxDue + studentLoanRate + n13;
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDue1.getText(),true);
totalTaxDeductedAmt=n9+n14;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=tax1-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
}
public void delTestCase97(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 97",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
delOtherDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
delStudentLoanRepayment(driver);
delUnderpaidTax(driver);
}
public void addTestCase98(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44,String str45,String str46,String str47,String str48,String str49,String str50,String str51,String str52,String str53,String str54) throws Exception
{
Reporter.log("Exceuting MTR Test Case 98",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
taxReliefsLink.click();
verifyGiftAid(driver);
addGiftAidPayment(driver, str1);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
amountGainOnLifeInsuranceVoidedISAsTxtBox.clear();
amountGainOnLifeInsuranceVoidedISAsTxtBox.sendKeys(str2);
numberOfYearsSinceLastVoidedISAsTxtBox.clear();
numberOfYearsSinceLastVoidedISAsTxtBox.sendKeys(str3);
taxTakenOffOnLifeInsuranceGainsTxtBox.clear();
taxTakenOffOnLifeInsuranceGainsTxtBox.sendKeys(str4);
subscriptionsVentureTxtBox.clear();
subscriptionsVentureTxtBox.sendKeys(str5);
subscriptionsSharesTxtBox.clear();
subscriptionsSharesTxtBox.sendKeys(str6);
subscriptionsSharesUnderTxtBox.clear();
subscriptionsSharesUnderTxtBox.sendKeys(str7);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str8);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str9);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
arrangementChkBox.click();
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str10);//175264
businessIncomeOtherTxtBox.clear();
businessIncomeOtherTxtBox.sendKeys(str11);//5460
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str12);//10640
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str13);//2421
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str14);//25623
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str15);//640
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str16);//1562
disexpCarandVanTxtBox.clear();
disexpCarandVanTxtBox.sendKeys(str17);//561
disexpRentTxtBox.clear();
disexpRentTxtBox.sendKeys(str18);//2135
restrictedCostingTxtBox.clear();
restrictedCostingTxtBox.sendKeys(str19);//4500.00
balancingChargeOnSalesTxtBox.clear();
balancingChargeOnSalesTxtBox.sendKeys(str20);//620.00
adjustmentChangeofAccountTxtBox.clear();
adjustmentChangeofAccountTxtBox.sendKeys(str21);//15200.00
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
lossBroughtForwardProfitTxtBox.clear();
lossBroughtForwardProfitTxtBox.sendKeys(str22);//5692.00
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str23);//15000.00
adjustmentProfitTxtBox.clear();
adjustmentProfitTxtBox.sendKeys(str24);//15200.00
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str25);
rentIncomeTextBox.sendKeys(str26);
fHLUKTraditionalAccountingChkBox.click();
UKExpensesTxtBox.sendKeys(str27);
loanInterestTxtBox.sendKeys(str28);
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str29);
allowablePropertyExpensesTxtBox.sendKeys(str30);
privateUseAdjustmentTxtBox.sendKeys(str31);
balancingChargesTxtBox.sendKeys(str32);
capitalAllowancesTxtBox.sendKeys(str33);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str34);
propertyIncomeAllowanceChkBox.click();
taxTakenOffTxtBox.clear();
taxTakenOffTxtBox.sendKeys(str35);
revrsePremAndInducTxtBox.clear();
revrsePremAndInducTxtBox.sendKeys(str36);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str37);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str38);
costsOfServicProvidedTxtBox.clear();
costsOfServicProvidedTxtBox.sendKeys(str39);
balancingTaxableChargesTxtBox.clear();
balancingTaxableChargesTxtBox.sendKeys(str40);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str41);
tenPercntWearAndTearAllowanceTxtBox.clear();
tenPercntWearAndTearAllowanceTxtBox.sendKeys(str42);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str43);
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str44);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str45);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str46);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str47);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str48);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str49);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str50);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str51);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str52);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str53);
commentTxtBox.clear();
commentTxtBox.sendKeys(str54);
SaveBtn1.click();
n1 = Double.parseDouble(str1);//  11000
n2 = Double.parseDouble(str2);//  2000
n3 = Double.parseDouble(str4);//  400
n4 = Double.parseDouble(str5);//  23998
n5 = Double.parseDouble(str6);//  13000
n6 = Double.parseDouble(str7);//  1200
n7 = Double.parseDouble(str10);//  175264
n8 = Double.parseDouble(str11);//  5460
n9 = Double.parseDouble(str12);//  10640
n10 = Double.parseDouble(str13);//  2421
n11 = Double.parseDouble(str14);//  25623
n12 = Double.parseDouble(str15);//  640
n13 = Double.parseDouble(str16);//  1562
n14 = Double.parseDouble(str17);//  561
n15 = Double.parseDouble(str18);//  2135
n16 = Double.parseDouble(str19);//  4500
n17 = Double.parseDouble(str20);//  620
n18 = Double.parseDouble(str21);//  15200
n19 = Double.parseDouble(str22);//  5692
n20 = Double.parseDouble(str23);//  15000
n21 = Double.parseDouble(str24);//  15200
n22 = Double.parseDouble(str26);//  16254
n23 = Double.parseDouble(str27);//  2960
n24 = Double.parseDouble(str28);//  4521
n25 = Double.parseDouble(str29);//  364
n26 = Double.parseDouble(str30);//  27
n27 = Double.parseDouble(str31);//  370
n28 = Double.parseDouble(str32);//  567
n29 = Double.parseDouble(str33);//  1420
n30 = Double.parseDouble(str34);//  15611
n31 = Double.parseDouble(str35);//  1696
n32 = Double.parseDouble(str36);//  302
n33 = Double.parseDouble(str37);//  472
n34 = Double.parseDouble(str38);//  1460
n35 = Double.parseDouble(str39);//  1900
n36 = Double.parseDouble(str40);//  622
n37 = Double.parseDouble(str41);//  1540
n38 = Double.parseDouble(str42);//  770
n39 = Double.parseDouble(str43);//  7462
n40 = Double.parseDouble(str44);//  486.67
n41 = Double.parseDouble(str46);//  37000
n42 = Double.parseDouble(str47);//  12000
n43 = Double.parseDouble(str48);//  25000
n44 = Double.parseDouble(str51);//  25000
n45 = Double.parseDouble(str52);//  25000
n46 = Double.parseDouble(str53);//  20000
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome = ((((n7+n8)-(n9+n10+n11+n12+n13))+(n14+n15+n17)) - n16)+n18;//153,854.00  
FHLAdjustedProfitForTheYear=(n22 + n27 + n28) - (n23 +n24+n25+n26+n29);//7899.00
AdjustedProfitForTheYear=(n30 + n32 + n36) - (n33+n34+n35+n37+n38);//10393.00
profitFromUKLandAndProperty=FHLAdjustedProfitForTheYear+AdjustedProfitForTheYear;//18,292.00
capitalGainsTaxdueAmt=n2;//2,000.00  
totalincome = selfEmploymentIncome + profitFromUKLandAndProperty + capitalGainsTaxdueAmt;//174,146.00  
incomeTaxReliefAmt = n19+n39;//13,154.00 
totlIncome = totalincome - incomeTaxReliefAmt;//160,992.00	 
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Amount of Profit From UK Land And Property is Verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 
basicRatePayPension= taxLimit1Uk+ (n1*giftAidRate);//48,250.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£9,650.00
heigherRatePayPension=((selfEmploymentIncome + (FHLAdjustedProfitForTheYear + (n39+(AdjustedProfitForTheYear - n39)))) - incomeTaxReliefAmt)-basicRatePayPension;
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;
heigherRateSaving=n2-nilRate2;
Reporter.log("heigherRateSaving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//£600.00
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts=Math.round(n40)*reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//£97.40
Reporter.log("Amount of Relief For Finance Costs is verifired successfully: "+dataReliefForFinanceCosts.getText(),true);
ventureCapitalTrustAmt=n4 * VCT_rate;
Assert.assertEquals(dataVentureCapitalTrustrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(ventureCapitalTrustAmt)));
Reporter.log("Amount of Venture Capitale Trust Relief is verifired successfully: "+dataVentureCapitalTrustrelief.getText(),true);
enterpriseInvestmentSchemereliefAmt=n5*EIS_rate;
Assert.assertEquals(dataEnterpriseInvestmentSchemerelief.getText().substring(1).replace(",", ""),String.format("%.2f",(enterpriseInvestmentSchemereliefAmt)));
Reporter.log("Amount of Enterprise Investment Scheme Reliefis verifired successfully: "+dataEnterpriseInvestmentSchemerelief.getText(),true);
seedEnterpriseInvestmentSchemereliefAmt=n6*SEIS_rate;
Assert.assertEquals(dataSeedEnterpriseInvestmentSchemerelief.getText().substring(1).replace(",", ""),String.format("%.2f",(seedEnterpriseInvestmentSchemereliefAmt)));
Reporter.log("Amount of Seed Enterprise Investment Scheme relief verifired successfully: "+dataSeedEnterpriseInvestmentSchemerelief.getText(),true);
chargeableEventGainAmt = n3;
Assert.assertEquals(dataChargeableEventGain.getText().substring(1).replace(",", ""),String.format("%.2f",(chargeableEventGainAmt)));
Reporter.log("Amount of Chargeable Event Gain verifired successfully: "+dataChargeableEventGain.getText(),true);
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
totalProfitFromBusiness=selfEmploymentIncome - n19;//148162.00
class4Amt=((((totalProfitFromBusiness)-n21)-class4LPLAmt)-nIC_Band)*class4UPLRate;//1,732.24
Assert.assertEquals(class4NationalInsurancecontributions2_test98.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions2_test98.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
totalTaxDeductedAmt=n31;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
gainsThatQualifyRorEntrepreneursAmt = n46*capitalGainsRateLower;//£2,000.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
otherGainsBasicAmt=(((n43-n46)+n45)-annualExemptIndividualsProposed)*capitalGainsRateUpper;//£3,660.00
Reporter.log("20% of Other gains: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt;
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest98(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 98",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delInfoGiftAid(driver);
funcDelAdditionalInfo(driver);
delCGI(driver);
clickIncome(driver);
delSelfEmpFull(driver);
delProfit(driver);
}
public void addTestCase99(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 99",true);
n1=Double.parseDouble(str3); //8000
n2=Double.parseDouble(str4); //50.00
n3=Double.parseDouble(str6); //32495.00
n4=Double.parseDouble(str7); //8620.00
n5=Double.parseDouble(str8); //1200.00
n6=Double.parseDouble(str9); //800.00
n7=Double.parseDouble(str12); //6745.00
n8=Double.parseDouble(str13); //1200.00
n9=Double.parseDouble(str14); //322.00
n10=Double.parseDouble(str15); //3450.00
n11=Double.parseDouble(str16); //3000.000
n12=Double.parseDouble(str17); //5800.00
n13=Double.parseDouble(str19); //5715.00
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str3);
TipsPaymentsNtOnP60.clear();
TipsPaymentsNtOnP60.sendKeys(str4);
isTeacherChkBox.click();
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str5);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str6);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str7);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str8);
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.clear();
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.sendKeys(str9);
SaveBtn1.click();
addPartnershipInfo(driver,str10,str11);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str11);*/
CashBasisChkBox.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str12);
otherBusinessIncomeTxtBox.clear();
otherBusinessIncomeTxtBox.sendKeys(str13);
shareOfUnTaxedInterestEtc.clear();
shareOfUnTaxedInterestEtc.sendKeys(str14);
SaveBtn1.click();
taxReliefsLink.click();
AddgiftAidPaymentFull(driver,str15, "", str16);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str17);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str18);
txtBoxNoTaxAmountGainOnPolicy.clear();
txtBoxNoTaxAmountGainOnPolicy.sendKeys(str19);
txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.clear();
txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.sendKeys(str20);
wLib.explicitWait(driver, 2,saveAdditionalInfoBtn);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n1+n2;
totalDisallowableExpensesSelfEmpShort = n5+n6;
selfEmploymentIncome=n3 - (n4+totalDisallowableExpensesSelfEmpShort);
profitFromPartnershipsAmt=n7+n8+n9;
capitalGainsTaxdueAmt=n12+n13;
totalincome = payFromAllEmploymentsAmt + selfEmploymentIncome + profitFromPartnershipsAmt + capitalGainsTaxdueAmt;//49707	 
totlIncome = totalincome - personalAllowanceRate;//37857
shareOfTotalTaxableProfits = n7+n8;
Reporter.log("Share of Total Taxable Profits: "+shareOfTotalTaxableProfits,true);
total1=payFromAllEmploymentsAmt + selfEmploymentIncome + shareOfTotalTaxableProfits;//37,870
Reporter.log("total1: "+total1,true);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=total1-(personalAllowanceRate- ((n13+n9)-nilRate1));//31057
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6211.40
basicRateSaving=totlIncome-(basicRatePayPension+nilRate1);//5,800.00	
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*(BR_rate);//1,160.00
totIncomeTaxDue=dueTax1+dueTax2;//7,371.40
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
total2=taxLimit1Uk-((total1-personalAllowanceRate)+n9+(nilRate1 - n9));//7,480
Reporter.log("total2: "+total2,true);
total3=total2*BR_rate;//1,496.00
Reporter.log("total3: "+total3,true);
total4 =capitalGainsTaxdueAmt-((nilRate1 - n9)+total2);//3,357
Reporter.log("total4: "+total4,true);
total5=total4*HR_rate;//1,342.80
Reporter.log("total5: "+total5,true);
total6 = capitalGainsTaxdueAmt*BR_rate;//2,303.00
Reporter.log("total6: "+total6,true);
topSlicingReliefVal=(total3+total5)-total6;//535.80
Reporter.log("top Slicing Relief Val: "+topSlicingReliefVal,true);
Assert.assertEquals(topSlicingReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(topSlicingReliefVal)));
Reporter.log("Amount of Top Slicing Relief is verifired successfully"+topSlicingReliefAmt.getText(),true);
notionalTaxFromGainsOnLifeAmt=n12*capitalGainsRateUpper;//1,160.00
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: "+amtNotionalTaxFromGainsOnLife.getText(),true);
class4Amt1 = ((selfEmploymentIncome + shareOfTotalTaxableProfits)-class4LPLAmt)*class4LPLRate;//1,925.64
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
totalTaxDeductedAmt=(totIncomeTaxDue-(topSlicingReliefVal+notionalTaxFromGainsOnLifeAmt))+class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
taxBalance=totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);	
}
public void funcDelMTRTest99(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 99",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delSEshort(driver);
funcDelAdditionalInfo(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delGiftAid(driver);
clickIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
}
public void addTestCase100(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 100",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
Reporter.log("Interest added Successfully",true);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str5);//14473.97
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str6);//2894.79
anyOtherPensionsBenefits.clear();
anyOtherPensionsBenefits.sendKeys(str7);//1757.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str8);//4213.00
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str9);//4
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
funcAddEmployerForMTR(driver, str10, str11);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str12);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str13);
VochrCredcardExsMilg.clear();
VochrCredcardExsMilg.sendKeys(str14);
ProfFeesAndSubsTxtBox.clear();
ProfFeesAndSubsTxtBox.sendKeys(str15);
OtherExpensTxtBox.clear();
OtherExpensTxtBox.sendKeys(str16);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
n1=Double.parseDouble(str3);//22.00
n2=Double.parseDouble(str4);//2099.88
n3=Double.parseDouble(str5);//14473.97
n4=Double.parseDouble(str6);//2894.79
n5=Double.parseDouble(str7);//1757.00
n6=Double.parseDouble(str8);//4213.00
n7=Double.parseDouble(str12);//18500.00
n8=Double.parseDouble(str13);//1450.00
n9=Double.parseDouble(str14);//600.00
n10=Double.parseDouble(str15);//150.00
n11=Double.parseDouble(str16);//85.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n7;//£18500.00
benefitsAndExpensesReceivedAmt = n9;//£600 
allowableExpensesAmt =n10+n11;//£235.00	 
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate) + n1 + Math.floor(n2);//2,126
UKPensionAndStateBenefitAmt=Math.floor(n3+n5);
capitalGainsTaxdueAmt=n6;
totalincome = totalFromAllEmployments + interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + capitalGainsTaxdueAmt;
totlIncome=totalincome-personalAllowanceRate;
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totlIncome-(capitalGainsTaxdueAmt+nilRate1);
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;
basicRateSaving=capitalGainsTaxdueAmt;//4213.00
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*(BR_rate);
totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
notionalTaxFromGainsOnLifeAmt=capitalGainsTaxdueAmt*capitalGainsRateUpper;
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: "+amtNotionalTaxFromGainsOnLife.getText(),true);
tax1=totIncomeTaxDue - notionalTaxFromGainsOnLifeAmt;
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+tax1,true);
totalTaxDeductedAmt=n4+n8+(n1*taxedUKInterestRate);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=tax1-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
fnltax=totalTaxDeductedAmt1;
Assert.assertEquals(payCodeAmountTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Balance Tax for the year verified is verified:" + payCodeAmountTaxSummary.getText(),true);
}
public void funcDelMTRTest100(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 100",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
clickEmployment(driver);
delEmpInfo(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase101(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 101",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
funcAddEmployerForMTR(driver,str6,str7);
funcAddEmpIncomeWithTaxTakenOff(driver, str8,str9,"");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str10);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str11);
redundancyAndOtherCompensationPaymentsTxtBox.clear();
redundancyAndOtherCompensationPaymentsTxtBox.sendKeys(str12);
redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str13);
compensationAndLumpSumExemptionsTxtBox.clear();
compensationAndLumpSumExemptionsTxtBox.sendKeys(str14);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();

n1=Double.parseDouble(str3); //321.00
n2=Double.parseDouble(str4); //1625.00
n3=Double.parseDouble(str5); //128.00
n4=Double.parseDouble(str8); //33254.00
n5=Double.parseDouble(str9); //4280.80
n6=Double.parseDouble(str10); //10000.00
n7=Double.parseDouble(str12); //15000.00
n8=Double.parseDouble(str13); //3000.00
n9=Double.parseDouble(str14); //7560.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n4+n7;
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt=n3;
capitalGainsTaxdueAmt=n6;
totalincome = payFromAllEmploymentsAmt + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + capitalGainsTaxdueAmt;
totlIncome=totalincome-personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=n4;//33,254.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6,650.80
heigherRatePayPension=payFromAllEmploymentsAmt - (basicRatePayPension+personalAllowanceRate);//3,150.00
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//1,260.00
basicRateSaving=taxLimit1Uk - (n4+nilRate2);//746.00	
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax3=basicRateSaving*(BR_rate);//149.20
heigherRateSaving=(interestFromUKBanksBuildingAmt + capitalGainsTaxdueAmt)-(nilRate2+basicRateSaving);//10,780.00	
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax4=heigherRateSaving*(HR_rate);//4,312.00
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;//12,372.00
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
//notionalTaxFromGainsOnLifeAmt = AOI4 * capitalGainsRateUpper
notionalTaxFromGainsOnLifeAmt=n6 * BR_rate;//2000
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: "+amtNotionalTaxFromGainsOnLife.getText(),true);
totalTaxDeductedAmt=((n1*giftAidRate)-n1)+n5+n8;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totIncomeTaxDue-(notionalTaxFromGainsOnLifeAmt + totalTaxDeductedAmt);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);	

}

public void funcDelMTRTest101(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 101",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
funcDelAdditionalInfo(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
}
public void addTestCase102(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 102",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
addOtherDivident(driver,str4,"0.00","0.00");
addPensionTaxReliefForm(driver,str5,"","","");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
amountGainOnLifeInsuranceVoidedISAsTxtBox.clear();
amountGainOnLifeInsuranceVoidedISAsTxtBox.sendKeys(str6);
numberOfYearsSinceLastVoidedISAsTxtBox.clear();
numberOfYearsSinceLastVoidedISAsTxtBox.sendKeys(str7);
taxTakenOffOnLifeInsuranceGainsTxtBox.clear();
taxTakenOffOnLifeInsuranceGainsTxtBox.sendKeys(str8);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
addPartnershipInfo(driver,str9,str10);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str10);*/
CashBasisChkBox.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(str11);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(str12);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str13);
adjustmentBasisPeriodAccountingPeriod.clear();
adjustmentBasisPeriodAccountingPeriod.sendKeys(str14);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str15);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str16);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str17);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str18);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str19);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str20);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str21);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str22);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str23);
commentTxtBox.clear();
commentTxtBox.sendKeys(str24);
SaveBtn1.click();
Reporter.log("Capital Gain Income added successfully",true);
n1=Double.parseDouble(str3);//3678.00
n2=Double.parseDouble(str4);//12750.00
n3=Double.parseDouble(str5);//1800.00
n4=Double.parseDouble(str6);//2000.00
n5=Double.parseDouble(str8);//400.00
n6=Double.parseDouble(str13);//23970.00
n7=Double.parseDouble(str14);//-3750.00
n8=Double.parseDouble(str16);//37000.00
n9=Double.parseDouble(str17);//12000.00
n10=Double.parseDouble(str18);//25000.00
n11=Double.parseDouble(str21);//25000.00
n12=Double.parseDouble(str22);//25000.00
n13=Double.parseDouble(str23);//20000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();

profitFromPartnershipsAmt = n6+n7;//20220
interestFromUKBanksBuildingAmt =n1;
dividendsFromUKCompaniesAmt=n2;
capitalGainsTaxdueAmt=n4;
totalincome = profitFromPartnershipsAmt + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + capitalGainsTaxdueAmt;
totlIncome=totalincome-personalAllowanceRate;
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=totlIncome-(capitalGainsTaxdueAmt+interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt);
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;
basicRateSaving=(capitalGainsTaxdueAmt+interestFromUKBanksBuildingAmt)-nilRate1;//4213.00
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*(BR_rate);
basicRateDividends=n2-dividentNillRate;//£10,750.00
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax3=(basicRateDividends*dividendTaxBasicRate)/100;//£806.25
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

class4Amt=((profitFromPartnershipsAmt-class4LPLAmt)*class2LPLRate)/100;//1061.64
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt)));
Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
tot1=totIncomeTaxDue+class4_2Amt-n5;//32,536.38
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(tot1)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
gainsThatQualifyRorEntrepreneursAmt = n13*capitalGainsRateLower;//£2,000.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
otherGainsBasicAmt=(((n10-n13)+n12)-annualExemptIndividualsProposed)*capitalGainsRateUpper;//£3,660.00
Reporter.log("20% of Other gains: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt;
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
		
fnltax=tot1+ capitalGainsTaxdueAmt;//9890.89
Assert.assertEquals(AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest102(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 102",true);
	wLib = new WaitStatementLib();
	checkLockbutton(driver);
	clickIncome(driver);
	delInterestfromUKbanks(driver);
	Reporter.log("UnTaxed amount Deleted Successfully",true);
	delOtherDivident(driver);
	delPartnershipShort(driver);
	delPartnershipInfo(driver);
	delPensionTaxRelief(driver);
	delCGI(driver);
	funcDelAdditionalInfo(driver);
}
public void addTestCase103(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 103",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//3770.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str2);//3121.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str3);//624.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,giftInterestAfterTaxTxtBox);
giftInterestAfterTaxTxtBox.clear();
giftInterestAfterTaxTxtBox.sendKeys(str4);
taxTakenOff1TxtBox.clear();
taxTakenOff1TxtBox.sendKeys(str5);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str6);
stockDividendsTxtBox.clear();
stockDividendsTxtBox.sendKeys(str7);
communityInvestmentTxtBox.clear();
communityInvestmentTxtBox.sendKeys(str8);
qualifyingLoanTxtBox.clear();
qualifyingLoanTxtBox.sendKeys(str9);
saveAdditionalInfoBtn.click();
addPartnershipInfo(driver,str10, str11);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipFullFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str11);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str12);
totalLossToCarryForwardTxtBox.clear();
totalLossToCarryForwardTxtBox.sendKeys(str13);
SaveBtn1.click();
n1 = Double.parseDouble(str1);//3770.00
n2 = Double.parseDouble(str2);//3121.00
n3 = Double.parseDouble(str3);//624.2
n4 = Double.parseDouble(str4);//4139.31
n5 = Double.parseDouble(str5);//1034.83
n6 = Double.parseDouble(str6);//5174.14
n7 = Double.parseDouble(str7);//1200.00
n8 = Double.parseDouble(str8);//2360.00
n9 = Double.parseDouble(str9);//17995.00
n10 = Double.parseDouble(str12);//-5995
n11 = Double.parseDouble(str13);//31263.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = Math.floor(n6);
UKPensionAndStateBenefitAmt = n1+n2;//6891
dividendsFromUKCompaniesAmt = Math.floor(n7);
totalincome = dividendsFromUKCompaniesAmt + interestFromUKBanksBuildingAmt  +  UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt=n9;
totlIncome=totalincome-(incomeTaxReliefAmt + personalAllowanceRate);
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Amount of Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
communityInvestmentTaxReliefValue=n8*CITR_rate;//60.00
Assert.assertEquals(amtCommunityInvestmentTaxRelief.getText().substring(1).replace(",", ""),String.format("%.2f",(communityInvestmentTaxReliefValue)));
Reporter.log("Amount of Community Investment Tax Relief is verifired successfully"+amtCommunityInvestmentTaxRelief.getText(),true);
totalTaxDeductedAmt=n3 + n5;//1,659.03
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
Totaltax=totalTaxDeductedAmt-totIncomeTaxDue;//1,659.03
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);

}
public void funcDelMTRTest103(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 103",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 2,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase104(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 104",true);
clickIncome(driver);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str1);//4
rentIncomeTextBox.sendKeys(str2);//38247
fHLUKTraditionalAccountingChkBox.click();
UKExpensesTxtBox.sendKeys(str3);//26542.00
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str4);//9023.00
capitalAllowancesTxtBox.sendKeys(str5);//48014.00
lossToCarryForwardTxtBox.sendKeys(str6);//45332.00
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str7);//38400.00
propertyIncomeAllowanceChkBox.click();
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str8);//5900.00
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str9);//4216.00
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str10);//29168.00
legalManagmntAndPrfsnalFeesTxtBox.clear();
legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str11);//900
balancingTaxableChargesTxtBox.clear();
balancingTaxableChargesTxtBox.sendKeys(str12);//1521.00
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str13);//3621.00
lossSetOffAgainstTotlIncmOfTheYearTxtBox.clear();
lossSetOffAgainstTotlIncmOfTheYearTxtBox.sendKeys(str14);//2100.00
lossToCarryForwardIncludingUnusedLossesTxtBox.clear();
lossToCarryForwardIncludingUnusedLossesTxtBox.sendKeys(str15);//1784.00
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str16);//9723.00
SaveBtn1.click();
driver.navigate().refresh();
clickIncome(driver);
funcAddEmployerForMTR(driver, str17, str18);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str19);//9050.00
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str20);//5049.00
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str21);//3770
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str22);//3121
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str23);//624.2
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
stockDividendsTxtBox.clear();
stockDividendsTxtBox.sendKeys(str24);
communityInvestmentTxtBox.clear();
communityInvestmentTxtBox.sendKeys(str25);
qualifyingLoanTxtBox.clear();
qualifyingLoanTxtBox.sendKeys(str26);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
 wLib.explicitWait(driver, 5,linkForeignIncome);
 linkForeignIncome.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
 interestOtherincomefromoverseassavingsFormBtn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 5,countryCodeLstBox);
 listbox1=new Select(countryCodeLstBox);
 listbox1.selectByValue("60");
 wLib.explicitWait(driver,5,colBTxtBox);
 colBTxtBox.clear();
 colBTxtBox.sendKeys(str27);
 wLib.explicitWait(driver,5,colDTxtBox);
 colDTxtBox.clear();
 colDTxtBox.sendKeys(str28);
 value1=colFTxtBox.getAttribute("value");
 wLib.explicitWait(driver,5,SaveBtn2);
 SaveBtn2.click();
 wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
 dividendsFromForeignCompanies.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 2,countryCodeLstBox);
 listbox1=new Select(countryCodeLstBox);
 listbox1.selectByValue("148");
 wLib.explicitWait(driver,5,colBTxtBox);
 colBTxtBox.clear();
 colBTxtBox.sendKeys(str29);
 wLib.explicitWait(driver,5,colCTxtBox);
 colCTxtBox.clear();
 colCTxtBox.sendKeys(str30);
 colEChkBox.click();
 value2=colFTxtBox.getAttribute("value");
 wLib.explicitWait(driver,5,SaveBtn2);
 SaveBtn2.click();
 SaveBtn1.click();
 n1=Double.parseDouble(str2); //38247
 n2=Double.parseDouble(str3); //26542.00
 n3=Double.parseDouble(str4); //9023.00
 n4=Double.parseDouble(str5); //48014.00
 n5=Double.parseDouble(str6); //45332.00
 n6=Double.parseDouble(str7); //38400.00
 n7=Double.parseDouble(str8); //5900.00
 n8=Double.parseDouble(str9); //4216.00
 n9=Double.parseDouble(str10); //29168.00
 n10=Double.parseDouble(str11); //900.00
 n11=Double.parseDouble(str12); //1521.00
 n12=Double.parseDouble(str13); //3621.00
 n13=Double.parseDouble(str14); //2100.00
 n14=Double.parseDouble(str15); //1784.00
 n15=Double.parseDouble(str16); //9722.67
 n16=Double.parseDouble(str19); //9050.00
 n17=Double.parseDouble(str20); //5049.00
 n18=Double.parseDouble(str21); //3770
 n19=Double.parseDouble(str22); //3121
 n20=Double.parseDouble(str23); //624.2
 n21=Double.parseDouble(str24); //490.50
 n22=Double.parseDouble(str25); //1200.00
 n23=Double.parseDouble(str26); //2360.00
 n24=Double.parseDouble(str27); //1263.00
 n25=Double.parseDouble(str28); //252.00
 n26=Double.parseDouble(str29); //422.00
 n27=Double.parseDouble(str30); //42.00
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n16+n17;//14,099.00	 
foreignIncomeCalc=n24;//1,263.00	 
dividendsFromForeignCompaniesCalc=n26;//422.00	 
dividendsFromUKCompaniesAmt = Math.floor(n21);// ( Stock: £490.00) £490.00	 
UKPensionAndStateBenefitAmt=n18+n19;//6,891.00
totalincome=payFromAllEmploymentsAmt+foreignIncomeCalc+dividendsFromForeignCompaniesCalc+dividendsFromUKCompaniesAmt+UKPensionAndStateBenefitAmt;//£23,165.00
incomeTaxReliefAmt=n13 + n23;//£4,460.00 (PRO42+AOR5)
totlIncome=totalincome - (incomeTaxReliefAmt+personalAllowanceRate);//6,855.00	 
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totlIncome-(foreignIncomeCalc+dividendsFromForeignCompaniesCalc+dividendsFromUKCompaniesAmt);//4,680.00	
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£936.00
totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
communityInvestmentTaxReliefValue=n22*CITR_rate;//60.00
Assert.assertEquals(amtCommunityInvestmentTaxRelief.getText().substring(1).replace(",", ""),String.format("%.2f",(communityInvestmentTaxReliefValue)));
Reporter.log("Amount of Community Investment Tax Relief is verifired successfully"+amtCommunityInvestmentTaxRelief.getText(),true);
totalTaxDeductedAmt=n20+n25;//876.20
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
Totaltax=(communityInvestmentTaxReliefValue+totalTaxDeductedAmt)-(totIncomeTaxDue);//.20
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
	
}
 public void funcDelMTRTest104(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 104",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
 delProfit(driver);
 clickIncome(driver);
 wLib.explicitWait(driver, 5,linkForeignIncome);
 linkForeignIncome.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
try{
 wLib.explicitWait(driver,1,delOverseasSavings);
 if(delOverseasSavings.isDisplayed()==true)
 {
 delOverseasSavings.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver,1,cnfmdel);
 cnfmdel.click();
 }
 }catch (Exception e) {
 Reporter.log("Delete button for overseas savings is not available",true);
 }
 try{
 wLib.explicitWait(driver,1,delDividendsForeignComaniesBtn);
 if(delDividendsForeignComaniesBtn.isDisplayed()==true)
 {
 delDividendsForeignComaniesBtn.click();

 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 1,cnfmdel);
 cnfmdel.click();
 }
 }catch (Exception e) {
 Reporter.log("Delete button for Dividends from foreign companies is not available",true);
 }
 wLib.explicitWait(driver, 5,confirmDel);
 confirmDel.click();
 wLib.explicitWait(driver, 5,popup1);
 driver.switchTo().activeElement();
 yesBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 2,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
clickEmployment(driver);
delEmpInfo(driver);
funcDelAdditionalInfo(driver);
 }
 public void addTestCase107(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40)throws Exception
 {
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 107",true);
 clickIncome(driver);
 addBank(driver,str1, str1, str2);
 addUKInterestNew(driver,str3);
 funcAddUntaxedInerest(driver,str4);
 Reporter.log("Interest added Successfully",true);
 wLib.explicitWait(driver, 5,additionalInformationLink);
 additionalInformationLink.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 lumpSumsOrBenefitsFromRetirementSchemesTxtBox.clear();
 lumpSumsOrBenefitsFromRetirementSchemesTxtBox.sendKeys(str5);
 redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
 redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str6);
 retirementAndOtherExemptionsTxtBox.clear();
 retirementAndOtherExemptionsTxtBox.sendKeys(str7);
 saveAdditionalInfoBtn.click();
 driver.navigate().refresh();
 clickIncome(driver);
 funcAddEmployerForMTR(driver,str8, str9);
 addEmpIncome.click();
 wLib.explicitWait(driver, 5,payFrmEmployer);
 payFrmEmployer.sendKeys(str10);
 UkTaxTakenOffPay.sendKeys(str11);
 PrvtMedAndDntl.sendKeys(str12);
 GoodsEtcTxtBob.sendKeys(str13);
 AccommodationProvidedByEmployerTxtBox.sendKeys(str14);
 ProfFeesAndSubsTxtBox.sendKeys(str15);
 SaveBtn1.click();
 Reporter.log("Employer Income added successfully",true);
 wLib.explicitWait(driver, 3,addEmploymentBtn);
 addEmploymentBtn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 1,EmployerName);
 EmployerName.sendKeys(str16);
 txtEmployerPAYERef.sendKeys(str17);
 SaveBtn2.click();
 addEmpIncome.click();
 wLib.explicitWait(driver, 1,payFrmEmployer);
 listbox1 = new Select(employerLstBox);
 listbox1.selectByVisibleText(str16);
 payFrmEmployer.clear();
 payFrmEmployer.sendKeys(str18);
 UkTaxTakenOffPay.clear();
 UkTaxTakenOffPay.sendKeys(str19);
 VochrCredcardExsMilg.clear();
 VochrCredcardExsMilg.sendKeys(str20);
 ProfFeesAndSubsTxtBox.clear();
 ProfFeesAndSubsTxtBox.sendKeys(str21);
 OtherExpensTxtBox.clear();
 OtherExpensTxtBox.sendKeys(str22);
 SaveBtn1.click();
 Reporter.log("Employment Income Added successfully",true);
 clickIncome(driver);
 incmFrmProLink.click();
 wLib.explicitWait(driver, 5,editBtn);
 editBtn.click();
 wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
 noOfPropertiesRentedOutTxtBox.clear();
 noOfPropertiesRentedOutTxtBox.sendKeys(str23);
 rentIncomeTextBox.sendKeys(str24);//38247
 fHLUKTraditionalAccountingChkBox.click();
 UKExpensesTxtBox.sendKeys(str25);//26542.00
 legalManagementOthrProfessionalFeesTxtBox.sendKeys(str26);//9023.00
 capitalAllowancesTxtBox.sendKeys(str27);//48014.00
 lossToCarryForwardTxtBox.sendKeys(str28);//45332.00
 totalIncomePropertyLinkTxtBox.clear();
 totalIncomePropertyLinkTxtBox.sendKeys(str29);//38400.00
 propertyIncomeAllowanceChkBox.click();
 rentRatesInsuranceEtcTxtBox.clear();
 rentRatesInsuranceEtcTxtBox.sendKeys(str30);//5900.00
 repairsAndMaintenanceTxtBox.clear();
 repairsAndMaintenanceTxtBox.sendKeys(str31);//4216.00
 intrstAndOthrFinancialChrgsTxtBox.clear();
 intrstAndOthrFinancialChrgsTxtBox.sendKeys(str32);//29168.00
 legalManagmntAndPrfsnalFeesTxtBox.clear();
 legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str33);//900
 balancingTaxableChargesTxtBox.clear();
 balancingTaxableChargesTxtBox.sendKeys(str34);//1521.00
 annualInvestmentAllowanceTxtBox.clear();
 annualInvestmentAllowanceTxtBox.sendKeys(str35);//3621.00
 lossSetOffAgainstTotlIncmOfTheYearTxtBox.clear();
 lossSetOffAgainstTotlIncmOfTheYearTxtBox.sendKeys(str36);//2100.00
 lossToCarryForwardIncludingUnusedLossesTxtBox.clear();
 lossToCarryForwardIncludingUnusedLossesTxtBox.sendKeys(str37);//1784.00
 ResidentialfinancecostsTxtBox.clear();
 ResidentialfinancecostsTxtBox.sendKeys(str38);//9723.00
 SaveBtn1.click();
 addTaxUnderPaid(driver, str39, str40, "");
 driver.navigate().refresh();
 n1=Double.parseDouble(str3);//22.00
 n2=Double.parseDouble(str4);//2099.88
 n3=Double.parseDouble(str5);//2200.00
 n4=Double.parseDouble(str6);//440.00
 n5=Double.parseDouble(str7);//300.00
 n6=Double.parseDouble(str10);//101000.00
 n7=Double.parseDouble(str11);//20430.00
 n8=Double.parseDouble(str12);//500.00
 n9=Double.parseDouble(str13);//5000.00
 n10=Double.parseDouble(str14);//7500.00
 n11=Double.parseDouble(str15);//175.00
 n12=Double.parseDouble(str18);//18500.00
 n13=Double.parseDouble(str19);//1450.00
 n14=Double.parseDouble(str20);//600.00
 n15=Double.parseDouble(str21);//150.00
 n16=Double.parseDouble(str22);//85.00
 n17=Double.parseDouble(str24);//38247
 n18=Double.parseDouble(str25);//26542.00
 n19=Double.parseDouble(str26);//9023.00
 n20=Double.parseDouble(str27);//48014.00
 n21=Double.parseDouble(str28);//45332.00
 n22=Double.parseDouble(str29);//38400.00
 n23=Double.parseDouble(str30);//5900.00
 n24=Double.parseDouble(str31);//4216.00
 n25=Double.parseDouble(str32);//29168.00
 n26=Double.parseDouble(str33);//900.00
 n27=Double.parseDouble(str34);//1521.00
 n28=Double.parseDouble(str35);//3621.00
 n29=Double.parseDouble(str36);//2100.00
 n30=Double.parseDouble(str37);//1784.00
 n31=Double.parseDouble(str38);//9722.67
 n32=Double.parseDouble(str39);//2999.99
 n33=Double.parseDouble(str40);//2999.99
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 payFromAllEmploymentsAmt=n6 + n12 + n3;//121700
 benefitsAndExpensesReceivedAmt=n8+n9+n10+n14;//£13600
 allowableExpensesAmt =n11+n15+n16;//£410‬
 totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
 interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+Math.floor(n2);//2126
 totalincome = totalFromAllEmployments + interestFromUKBanksBuildingAmt;
 incomeTaxReliefAmt=n29;
 totlIncome = totalincome - incomeTaxReliefAmt;
 Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
 Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
 Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
 Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
 Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
 Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
 Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
 Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
 Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
 Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
 Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
 Reporter.log("total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 basicRatePayPension =taxLimit1Uk;
 Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
 dueTax1=basicRatePayPension*BR_rate;		 
 heigherRatePayPension= totalFromAllEmployments-(taxLimit1Uk+incomeTaxReliefAmt);
 Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);	
 dueTax2=heigherRatePayPension*HR_rate;
 heigherRateSaving=interestFromUKBanksBuildingAmt-nilRate2;
 dueTax3=heigherRateSaving*HR_rate;
 Reporter.log("Amount of Heigher Rate of Saving: "+heigherRateSaving,true);
 totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 underpaidTaxEarlierYearAmt = n32;
 Assert.assertEquals(amtUnderpaidTaxForEarlierYears.getText().substring(1).replace(",", ""),String.format("%.2f",underpaidTaxEarlierYearAmt));//2999.99
 Reporter.log("Underpaid tax for earlier years is verifired successfully"+ amtUnderpaidTaxForEarlierYears.getText(),true);
 amountInclusingAnderpaidTaxAmt = totIncomeTaxDue + underpaidTaxEarlierYearAmt;
 Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",amountInclusingAnderpaidTaxAmt));//£49,866.39
 Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDue1.getText(),true);
 underpaidTaxCurrentYearAmt =n33;
 totalTaxDeductedAmt=n4 + n7 + n13 + underpaidTaxCurrentYearAmt +n1*taxedUKInterestRate;//25,325.49
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
 totalTaxDeductedAmt1=amountInclusingAnderpaidTaxAmt-totalTaxDeductedAmt;
 Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
 Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
 taxBalance=totalTaxDeductedAmt1;
 Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
 Reporter.log("Balance for this year: "+totalIncomeTaxDue.getText(),true);
 }
public void funcDelMTRTest107(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 107",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delProfit(driver);
funcDelAdditionalInfo(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
clickEmployment(driver);
delEmpInfo(driver);
delUnderpaidTax(driver);
}
public void addTestCase109(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 109",true);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,shareSchemesTaxableAmountTxtBox);
shareSchemesTaxableAmountTxtBox.clear();
shareSchemesTaxableAmountTxtBox.sendKeys(str1);
saveAdditionalInfoBtn.click();
Reporter.log("Share Scheme taxable amount added successfully",true);
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str2);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str3);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str4);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str5);
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.clear();
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.sendKeys(str6);
SaveBtn1.click();
n1=Double.parseDouble(str1);//3020.00
n2=Double.parseDouble(str3); //32495.00
n3=Double.parseDouble(str4); //8620.00
n4=Double.parseDouble(str5); //1200.00
n5=Double.parseDouble(str6); //800.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
totalDisallowableExpensesSelfEmpShort = n4 + n5;
selfEmploymentIncome = n2 - (n3 + totalDisallowableExpensesSelfEmpShort);
shareSchemesAmt = n1;
totalincome = selfEmploymentIncome + shareSchemesAmt;
totlIncome = totalincome - personalAllowanceRate;
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",selfEmploymentIncome));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);

Assert.assertEquals(ShareschemesTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(shareSchemesAmt)));
Reporter.log("Share schemes amount on Tax Summary page is verified: "+ShareschemesTaxSummary.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = totlIncome ;//31057
Reporter.log("Basic Rate of Pay Pension: "+ basicRatePayPension,true);
dueTax1 = basicRatePayPension * BR_rate;//£6211.40

totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class4Amt1 = (selfEmploymentIncome-class4LPLAmt)*class4LPLRate;//1210.59
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);

taxBalance = totIncomeTaxDue + class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);

Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);	
}
public void delTestCase109(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 109",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
delSEshort(driver);
funcDelAdditionalInfo(driver);
}  

public void addTestCase110(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15, String str16, String str17,String str18, String str19, String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33)throws Exception
{
Reporter.log("Exceuting MTR Test Case 110",true);
wLib = new WaitStatementLib();
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis = new CISPage(driver);
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);
anyOtherPensionsBenefits.clear();
anyOtherPensionsBenefits.sendKeys(str2);//1080.00
stateBenefitsSaveBtn.click();

wLib.explicitWait(driver, 10,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver,1,delButton);
delButton.click();
wLib.explicitWait(driver,1,confDel);
confDel.click();
}
catch (Exception e)
{
   Reporter.log(e.getMessage(),true);
}*/
wLib.explicitWait(driver, 3,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 3,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str3);
StartDatetxtbox.clear();
StartDatetxtbox.sendKeys(dateStart);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str4);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str5);
carVanAndTravelExpensesTxtBox.clear();
carVanAndTravelExpensesTxtBox.sendKeys(str6);
wagesSalariesAndStaffCostsTxtBox.clear();
wagesSalariesAndStaffCostsTxtBox.sendKeys(str7);
rentAndOtherPropertyCostsTxtBox.clear();
rentAndOtherPropertyCostsTxtBox.sendKeys(str8);
repairAndRenewalCostsTxtBox.clear();
repairAndRenewalCostsTxtBox.sendKeys(str9);
accountancyAndLegalFeesTxtBox.clear();
accountancyAndLegalFeesTxtBox.sendKeys(str10);
interestAndFinanceChargesTxtBox.clear();
interestAndFinanceChargesTxtBox.sendKeys(str11);
phoneAndOtherOfficeCostsTxtBox.clear();
phoneAndOtherOfficeCostsTxtBox.sendKeys(str12);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str13);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str14);
lossOfYearSetAgainstOtherIncomeTxtBox.clear();
lossOfYearSetAgainstOtherIncomeTxtBox.sendKeys(str15);
SaveBtn1.click();

wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str16);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str17);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str18);//73250.00
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str19);//23569.00
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str20);//22000.00
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str21);//16200.00
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str22);//15600.00
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str23);//659.00
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str24);//223.00
annualinvestmentTxtBox.clear();
annualinvestmentTxtBox.sendKeys(str25);//5000.00
capitalAllowancesemissionsTxtBox.clear();
capitalAllowancesemissionsTxtBox.sendKeys(str26);//2750.00
goodAndServicesTxtBox.clear();
goodAndServicesTxtBox.sendKeys(str27);//361.00
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
lossandAgainstOtherIncomeTxtBox.clear();
lossandAgainstOtherIncomeTxtBox.sendKeys(str28);//12390.00
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str29);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str30);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str31);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str32);
commentTxtBox.clear();
commentTxtBox.sendKeys(str33);
SaveBtn1.click();

n1 = Double.parseDouble(str1); //4867.00
n2 = Double.parseDouble(str2); //1080.00
n3 = Double.parseDouble(str4); //27643
n4 = Double.parseDouble(str5); //1200
n5 = Double.parseDouble(str6); //5200
n6 = Double.parseDouble(str7); //3900
n7 = Double.parseDouble(str8); //7320
n8 = Double.parseDouble(str9); //1109
n9 = Double.parseDouble(str10); //4200
n10 = Double.parseDouble(str11); //13642
n11 = Double.parseDouble(str12); //1602
n12 = Double.parseDouble(str13); //1260
n13 = Double.parseDouble(str14); //1340
n14 = Double.parseDouble(str15); //10450
n15 = Double.parseDouble(str18); //73250
n16 = Double.parseDouble(str19); //23569
n17 = Double.parseDouble(str20); //22000
n18 = Double.parseDouble(str21); //16200
n19 = Double.parseDouble(str22); //15600
n20 = Double.parseDouble(str23); //659
n21 = Double.parseDouble(str24); //223
n22 = Double.parseDouble(str25); //5000
n23 = Double.parseDouble(str26); //2750
n24 = Double.parseDouble(str27); //361
n25 = Double.parseDouble(str28); //12390
n26 = Double.parseDouble(str30); //99000.00
n27 = Double.parseDouble(str31); //9000.00
n28 = Double.parseDouble(str32); //90000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
UKPensionAndStateBenefitAmt=n1 + n2;
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
totalincome=UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt=n14 + n25;//(SSE33) + (FSE78)
totlIncome = totalincome - (incomeTaxReliefAmt+personalAllowanceRate);
if(totlIncome <=0)
{

totlIncome = 0;
}
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

otherGainsBasicAmt=taxLimit1Uk*capitalGainsRateLower;
Reporter.log("Other gains basic Amount: "+otherGainsBasicAmt,true);
otherGainsAmt = (n28-(taxLimit1Uk+annualExemptIndividualsProposed))*capitalGainsRateUpper;
Reporter.log("Other gains Amount: "+otherGainsAmt,true);
capitalGainsTaxdueAmt=otherGainsBasicAmt + otherGainsAmt;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=totIncomeTaxDue+ capitalGainsTaxdueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));//£12210
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest110(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 110",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delSEshort(driver);
delSelfEmpFull(driver);
delCGI(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
}
public void addTestCase114(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 114",true);
clickIncome(driver);
addBank(driver,str1,str1,str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str6);
saveAdditionalInfoBtn.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,notResidentInUKChkBox);
residentInUKForPreviousYearChkBox.click();
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str7);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str8);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str9);
listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue(str10);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str11);
domiciledOutsideTheUKForTaxChkBox.click();
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str12);
remittancebasisclaimChkBox.click();
uKResidentFor12OutOf14YearsChkBox.click();
nominatedIncomeAmountTxtBox.clear();
nominatedIncomeAmountTxtBox.sendKeys(str13);
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();

n1 = Double.parseDouble(str3);//321.00
n2 = Double.parseDouble(str4);//1625.00
n3 = Double.parseDouble(str5);//128.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt = n3;
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt;
totlIncome =  totalincome;


Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
		
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);


basicRateSaving = interestFromUKBanksBuildingAmt;
Reporter.log("Amount of Basic Rate of Saving: "+basicRateSaving,true);
if (basicRateSaving < SR_band)
{
dueTax1 = 0;
}
basicRateDividends = dividendsFromUKCompaniesAmt;
Reporter.log("Basic Rate of Dividends: "+heigherRateDividends,true);
if (basicRateDividends < dividentNillRate)
{
dueTax2 = 0;
}
totIncomeTaxDue=dueTax1 + dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
remittanceBasisCharge_nonDomiciles = res_non_dom_High_ch;
Assert.assertEquals(amtRemittanceBasisChargeNonBomiciles.getText().substring(1).replace(",", ""),String.format("%.2f",remittanceBasisCharge_nonDomiciles));
Reporter.log("Amount of Remittance Basis Charge for Non Bomiciles is Verified: "+amtRemittanceBasisChargeNonBomiciles.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue + remittanceBasisCharge_nonDomiciles;
totalTaxDeductedAmt = n1 * taxedUKInterestRate;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = incomeTaxDueAmt - 	totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}	
public void funcDelMTRTest114(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case114",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
funcDelAdditionalInfo(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
}
public void addTestCase115(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 115",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click(); 
addOtherDivident(driver,str1,"0.00","0.00"); 
funcAddEmployerForMTR(driver,str2, str3);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.sendKeys(str4);
UkTaxTakenOffPay.sendKeys(str5);
PrvtMedAndDntl.sendKeys(str6);
GoodsEtcTxtBob.sendKeys(str7);
AccommodationProvidedByEmployerTxtBox.sendKeys(str8);
ProfFeesAndSubsTxtBox.sendKeys(str9);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("230");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str11);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str12);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("230");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str13);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str14);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();
						
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("31");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str15);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str16);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("108");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str17);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str18);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();								
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str10);						
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,hadAHomeOverseasChkBox);
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str19);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str20);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str21);
listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue(str22);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str23);
listbox1=new Select(countryOfResidenceInPreviousYear1LstBox);
listbox1.selectByValue(str24);
amountOfDTAincomeForWhichPartialReliefIsClaimedTxtBox.clear();
amountOfDTAincomeForWhichPartialReliefIsClaimedTxtBox.sendKeys(str25);
dTAReliefClaimOtherProvisionsTxtBox.clear();
dTAReliefClaimOtherProvisionsTxtBox.sendKeys(str26);
domiciledOutsideTheUKForTaxChkBox.click();
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str27);
remittancebasisclaimChkBox.click();
unremitedIncomeAndGainsUnremittedIncomeAndGainsUnderChkBox.click();
uKResidentFor7OutOf9YearsUKResidentChkBox.click();
nominatedIncomeAmountTxtBox.clear();
nominatedIncomeAmountTxtBox.sendKeys(str28);
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();

n1 = Double.parseDouble(str1);//12750.00
n2 = Double.parseDouble(str4);//101000.00
n3 = Double.parseDouble(str5);//20430.00
n4 = Double.parseDouble(str6);//500.00
n5 = Double.parseDouble(str7);//5000.00
n6 = Double.parseDouble(str8);//7500.00
n7 = Double.parseDouble(str9);//175.00
n8 = Double.parseDouble(str10);//200.00
n9 = Double.parseDouble(str11);//500.90
n10 = Double.parseDouble(str12);//75.00
n11 = Double.parseDouble(str13);//500.00
n12 = Double.parseDouble(str14);//75.00
n13 = Double.parseDouble(str15);//659.00
n14 = Double.parseDouble(str16);//98.85
n15 = Double.parseDouble(str17);//500.00
n16 = Double.parseDouble(str18);//50.00
n17 = Double.parseDouble(str19);//365
n18 = Double.parseDouble(str21);//340
n19 = Double.parseDouble(str25);//2400
n20 = Double.parseDouble(str26);//120

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n2;//101000.00
benefitsAndExpensesReceivedAmt=n4+n5+n6;
allowableExpensesAmt =n7;
totalFromAllEmployments = (payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
foreignIncomeCalc = n9 + n11 + n13 + n15;//2159	
dividendsFromUKCompaniesAmt = n1;
totalincome = totalFromAllEmployments + dividendsFromUKCompaniesAmt + foreignIncomeCalc;
totlIncome =  totalincome;

Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",payFromAllEmploymentsAmt));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",totalFromAllEmployments));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);
		
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=taxLimit1Uk;//34500
dueTax1 = basicRatePayPension*BR_rate;
Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);

heigherRatePayPension= (totalFromAllEmployments + foreignIncomeCalc) - basicRatePayPension;//81484
dueTax2=heigherRatePayPension * HR_rate;//32593.60
Reporter.log("Heigher Rate of  Pay Pension: "+dueTax2,true);	
heigherRateDividends= dividendsFromUKCompaniesAmt - dividentNillRate;//10750
dueTax3 = round((heigherRateDividends*dividendTaxHigherRate)/100,2);//3498.75
Reporter.log("Heigher Rate of Dividends: " + dueTax3,true);
totIncomeTaxDue=dueTax1 + dueTax2 +dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
incomeTaxReliefAmt = n8;
Assert.assertEquals(amtForeignTaxCreditRelief.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
Reporter.log("Amount of Foreign Tax Credit Relief is verifired successfully: "+amtForeignTaxCreditRelief.getText(),true);


totalTaxDeductedAmt =n3 + n20 ;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totIncomeTaxDue - 	(incomeTaxReliefAmt + totalTaxDeductedAmt);
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}	
public void funcDelMTRTest115(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case115",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
try{
wLib.explicitWait(driver,1,delOverseasSavings);
if(delOverseasSavings.isDisplayed()==true)
{
do {
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}while(delOverseasSavings.isDisplayed()==true);
}
}catch (Exception e) {
Reporter.log("Delete button for overseas savings is not available",true);
}
wLib.explicitWait(driver, 2,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 2,dividentLink);
dividentLink.click();
delOtherDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
}
public void addTestCase116(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 116",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
funcAddEmployerForMTR(driver, str5, str6);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str7);
TipsPaymentsNtOnP60.clear();
TipsPaymentsNtOnP60.sendKeys(str8);
isTeacherChkBox.click();
SaveBtn1.click();
addPartnershipInfo(driver,str9, str10);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str10);*/
CashBasisChkBox.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str11);
otherBusinessIncomeTxtBox.clear();
otherBusinessIncomeTxtBox.sendKeys(str12);
shareOfUnTaxedInterestEtc.clear();
shareOfUnTaxedInterestEtc.sendKeys(str13);
SaveBtn1.click();
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver, 5,form1OpenBtn);
form1OpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
listbox1 = new Select(studentLoanTypeLstBox);
listbox1.selectByValue("1");
SaveBtn2.click();
n1=Double.parseDouble(str3);//22.00
n2=Double.parseDouble(str4);//2099.88
n3=Double.parseDouble(str7); //8000
n4=Double.parseDouble(str8); //50.00
n5=Double.parseDouble(str11); //6745.00
n6=Double.parseDouble(str12); //1200.00
n7=Double.parseDouble(str13); //322.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate) + n1 + Math.floor(n2);//2,126

payFromAllEmploymentsAmt=n3+n4;
profitFromPartnershipsAmt=n5+n6+n7;
totalincome = interestFromUKBanksBuildingAmt +payFromAllEmploymentsAmt + profitFromPartnershipsAmt;//18443	 
totlIncome = totalincome - personalAllowanceRate;//6593
shareOfTotalTaxableProfits = n5+n6;
Reporter.log("Share of Total Taxable Profits: "+shareOfTotalTaxableProfits,true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=(shareOfTotalTaxableProfits + payFromAllEmploymentsAmt)-personalAllowanceRate;//4145
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£829
basicRateSaving=totlIncome -(((SR_band-basicRatePayPension)+nilRate1)+basicRatePayPension);//593	
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*BR_rate;//118.6
totIncomeTaxDue=dueTax1+dueTax2;//7,371.40
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
studentLoanAmt=Math.floor((totalincome -plan1Threshold)*studentLoanRate); //10.00
Assert.assertEquals(studentLoanAmountTaxWindow.getText().substring(1).replace(",", ""),String.format("%.2f",(studentLoanAmt)));
Reporter.log("Student Loan repayments amount is verified: "+studentLoanAmountTaxWindow.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
totalTaxDeductedAmt= totIncomeTaxDue +class2Amt + studentLoanAmt;
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt1=n1*taxedUKInterestRate;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totalTaxDeductedAmt - totalTaxDeductedAmt1;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest116(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 116",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
clickEmployment(driver);
delEmpInfo(driver);
clickIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
delStudentLoanRepayment(driver);
}
public void addTestCase117(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 117",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//8206.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str2);//326501.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str3);//6530.20
stateBenefitsSaveBtn.click();

wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver, 5,form1OpenBtn);
form1OpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
listbox1 = new Select(studentLoanTypeLstBox);
listbox1.selectByValue("1");
amountTxtBox.clear();
amountTxtBox.sendKeys(str4);
SaveBtn2.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
shareSchemesTaxableAmountTxtBox.clear();
shareSchemesTaxableAmountTxtBox.sendKeys(str5);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
funcAddEmployerForMTR(driver, str6, str7);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str8);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str9);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str10);
FuelForCompanyCarsAndVans.clear();
FuelForCompanyCarsAndVans.sendKeys(str11);
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str12);
FxdExpnsDeductTxtBox.clear();
FxdExpnsDeductTxtBox.sendKeys(str13);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
n1=Double.parseDouble(str1); //8206.00
n2=Double.parseDouble(str2); //32650.00
n3=Double.parseDouble(str3); //6530.00
n4=Double.parseDouble(str4); //826.65
n5=Double.parseDouble(str5); //2275.00
n6=Double.parseDouble(str8); //27515.00
n7=Double.parseDouble(str9); //3728.00
n8=Double.parseDouble(str10); //2250.00
n9=Double.parseDouble(str11); //650.00
n10=Double.parseDouble(str12); //75.00
n11=Double.parseDouble(str13); //75.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n6;
benefitsAndExpensesReceivedAmt=n8+n9+n10;
allowableExpensesAmt = n11;
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
UKPensionAndStateBenefitAmt = n1+n2;//6891
shareSchemesAmt=n5;
totalincome=totalFromAllEmployments + shareSchemesAmt + UKPensionAndStateBenefitAmt;
totlIncome=totalincome- personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(ShareschemesTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(shareSchemesAmt)));
Reporter.log("Share schemes amount on Tax Summary page is verified: "+ShareschemesTaxSummary.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6900
heigherRatePayPension=totlIncome - basicRatePayPension;
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;
incomeTaxDueAmt=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxDueAmt)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
total1= (payFromAllEmploymentsAmt-allowableExpensesAmt)+shareSchemesAmt+UKPensionAndStateBenefitAmt;
studentLoanAmt=Math.floor((total1 - plan1Threshold) * studentLoanRate)- java.lang.Math.ceil(n4);
Assert.assertEquals(studentLoanAmountTaxWindow.getText().substring(1).replace(",", ""),String.format("%.2f",(studentLoanAmt)));
Reporter.log("Student Loan repayments amount is verified: "+studentLoanAmountTaxWindow.getText(),true);
tax1 = incomeTaxDueAmt + studentLoanAmt;
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDue1.getText(),true);
totalTaxDeductedAmt=n3+n7;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=tax1-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
}
public void funcDelMTRTest117(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 117",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 2,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
clickEmployment(driver);
delEmpInfo(driver);
funcDelAdditionalInfo(driver);
delStudentLoanRepayment(driver);
}
public void addTestCase118(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18)throws Exception
{
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 118",true);
 clickIncome(driver);
 addBank(driver,str1, str1, str2);
 funcAddUntaxedInerest(driver,str3);
 dividentUKCompanies(driver,"Company1","",str4);
 wLib.explicitWait(driver, 5,frm1Btn);
 frm1Btn.click();
 cis.switchwindowNew(driver);
 totStatPension.clear();
 totStatPension.sendKeys(str5);
 statPensionLumpSum.clear();
 statPensionLumpSum.sendKeys(str6);
 taxtakenoffLumpsum.clear();
 taxtakenoffLumpsum.sendKeys(str7);
 stateBenefitsSaveBtn.click();
 Reporter.log("State benefit added successfully",true);
 taxReliefsLink.click();
 verifyGiftAid(driver);
 addGiftAidPayment(driver, str8);
 wLib.explicitWait(driver, 5,additionalInformationLink);
 additionalInformationLink.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 wLib.explicitWait(driver, 5,spousesNameTxtBox);
 spousesNameTxtBox.clear();
 spousesNameTxtBox.sendKeys(str9);
 spousesDateOfBirthTxtBox.clear();
 spousesDateOfBirthTxtBox.sendKeys(str10);
 saveAdditionalInfoBtn.click();
 clickIncome(driver);
 wLib.explicitWait(driver, 5,incmFrmProLink);
 incmFrmProLink.click();
 wLib.explicitWait(driver, 5,editBtn);
 editBtn.click();
 wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
 noOfPropertiesRentedOutTxtBox.clear();
 noOfPropertiesRentedOutTxtBox.sendKeys(str11);
 totalIncomePropertyLinkTxtBox.clear();
 totalIncomePropertyLinkTxtBox.sendKeys(str12);
 propertyIncomeAllowanceChkBox.click();
 rentRatesInsuranceEtcTxtBox.clear();
 rentRatesInsuranceEtcTxtBox.sendKeys(str13);
 repairsAndMaintenanceTxtBox.clear();
 repairsAndMaintenanceTxtBox.sendKeys(str14);
 intrstAndOthrFinancialChrgsTxtBox.clear();
 intrstAndOthrFinancialChrgsTxtBox.sendKeys(str15);
 legalManagmntAndPrfsnalFeesTxtBox.clear();
 legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str16);
 costsOfServicProvidedTxtBox.clear();
 costsOfServicProvidedTxtBox.sendKeys(str17);
 ResidentialfinancecostsTxtBox.clear();
 ResidentialfinancecostsTxtBox.sendKeys(str18);	
 SaveBtn1.click();
 n1 = Double.parseDouble(str3);//5999.00
  n2 = Double.parseDouble(str4);//1602.00
  n3 = Double.parseDouble(str5);//1600.00
  n4 = Double.parseDouble(str6);//16534.00
  n5 = Double.parseDouble(str7);//3520.00
  n6 = Double.parseDouble(str8);//21.00
  n7 = Double.parseDouble(str12);//5940.00
  n8 = Double.parseDouble(str13);//211.00
  n9 = Double.parseDouble(str14);//208.00
  n10 = Double.parseDouble(str15);//1583.00
  n11 = Double.parseDouble(str16);//917.00
  n12 = Double.parseDouble(str17);//372.00
  n13 = Double.parseDouble(str18);//450.00
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 profitFromUKLandAndProperty = n7-(n8+n9+n10+n11+n12);//2,649.00
 interestFromUKBanksBuildingAmt = n1;//5999.00
 dividendsFromUKCompaniesAmt = n2;//1602.00
 UKPensionAndStateBenefitAmt = n3;//1600.00
 totalincome = profitFromUKLandAndProperty + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;//11850
 totlIncome = totalincome - personalAllowanceRate;//0
 Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
 Reporter.log("Amount of Profit From UK Land And Property is Verified: "+amountProfitFromUKLandAndProperty.getText(),true);
 Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
 Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
 Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));// £1510.00 
 Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
 Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
 Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 totIncomeTaxDue=totlIncome;
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 calculateMAT=maxMAT*MATrate;//869.50
 Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
 Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
 amtTaxdueonGiftAidpayments=java.lang.Math.ceil(n6*giftAidRate);//27.00
 Assert.assertEquals(calculationGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxdueonGiftAidpayments));
 Reporter.log("Calculation Of Gift Aid Payments verified: "+calculationGiftAidpayments.getText(),true);
 taxdueonGiftAidpaymentsValue=amtTaxdueonGiftAidpayments*reliefFinancerate;//5.40
 Assert.assertEquals(taxDueGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
 Reporter.log("Tax Due on Gift Aid Payments verified: "+taxDueGiftAidpayments.getText(),true);
 Assert.assertEquals(incomeTaxDueAfterGifTAid.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
 Reporter.log("Total Income Tax Due After GifTAid verified: "+incomeTaxDueAfterGifTAid.getText(),true);
 totalTaxDeductedAmt=n5;
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
 			
 taxBalance=totalTaxDeductedAmt-taxdueonGiftAidpaymentsValue;
 Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
 Reporter.log("Income Tax overpaid is verified: "+amtIncomeTaxoverpaid.getText(),true);
}
public void funcDelMTRTest118(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 118",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delProfit(driver);
funcDelAdditionalInfo(driver);
delGiftAid(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
}
 public void addTestCase119(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15)throws Exception
 {
 Reporter.log("Exceuting MTR Test Case 119",true);
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 clickIncome(driver);
 addBank(driver, str1, str1, str2);
 funcAddUntaxedInerest(driver,str3);
 dividentUKCompanies(driver,"Company1","", str4);
 addOtherDivident(driver,"0.00",str5,str6);
 wLib.explicitWait(driver, 5,selfEmploymentLink);
 selfEmploymentLink.click();
 wLib.explicitWait(driver, 5,formOpenBtn);
 formOpenBtn.click();
 wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
 descriptionOfBusinessTxtBox.clear();
 descriptionOfBusinessTxtBox.sendKeys(str7);
 tradingEnddateTxtBox.clear();
 tradingEnddateTxtBox.sendKeys(str8);
 businessAccountsEnddateTxtBox.clear();
 businessAccountsEnddateTxtBox.sendKeys(dateEnd);
 businessIncomeTxtBox.clear();
 businessIncomeTxtBox.sendKeys(str9);
 costsOfGoodsBoughtForResaleTxtBox.clear();
 costsOfGoodsBoughtForResaleTxtBox.sendKeys(str10);
 otherCapitalAllowancesTxtBox.clear();
 otherCapitalAllowancesTxtBox.sendKeys(str11);
 totalBalancingChargesTxtBox.clear();
 totalBalancingChargesTxtBox.sendKeys(str12);
 ownGoodsAndServicesTxtBox.clear();
 ownGoodsAndServicesTxtBox.sendKeys(str13);
 anyOtherBusinessIncomeTxtBox.clear();
 anyOtherBusinessIncomeTxtBox.sendKeys(str14);
 SaveBtn1.click();
 driver.navigate().refresh();
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 ExemptfromPayingClass4NICs.click();  
 SaveBtn2.click(); 
 wLib.explicitWait(driver, 5,additionalInformationLink);
 additionalInformationLink.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 wLib.explicitWait(driver, 5,spousesNameTxtBox);
 spousesNameTxtBox.clear();
 spousesNameTxtBox.sendKeys(str15);
 chkBoxHalfMinimumAllowanceTransferToOther.click();
 saveAdditionalInfoBtn.click();
 n1=Double.parseDouble(str3);//4598.00
 n2=Double.parseDouble(str4);//2450.00
 n3=Double.parseDouble(str5);//165.00
 n4=Double.parseDouble(str6);//14.90
 n5=Double.parseDouble(str9);//14560.00
 n6=Double.parseDouble(str10);//13603.00
 n7=Double.parseDouble(str11);//1700.00
 n8=Double.parseDouble(str12);//3926.00
 n9=Double.parseDouble(str13);//720
 n10=Double.parseDouble(str14);//250
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5,taxCalSummaryLink);
 taxCalSummaryLink.click();
 interestFromUKBanksBuildingAmt =n1;
 dividendsFromForeignCompaniesCalc=n3;
 dividendsFromUKCompaniesAmt=Math.floor(n2);
 selfEmploymentIncome=((n5-n6)+(n8+n9)-n7)+n10;//4153
 totalincome = selfEmploymentIncome+interestFromUKBanksBuildingAmt+dividendsFromForeignCompaniesCalc+dividendsFromUKCompaniesAmt;
 if (totalincome >personalAllowanceRate)
 	{
 	totlIncome = totalincome - personalAllowanceRate;	
 	}
 else
 {
 totlIncome =0.00;
 }
 if (totlIncome == 0)
 {
 totIncomeTaxDue=0;
 }
 Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
 Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
 Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
 Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
 Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
 Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
 Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 calculateMAT=(maxMAT - MCA_2)*MATrate;
 //calculateMAT = maxMAT * MATrate;
 Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
 Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
 }

 public void funcDelMTRTest119(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 119",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
 clickIncome(driver);
 delInterestfromUKbanks(driver);
 deleteDivident(driver);
 delOtherDivident(driver);
 funcDelAdditionalInfo(driver);
 delSEshort(driver);
 driver.navigate().refresh();
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 ExemptfromPayingClass4NICs.click();  
 SaveBtn2.click(); 
 }
 public void addTestCase120(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
 {
 wLib=new WaitStatementLib();
 cis=new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 120",true);
 clickIncome(driver);
 addBank(driver,str1,str1,str2);
 addUKInterestNew(driver,str3);
 funcAddUntaxedInerest(driver,str4);
 dividentUKCompanies(driver,"Company1","",str5);
 wLib.explicitWait(driver, 5,additionalInformationLink);
 additionalInformationLink.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 wLib.explicitWait(driver, 5,spousesNameTxtBox);
 spousesNameTxtBox.clear();
 spousesNameTxtBox.sendKeys(str6);
 spousesDateOfBirthTxtBox.clear();
 spousesDateOfBirthTxtBox.sendKeys(str7);
 dateOfMarriageOrCivilPartnershipTxtBox.clear();
 dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str8);
 nonQualifyingTxtBox.clear();
 nonQualifyingTxtBox.sendKeys(str9);
 saveAdditionalInfoBtn.click();
 n1 = Double.parseDouble(str3);//365.00
 n2 = Double.parseDouble(str4);//7283.00
 n3 = Double.parseDouble(str5);//1510.00
 n4 = Double.parseDouble(str9);//118.00

 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();

 interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+ n2;
 dividendsFromUKCompaniesAmt = n3 + n4;
 totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt;
 if(totalincome > personalAllowanceRate)
 {
 totlIncome = totalincome - personalAllowanceRate;	
  }
 else
 {
 totlIncome =0.00;
 }
 if (totlIncome == 0)
 {
 totIncomeTaxDue=0;
 }
 Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
 Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
 Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
 Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);	
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 calculateMAT=(maxMAT - (maxMAT/month))*MATrate;
 Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
 Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
 totalTaxDeductedAmt = n1*taxedUKInterestRate;//91.25
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
 taxBalance = totalTaxDeductedAmt;
 Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
 Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
 }

 public void funcDelMTRTest120(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 120",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
 clickIncome(driver);
 delInterestfromUKbanks(driver);
 deleteDivident(driver);
 funcDelAdditionalInfo(driver);
 }
 public void addTestCase121(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6)throws Exception
 {
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 121",true);
clickIncome(driver);
 wLib.explicitWait(driver, 10,dividentLink);
 dividentLink.click();
 wLib.explicitWait(driver, 5,frm1Btn);
 frm1Btn.click();
 cis.switchwindowNew(driver);
 totStatPension.clear();
 totStatPension.sendKeys(str1);
 stateBenefitsSaveBtn.click();
 addOtherUKIncome(driver,str2,"",str3,"",str4);
 wLib.explicitWait(driver, 5,additionalInformationLink);
 additionalInformationLink.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 wLib.explicitWait(driver, 5,shareSchemesTaxableAmountTxtBox);
 shareSchemesTaxableAmountTxtBox.clear();
 shareSchemesTaxableAmountTxtBox.sendKeys(str5);
 wLib.explicitWait(driver, 5,spousesNameTxtBox);
 spousesNameTxtBox.clear();
 spousesNameTxtBox.sendKeys(str6);
 chkBoxAllMinimumAllowanceTransferToOther.click();
 saveAdditionalInfoBtn.click();

 n1=Double.parseDouble(str1);//6200.00
 n2=Double.parseDouble(str2); //7000.00
 n3=Double.parseDouble(str3); //1400.00
 n4=Double.parseDouble(str5); //2275.00

 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5,taxCalSummaryLink);
 taxCalSummaryLink.click();
 shareSchemesAmt = n4;
 UKPensionAndStateBenefitAmt = n1;
 otherIncomeAmt = n2;
 totalincome = shareSchemesAmt + UKPensionAndStateBenefitAmt + otherIncomeAmt;
 totlIncome = totalincome - personalAllowanceRate;

 Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
 Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
 Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
 Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);

 Assert.assertEquals(ShareschemesTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(shareSchemesAmt)));
 Reporter.log("Share schemes amount on Tax Summary page is verified: "+ShareschemesTaxSummary.getText(),true);

 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

 basicRatePayPension = totlIncome ;//3625
 Reporter.log("Basic Rate of Pay Pension: "+ basicRatePayPension,true);
 dueTax1 = basicRatePayPension * BR_rate;//£725


 totIncomeTaxDue=dueTax1;
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 calculateMAT=(maxMAT - MCA)*MATrate;

 Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
 Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);

 incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - calculateMAT;
 //Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxdueafterallowancesandreliefs));
 Reporter.log("Income Tax due after allowances and reliefs: " + incomeTaxdueafterallowancesandreliefs,true);
 totalTaxDeductedAmt =  n3;
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

 taxBalance = totalTaxDeductedAmt - incomeTaxdueafterallowancesandreliefs;

 Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
 Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
 }
 public void delTestCase121(WebDriver driver) throws Exception {
 Reporter.log("Deleting MTR Test Case 121",true);
 wLib = new WaitStatementLib();
 checkLockbutton(driver);
 clickIncome(driver);
 wLib.explicitWait(driver, 2,dividentLink);
 dividentLink.click();
 delUKPensionsAnnuities(driver);
 delOtherUKIncome(driver);
 funcDelAdditionalInfo(driver);
 }  

 public void addTestCase125(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
 {
 Reporter.log("Exceuting MTR Test Case 125",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 clickIncome(driver);
 funcAddEmployerForMTR(driver, str1, str2);
 funcAddEmpIncomeWithTaxTakenOff(driver, str3,str4,"");
 clickIncome(driver);
 wLib.explicitWait(driver, 5,selfEmploymentLink);
 selfEmploymentLink.click();
 wLib.explicitWait(driver, 5,formOpenBtn);
 formOpenBtn.click();
 wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
 descriptionOfBusinessTxtBox.clear();
 descriptionOfBusinessTxtBox.sendKeys(str5);
 CashBasisChkBox.click();
 businessIncomeTxtBox.clear();
 businessIncomeTxtBox.sendKeys(str6);
 costsOfGoodsBoughtForResaleTxtBox.clear();
 costsOfGoodsBoughtForResaleTxtBox.sendKeys(str7);
 SaveBtn1.click();
 driver.navigate().refresh();
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
 ExemptfromPayingClass4NICs.click();
 SaveBtn2.click(); 
 driver.navigate().refresh();
 clickIncome(driver);
 wLib.explicitWait(driver, 5,linkCapitalGain);
 linkCapitalGain.click();
 wLib.explicitWait(driver, 30,editBtn);
 editBtn.click();
 qSTotalDisposalTxtBox.clear();
 qSTotalDisposalTxtBox.sendKeys(str8);
 qSDisposalProceedTxtBox.clear();
 qSDisposalProceedTxtBox.sendKeys(str9);
 qSCostsAndIndexationTxtBox.clear();
 qSCostsAndIndexationTxtBox.sendKeys(str10);
 qSGainsInTheYearTxtBox.clear();
 qSGainsInTheYearTxtBox.sendKeys(str11);
 commentTxtBox.clear();
 commentTxtBox.sendKeys(str12);
 SaveBtn1.click();
 n1=Double.parseDouble(str3); //33254.00
 n2=Double.parseDouble(str4); //4280.80
 n3=Double.parseDouble(str6); //10000.00
 n4=Double.parseDouble(str7); //6000.00
 n5=Double.parseDouble(str9); //99000.00
 n6=Double.parseDouble(str10); //9000.00
 n7=Double.parseDouble(str11); //90000.00

 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 payFromAllEmploymentsAmt=n1;//33254
 selfEmploymentIncome=(n3-n4);//4000
 totalincome=selfEmploymentIncome  + payFromAllEmploymentsAmt;//37254
 totlIncome=totalincome- personalAllowanceRate;//25404
 Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
 Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
 Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
 Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
 		
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
 Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

 basicRatePayPension=totlIncome;//25404
 Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
 dueTax1=basicRatePayPension*BR_rate;//5080.8
 incomeTaxDueAmt=dueTax1;
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxDueAmt)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);


 totalTaxDeductedAmt=n2;//4280.8
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

 totIncomeTaxDue=incomeTaxDueAmt-totalTaxDeductedAmt;
 Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));//£800
 Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);


 otherGainsBasicAmt=(taxLimit1Uk-totlIncome)*capitalGainsRateLower;
 Reporter.log("Other gains basic Amount: "+otherGainsBasicAmt,true);
 otherGainsAmt = (n7-((taxLimit1Uk-totlIncome) + annualExemptIndividualsProposed))*capitalGainsRateUpper;
 Reporter.log("Other gains Amount: "+otherGainsAmt,true);
 capitalGainsTaxdueAmt=otherGainsBasicAmt + otherGainsAmt;
 Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
 Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
 Totaltax=totIncomeTaxDue+ capitalGainsTaxdueAmt;
 Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",Totaltax));//£15550.4
 Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
 }

 public void funcDelMTRTest125(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 125",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
 delSEshort(driver);
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
 ExemptfromPayingClass4NICs.click();
 SaveBtn2.click(); 
 driver.navigate().refresh();
 clickIncome(driver);
 clickEmployment(driver);
 delEmpInfo(driver);
 delCGI(driver);
 }
 public void addTestCase126(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23) throws Exception
 {
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 n1 = Double.parseDouble(str1);//6020.00
 n2 = Double.parseDouble(str2);//1000.00
 n3 = Double.parseDouble(str3);//1004.00
 n4 = Double.parseDouble(str7); //33254.00
 n5 = Double.parseDouble(str8); //4280.80
 n6 = Double.parseDouble(str11);//55750.00
 n7 = Double.parseDouble(str12);//11970.00
 n8 = Double.parseDouble(str14);//3600.00
 n9 = Double.parseDouble(str15);//350.00
 n10 = Double.parseDouble(str16);//7500.0
 n11 = Double.parseDouble(str17);//4500.00
 n12 = Double.parseDouble(str18);//5000.00
 n13 = Double.parseDouble(str19);//7926
 n14 = Double.parseDouble(str21);//5000.00
 n15 = Double.parseDouble(str22);//12000.00
 n16 = Double.parseDouble(str23);//2500.00
 Reporter.log("Exceuting MTR Test Case 126",true);
 clickIncome(driver);
 wLib.explicitWait(driver, 10,dividentLink);
 dividentLink.click();
 addOtherUKIncome(driver,str1,str2,str3,"",str4);
 funcAddEmployerForMTR(driver,str5,str6);
 funcAddEmpIncomeWithTaxTakenOff(driver, str7, str8,"");
 wLib.explicitWait(driver, 3,addEmploymentBtn);
 addEmploymentBtn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 1,EmployerName);
 EmployerName.sendKeys(str9);
 txtEmployerPAYERef.sendKeys(str10);
 SaveBtn2.click();
 driver.navigate().refresh();
 wLib.explicitWait(driver,5,addEmpIncome);
 addEmpIncome.click();
 wLib.explicitWait(driver, 1,payFrmEmployer);
listbox1 = new Select(employerLstBox);
listbox1.selectByVisibleText(str9);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str11);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str12);
 isCloseCompanyChkBox.click();
 isDirectorChkBox.click();
 dateTxtBox.clear();
 dateTxtBox.sendKeys(str13);
 CompanyCarsAndVans.clear();
 CompanyCarsAndVans.sendKeys(str14);
 PrvtMedAndDntl.clear();
 PrvtMedAndDntl.sendKeys(str15);
 OtherBenefitsTxtBox.clear();
 OtherBenefitsTxtBox.sendKeys(str16);
 expensesPaymentsReceivedtxtBox.clear();
 expensesPaymentsReceivedtxtBox.sendKeys(str17);
 BusnsTrvlAndSubstancTxtBox.clear();
 BusnsTrvlAndSubstancTxtBox.sendKeys(str18);
 EarningPTtoUAPTxtBox.clear();
 EarningPTtoUAPTxtBox.sendKeys(str19);
 SaveBtn1.click();
 clickIncome(driver);
 wLib.explicitWait(driver, 10,selfEmploymentLink);
 selfEmploymentLink.click();
 wLib.explicitWait(driver, 3,formOpenBtn);
 formOpenBtn.click();
 wLib.explicitWait(driver, 3,descriptionOfBusinessTxtBox);
 descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str20);
StartDatetxtbox.clear();
StartDatetxtbox.sendKeys(dateStart);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str21);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str22);
lossOfYearSetAgainstOtherIncomeTxtBox.clear();
lossOfYearSetAgainstOtherIncomeTxtBox.sendKeys(str23);
Assert.assertEquals(totalExpenseTxtBox.getAttribute("value").replace(",", ""),String.format("%.2f",n15));
Reporter.log("Total allowable expenses verified:" + totalExpenseTxtBox.getAttribute("value"),true);
Assert.assertEquals(netBusinessLossAmt.getAttribute("value").replace(",", ""),String.format("%.2f",(n15-n14)));
Reporter.log("Net business loss for tax verified:" +netBusinessLossAmt.getAttribute("value"),true);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
PayClass2NICsvoluntarily.click();  
SaveBtn2.click(); 
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
otherIncomeAmt = n1 - n2;//5020
payFromAllEmploymentsAmt=n4+n6;
benefitsAndExpensesReceivedAmt=n8+n9+n10+n11;
allowableExpensesAmt = n12;
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
totalincome=totalFromAllEmployments + otherIncomeAmt;
incomeTaxReliefAmt=n16;
if (totalincome > personalAllowanceRateMaxLimit)
{
total1 =(totalincome-incomeTaxReliefAmt) - personalAllowanceRateMaxLimit;
allowance1=Math.floor(total1/2);
totalAllowance=personalAllowanceRate-allowance1;
}
totlIncome =totalincome - (incomeTaxReliefAmt + totalAllowance);

Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true); 

Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",otherIncomeAmt));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
 	
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);	
basicRatePayPension=taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6900
heigherRatePayPension=totlIncome - basicRatePayPension;
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;
incomeTaxDueAmt=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxDueAmt)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class2Amt=class2Rate*weeksYear;//£153.40
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
totIncomeTaxDue= incomeTaxDueAmt+ class2Amt;
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=n3+n5+n7;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totIncomeTaxDue - totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
 public void delTestCase126(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 126",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delOtherUKIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delSEshort(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
PayClass2NICsvoluntarily.click();
SaveBtn2.click(); 
driver.navigate().refresh();
}
 public void addTestCase127(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23)throws Exception
 {
 Reporter.log("Exceuting MTR Test Case 127",true);
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 clickIncome(driver);
 addBank(driver, str1, str1, str2);
 funcAddUntaxedInerest(driver,str3);
 dividentUKCompanies(driver,"Company1","", str4);
 addOtherDivident(driver,"0.00",str5,str6);
 wLib.explicitWait(driver, 5,selfEmploymentLink);
 selfEmploymentLink.click();
 wLib.explicitWait(driver, 10,frm1Btn);
 frm1Btn.click();
 businessNameTxtBox.clear();
 businessNameTxtBox.sendKeys(str7);
 descriptionofBusinessTxtBox.clear();
 descriptionofBusinessTxtBox.sendKeys(str8);
 businessAddressTxtBox.clear();
 businessAddressTxtBox.sendKeys(str9);
 businessPostCodeTxtBox.clear();
 businessPostCodeTxtBox.sendKeys(str10);
 booksAccoutsStartDateTxtBox.clear();
 booksAccoutsStartDateTxtBox.sendKeys(dateStart);
 businessBooksEnddateTxtBox.clear();
 businessBooksEnddateTxtBox.sendKeys(dateEnd);
 businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
 wLib.explicitWait(driver, 2,trunoverTxtBox);
 trunoverTxtBox.clear();
 trunoverTxtBox.sendKeys(str11);
 wagesSalariesandOtherStaffCostsTxtBox.clear();
 wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str12);
 travelexpensesTxtBox.clear();
 travelexpensesTxtBox.sendKeys(str13);
 rentInsurancecostTxtBox.clear();
 rentInsurancecostTxtBox.sendKeys(str14);
 repairandRenewalsPropertyTxtBox.clear();
 repairandRenewalsPropertyTxtBox.sendKeys(str15);
 phonefaxandOtherOfficeCostsTxtBox.clear();
 phonefaxandOtherOfficeCostsTxtBox.sendKeys(str16);
 advertisingandEntertainmentCostTxtBox.clear();
 advertisingandEntertainmentCostTxtBox.sendKeys(str17);
 interestbankTxtBox.clear();
 interestbankTxtBox.sendKeys(str18);
 bankCreditandOtherFinancialChargesTxtBox.clear();
 bankCreditandOtherFinancialChargesTxtBox.sendKeys(str19);
 annualinvestmentTxtBox.clear();
 annualinvestmentTxtBox.sendKeys(str20);
 seCapitalAllowancesTxtBox.clear();
 seCapitalAllowancesTxtBox.sendKeys(str21);
 restrictedCostingTxtBox.clear();
 restrictedCostingTxtBox.sendKeys(str22);
 basisPeriodBeganTxtBox.clear();
 basisPeriodBeganTxtBox.sendKeys(dateStart);
 basisPeriodEndedTxtBox.clear();
 basisPeriodEndedTxtBox.sendKeys(dateEnd);
 balanceStartPeriodTxtBox.clear();
 balanceStartPeriodTxtBox.sendKeys(str23);//2600.00
 SaveBtn1.click();
 n1 = Double.parseDouble(str3);//4598.00
 n2 = Double.parseDouble(str4);//2450.00
 n3 = Double.parseDouble(str5);//165.00
 n4 = Double.parseDouble(str6);//14.00
 n5 = Double.parseDouble(str11);//69203.00
 n6 = Double.parseDouble(str12);//12688.00
 n7 = Double.parseDouble(str13);//15430.00
 n8 = Double.parseDouble(str14);//13211.00
 n9 = Double.parseDouble(str15);//3256.00
 n10 = Double.parseDouble(str16);//158.00
 n11 = Double.parseDouble(str17);//2219.00
 n12 = Double.parseDouble(str18);//1931.00
 n13 = Double.parseDouble(str19);//287.00
 n14 = Double.parseDouble(str20);//1000.00
 n15 = Double.parseDouble(str21);//2000.00
 n16 = Double.parseDouble(str22);//3000.00
 n17 = Double.parseDouble(str23);//-12908.00
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 interestFromUKBanksBuildingAmt=n1;//4598.00
 dividendsFromUKCompaniesAmt=n2;//2450.00
 dividendsFromForeignCompaniesCalc=n3;//165.00	 
 totalExpensesSelfEmpFull=n6+n7+n8+n9+n10+n11+n12+n13;//49180.00
 netProfitSelfEmpFull = n5 - totalExpensesSelfEmpFull;//20023.00
 totalCapitalAllowancesSelfEmpFull = n14 + n15 + n16;//6000
 totalDeductionfromNetProfitSelfEmpFull = totalCapitalAllowancesSelfEmpFull;//6000
 selfEmploymentIncome=netProfitSelfEmpFull-totalDeductionfromNetProfitSelfEmpFull; //14023.00
 totalincome = selfEmploymentIncome +interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + dividendsFromForeignCompaniesCalc;
 totlIncome = totalincome - personalAllowanceRate;
 Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
 Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);

 Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",dividendsFromForeignCompaniesCalc));
 Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
 Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
 Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
 Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
 Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 basicRatePayPension=selfEmploymentIncome - personalAllowanceRate;//£2,173
 Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
 dueTax1=basicRatePayPension*BR_rate;//£434.60
 basicRateSaving= interestFromUKBanksBuildingAmt - ((SR_band - basicRatePayPension) + nilRate1);//771.00
 Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
 dueTax2=basicRateSaving*BR_rate;//£154.20

 basicRateDividends=(dividendsFromUKCompaniesAmt + dividendsFromForeignCompaniesCalc) -dividentNillRate;//£615.00
 Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
 dueTax3=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//46.13
 totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

 class4Amt=(selfEmploymentIncome-class4LPLAmt)*class4LPLRate;//503.91
 Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt)));
 Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
 class2Amt = class2Rate * weeksYear;//£153.40
 Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
 class4_2Amt=class4Amt+class2Amt;//657.31
 Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
 Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
 taxBalance=totIncomeTaxDue+class4_2Amt;//1,292.24
 Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
 Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
 		
 Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",taxBalance));
 Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);	
 }

public void delTestCase127(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 127",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
delOtherDivident(driver);
clickIncome(driver);
delSelfEmpFull(driver);
}
public void addTestCase128(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 128",true);
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str3);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str4);
isCloseCompanyChkBox.click();
isDirectorChkBox.click();
dateTxtBox.clear();
dateTxtBox.sendKeys(str5);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str6);
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str7);
OtherBenefitsTxtBox.clear();
OtherBenefitsTxtBox.sendKeys(str8);
expensesPaymentsReceivedtxtBox.clear();
expensesPaymentsReceivedtxtBox.sendKeys(str9);
BusnsTrvlAndSubstancTxtBox.clear();
BusnsTrvlAndSubstancTxtBox.sendKeys(str10);
EarningPTtoUAPTxtBox.sendKeys(str11);
SaveBtn1.click();
clickIncome(driver);
 wLib.explicitWait(driver, 5,selfEmploymentLink);
 selfEmploymentLink.click();
 wLib.explicitWait(driver, 10,frm1Btn);
 frm1Btn.click();
 businessNameTxtBox.clear();
 businessNameTxtBox.sendKeys(str12);
 descriptionofBusinessTxtBox.clear();
 descriptionofBusinessTxtBox.sendKeys(str13);
 booksAccoutsStartDateTxtBox.clear();
 booksAccoutsStartDateTxtBox.sendKeys(dateStart);
 businessBooksEnddateTxtBox.clear();
 businessBooksEnddateTxtBox.sendKeys(dateEnd);
 businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
 wLib.explicitWait(driver, 2,trunoverTxtBox);
 //Business Income
 trunoverTxtBox.clear();
 trunoverTxtBox.sendKeys(str14);
 //Business Expenses
 goodsOfCostfullTxtBox.clear();
 goodsOfCostfullTxtBox.sendKeys(str15);
 wagesSalariesandOtherStaffCostsTxtBox.clear();
 wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str16);
 travelexpensesTxtBox.clear();
 travelexpensesTxtBox.sendKeys(str17);
 rentInsurancecostTxtBox.clear();
 rentInsurancecostTxtBox.sendKeys(str18);
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str19);
advertisingandEntertainmentCostTxtBox.clear();
advertisingandEntertainmentCostTxtBox.sendKeys(str20);
interestbankTxtBox.clear();
interestbankTxtBox.sendKeys(str21);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str22);
irrecoverabledebtsTxtBox.clear();
irrecoverabledebtsTxtBox.sendKeys(str23);
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str24);
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str25);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str26);
capitalIntroducedTxtBox.clear();
capitalIntroducedTxtBox.sendKeys(str27);
SaveBtn1.click();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
PayClass2NICsvoluntarily.click();
SaveBtn2.click(); 
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str28);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str29);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str30);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str31);
commentTxtBox.clear();
commentTxtBox.sendKeys(str32);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//55750.00
n2 = Double.parseDouble(str4);//11970.00
n3 = Double.parseDouble(str6);//3600.00
n4 = Double.parseDouble(str7);//350.00
n5 = Double.parseDouble(str8);//7500.00
n6 = Double.parseDouble(str9);//4500.00
n7 = Double.parseDouble(str10);//5000.00
n8 = Double.parseDouble(str11);//37926
n9 = Double.parseDouble(str14);//70000
n10 = Double.parseDouble(str15);//2577.00
n11 = Double.parseDouble(str16);//25337.00
n12 = Double.parseDouble(str17);//11799.00
n13 = Double.parseDouble(str18);//13980.00
n14 = Double.parseDouble(str19);//5920.00
n15 = Double.parseDouble(str20);//3256.00
n16 = Double.parseDouble(str21);//4556.00
n17 = Double.parseDouble(str22);//240.00
n18 = Double.parseDouble(str23);//3326.00
n19 = Double.parseDouble(str24);//2169.00
n20 = Double.parseDouble(str25);//1840.00
n21 = Double.parseDouble(str26);//3782.00
n22 = Double.parseDouble(str27);//1000.00
n23 = Double.parseDouble(str29);//99000.00
n24 = Double.parseDouble(str30);//9000.00
n25 = Double.parseDouble(str31);//90000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n1;
benefitsAndExpensesReceivedAmt=n3+n4+n5+n6;
allowableExpensesAmt = n7;
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
totalincome = totalFromAllEmployments;
totlIncome=totalincome-personalAllowanceRate;
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome)); 	 
Reporter.log("Amount of Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=taxLimit1Uk;//34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6900
Reporter.log("Calculated amoun of Basic Rate of Pay Pension: "+dueTax1,true);
heigherRatePayPension=totlIncome - basicRatePayPension;//20350
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//8140
Reporter.log("Calculated amoun of Heigher Rate of Pay Pension: "+dueTax2,true);
totIncomeTaxDue=dueTax1+dueTax2;//9028.4
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));//15040
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
tax1=totIncomeTaxDue + class2Amt;
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=n2;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=tax1 - totalTaxDeductedAmt;
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2NationalInsurContriDueMinusDeduction.getText(),true);

otherGainsAmt = (n25-annualExemptIndividualsProposed)*capitalGainsRateUpper;
Reporter.log("Other gains Amount: "+otherGainsAmt,true);
capitalGainsTaxdueAmt=otherGainsAmt;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
fnltax=totalTaxDeductedAmt1 + capitalGainsTaxdueAmt;
Assert.assertEquals(AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase128(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 128",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delSelfEmpFull(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
PayClass2NICsvoluntarily.click();
SaveBtn2.click(); 
driver.navigate().refresh();
delCGI(driver);
}
public void addTestCase129(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40)throws Exception
{
 wLib=new WaitStatementLib();
 cis=new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 129",true);
 clickIncome(driver);
 addBank(driver,str1,str1,str2);
 addUKInterestNew(driver,str3);
 funcAddUntaxedInerest(driver,str4);
 dividentUKCompanies(driver,"Company1","",str5);
 funcAddEmployerForMTR(driver,str6,str7);
 wLib.explicitWait(driver,5,addEmpIncome);
 addEmpIncome.click();
 wLib.explicitWait(driver,1,payFrmEmployer);
 payFrmEmployer.clear();
 payFrmEmployer.sendKeys(str8);
 UkTaxTakenOffPay.clear();
 UkTaxTakenOffPay.sendKeys(str9);
 isCloseCompanyChkBox.click();
 isDirectorChkBox.click();
 dateTxtBox.clear();
 dateTxtBox.sendKeys(str10);
 CompanyCarsAndVans.clear();
 CompanyCarsAndVans.sendKeys(str11);
 PrvtMedAndDntl.clear();
 PrvtMedAndDntl.sendKeys(str12);
 OtherBenefitsTxtBox.clear();
 OtherBenefitsTxtBox.sendKeys(str13);
 expensesPaymentsReceivedtxtBox.clear();
 expensesPaymentsReceivedtxtBox.sendKeys(str14);
 BusnsTrvlAndSubstancTxtBox.clear();
 BusnsTrvlAndSubstancTxtBox.sendKeys(str15);
 EarningPTtoUAPTxtBox.sendKeys(str40);
 SaveBtn1.click();
 addPartnershipInfo(driver,str16, str17);
 wLib.explicitWait(driver,5,PartnershipFullFormLink);
 PartnershipFullFormLink.click();
 /*wLib.explicitWait(driver,5,PartnerShipRefNo);
 PartnerShipRefNo.clear();
 PartnerShipRefNo.sendKeys(str17);*/
 wLib.explicitWait(driver,5,BasisBusinessStartDate);
 BasisBusinessStartDate.clear();
 wLib.explicitWait(driver,5,BasisBusinessEndDate);
 BasisBusinessEndDate.clear();
 wLib.explicitWait(driver,5,yourShareOfPartnershipProfitLoss);
 yourShareOfPartnershipProfitLoss.clear();
 lossesBroughtForward.clear();
 shareOfProfitOrLossFromUKPropertyTxtBox.clear();
 lossesBroughtForwardFromEarlierYearsSetOffAgainstProfitsTxtBox.clear();
 BasisBusinessStartDate.sendKeys(dateStart);
 BasisBusinessEndDate.sendKeys(dateEnd);
 yourShareOfPartnershipProfitLoss.sendKeys(str18);
 lossesBroughtForward.sendKeys(str19);
 shareOfProfitOrLossFromUKPropertyTxtBox.sendKeys(str20);
 lossesBroughtForwardFromEarlierYearsSetOffAgainstProfitsTxtBox.sendKeys(str21);
 SaveBtn1.click();
 driver.navigate().refresh();
 clickIncome(driver);
 wLib.explicitWait(driver,5,linkCapitalGain);
 linkCapitalGain.click();
 wLib.explicitWait(driver,5,editBtn);
 editBtn.click();
 wLib.explicitWait(driver,2,residentialPropertyNumberOfDisposalsTxtBox);
 residentialPropertyNumberOfDisposalsTxtBox.clear();
 residentialPropertyNumberOfDisposalsTxtBox.sendKeys(str22);
 residentialPropertyDisposalProceedsTxtBox.clear();
 residentialPropertyDisposalProceedsTxtBox.sendKeys(str23);
 residentialPropertyAllowableCostsTxtBox.clear();
 residentialPropertyAllowableCostsTxtBox.sendKeys(str24);
 residentialPropertyLossesInTheYearTxtBox.clear();
 residentialPropertyLossesInTheYearTxtBox.sendKeys(str25);
 residentialPropertyGainOrLossRelatingToNRCGTTxtBox.clear();
 residentialPropertyGainOrLossRelatingToNRCGTTxtBox.sendKeys(str26);
 residentialPropertyGainOrLossFromRTTreturnTxtBox.clear();
 residentialPropertyGainOrLossFromRTTreturnTxtBox.sendKeys(str27);
 propertyEtcTotalDisposalTxtBox.clear();
 propertyEtcTotalDisposalTxtBox.sendKeys(str28);
 propertyEtcDisposalProceedTxtBox.clear();
 propertyEtcDisposalProceedTxtBox.sendKeys(str29);
 propertyEtcCostsAndIndexationTxtBox.clear();
 propertyEtcCostsAndIndexationTxtBox.sendKeys(str30);
 propertyEtcGainsInTheYearTxtBox.clear();
 propertyEtcGainsInTheYearTxtBox.sendKeys(str31);
 propertyEtcClaimOrElectionMadeTxtBox.clear();
 propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str32);
 uQSTotalDisposalTxtBox.clear();
 uQSTotalDisposalTxtBox.sendKeys(str33);
 uQSDisposalProceedTxtBox.clear();
 uQSDisposalProceedTxtBox.sendKeys(str34);
 uQSCostsAndIndexationTxtBox.clear();
 uQSCostsAndIndexationTxtBox.sendKeys(str35);
 uQSLossesInTheYearTxtBox.clear();
 uQSLossesInTheYearTxtBox.sendKeys(str36);
 uQSLossUsedAgainstCurrentYearIncomeTxtBox.clear();
 uQSLossUsedAgainstCurrentYearIncomeTxtBox.sendKeys(str37);
 lossToBeCarriedForwardTxtBox.clear();
 lossToBeCarriedForwardTxtBox.sendKeys(str38);
 commentTxtBox.clear();
 commentTxtBox.sendKeys(str39);
 SaveBtn1.click();
 n1 = Double.parseDouble(str3); // 365.00
 n2 = Double.parseDouble(str4); // 7283.00
 n3 = Double.parseDouble(str5); // 1510.00
 n4 = Double.parseDouble(str8); // 55750.00
 n5 = Double.parseDouble(str9); // 11970.00
 n6 = Double.parseDouble(str11); // 3600.00
 n7 = Double.parseDouble(str12); // 350.00
 n8 = Double.parseDouble(str13); // 7500.0
 n9 = Double.parseDouble(str14); // 4500.00
 n10 = Double.parseDouble(str15); // 5000.00
 n11 = Double.parseDouble(str18); // 15515.00
 n12 = Double.parseDouble(str19); // 2805.00
 n13 = Double.parseDouble(str20); // 5500.00
 n14 = Double.parseDouble(str21); // 5500.00
 n15 = Double.parseDouble(str23); // 330000.00
 n16 = Double.parseDouble(str24); // 390000.00
 n17 = Double.parseDouble(str25); // 10000.00
 n18 = Double.parseDouble(str26); // -50000
 n19 = Double.parseDouble(str27); // -10000
 n20 = Double.parseDouble(str29); // 40000
 n21 = Double.parseDouble(str30); // 4000
 n22 = Double.parseDouble(str31); // 36000
 n23 = Double.parseDouble(str34); // 5000
 n24 = Double.parseDouble(str35); // 6000
 n25 = Double.parseDouble(str36); // 1000
 n26 = Double.parseDouble(str37); // 1000
 n27 = Double.parseDouble(str38); // 36000.00
 n28 = Double.parseDouble(str40); // 37926
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n4;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
benefitsAndExpensesReceivedAmt=n6+n7+n8+n9;
allowableExpensesAmt = n10;
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
profitFromPartnershipsAmt=(n11-n12) + (n12+n14);
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt = n3;
totalincome=totalFromAllEmployments+profitFromPartnershipsAmt+interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt;
incomeTaxReliefAmt=n26 +n12 + n14;
totlIncome =totalincome - (incomeTaxReliefAmt+personalAllowanceRate);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true); 
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
	
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);	

basicRatePayPension =taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;		 
heigherRatePayPension= (totalFromAllEmployments+profitFromPartnershipsAmt)-(taxLimit1Uk+personalAllowanceRate+incomeTaxReliefAmt);
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);	
dueTax2=heigherRatePayPension*HR_rate;
heigherRateSaving=interestFromUKBanksBuildingAmt-nilRate2;
dueTax3=heigherRateSaving*HR_rate;
Reporter.log("Amount of Heigher Rate of Saving: "+heigherRateSaving,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class4Amt1 = ((n11-n12)-class4LPLAmt)*class4UPLRate;
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
totalTaxDeductedAmt=totIncomeTaxDue+class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt-(n5 + (n1*taxedUKInterestRate)))));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);
}
 public void funcDelMTRTest129(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 129",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
 clickIncome(driver);
 delInterestfromUKbanks(driver);
 deleteDivident(driver);
 clickEmployment(driver);
 delEmpInfo(driver);
 delCGI(driver);
 delPartnershipFull(driver);
 delPartnershipInfo(driver);
 driver.navigate().refresh();
 }
 public void addTestCase130(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40)throws Exception
 {
 Reporter.log("Exceuting MTR Test Case 130",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 clickIncome(driver);
 funcAddEmployerForMTR(driver,str1, str2);
 addEmpIncome.click();
 wLib.explicitWait(driver, 5,payFrmEmployer);
 payFrmEmployer.sendKeys(str3);
 UkTaxTakenOffPay.sendKeys(str4);
 PrvtMedAndDntl.sendKeys(str5);
 GoodsEtcTxtBob.sendKeys(str6);
 AccommodationProvidedByEmployerTxtBox.sendKeys(str7);
 ProfFeesAndSubsTxtBox.sendKeys(str8);
 EarningPTtoUAPTxtBox.sendKeys(str9);
 SaveBtn1.click();
 clickIncome(driver);
 wLib.explicitWait(driver, 5,selfEmploymentLink);
 selfEmploymentLink.click();
 wLib.explicitWait(driver, 10,frm1Btn);
 frm1Btn.click();
 businessNameTxtBox.clear();
 businessNameTxtBox.sendKeys(str10);
 descriptionofBusinessTxtBox.clear();
 descriptionofBusinessTxtBox.sendKeys(str11);
 businessAddressTxtBox.clear();
 businessAddressTxtBox.sendKeys(str12);
 businessPostCodeTxtBox.clear();
 businessPostCodeTxtBox.sendKeys(str13);
 businessCeasedDateTxtBox.clear();
 businessStarteddateTxtBox.clear();
 businessStarteddateTxtBox.sendKeys(dateStart);
 businessCeasedDateTxtBox.sendKeys(str14);
 booksAccoutsStartDateTxtBox.clear();
 booksAccoutsStartDateTxtBox.sendKeys(dateStart);
 businessBooksEnddateTxtBox.clear();
 businessBooksEnddateTxtBox.sendKeys(str14);
 businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
 wLib.explicitWait(driver, 2,trunoverTxtBox);
 trunoverTxtBox.clear();
 trunoverTxtBox.sendKeys(str16);
 constructionindustrySubcontractorsTxtBox.clear();
 constructionindustrySubcontractorsTxtBox.sendKeys(str17);
 wagesSalariesandOtherStaffCostsTxtBox.clear();
 wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str18);
 travelexpensesTxtBox.clear();
 travelexpensesTxtBox.sendKeys(str19);
 rentInsurancecostTxtBox.clear();
 rentInsurancecostTxtBox.sendKeys(str20);
 phonefaxandOtherOfficeCostsTxtBox.clear();
 phonefaxandOtherOfficeCostsTxtBox.sendKeys(str21);
 accountancyLegalandOtherfeesTxtBox.clear();
 accountancyLegalandOtherfeesTxtBox.sendKeys(str22);
 otherbusinessexpensesTxtBox.clear();
 otherbusinessexpensesTxtBox.sendKeys(str23);
 //Business Expenses
 disexpConstructionTxtBox.clear();
 disexpConstructionTxtBox.sendKeys(str24);
 disexpwagesTxtBox.clear();
 disexpwagesTxtBox.sendKeys(str25);
 disexpCarandVanTxtBox.clear();
 disexpCarandVanTxtBox.sendKeys(str26);
 //Tax allowances for vehicles and equipment (capital allowances)
 capitalAllowancesemissionsTxtBox.clear();
 capitalAllowancesemissionsTxtBox.sendKeys(str27);
 basisPeriodBeganTxtBox.clear();
 basisPeriodBeganTxtBox.sendKeys(dateStart);
 basisPeriodEndedTxtBox.clear();
 basisPeriodEndedTxtBox.sendKeys(dateEnd);
 overlapReliefTxtBox.clear();
 overlapReliefTxtBox.sendKeys(str28);
 subContractorsDeductionTaxTxtBox.clear();
 subContractorsDeductionTaxTxtBox.sendKeys(str29);
 stockAndWorkTxtBox.clear();
 stockAndWorkTxtBox.sendKeys(str30);
 bankSocietyBalancesTxtBox.clear();
 bankSocietyBalancesTxtBox.sendKeys(str31);
 balanceStartPeriodTxtBox.clear();
 balanceStartPeriodTxtBox.sendKeys(str32);
 drawingTxtBox.clear();
 drawingTxtBox.sendKeys(str33);
 SaveBtn1.click();
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
 ExemptfromPayingClass4NICs.click();
 SaveBtn2.click(); 

 addPartnershipInfo(driver,str34, str35);
 wLib.explicitWait(driver, 5, PartnershipShortFormLink);
 PartnershipFullFormLink.click();
 /*wLib.explicitWait(driver, 5,PartnerShipRefNo);
 PartnerShipRefNo.clear();
 PartnerShipRefNo.sendKeys(str35);*/
 wLib.explicitWait(driver, 5,BasisBusinessStartDate);
 BasisBusinessStartDate.clear();
 BasisBusinessStartDate.sendKeys(dateStart);
 wLib.explicitWait(driver, 5,BasisBusinessEndDate);
 BasisBusinessEndDate.clear();
 BasisBusinessEndDate.sendKeys(dateEnd);
 wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
 yourShareOfPartnershipProfitLoss.clear();
 yourShareOfPartnershipProfitLoss.sendKeys(str36);
 shareUKUntaxedSavingsIncomeTxtBox.clear();
 shareUKUntaxedSavingsIncomeTxtBox.sendKeys(str37);
 shareOfOtherUntaxedUKIncomeTxtBox.clear();
 shareOfOtherUntaxedUKIncomeTxtBox.sendKeys(str38);
 lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.clear();
 lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.sendKeys(str39);
 shareOfIncomeFromOffshoreFundsTxtBox.clear();
 shareOfIncomeFromOffshoreFundsTxtBox.sendKeys(str40);
 SaveBtn1.click();
 n1 = Double.parseDouble(str3);//101000.00
 n2 = Double.parseDouble(str4);//20430.00
 n3 = Double.parseDouble(str5);//500.00
 n4 = Double.parseDouble(str6);//5000.00
 n5 = Double.parseDouble(str7);//7500.00
 n6 = Double.parseDouble(str8);//175.00
 n7 = Double.parseDouble(str9);//37926.00
 //Self Employment
 n8 = Double.parseDouble(str16);//67088
 n9 = Double.parseDouble(str17);//300
 n10 = Double.parseDouble(str18);//1500.00
 n11 = Double.parseDouble(str19);//3678.00
 n12 = Double.parseDouble(str20);//1252.00
 n13 = Double.parseDouble(str21);//961.00
 n14 = Double.parseDouble(str22);//2150.00
 n15 = Double.parseDouble(str23);//59.00
 n16 = Double.parseDouble(str24);//270.00
 n17 = Double.parseDouble(str25);//212.00
 n18 = Double.parseDouble(str26);//205.00
 n19 = Double.parseDouble(str27);//1161.00
 n20 = Double.parseDouble(str28);//1982.00
 n21 = Double.parseDouble(str29);//12065.00
 n22 = Double.parseDouble(str30);//3250.00
 n23 = Double.parseDouble(str31);//12591.00
 n24 = Double.parseDouble(str32);//2403.00
 n25 = Double.parseDouble(str33);//56750.00
 //Partnership full
 n26 = Double.parseDouble(str36);//11023.00
 n27 = Double.parseDouble(str37);//854.00
 n28 = Double.parseDouble(str38);//1589.00
 n29 = Double.parseDouble(str39);//20.00
 n30 = Double.parseDouble(str40);//9861.00
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 payFromAllEmploymentsAmt=n1;
 benefitsAndExpensesReceivedAmt=n3+n4+n5;
 allowableExpensesAmt = n6;
 totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
 totalExpensesSelfEmpFull=n9+n10+n11+n12+n13+n14+n15;//9900.00
 netProfitSelfEmpFull = n8 - totalExpensesSelfEmpFull;//57188.00
 totalCapitalAllowancesSelfEmpFull = n19;//1161.00
 totalDisallowableExpensesSelfEmpFull=n16 + n17 + n18;//687.00
 totalAdditiontoNetProfitSelfEmpFull = totalDisallowableExpensesSelfEmpFull;//687.00
 totalDeductionfromNetProfitSelfEmpFull = totalCapitalAllowancesSelfEmpFull;//1161.00
 netBusinessProfitForTaxPurpose=(netProfitSelfEmpFull-totalDeductionfromNetProfitSelfEmpFull)+ totalAdditiontoNetProfitSelfEmpFull;//56714.00
 selfEmploymentIncome=netBusinessProfitForTaxPurpose-n20;//54,732.00
 shareOfTotalTaxableProfits = n26 + (n28 - n29)+ n30;
 profitFromPartnershipsAmt = shareOfTotalTaxableProfits + n27 + n29;//23,327.00	
 totalincome = selfEmploymentIncome + profitFromPartnershipsAmt + totalFromAllEmployments;//191,884.00	 
 incomeTaxReliefAmt=n29;//20
 totlIncome = totalincome - incomeTaxReliefAmt;//191,864.00
 Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
 Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
 Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
 Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
 Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
 Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
 Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
 Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);
 Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
 Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
 Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
 Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 basicRatePayPension=taxLimit1Uk;//£34,500.00
 Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
 dueTax1=basicRatePayPension*BR_rate; //£6,900.00
 heigherRatePayPension=taxLimit2;//115,500.00
 Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
 dueTax2=heigherRatePayPension*HR_rate;//46,200.00
 additionalRatePayPension= (totalFromAllEmployments + selfEmploymentIncome + shareOfTotalTaxableProfits) - (basicRatePayPension + heigherRatePayPension);//41,010.00
 Reporter.log("Additional Rate of Pay Pension: "+additionalRatePayPension,true);
 dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;//18,454.50
 additionalRateSaving=n27;//854.00
 Reporter.log("Additional Rate of Saving: "+additionalRateSaving,true);
 dueTax4=(additionalRateSaving*advancedRatePercentage)/100;//384.30
 totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 totalTaxDeductedAmt=n2+n21;
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

 taxBalance=totIncomeTaxDue-totalTaxDeductedAmt;
 Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
 Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);		 
 }
 public void funcDelMTRTest130(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 130",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
clickIncome(driver);
 clickEmployment(driver);
 delEmpInfo(driver);
 clickIncome(driver);
 delPartnershipFull(driver);
 delPartnershipInfo(driver);
 driver.navigate().refresh();
 delSelfEmpFull(driver);
 driver.navigate().refresh();
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
 ExemptfromPayingClass4NICs.click();
 SaveBtn2.click(); 
 }
 public void addTestCase131(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18)throws Exception
 {
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 131",true);
 n1 = Double.parseDouble(str3);//8000.00
 n2 = Double.parseDouble(str4);//80.00
 n3 = Double.parseDouble(str5);//4213.00
 n4 = Double.parseDouble(str8);//7000.00
 n5 = Double.parseDouble(str9);//900.00
 n6 = Double.parseDouble(str10);//1874.00
 n7 = Double.parseDouble(str11);//135.00
 n8 = Double.parseDouble(str12);//5001.00
 n9 = Double.parseDouble(str13);//522.00
 n10 = Double.parseDouble(str14);//1000.00
 n11 = Double.parseDouble(str15);//160.00
 n12 = Double.parseDouble(str16);//8000.00
 n13 = Double.parseDouble(str17);//3000.00
 n14 = Double.parseDouble(str18);//500.00
 clickIncome(driver);
 funcAddEmployerForMTR(driver, str1, str2);
 addEmpIncome.click();
 wLib.explicitWait(driver, 5,payFrmEmployer);
 payFrmEmployer.clear();
 payFrmEmployer.sendKeys(str3);
 TipsPaymentsNtOnP60.clear();
 TipsPaymentsNtOnP60.sendKeys(str4);
 isTeacherChkBox.click();
 SaveBtn1.click();
 wLib.explicitWait(driver, 5,additionalInformationLink);
 additionalInformationLink.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
 amountGainOnLifeInsuranceTxtBox.clear();
 amountGainOnLifeInsuranceTxtBox.sendKeys(str5);//4213.00
 numberOfYearsSinceLastPolicyGainTxtBox.clear();
 numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str6);//4
 saveAdditionalInfoBtn.click();
 clickIncome(driver);
 incmFrmProLink.click();
 wLib.explicitWait(driver, 2,editBtn);
 editBtn.click();
 wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
 noOfPropertiesRentedOutTxtBox.sendKeys(str7);
 rentIncomeTextBox.sendKeys(str8);
 UKExpensesTxtBox.sendKeys(str9);
 loanInterestTxtBox.sendKeys(str10);
 privateUseAdjustmentTxtBox.sendKeys(str11);

 rentIncomeEEATextBox.clear();
 rentIncomeEEATextBox.sendKeys(str12);
 uKExpensesEAATxtBox.clear();
 uKExpensesEAATxtBox.sendKeys(str13);
 loanInterestEEATxtBox.clear();
 loanInterestEEATxtBox.sendKeys(str14);
 privateUseAdjustmentEAATxtBox.clear();
 privateUseAdjustmentEAATxtBox.sendKeys(str15);
 totalIncomePropertyLinkTxtBox.clear();
 totalIncomePropertyLinkTxtBox.sendKeys(str16);
 othrPropertyExpensesTxtBox.clear();
 othrPropertyExpensesTxtBox.sendKeys(str17);
 enhancedCapitalAllowancesTxtBox.clear();
 enhancedCapitalAllowancesTxtBox.sendKeys(str18);
 SaveBtn1.click();
 FHLAdjustedProfitForTheYear=(n4+n7) - (n5+n6);//4361‬
 FHLAdjustedProfitForTheYear1=(n8+n11)-(n9+n10);//3,639‬
 AdjustedProfitForTheYear=n12-(n13+n14);//4,500
 AdjustedProfitForTheYear=n12-(n13+n14);//4,500‬
 Assert.assertEquals(calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",FHLAdjustedProfitForTheYear));
 Reporter.log("Adjusted profit for the year verified successfully"+calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),true);
 Assert.assertEquals(calculateFHLUKTaxableProfitForYear.getAttribute("value"),calculateFHLUKAdjustedProfitForTheYear.getAttribute("value") );
 Reporter.log("Taxable profit for the year verified successfully: "+calculateFHLUKTaxableProfitForYear.getAttribute("value"),true);
 wLib.explicitWait(driver, 5,calculateFHLEaaUKTaxableProfitForYear);
 Assert.assertEquals(calculateFHLEaaUKTaxableProfitForYear.getAttribute("value"),String.format("%.2f",FHLAdjustedProfitForTheYear1));
 Reporter.log("Taxable profit for the year verified successfully for another property: "+calculateFHLEaaUKTaxableProfitForYear.getAttribute("value"),true);

 Assert.assertEquals(adjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",(AdjustedProfitForTheYear)));
 Reporter.log("Adjusted profit for the year verified successfully: "+adjustedProfitForTheYear.getAttribute("value"),true);
 Assert.assertEquals(taxableProfitForTheYear.getAttribute("value"),adjustedProfitForTheYear.getAttribute("value"));
 Reporter.log("Taxable profit for the year verified successfully: "+taxableProfitForTheYear.getAttribute("value"),true);
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 payFromAllEmploymentsAmt=n1+n2;//8050
 capitalGainsTaxdueAmt = n3;
 profitFromUKLandAndProperty = FHLAdjustedProfitForTheYear+FHLAdjustedProfitForTheYear1+AdjustedProfitForTheYear;//18,292.00


 totalincome = payFromAllEmploymentsAmt + capitalGainsTaxdueAmt + profitFromUKLandAndProperty;
 totlIncome=totalincome-personalAllowanceRate;
 Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
 Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

 Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
 Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
 Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",profitFromUKLandAndProperty));
 Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);

 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 basicRatePayPension = totlIncome - capitalGainsTaxdueAmt;//8700
 Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
 dueTax1 = basicRatePayPension*BR_rate;//£1740
 basicRateSaving= capitalGainsTaxdueAmt - nilRate1;//£3213
 Reporter.log("basicRateSaving: "+basicRateSaving,true);
 dueTax2=roundDown2(basicRateSaving*BR_rate);//£642.60
 Reporter.log("Basic Rate of Saving: "+dueTax2,true);
 totIncomeTaxDue = dueTax1+dueTax2;
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 notionalTaxFromGainsOnLifeAmt=n3*capitalGainsRateUpper;//842.6‬
 Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f", notionalTaxFromGainsOnLifeAmt));
 Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: "+amtNotionalTaxFromGainsOnLife.getText(),true);
 incomeTaxDueAmt = totIncomeTaxDue - notionalTaxFromGainsOnLifeAmt;
 //Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
 Reporter.log("Income Tax Due is verifired successfully"+incomeTaxDueAmt,true);
 }

 public void funcDelMTRTest131(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 131",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
 delProfit(driver);
 clickIncome(driver);
 clickEmployment(driver);
 delEmpInfo(driver);	
 funcDelAdditionalInfo(driver);
 }

 public void addTestCase132(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
 {
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 132",true);
 verifyBankIncome(driver);
 addBank(driver,str1, str1, str2);
 funcAddUntaxedInerest(driver,str3);//6710.40
 dividentUKCompanies(driver,"company1","",str4);//£5,009.93
 addOtherDivident(driver,str5,"0.00","0.00");//£224.47
 funcAddEmployerForMTR(driver, str6, str7);
 addEmpIncome.click();
 wLib.explicitWait(driver, 5,payFrmEmployer);
 payFrmEmployer.clear();
 payFrmEmployer.sendKeys(str8);
 TipsPaymentsNtOnP60.clear();
 TipsPaymentsNtOnP60.sendKeys(str9);
 isTeacherChkBox.click();
 SaveBtn1.click();
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver, 5,form1OpenBtn);
form1OpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
listbox1 = new Select(studentLoanTypeLstBox);
listbox1.selectByValue("1");
SaveBtn2.click();
 n1=Double.parseDouble(str3);//6710.40	
 n2=Double.parseDouble(str4);//5009.93
 n3=Double.parseDouble(str5);//224.47
 n4=Double.parseDouble(str8);//8000
 n5=Double.parseDouble(str9);//50.00
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 payFromAllEmploymentsAmt=n4+n5;//8050
 interestFromUKBanksBuildingAmt=Math.floor(n1);
 dividendsFromUKCompaniesAmt=Math.floor(n2)+Math.floor(n3);
 totalincome=payFromAllEmploymentsAmt+interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt;
 totlIncome = totalincome - personalAllowanceRate;
 Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
 Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
 Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
 Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

 Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
 Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
 Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 basicRateDividends=totlIncome-(dividentNillRate+nilRate1+SR_band);//£143
 Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
 dueTax1=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//£10.72
 totIncomeTaxDue=dueTax1;//£10.72
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
 studentLoanAmt=Math.floor((totalincome -plan1Threshold)*studentLoanRate); //149.00
 Assert.assertEquals(studentLoanAmountTaxWindow.getText().substring(1).replace(",", ""),String.format("%.2f",(studentLoanAmt)));
 Reporter.log("Student Loan repayments amount is verified: "+studentLoanAmountTaxWindow.getText(),true);
 finalAmount=totIncomeTaxDue+studentLoanAmt;//159.72
 Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",finalAmount));
 Reporter.log("Tax For This Year is verified: "+taxForThisYear.getText(),true);

 }
 public void funcDelMTRTest132(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 132",true);
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 checkLockbutton(driver);
 clickIncome(driver);
 delInterestfromUKbanks(driver);
 deleteDivident(driver);
 delOtherDivident(driver);
 clickEmployment(driver);
 delEmpInfo(driver);
 delStudentLoanRepayment(driver);
 }
 public void addTestCase133(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15)throws Exception
 {
 Reporter.log("Exceuting MTR Test Case 133",true);
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 clickIncome(driver);
 wLib.explicitWait(driver, 10,dividentLink);
 dividentLink.click();
 wLib.explicitWait(driver, 5,frm1Btn);
 frm1Btn.click();
 cis.switchwindowNew(driver);
 taxableIncapacityBenefit.clear();
 taxableIncapacityBenefit.sendKeys(str1);
 taxTakenOff.clear();
 taxTakenOff.sendKeys(str2);
 jobseekersAllowance.clear();
 jobseekersAllowance.sendKeys(str3);
 stateBenefitsSaveBtn.click();
 addOtherUKIncome(driver,str4,"",str5,"",str6);
 wLib.explicitWait(driver, 5,linkOtherTaxInformation);
 linkOtherTaxInformation.click();
 wLib.explicitWait(driver, 5,form1OpenBtn);
 form1OpenBtn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
 listbox1 = new Select(studentLoanTypeLstBox);
 listbox1.selectByValue("1");
 amountTxtBox.clear();
 amountTxtBox.sendKeys(str7);
 SaveBtn2.click();
 clickIncome(driver);
 funcAddEmployerForMTR(driver, str8, str9);
 addEmpIncome.click();
 wLib.explicitWait(driver, 5,payFrmEmployer);
 payFrmEmployer.clear();
 payFrmEmployer.sendKeys(str10);
 UkTaxTakenOffPay.clear();
 UkTaxTakenOffPay.sendKeys(str11);
 CompanyCarsAndVans.clear();
 CompanyCarsAndVans.sendKeys(str12);
 FuelForCompanyCarsAndVans.clear();
 FuelForCompanyCarsAndVans.sendKeys(str13);
 PrvtMedAndDntl.clear();
 PrvtMedAndDntl.sendKeys(str14);
 FxdExpnsDeductTxtBox.clear();
 FxdExpnsDeductTxtBox.sendKeys(str15);
 SaveBtn1.click();
 Reporter.log("Employment Income Added successfully",true);
 driver.navigate().refresh();
 n1=Double.parseDouble(str1); //400.00
 n2=Double.parseDouble(str2); //80.00
 n3=Double.parseDouble(str3); //1400.00
 n4=Double.parseDouble(str4); //376.18
 n5=Double.parseDouble(str5); //75.23
 n6=Double.parseDouble(str7); //826.65
 n7=Double.parseDouble(str10); //27515.00
 n8=Double.parseDouble(str11); //3728.00
 n9=Double.parseDouble(str12); //2250.00
 n10=Double.parseDouble(str13); //650.00
 n11=Double.parseDouble(str14); //75.00
 n12=Double.parseDouble(str15); //75.00
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 payFromAllEmploymentsAmt=n7;
 benefitsAndExpensesReceivedAmt=n9+n10+n11;
 allowableExpensesAmt = n12;
 totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
 UKPensionAndStateBenefitAmt = n1+n3;//1800
 otherIncomeAmt=Math.floor(n4);
 totalincome=totalFromAllEmployments + UKPensionAndStateBenefitAmt + otherIncomeAmt;
 totlIncome=totalincome- personalAllowanceRate;
 Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
 Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
 Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
 Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
 Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
 Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);

 Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
 Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 basicRatePayPension=totlIncome;
 Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
 dueTax1=basicRatePayPension*BR_rate;//4148.2
 incomeTaxDueAmt=dueTax1;
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxDueAmt)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 totalTaxDeductedAmt=n5+n2+n8;
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
 totIncomeTaxDue=incomeTaxDueAmt-totalTaxDeductedAmt;
 Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
 }
 public void delTestCase133(WebDriver driver) throws Exception {
	 Reporter.log("Deleting MTR Test Case 133",true);
	 wLib = new WaitStatementLib();
	 checkLockbutton(driver);
	 clickIncome(driver);
	 wLib.explicitWait(driver, 5,dividentLink);
	 dividentLink.click();
	 delUKPensionsAnnuities(driver);
	 delOtherUKIncome(driver);
	 clickEmployment(driver);
	 delEmpInfo(driver);
	 delStudentLoanRepayment(driver);
	 }
 public void addTestCase136(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15)throws Exception
 {
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 136",true);

 clickIncome(driver);
 funcAddEmployerForMTR(driver, str1, str2);
 addEmpIncome.click();
 wLib.explicitWait(driver, 5,payFrmEmployer);
 payFrmEmployer.clear();
 payFrmEmployer.sendKeys(str3);
 FxdExpnsDeductTxtBox.clear();
 FxdExpnsDeductTxtBox.sendKeys(str4);
 SaveBtn1.click();

 clickIncome(driver);
 wLib.explicitWait(driver, 5,linkForeignIncome);
 linkForeignIncome.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
 interestOtherincomefromoverseassavingsFormBtn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 5,countryCodeLstBox);
 listbox1=new Select(countryCodeLstBox);
 listbox1.selectByValue("9");
 wLib.explicitWait(driver,5,colBTxtBox);
 colBTxtBox.clear();
 colBTxtBox.sendKeys(str5);
 wLib.explicitWait(driver,5,colCTxtBox);
 colCTxtBox.clear();
 colCTxtBox.sendKeys(str6);
 SaveBtn2.click();

 wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
 dividendsFromForeignCompanies.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 2,countryCodeLstBox);
 listbox1=new Select(countryCodeLstBox);
 listbox1.selectByValue("20");
 wLib.explicitWait(driver,5,colBTxtBox);
 colBTxtBox.clear();
 colBTxtBox.sendKeys(str7);
 wLib.explicitWait(driver,5,colCTxtBox);
 colCTxtBox.clear();
 colCTxtBox.sendKeys(str8);
 wLib.explicitWait(driver,5,SaveBtn2);
 SaveBtn2.click();

 wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
 overseasPensionsSocialScurityBenefitsAndRoyalties.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 2,countryCodeLstBox);
 listbox1=new Select(countryCodeLstBox);
 listbox1.selectByValue("75");
 wLib.explicitWait(driver, 2,colBTxtBox);
 colBTxtBox.clear();
 colBTxtBox.sendKeys(str9);
 wLib.explicitWait(driver, 2,SaveBtn2);
 SaveBtn2.click();

 wLib.explicitWait(driver, 2,dividendIncomeReceivedByAPersonAbroadBtn);
 dividendIncomeReceivedByAPersonAbroadBtn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 2,countryCodeLstBox);
 listbox1=new Select(countryCodeLstBox);
 listbox1.selectByValue("75");
 wLib.explicitWait(driver, 2,colBTxtBox);
 colBTxtBox.clear();
 colBTxtBox.sendKeys(str10);
 colCTxtBox.clear();
 colCTxtBox.sendKeys(str11);
 wLib.explicitWait(driver, 5,SaveBtn2);
 SaveBtn2.click();

 wLib.explicitWait(driver, 2,incomeReceivedByPersonAbroadBtn);
 incomeReceivedByPersonAbroadBtn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 2,countryCodeLstBox);
 listbox1=new Select(countryCodeLstBox);
 listbox1.selectByValue("75");
 wLib.explicitWait(driver, 2,colBTxtBox);
 colBTxtBox.clear();
 colBTxtBox.sendKeys(str12);
 colCTxtBox.clear();
 colCTxtBox.sendKeys(str13);
 wLib.explicitWait(driver, 5,SaveBtn2);
 SaveBtn2.click();
 residentialFinanceCostReliefTxtBox.clear();
 residentialFinanceCostReliefTxtBox.sendKeys(str14);
 unUsedTOAAresidentialFinanceCostsBroughtForwardTxtBox.clear();
 unUsedTOAAresidentialFinanceCostsBroughtForwardTxtBox.sendKeys(str15);
 SaveBtn1.click();

 n1 = Double.parseDouble(str3);//471407.00
 n2 = Double.parseDouble(str4);//450.00
 n3 = Double.parseDouble(str5);//4227.00
 n4 = Double.parseDouble(str6);//507.00
 n5 = Double.parseDouble(str7);//16200.00
 n6 = Double.parseDouble(str8);//2430.00
 n7 = Double.parseDouble(str9);//4620.00
 n8 = Double.parseDouble(str10);//1263.00
 n9 = Double.parseDouble(str11);//189.00
 n10 = Double.parseDouble(str12);//6921.00
 n11 = Double.parseDouble(str13);//2076.00
 n12 = Double.parseDouble(str14);//800.00
 n13 = Double.parseDouble(str15);//100.00

 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 payFromAllEmploymentsAmt=n1;//471407.00
 allowableExpensesAmt = n2;//450
 totalFromAllEmployments = payFromAllEmploymentsAmt - allowableExpensesAmt;

 foreignIncomeCalc= (n3 - n4) + n7 + (n10 - n11);//13185
 dividendsFromForeignCompaniesCalc= (n5 - n6) + (n8 - n9);//14844
 totalincome = totalFromAllEmployments +foreignIncomeCalc + dividendsFromForeignCompaniesCalc;//498986

 Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
 Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
 Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
 Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
 Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",totalFromAllEmployments));
 Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);
 Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
 Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);

 Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",dividendsFromForeignCompaniesCalc));
 Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);


 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 basicRatePayPension=taxLimit1Uk;//£34,500.00
 Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
 dueTax1=basicRatePayPension*BR_rate; //£6,900.00
 heigherRatePayPension=taxLimit2;//115,500.00
 Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
 dueTax2=heigherRatePayPension*HR_rate;//46,200.00
 additionalRatePayPension= (totalFromAllEmployments + n7 + (n10 - n11)) - (basicRatePayPension + heigherRatePayPension);//330422
 Reporter.log("Additional Rate of Pay Pension: "+additionalRatePayPension,true);
 dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;//148689.9
 additionalRateSaving = n3 - n4;//3720
 Reporter.log("Additional Rate of Saving: "+additionalRateSaving,true);
 dueTax4=(additionalRateSaving*advancedRatePercentage)/100;//1674

 additionalRateDividends=dividendsFromForeignCompaniesCalc - dividentNillRate;//12844
 dueTax5= roundDown2((additionalRateDividends*dividendTaxAdditionalRate)/100);//4893.56
 Reporter.log("Additional Rate of Dividends: "+additionalRateDividends,true);
 totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5;

 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 amtReliefForFinanceCosts=(n12+n13)*reliefFinancerate;
 Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));//180.00
 Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);
 }

 public void funcDelMTRTest136(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 131",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
 clickIncome(driver);
 clickEmployment(driver);
 delEmpInfo(driver);
 clickIncome(driver);
 wLib.explicitWait(driver, 5,linkForeignIncome);
 linkForeignIncome.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 wLib.explicitWait(driver, 5,delOverseasSavings);
 delOverseasSavings.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 5,cnfmdel);
 cnfmdel.click();
 driver.navigate().refresh();
 wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
 delDividendsForeignComaniesBtn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 5,cnfmdel);
 cnfmdel.click();
 driver.navigate().refresh();
 wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
 delOverseasPensionsRoyaltiesBtn.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 5,cnfmdel);
 cnfmdel.click();
 driver.navigate().refresh();
 wLib.explicitWait(driver, 5,delDividendIncomeReceivedPersonAbroad);
 delDividendIncomeReceivedPersonAbroad.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 5,cnfmdel);
 cnfmdel.click();
 driver.navigate().refresh();
 wLib.explicitWait(driver, 5,delOtherIncomeRemittedForeignIncome);
 delOtherIncomeRemittedForeignIncome.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver, 5,cnfmdel);
 cnfmdel.click();
 driver.navigate().refresh();
 wLib.explicitWait(driver, 5,confirmDel);
 confirmDel.click();
 wLib.explicitWait(driver, 5,popup1);
 driver.switchTo().activeElement();
 yesBtn.click();
}
 public void addTestCase137(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8)throws Exception
 {
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 137",true);
 clickIncome(driver);
 funcAddEmployerForMTR(driver,str1, str2);
 addEmpIncome.click();
 wLib.explicitWait(driver, 5,payFrmEmployer);
 payFrmEmployer.sendKeys(str3);
 UkTaxTakenOffPay.sendKeys(str4);
 PrvtMedAndDntl.sendKeys(str5);
 GoodsEtcTxtBob.sendKeys(str6);
 AccommodationProvidedByEmployerTxtBox.sendKeys(str7);
 ProfFeesAndSubsTxtBox.sendKeys(str8);
 SaveBtn1.click();

 n1 = Double.parseDouble(str3);//101000.00
 n2 = Double.parseDouble(str4);//20430.00
 n3 = Double.parseDouble(str5);//500.00
 n4 = Double.parseDouble(str6);//5000.00
 n5 = Double.parseDouble(str7);//7500.00
 n6 = Double.parseDouble(str8);//175.00

 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5,taxCalSummaryLink);
 taxCalSummaryLink.click();
 payFromAllEmploymentsAmt=n1;//101000.00
 benefitsAndExpensesReceivedAmt=n3 + n4 + n5;//£13600
 allowableExpensesAmt =n6;//£410‬
 totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;

 totalincome = totalFromAllEmployments;
 reducedPersonalAllowanceAmt=Math.round(personalAllowanceRate - ((totalincome-personalAllowanceRateMaxLimit) *AA_excess));
 totlIncome = totalincome - reducedPersonalAllowanceAmt;

 Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
  Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
  Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
  Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
  Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
  Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
  Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
  Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	

 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(amountReducedPersonalAllowance.getText().substring(1).replace(",", ""),String.format("%.2f",reducedPersonalAllowanceAmt));		
 Reporter.log("Reduced Personal Allowance is Verified: "+amountReducedPersonalAllowance.getText(),true);

 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

 basicRatePayPension = taxLimit1Uk ;//34500
 Reporter.log("Basic Rate of Pay Pension: "+ basicRatePayPension,true);
 dueTax1 = basicRatePayPension * BR_rate;//£725
 heigherRatePayPension=totlIncome - basicRatePayPension;
 Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);

 dueTax2=heigherRatePayPension*HR_rate;

 totIncomeTaxDue = dueTax1 + dueTax2;
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

 totalTaxDeductedAmt =  n2;
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

 taxBalance = totIncomeTaxDue - totalTaxDeductedAmt;

 Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
 Reporter.log("Income Tax due is verifired successfully"+totalIncomeTaxDue.getText(),true);
 }
 
 public void delTestCase137(WebDriver driver) throws Exception {
 Reporter.log("Deleting MTR Test Case 137",true);
 wLib = new WaitStatementLib();
 checkLockbutton(driver);
 clickIncome(driver);
 clickEmployment(driver);
 delEmpInfo(driver);
 }  
 public void addTestCase149(WebDriver driver, String str1,String str2,String str3,String str4)throws Exception
 {
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 149",true);
 clickIncome(driver);
 wLib.explicitWait(driver, 10,dividentLink);
 dividentLink.click();
 wLib.explicitWait(driver, 5,frm1Btn);
 frm1Btn.click();
 cis.switchwindowNew(driver);
 totStatPension.clear();
 totStatPension.sendKeys(str1);//8052
 stateBenefitsSaveBtn.click();
 wLib.explicitWait(driver, 5,additionalInformationLink);
 additionalInformationLink.click();
 wLib.explicitWait(driver, 5,commonEditBtn);
 commonEditBtn.click();
 wLib.explicitWait(driver, 5,spousesNameTxtBox);
 spousesNameTxtBox.clear();
 spousesNameTxtBox.sendKeys(str2);
 spousesDateOfBirthTxtBox.clear();
 spousesDateOfBirthTxtBox.sendKeys(str3);
 dateOfMarriageOrCivilPartnershipTxtBox.clear();
 dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str4);
 saveAdditionalInfoBtn.click();

 n1 = Double.parseDouble(str1);//8052

 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 UKPensionAndStateBenefitAmt = n1;//8052
 totalincome = UKPensionAndStateBenefitAmt;
 totlIncome = totalincome - personalAllowanceRate;
 if(totlIncome <=0)
 {

 totlIncome = 0;
 }
 if (totlIncome == 0)
 {
 totIncomeTaxDue=0;
 }
 Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
 Reporter.log("Amount of UK pensions and State Benefits is Verified: "+amountUKpensionsAndStateBenefits.getText(),true);
 Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
 Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
 Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
 Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
 Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
 Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
 calculateMAT=(maxMAT - (maxMAT/month))*MATrate;
 Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
 Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);

 }
 public void funcDelMTRTest149(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 149",true);
 wLib = new WaitStatementLib();
 checkLockbutton(driver);
 clickIncome(driver);
 wLib.explicitWait(driver, 10,dividentLink);
 dividentLink.click();
 delUKPensionsAnnuities(driver);
 funcDelAdditionalInfo(driver);
 }

public void addTestCase150(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
{
Reporter.log("Exceuting MTR Test Case 150",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
funcAddForeignInterest(driver,str4);
addOtherUKIncome(driver,str5,"",str6,"",str7);
funcAddEmployerForMTR(driver, str8, str9);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str10);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str11);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str12);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//176.80
n2 = Double.parseDouble(str4);//200.00
n3 = Double.parseDouble(str5);//1500.00
n4 = Double.parseDouble(str6);//300.00
n5 = Double.parseDouble(str10);//8900.00
n6 = Double.parseDouble(str11);//17230.00
n7 = Double.parseDouble(str12);//9000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n5;//8900.00
benefitsAndExpensesReceivedAmt=n7;//9000.00
totalFromAllEmployments = payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt;//98,000
foreignIncomeCalc=n2;//200
interestFromUKBanksBuildingAmt = Math.floor(n1);
otherIncomeAmt=n3;
totalincome=totalFromAllEmployments + otherIncomeAmt +foreignIncomeCalc + interestFromUKBanksBuildingAmt;
totlIncome = totalincome - personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=taxLimit1Uk;//34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6,900.00
heigherRatePayPension = totlIncome-(basicRatePayPension+interestFromUKBanksBuildingAmt+foreignIncomeCalc);//53150	
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//21260
totIncomeTaxDue=dueTax1+dueTax2;//28700.00
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt = totIncomeTaxDue  - (n6+n4);
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Minus tax deducted is verified:" + totalIncomeTaxDue.getText(),true);
}
public void delTestCase150(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 150",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
delOtherUKIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
}
public void addTestCase151(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19)throws Exception
{
 Reporter.log("Exceuting MTR Test Case 151",true);
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
 clickIncome(driver);
 addBank(driver, str1, str1, str2);
 funcAddUntaxedInerest(driver,str3);
 funcAddForeignInterest(driver,str4);
 addOtherUKIncome(driver,str5,"",str6,"",str7);
 funcAddEmployerForMTR(driver, str8, str9);
 addEmpIncome.click();
 wLib.explicitWait(driver, 5,payFrmEmployer);
 payFrmEmployer.clear();
 payFrmEmployer.sendKeys(str10);
 UkTaxTakenOffPay.clear();
 UkTaxTakenOffPay.sendKeys(str11);
 CompanyCarsAndVans.clear();
 CompanyCarsAndVans.sendKeys(str12);
 EarningPTtoUAPTxtBox.sendKeys(str13);
 SaveBtn1.click();
 addPartnershipInfo1(driver,str14,str15, dateStart,str17);
 wLib.explicitWait(driver, 5, PartnershipShortFormLink);
 PartnershipShortFormLink.click();
 /*wLib.explicitWait(driver, 5,PartnerShipRefNo);
 PartnerShipRefNo.clear();
 PartnerShipRefNo.sendKeys(str15);*/
 CashBasisChkBox.click();
 wLib.explicitWait(driver, 5,BasisBusinessStartDate);
 BasisBusinessStartDate.clear();
 BasisBusinessStartDate.sendKeys(str16);
 wLib.explicitWait(driver, 5,BasisBusinessEndDate);
 BasisBusinessEndDate.clear();
 BasisBusinessEndDate.sendKeys(str17);
 yourShareOfPartnershipProfitLoss.clear();
 yourShareOfPartnershipProfitLoss.sendKeys(str18);
 overlapReliefUsedThisYear.clear();
 overlapReliefUsedThisYear.sendKeys(str19);
 SaveBtn1.click();
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
 PayClass2NICsvoluntarily.click();
 SaveBtn2.click();
 n1 = Double.parseDouble(str3);//176.80
 n2 = Double.parseDouble(str4);//200.00
 n3 = Double.parseDouble(str5);//1500.00
 n4 = Double.parseDouble(str6);//300.00
 n5 = Double.parseDouble(str10);//8900.00
 n6 = Double.parseDouble(str11);//17230.00
 n7 = Double.parseDouble(str12);//9000.00
 n8 = Double.parseDouble(str18);//1080.00
 n9 = Double.parseDouble(str19);//138.00
 SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
 Date start = dateFormat.parse(dateStart);
 Date end = dateFormat.parse(str17);
 int weeks1 = calculateWeek(start, end);
 Reporter.log("Weeks: " + weeks1,true);
 wLib.explicitWait(driver, 5,taxReturnLink);
 taxReturnLink.click();
 wLib.explicitWait(driver, 5, taxCalSummaryLink);
 taxCalSummaryLink.click();
 payFromAllEmploymentsAmt=n5;//8900.00
 benefitsAndExpensesReceivedAmt=n7;//9000.00
 totalFromAllEmployments = payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt;//98,000
 profitFromPartnershipsAmt = n8-n9;//942
 foreignIncomeCalc=n2;//200
 interestFromUKBanksBuildingAmt = Math.floor(n1);
 otherIncomeAmt=n3;
 totalincome=totalFromAllEmployments + profitFromPartnershipsAmt + otherIncomeAmt +foreignIncomeCalc + interestFromUKBanksBuildingAmt;
 if (totalincome > personalAllowanceRateMaxLimit)
 {
 total1 = totalincome - personalAllowanceRateMaxLimit;
 allowance1=total1/2;
 tax1=personalAllowanceRate-allowance1;
 totlIncome= totalincome - tax1;
 }

  
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;//34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6,900.00
heigherRatePayPension = totlIncome-(basicRatePayPension+interestFromUKBanksBuildingAmt+foreignIncomeCalc);//54501	
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//3,944.40
totIncomeTaxDue=dueTax1+dueTax2;//28700.00
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class2Amt = class2Rate * weeks1;//£150.45
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue+class2Amt)));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=(totIncomeTaxDue +class2Amt) - (n6+n4);
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2NationalInsurContriDueMinusDeduction.getText(),true);

}
 public void delTestCase151(WebDriver driver) throws Exception {
	 Reporter.log("Deleting MTR Test Case 151",true);
	 wLib = new WaitStatementLib();
	 cis = new CISPage(driver);
	 checkLockbutton(driver);
	 clickIncome(driver);
	 delInterestfromUKbanks(driver);
	 delOtherUKIncome(driver);
	 clickEmployment(driver);
	 delEmpInfo(driver);
	 clickIncome(driver);
	 delPartnershipShort(driver);
	 delPartnershipInfo(driver);
	 Class2Class4NICsForm.click();
	 cis.switchwindowNew(driver);
	 wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
	 PayClass2NICsvoluntarily.click();
	 SaveBtn2.click();
	 }
 public void addTestCase152(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18)throws Exception
 {
 wLib=new WaitStatementLib();
 cis=new CISPage(driver);
 Reporter.log("Exceuting MTR Test Case 152",true);
clickIncome(driver);
 addBank(driver,str1,str1,str2);
 addUKInterestNew(driver,str3);
 funcAddUntaxedInerest(driver,str4);
 dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver, 5,delButton);
delButton.click();
wLib.explicitWait(driver, 5,confDel);
confDel.click();
}
catch (Exception e)
{
    System.out.println(e.getMessage());
}*/
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str6);
tradingEnddateTxtBox.clear();
tradingEnddateTxtBox.sendKeys(str7);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str8);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str9);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str10);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str11);
ownGoodsAndServicesTxtBox.clear();
ownGoodsAndServicesTxtBox.sendKeys(str12);
anyOtherBusinessIncomeTxtBox.clear();
anyOtherBusinessIncomeTxtBox.sendKeys(str13);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
PayClass2NICsvoluntarily.click();  
SaveBtn2.click(); 
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str14);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str15);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str16);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str17);
commentTxtBox.clear();
commentTxtBox.sendKeys(str18);
SaveBtn1.click();
n1=Double.parseDouble(str3);//321
n2=Double.parseDouble(str4);//1625.00
n3=Double.parseDouble(str5);//128.00
n4=Double.parseDouble(str8);//14560.00
n5=Double.parseDouble(str9);//13603.00
n6=Double.parseDouble(str10);//1700.00
n7=Double.parseDouble(str11);//3926.00
n8=Double.parseDouble(str12);//720
n9=Double.parseDouble(str13);//250
n10=Double.parseDouble(str15);//99000.00
n11=Double.parseDouble(str16);//9000.00
n12=Double.parseDouble(str17);//90000.00
SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
Date start = dateFormat.parse(dateStart);
Date end = dateFormat.parse(str7);
int weeks1 = calculateWeek(start, end);
Reporter.log("Weeks: " + weeks1,true);
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome=((n4-n5)+(n7+n8)-n6)+n9;//4153
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt = n3;
totalincome=selfEmploymentIncome + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt;
if (totalincome >personalAllowanceRate)
	{
	totlIncome = totalincome - personalAllowanceRate;	
	}
else
{
totlIncome =0.00;
}
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
totIncomeTaxDue=totlIncome;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class2Amt = class2Rate * weeks1;//£150.45
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue+class2Amt)));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=(totIncomeTaxDue +class2Amt) - (n1*taxedUKInterestRate);
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2NationalInsurContriDueMinusDeduction.getText(),true);
otherGainsBasicAmt=taxLimit1Uk*capitalGainsRateLower;
Reporter.log("Other gains basic Amount: "+otherGainsBasicAmt,true);
otherGainsAmt = (n12-(taxLimit1Uk+annualExemptIndividualsProposed))*capitalGainsRateUpper;
Reporter.log("Other gains Amount: "+otherGainsAmt,true);
capitalGainsTaxdueAmt=otherGainsBasicAmt + otherGainsAmt;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
fnltax=totalTaxDeductedAmt+ capitalGainsTaxdueAmt;
Assert.assertEquals(AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
 public void funcDelMTRTest152(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 152",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
 clickIncome(driver);
 delInterestfromUKbanks(driver);
 deleteDivident(driver);
 clickIncome(driver);
 delSEshort(driver);
 driver.navigate().refresh();
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 PayClass2NICsvoluntarily.click();  
 SaveBtn2.click(); 
 delCGI(driver);
 }
public void addTestCase153(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 153",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
addOtherUKIncome(driver,str6,str7,str8,"",str9);

wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str10);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str11);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
wLib.explicitWait(driver, 2,trunoverTxtBox);
//Business Income
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str12);
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str13);
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str14);
repairandRenewalsPropertyTxtBox.clear();
repairandRenewalsPropertyTxtBox.sendKeys(str15);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str16);
irrecoverabledebtsTxtBox.clear();
irrecoverabledebtsTxtBox.sendKeys(str17);
annualinvestmentTxtBox.clear();
annualinvestmentTxtBox.sendKeys(str18);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
averagingAdjustment.clear();
averagingAdjustment.sendKeys(str19);
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str20);
wLib.explicitWait(driver, 10,SaveBtn1);
SaveBtn1.click();
driver.navigate().refresh();
addPartnershipInfo1(driver,str21,str24, str22,str23);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str24);*/
CashBasisChkBox.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(str25);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(str26);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str27);
overlapReliefUsedThisYear.clear();
overlapReliefUsedThisYear.sendKeys(str28);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 30,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str29);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str30);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str31);
SaveBtn1.click();
n1= Double.parseDouble(str3);// 321
n2= Double.parseDouble(str4);// 1625
n3= Double.parseDouble(str5);// 128
n4= Double.parseDouble(str6);// 833
n5= Double.parseDouble(str7);// 113
n6 = Double.parseDouble(str8);// 144
n7 = Double.parseDouble(str12);// 82959
n8 = Double.parseDouble(str13);// 19144
n9 = Double.parseDouble(str14);// 3780
n10 = Double.parseDouble(str15);// 4203
n11= Double.parseDouble(str16);// 216
n12 = Double.parseDouble(str17);// 1317
n13 = Double.parseDouble(str18);// 6350
n14 = Double.parseDouble(str19);// 3000
n15 = Double.parseDouble(str20);// -76900
n16 = Double.parseDouble(str27);// 1080
n17 = Double.parseDouble(str28);// 138
n18 = Double.parseDouble(str30);// 7800
n19 = Double.parseDouble(str31);// 4200

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome = ((n7-(n8+n9+n10+n11+n12))-n13)+n14;//50949
profitFromPartnershipsAmt = n16-n17;//942
profitFromUKLandAndProperty =n18-n19; //£3,600
interestFromUKBanksBuildingAmt =Math.floor(n1*taxedUKInterestRate)+n1+n2; //2026
dividendsFromUKCompaniesAmt = n3;//128
otherIncomeAmt = n4-n5;//720
totalincome = selfEmploymentIncome + profitFromPartnershipsAmt + profitFromUKLandAndProperty + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + otherIncomeAmt;//58,365.00	 
totlIncome = totalincome - personalAllowanceRate;//
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;//34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6,900.00
heigherRatePayPension = totlIncome-(basicRatePayPension+interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt);//9,861.00	
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//3,944.40
heigherRateSaving=interestFromUKBanksBuildingAmt - nilRate2;//1,526.00	
Reporter.log("Heigher Rate of saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//£610.40
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;//11,454.80
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class4Amt=(((selfEmploymentIncome + profitFromPartnershipsAmt)-class4LPLAmt)-nIC_Band)*class4UPLRate;//110.82
Assert.assertEquals(class4NationalInsurancecontributions2_test153.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
total1=class4_2Amt+totIncomeTaxDue;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Due is verified: " + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=((n1*giftAidRate)-n1)+n6;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=total1-totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);	
}
public void funcDelMTRTest153(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 153",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
delSelfEmpFull(driver);
delProfit(driver);
}
public void addTestCase154(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 154",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver, 5,delButton);
delButton.click();
wLib.explicitWait(driver, 5,confDel);
confDel.click();
}
catch (Exception e)
{
    System.out.println(e.getMessage());
}*/
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str6);
tradingEnddateTxtBox.clear();
tradingEnddateTxtBox.sendKeys(str7);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str8);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str9);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str10);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str11);
ownGoodsAndServicesTxtBox.clear();
ownGoodsAndServicesTxtBox.sendKeys(str12);
anyOtherBusinessIncomeTxtBox.clear();
anyOtherBusinessIncomeTxtBox.sendKeys(str13);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
PayClass2NICsvoluntarily.click();  
SaveBtn2.click();
driver.navigate().refresh();
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str14);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str15);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str16);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str17);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str18);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str19);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str20);
lossBFAndUsedInYearTxtBox.clear();
lossBFAndUsedInYearTxtBox.sendKeys(str21);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str22);
commentTxtBox.clear();
commentTxtBox.sendKeys(str23);
SaveBtn1.click();
n1=Double.parseDouble(str3); //321.00
n2=Double.parseDouble(str4); //1625.00
n3=Double.parseDouble(str5); //128.00
n4=Double.parseDouble(str8);//14560.00
n5=Double.parseDouble(str9);//13603.00
n6=Double.parseDouble(str10);//1700.00
n7=Double.parseDouble(str11);//3926.00
n8=Double.parseDouble(str12);//720.00
n9=Double.parseDouble(str13);//250.00
n10=Double.parseDouble(str15);//12000.00
n11=Double.parseDouble(str16);//12000.00
n12=Double.parseDouble(str19);//27000.00
n13=Double.parseDouble(str20);//27000.00
n14=Double.parseDouble(str21);//9000.00
n15=Double.parseDouble(str22);//12000.00
SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
Date start = dateFormat.parse(dateStart);
Date end = dateFormat.parse(str7);
int weeks1 = calculateWeek(start, end);
Reporter.log("Weeks: " + weeks1,true);
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt=n3;
selfEmploymentIncome=((n4-n5)+(n7+n8)-n6)+n9;//4153
totalincome=interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt+selfEmploymentIncome;
totlIncome=totalincome - personalAllowanceRate;
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Amount of Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class2Amt = class2Rate * weeks1;//£150.45
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue+class2Amt)));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=(totIncomeTaxDue +class2Amt) - (n1*taxedUKInterestRate);
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2NationalInsurContriDueMinusDeduction.getText(),true);
gainsThatQualifyRorEntrepreneursAmt=n15*capitalGainsRateLower;//£1,200.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
total1=(((n11-n15)+0+n12)-n14)-annualExemptIndividualsProposed;//£6,300
otherGainsBasicAmt=total1*capitalGainsRateLower;//£6,30
Reporter.log("Other gains basic rate: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt;//£2,460.00
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
fnltax=totalTaxDeductedAmt+ capitalGainsTaxdueAmt;
Assert.assertEquals(AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest154(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 154",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
checkLockbutton(driver);
delSEshort(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
PayClass2NICsvoluntarily.click();  
SaveBtn2.click(); 
driver.navigate().refresh();
delCGI(driver);
}

public void addTestCase155(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 155",true);
clickIncome(driver);
addBank(driver,str1,str1,str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver,5,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver,5,delButton);
delButton.click();
wLib.explicitWait(driver,5,confDel);
confDel.click();
}
catch(Exception e)
{
System.out.println(e.getMessage());
}*/
wLib.explicitWait(driver,5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver,5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str6);
tradingEnddateTxtBox.clear();
tradingEnddateTxtBox.sendKeys(str7);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str8);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str9);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str10);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str11);
ownGoodsAndServicesTxtBox.clear();
ownGoodsAndServicesTxtBox.sendKeys(str12);
anyOtherBusinessIncomeTxtBox.clear();
anyOtherBusinessIncomeTxtBox.sendKeys(str13);
SaveBtn1.click();
driver.navigate().refresh();
wLib.explicitWait(driver,5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str14);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str15);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
arrangementChkBox.click();
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str16);//175264
businessIncomeOtherTxtBox.clear();
businessIncomeOtherTxtBox.sendKeys(str17);//5460
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str18);//10640
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str19);//2421
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str20);//25623
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str21);//640
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str22);//1562
disexpCarandVanTxtBox.clear();
disexpCarandVanTxtBox.sendKeys(str23);//561
disexpRentTxtBox.clear();
disexpRentTxtBox.sendKeys(str24);//2135
restrictedCostingTxtBox.clear();
restrictedCostingTxtBox.sendKeys(str25);//4500.00
balancingChargeOnSalesTxtBox.clear();
balancingChargeOnSalesTxtBox.sendKeys(str26);//620.00
adjustmentChangeofAccountTxtBox.clear();
adjustmentChangeofAccountTxtBox.sendKeys(str27);//15200.00
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
lossBroughtForwardProfitTxtBox.clear();
lossBroughtForwardProfitTxtBox.sendKeys(str28);//5692.00
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str29);//15000.00
adjustmentProfitTxtBox.clear();
adjustmentProfitTxtBox.sendKeys(str30);//15200.00
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver,2,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver,5,editBtn);
editBtn.click();
wLib.explicitWait(driver,5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str31);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str32);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str33);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str34);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str35);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str36);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str37);
lossBFAndUsedInYearTxtBox.clear();
lossBFAndUsedInYearTxtBox.sendKeys(str38);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str39);
commentTxtBox.clear();
commentTxtBox.sendKeys(str40);
SaveBtn1.click();
SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
Date start = dateFormat.parse(dateStart);
Date end = dateFormat.parse(str7);
int weeks1 = calculateWeek(start, end);
Reporter.log("Weeks: " + weeks1,true);

n1 = Double.parseDouble(str3); // 321
n2 = Double.parseDouble(str4); // 1625
n3 = Double.parseDouble(str5); // 128
n4 = Double.parseDouble(str8); // 14560
n5 = Double.parseDouble(str9); // 13603
n6 = Double.parseDouble(str10); // 1700
n7 = Double.parseDouble(str11); // 3926
n8 = Double.parseDouble(str12); // 720
n9 = Double.parseDouble(str13); // 250
n10 = Double.parseDouble(str16); // 175264
n11 = Double.parseDouble(str17); // 5460
n12 = Double.parseDouble(str18); // 10640
n13 = Double.parseDouble(str19); // 2421
n14 = Double.parseDouble(str20); // 25623
n15 = Double.parseDouble(str21); // 640
n16 = Double.parseDouble(str22); // 1562
n17 = Double.parseDouble(str23); // 561
n18 = Double.parseDouble(str24); // 2135
n19 = Double.parseDouble(str25); // 4500
n20 = Double.parseDouble(str26); // 620
n21 = Double.parseDouble(str27); // 15200
n22 = Double.parseDouble(str28); // 5692
n23 = Double.parseDouble(str29); // 15000
n24 = Double.parseDouble(str30); // 15200
n25 = Double.parseDouble(str32); // 12000
n26 = Double.parseDouble(str33); // 12000
n27 = Double.parseDouble(str36); // 27000
n28 = Double.parseDouble(str37); // 27000
n29 = Double.parseDouble(str38); // 9000
n30 = Double.parseDouble(str39); // 12000
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
total1=((n4-n5)+(n7+n8)-n6)+n9;//4153
total2 =((((n10+n11)-(n12+n13+n14+n15+n16))+(n17+n18+n20))-n19)+n21;//153,854.00	
selfEmploymentIncome= total1 + total2;//158,007.00	 
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+ n2;
dividendsFromUKCompaniesAmt = n3;
totalincome=selfEmploymentIncome + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt;
incomeTaxReliefAmt=n22;
totlIncome = totalincome - incomeTaxReliefAmt;
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;//34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6,900.00
heigherRatePayPension = taxLimit2;//115,500.00
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//46,200.00	
additionalRatePayPension=selfEmploymentIncome -(basicRatePayPension + heigherRatePayPension + incomeTaxReliefAmt);
dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;//1,041.75
additionalRateSaving=interestFromUKBanksBuildingAmt;//2,026.00	
dueTax4=(additionalRateSaving*advancedRatePercentage)/100;//911.705
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;//55,053.45
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class4Amt=(((((selfEmploymentIncome-(n21+incomeTaxReliefAmt))-class4LPLAmt)-nIC_Band)))*class4UPLRate;//1,815.30
Assert.assertEquals(class4NationalInsurancecontributions2_test155.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt)));
Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions2_test155.getText(),true);
class2Amt = class2Rate * weeks1;//£150.45
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue+class4_2Amt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Due is verified: " + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=n1*taxedUKInterestRate;//£80.25
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=(totIncomeTaxDue+class4_2Amt)-totalTaxDeductedAmt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt1));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified :" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);
gainsThatQualifyRorEntrepreneursAmt=(n30*entrepreneursReliefRate)/100;//£1,200.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
total3=(((n26-n30)+n28)-n29)-annualExemptIndividualsProposed;//£6,300
otherGainsBasicAmt=total3*BR_rate;//£1,260.00
Reporter.log(" Other gains: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt;//£2,460.00
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
fnltax=totalTaxDeductedAmt1+ capitalGainsTaxdueAmt;//62,812.29
Assert.assertEquals(AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),AmtIncomeTaxCapitalGainsTaxClass2AndClass4NationalInsurancecontributions.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}
public static int calculateWeek(Date start, Date end) {
    Calendar cal = new GregorianCalendar();
    cal.setTime(start);

    int weeks = 0;
    while (cal.getTime().before(end)) {
        cal.add(Calendar.WEEK_OF_YEAR, 1);
        weeks++;
    }
    return weeks;
}
public void funcDelMTRTest155(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 155",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
clickIncome(driver);
delSEshort(driver);
delSelfEmpFull(driver);
delCGI(driver);
}
public void addTestCase156(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16)throws Exception
{
 Reporter.log("Exceuting MTR Test Case 156",true);
 wLib = new WaitStatementLib();
 cis = new CISPage(driver);
addPartnershipInfo1(driver,str1,str2, str3,str4);

 wLib.explicitWait(driver, 5, PartnershipShortFormLink);
 PartnershipShortFormLink.click();
/* wLib.explicitWait(driver, 5,PartnerShipRefNo);
 PartnerShipRefNo.clear();
 PartnerShipRefNo.sendKeys(str2);*/
 CashBasisChkBox.click();
 wLib.explicitWait(driver, 5,BasisBusinessStartDate);
 BasisBusinessStartDate.clear();
 BasisBusinessStartDate.sendKeys(str3);
 wLib.explicitWait(driver, 5,BasisBusinessEndDate);
 BasisBusinessEndDate.clear();
 BasisBusinessEndDate.sendKeys(str4);
 yourShareOfPartnershipProfitLoss.clear();
 yourShareOfPartnershipProfitLoss.sendKeys(str5);
 overlapReliefUsedThisYear.clear();
 overlapReliefUsedThisYear.sendKeys(str6);
 SaveBtn1.click();
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
 PayClass2NICsvoluntarily.click();
 SaveBtn2.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str7);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str8);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str9);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str10);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str11);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str12);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str13);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str14);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str15);
commentTxtBox.clear();
commentTxtBox.sendKeys(str16);
SaveBtn1.click();
Reporter.log("Capital Gain Income added successfully",true);
n1 = Double.parseDouble(str5);//1080.00
n2 = Double.parseDouble(str6);//138.00
n3 = Double.parseDouble(str8);//37000
n4 = Double.parseDouble(str9);//12000
n5 = Double.parseDouble(str10);//25000
n6 = Double.parseDouble(str13);//25000
n7 = Double.parseDouble(str14);//25000
n8 = Double.parseDouble(str15);//20000
SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
Date start = dateFormat.parse(dateStart);
Date end = dateFormat.parse(str4);
int weeks1 = calculateWeek(start, end);
Reporter.log("Weeks: " + weeks1,true);
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromPartnershipsAmt = n1-n2;//942
totalincome = profitFromPartnershipsAmt;
totlIncome= totalincome - personalAllowanceRate;
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

class2Amt = class2Rate * weeks1;//£73.75
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
incomeTaxDueAmt=totIncomeTaxDue+class2Amt;
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
gainsThatQualifyRorEntrepreneursAmt = n8*capitalGainsRateLower;//£2,000.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
total1=taxLimit1Uk-n8;
otherGainsBasicAmt = total1 * capitalGainsRateLower;//£1450
Reporter.log("20% of Other gains: "+otherGainsBasicAmt,true);
total2 = (((n5 - n8)+n7)-annualExemptIndividualsProposed)-total1;
otherGainsAmt = total2*capitalGainsRateUpper;//760.00
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt + otherGainsAmt;
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=capitalGainsTaxdueAmt + incomeTaxDueAmt;
Assert.assertEquals(AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+AmtIncomeTaxCapitalGainsTaxClass2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+taxForThisYear.getText(),true);
}

public void delTestCase156(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 156",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
PayClass2NICsvoluntarily.click();
SaveBtn2.click();
delCGI(driver);
}
public void addTestCase157(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 157",true);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
verifyGiftAid(driver);
addGiftAidPayment(driver, str1);//950
otherGiftAidpayment(driver, str2, "");
driver.navigate().refresh();
addPartnershipInfo1(driver,str3,str4, dateStart,str6);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str4);*/
CashBasisChkBox.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(str5);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(str6);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str7);
overlapReliefUsedThisYear.clear();
overlapReliefUsedThisYear.sendKeys(str8);
SaveBtn1.click();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str9);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str10);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str11);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str12);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str13);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str14);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str15);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str16);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str17);
commentTxtBox.clear();
commentTxtBox.sendKeys(str18);
SaveBtn1.click();
Reporter.log("Capital Gain Income added successfully",true);
n1 = Double.parseDouble(str1);//950.00
n2 = Double.parseDouble(str2);//300.00
n3 = Double.parseDouble(str7);//1080.00
n4 = Double.parseDouble(str8);//138.00
n5 = Double.parseDouble(str10);//37000
n6 = Double.parseDouble(str11);//12000
n7 = Double.parseDouble(str12);//25000
n8 = Double.parseDouble(str15);//25000
n9 = Double.parseDouble(str16);//25000
n10 = Double.parseDouble(str17);//20000

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();

profitFromPartnershipsAmt = n3-n4;//942
totalincome = profitFromPartnershipsAmt;
totlIncome= totalincome - personalAllowanceRate;
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
total1=n1-n2;
total2=(Math.round(total1*giftAidRate)+taxLimit1Uk)-n10;
gainsThatQualifyRorEntrepreneursAmt = n10*capitalGainsRateLower;//£2,000.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
otherGainsBasicAmt = total2 * capitalGainsRateLower;//£1531.30
Reporter.log("20% of Other gains: "+otherGainsBasicAmt,true);

total3 = (((n7 - n10)+n9)-annualExemptIndividualsProposed)-total2;
otherGainsAmt = total3*capitalGainsRateUpper;//597.40
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt+otherGainsBasicAmt + otherGainsAmt;
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=capitalGainsTaxdueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void delTestCase157(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 157",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
delInfoGiftAid(driver);
clickIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click();
delCGI(driver);
}
public void addTestCase158(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40)throws Exception
{
Reporter.log("Exceuting MTR Test Case 158",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
addPartnershipInfo1(driver,str1,str2, str3,str4);
wLib.explicitWait(driver, 5,PartnershipFullFormLink);
PartnershipFullFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str2);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(str3);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(str4);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str5);
adjustmentBasisPeriodAccountingPeriod.clear();
adjustmentForChangeOfAccountingPractice.clear();
foreignTaxclaimedAsDeduction.clear();
adjustmentToProfitsChargeableToClass4NICsTxtBox.clear();
shareUKUntaxedSavingsIncomeTxtBox.clear();
adjustmentToUKIncomeForBasisPeriodTxtBox.clear();
shareOfForeignUntaxedSavingsIncomeTxtBox.clear();
untaxedAdjustmentToIncomeForBasisPeriodTxtBox.clear();
shareOfOtherUntaxedUKIncomeTxtBox.clear();
untaxedUKIncomeAdjustmentToIncomeForBasisPeriodTxtBox.clear();
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.clear();
shareOfIncomeFromOffshoreFundsTxtBox.clear();
adjustmentToIncomeOffshoreForBasisPeriodTxtBox.clear();
totalForeignTaxTakenOffAndForeignTaxTxtBox.clear();
shareOfOtherUntaxedForeignIncomeTxtBox.clear();
adjustmentToUntaxedIncomeForBasisPeriodTxtBox.clear();
totalForeignFaxTakenOffTxtBox.clear();
untaxedResidentialFinanceCostsTxtBox.clear();
dividendIncomeTxtBox.clear();
shareOfTaxedIncomeTaxableTxtBox.clear();
dividendIncomeTotalForeignTaxTakenOffTxtBox.clear();
shareOfOtherTaxedIncomeTxtBox.clear();
dividendIncomeTotalForeignTaxCreditTakenOffTxtBox.clear();
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.clear();
shareOfCISDeductionsMadeByContractorsTxtBox.clear();
adjustmentBasisPeriodAccountingPeriod.sendKeys(str6);
adjustmentForChangeOfAccountingPractice.sendKeys(str7);
foreignTaxclaimedAsDeduction.sendKeys(str8);
adjustmentToProfitsChargeableToClass4NICsTxtBox.sendKeys(str9);
shareUKUntaxedSavingsIncomeTxtBox.sendKeys(str10);
adjustmentToUKIncomeForBasisPeriodTxtBox.sendKeys(str11);
shareOfForeignUntaxedSavingsIncomeTxtBox.sendKeys(str12);
untaxedAdjustmentToIncomeForBasisPeriodTxtBox.sendKeys(str13);
shareOfOtherUntaxedUKIncomeTxtBox.sendKeys(str14);
untaxedUKIncomeAdjustmentToIncomeForBasisPeriodTxtBox.sendKeys(str15);
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.sendKeys(str16);
shareOfIncomeFromOffshoreFundsTxtBox.sendKeys(str17);
adjustmentToIncomeOffshoreForBasisPeriodTxtBox.sendKeys(str18);
totalForeignTaxTakenOffAndForeignTaxTxtBox.sendKeys(str19);
shareOfOtherUntaxedForeignIncomeTxtBox.sendKeys(str20);
adjustmentToUntaxedIncomeForBasisPeriodTxtBox.sendKeys(str21);
totalForeignFaxTakenOffTxtBox.sendKeys(str22);
untaxedResidentialFinanceCostsTxtBox.sendKeys(str23);
dividendIncomeTxtBox.sendKeys(str24);
shareOfTaxedIncomeTaxableTxtBox.sendKeys(str25);
dividendIncomeTotalForeignTaxTakenOffTxtBox.sendKeys(str26);
shareOfOtherTaxedIncomeTxtBox.sendKeys(str27);
dividendIncomeTotalForeignTaxCreditTakenOffTxtBox.sendKeys(str28);
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.sendKeys(str29);
shareOfCISDeductionsMadeByContractorsTxtBox.sendKeys(str30);
SaveBtn1.click(); 
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str31);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str32);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str33);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str34);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str35);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str36);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str37);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str38);
totalERGainForTheYearTxtBox.clear();
totalERGainForTheYearTxtBox.sendKeys(str39);
commentTxtBox.clear();
commentTxtBox.sendKeys(str40);
SaveBtn1.click();
Reporter.log("Capital Gain Income added successfully",true);
n1 = Double.parseDouble(str5);// 222960
n2 = Double.parseDouble(str6);// -44592.00
n3 = Double.parseDouble(str7);// 11560.00
n4 = Double.parseDouble(str8);// 1263.00
n5 = Double.parseDouble(str9);// 8269.00
n6 = Double.parseDouble(str10);// 21569.00
n7 = Double.parseDouble(str11);// -4314.00
n8 = Double.parseDouble(str12);// 1620.00
n9 = Double.parseDouble(str13);// -324
n10 = Double.parseDouble(str14);// 13625.00
n11 = Double.parseDouble(str15);// -2725.00
n12 = Double.parseDouble(str16);// 1122.00
n13 = Double.parseDouble(str17);// 6791.00
n14 = Double.parseDouble(str18);// -1359.00
n15 = Double.parseDouble(str19);// 671.00
n16 = Double.parseDouble(str20);// 10640.00
n17 = Double.parseDouble(str21);// -2128.00
n18 = Double.parseDouble(str22);// 1064.00
n19 = Double.parseDouble(str23);// 450.00
n20 = Double.parseDouble(str24);// 1365.00
n21 = Double.parseDouble(str25);// 5462.00
n22 = Double.parseDouble(str26);// 547.00
n23 = Double.parseDouble(str27);// 216.00
n24 = Double.parseDouble(str28);// 182.00
n25 = Double.parseDouble(str29);// 11245.00
n26 = Double.parseDouble(str30);// 8670.00
n27 = Double.parseDouble(str32);//37000
n28 = Double.parseDouble(str33);//12000
n29 = Double.parseDouble(str34);//25000
n30 = Double.parseDouble(str37);//25000
n31 = Double.parseDouble(str38);//25000
n32 = Double.parseDouble(str39);//20000
SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
Date start = dateFormat.parse(dateStart);
Date end = dateFormat.parse(str4);
int weeks1 = calculateWeek(start, end);
Reporter.log("Weeks: " + weeks1,true);
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
							
profitFromPartnershipsAmt = (n1+n2+n3+n6+n7+n8+n9+n10+n11+n13+n14+n16+n17+n20+n21+n23)-(n4+n15+n18+n22+n24);//236639
totalincome = profitFromPartnershipsAmt ;//£236639 
incomeTaxReliefAmt=n12;//1122
totlIncome =  totalincome -incomeTaxReliefAmt;
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;//34500
Reporter.log("Basic Rate Pay of Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//69001
heigherRatePayPension=taxLimit2;//115,500.00
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//46,200.00
total1 = (((n1+n2+n3)-n4)+((n10+n11)-n12)+((n13+n14)-n15)+((n16+n17)-n18)+n23)-n24;//210686
Reporter.log("total1:"+total1,true);
additionalRatePayPension = total1 - (basicRatePayPension + heigherRatePayPension);//60686
Reporter.log("Additional Rate of Pay Pension: "+additionalRatePayPension,true);
dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;//27308.7
additionalRateSaving=(n6+n7+n8+n9+(n21-n22));//23466
Reporter.log("Additional Rate of Saving: "+additionalRateSaving,true);
dueTax4=(additionalRateSaving*advancedRatePercentage)/100;//10559.7
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = n19 * reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//190
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtReliefForFinanceCosts;
Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);

class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
total2=((((n1+n2+n3)-n4)-n5)-class4LPLAmt)-nIC_Band;//134,046.00	
class4Amt=total2*class4UPLRate;//2,680.92
Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = round(class2Rate * weeks1,2);//£147.50
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",class4_2Amt));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully: "+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);

incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs + class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt = incomeTaxDueAmt - (n25+n26);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);	

gainsThatQualifyRorEntrepreneursAmt = n32*capitalGainsRateLower;//£2,000.00
Reporter.log("Gains that qualify for Entrepreneurs' Relief: "+gainsThatQualifyRorEntrepreneursAmt,true);
total3 = ((n29 - n32) + 0 + n31)-annualExemptIndividualsProposed;
otherGainsAmt = total3*capitalGainsRateUpper;//760.00
capitalGainsTaxdueAmt=gainsThatQualifyRorEntrepreneursAmt + otherGainsAmt;
Reporter.log("Capital Gains Tax due: "+capitalGainsTaxdueAmt,true);
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=capitalGainsTaxdueAmt + totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+taxForThisYear.getText(),true);
}

public void delTestCase158(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 158",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);
delCGI(driver);
}
public void addTestCase159(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
{
Reporter.log("Exceuting MTR Test Case 159",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
addOtherUKIncome(driver,str1,str2,str3,"",str4);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str5);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str6);
wLib.explicitWait(driver, 5,saveAdditionalInfoBtn);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str7);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str8);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str9);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str10);
propertyEtcAttributedGainTxtBox.clear();
propertyEtcAttributedGainTxtBox.sendKeys(str11);
commentTxtBox.clear();
commentTxtBox.sendKeys(str12);
SaveBtn1.click();
n1 = Double.parseDouble(str1);//6020.00
n2 = Double.parseDouble(str2);//1000.00
n3 = Double.parseDouble(str3);//1004.00
n4 = Double.parseDouble(str5);//100000.00
n5 = Double.parseDouble(str6);//5
n6 = Double.parseDouble(str8);//212000.00
n7 = Double.parseDouble(str9);//197000.00
n8 = Double.parseDouble(str10);//15000.00
n9 = Double.parseDouble(str11);//8,000.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
capitalGainsTaxdueAmt=n4;
otherIncomeAmt = n1 - n2;//5020
totalincome = capitalGainsTaxdueAmt + otherIncomeAmt;
if (totalincome > personalAllowanceRateMaxLimit)
{
reducedPersonalAllowanceAmt=personalAllowanceRate - ((totalincome-personalAllowanceRateMaxLimit) *AA_excess);
totlIncome=totalincome - reducedPersonalAllowanceAmt;	
}

Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",otherIncomeAmt));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amountReducedPersonalAllowance.getText().substring(1).replace(",", ""),String.format("%.2f",reducedPersonalAllowanceAmt));		
Reporter.log("Reduced Personal Allowance is Verified: "+amountReducedPersonalAllowance.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
startedRateSaving=SR_band;//5000
basicRateSaving=taxLimit1Uk-(SR_band + nilRate2);//29000
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax1=basicRateSaving*BR_rate;//5800
Reporter.log("Amount of Basic Rate of Saving: "+dueTax2,true);
heigherRateSaving=totlIncome-(startedRateSaving + nilRate2 + basicRateSaving);//61180
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax2=heigherRateSaving*HR_rate;//24472
totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

total1 = (basicRateSaving * BR_rate)+(heigherRateSaving * HR_rate);//30,272‬
total2 = totlIncome * BR_rate;
topSlicingReliefVal=total1 - total2;
Reporter.log("Top Slicing Relief Value: "+topSlicingReliefVal,true);
Assert.assertEquals(topSlicingReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(topSlicingReliefVal)));
Reporter.log("Amount of Top Slicing Relief is verifired successfully"+topSlicingReliefAmt.getText(),true);
notionalTaxFromGainsOnLifeAmt = totlIncome *BR_rate ;
//notionalTaxFromGainsOnLifeAmt = totlIncome * BR_rate ;
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: " + amtNotionalTaxFromGainsOnLife.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue-(notionalTaxFromGainsOnLifeAmt + topSlicingReliefVal);
totalTaxDeductedAmt=n3;
if (incomeTaxdueafterallowancesandreliefs < totalTaxDeductedAmt)
{
	incomeTaxdueafterallowancesandreliefs = 0;
}
incomeTaxDueAmt = totalTaxDeductedAmt - incomeTaxdueafterallowancesandreliefs;

Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);

capitalGainsTaxdueAmt=annualExemptIndividuals*capitalGainsRateLower;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));//£1130.00
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

Totaltax= capitalGainsTaxdueAmt - incomeTaxDueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",Totaltax));//£126
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}

public void funcDelMTRTest159(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 159",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delCGI(driver);
funcDelAdditionalInfo(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delOtherUKIncome(driver);
}
public void addTestCase160(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 160",true);
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str3);
TipsPaymentsNtOnP60.clear();
TipsPaymentsNtOnP60.sendKeys(str4);
isTeacherChkBox.click();
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str5);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str6);
wLib.explicitWait(driver, 5,saveAdditionalInfoBtn);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str7);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str8);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str9);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str10);
propertyEtcAttributedGainTxtBox.clear();
propertyEtcAttributedGainTxtBox.sendKeys(str11);
commentTxtBox.clear();
commentTxtBox.sendKeys(str12);
SaveBtn1.click();

n1=Double.parseDouble(str3); //8000
n2=Double.parseDouble(str4); //50.00
n3 = Double.parseDouble(str5);//100000.00
n4 = Double.parseDouble(str6);//5
n5 = Double.parseDouble(str8);//212000.00
n6 = Double.parseDouble(str9);//197000.00
n7 = Double.parseDouble(str10);//15000.00
n8 = Double.parseDouble(str11);//8,000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n1+n2;//8050
capitalGainsTaxdueAmt=n3;
totalincome = payFromAllEmploymentsAmt + capitalGainsTaxdueAmt;

if (totalincome > personalAllowanceRateMaxLimit)
{
reducedPersonalAllowanceAmt=personalAllowanceRate - (totalincome-personalAllowanceRateMaxLimit) *AA_excess;
totlIncome=totalincome - reducedPersonalAllowanceAmt;	
}
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amountReducedPersonalAllowance.getText().substring(1).replace(",", ""),String.format("%.2f",(reducedPersonalAllowanceAmt)));			
Reporter.log("Reduced Personal Allowance is Verified: "+amountReducedPersonalAllowance.getText(),true);
	
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=payFromAllEmploymentsAmt -reducedPersonalAllowanceAmt ;//225
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//45
startedRateSaving=SR_band-basicRatePayPension;//4775
basicRateSaving=taxLimit1Uk-(SR_band + nilRate2);//29000
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*BR_rate;//5800
Reporter.log("Amount of Basic Rate of Saving: "+dueTax2,true);
heigherRateSaving=totlIncome-(basicRatePayPension + startedRateSaving + nilRate2 + basicRateSaving);//65725
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//26290

totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
fullGainAmt = n3;
total1 =  ((fullGainAmt-(startedRateSaving+basicRateSaving+nilRate2)) * HR_rate)+(basicRateSaving * BR_rate);
total2= fullGainAmt * BR_rate;
topSlicingReliefVal=total1 - total2;
Reporter.log("Top Slicing Relief Value: "+topSlicingReliefVal,true);
Assert.assertEquals(topSlicingReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(topSlicingReliefVal)));
Reporter.log("Amount of Top Slicing Relief is verifired successfully"+topSlicingReliefAmt.getText(),true);
notionalTaxFromGainsOnLifeAmt=n3*BR_rate;
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: " + amtNotionalTaxFromGainsOnLife.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue-(topSlicingReliefVal + notionalTaxFromGainsOnLifeAmt);
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+incomeTaxdueafterallowancesandreliefs,true);
capitalGainsTaxdueAmt=annualExemptIndividuals*capitalGainsRateLower;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));//£2,260.00
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

Totaltax=incomeTaxdueafterallowancesandreliefs+ capitalGainsTaxdueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));//£12210
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest160(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 160",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delCGI(driver);
funcDelAdditionalInfo(driver);
}


public void addTestCase161(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16)throws Exception
{
Reporter.log("Exceuting MTR Test Case 161 on Sandbox",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str3);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str4);
isCloseCompanyChkBox.click();
isDirectorChkBox.click();
dateTxtBox.clear();
dateTxtBox.sendKeys(str5);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str6);
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str7);
OtherBenefitsTxtBox.clear();
OtherBenefitsTxtBox.sendKeys(str8);
expensesPaymentsReceivedtxtBox.clear();
expensesPaymentsReceivedtxtBox.sendKeys(str9);
BusnsTrvlAndSubstancTxtBox.clear();
BusnsTrvlAndSubstancTxtBox.sendKeys(str10);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str11);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str12);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str13);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str14);
commentTxtBox.clear();
commentTxtBox.sendKeys(str15);
SaveBtn1.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
deficiencyReliefOnLifeInsuranceGainsTxtBox.clear();
deficiencyReliefOnLifeInsuranceGainsTxtBox.sendKeys(str16);
saveAdditionalInfoBtn.click();
n1=Double.parseDouble(str3);//55750.00
n2=Double.parseDouble(str4);//11970.00
n3=Double.parseDouble(str6);//3600.00
n4=Double.parseDouble(str7);//350.00
n5=Double.parseDouble(str8);//7500.00
n6=Double.parseDouble(str9);//4500.00
n7=Double.parseDouble(str10);//5000.00
n8 = Double.parseDouble(str12);//99000.00
n9 = Double.parseDouble(str13);//9000.00
n10 = Double.parseDouble(str14);//90000.00
n11 = Double.parseDouble(str16);//33000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n1;//55750.00
benefitsAndExpensesReceivedAmt = n3+n4+n5+n6;//£15950	 
allowableExpensesAmt =n7;//£5,000.00	 
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;

totalincome = totalFromAllEmployments;

totlIncome = totalincome - personalAllowanceRate;	


Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;
heigherRatePayPension=totlIncome - basicRatePayPension;
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);

dueTax2=heigherRatePayPension*HR_rate;

totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

total1 = totlIncome - taxLimit1Uk;//20350
amtTaxAdjustment = (total1*HR_rate) - (total1*BR_rate); // 4070
Assert.assertEquals(deficiencyReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxAdjustment));
Reporter.log("Total tax deducted is Verified: "+deficiencyReliefAmt.getText(),true);

totalTaxDeductedAmt=n2;
incomeTaxDueAmt = totalTaxDeductedAmt - (totIncomeTaxDue -amtTaxAdjustment);

Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));//1000
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
total2 = taxLimit1Uk - (totlIncome - n11);
otherGainsBasicAmt = total2 * capitalGainsRateLower;
otherGainsAmt = (n10 - (annualExemptIndividualsProposed + total2)) * capitalGainsRateUpper;
Reporter.log("otherGainsAmt: "+otherGainsAmt, true);
capitalGainsTaxdueAmt= otherGainsBasicAmt + otherGainsAmt;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));//£14395
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

Totaltax= capitalGainsTaxdueAmt - incomeTaxDueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",Totaltax));//£126
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest161(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 161",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delCGI(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase162(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16)throws Exception
{
Reporter.log("Exceuting MTR Test Case 162 on Sandbox",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str3);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str4);
isCloseCompanyChkBox.click();
isDirectorChkBox.click();
dateTxtBox.clear();
dateTxtBox.sendKeys(str5);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str6);
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str7);
OtherBenefitsTxtBox.clear();
OtherBenefitsTxtBox.sendKeys(str8);
expensesPaymentsReceivedtxtBox.clear();
expensesPaymentsReceivedtxtBox.sendKeys(str9);
BusnsTrvlAndSubstancTxtBox.clear();
BusnsTrvlAndSubstancTxtBox.sendKeys(str10);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str11);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str12);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str13);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str14);
commentTxtBox.clear();
commentTxtBox.sendKeys(str15);
SaveBtn1.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
deficiencyReliefOnLifeInsuranceGainsTxtBox.clear();
deficiencyReliefOnLifeInsuranceGainsTxtBox.sendKeys(str16);
saveAdditionalInfoBtn.click();
n1=Double.parseDouble(str3);//55750.00
n2=Double.parseDouble(str4);//11970.00
n3=Double.parseDouble(str6);//3600.00
n4=Double.parseDouble(str7);//350.00
n5=Double.parseDouble(str8);//7500.00
n6=Double.parseDouble(str9);//4500.00
n7=Double.parseDouble(str10);//5000.00
n8 = Double.parseDouble(str12);//99000.00
n9 = Double.parseDouble(str13);//9000.00
n10 = Double.parseDouble(str14);//90000.00
n11 = Double.parseDouble(str16);//33000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n1;//55750.00
benefitsAndExpensesReceivedAmt = n3+n4+n5+n6;//£15950	 
allowableExpensesAmt =n7;//£5,000.00	 
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;

totalincome = totalFromAllEmployments;

totlIncome=totalincome - personalAllowanceRate;	


Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
startedRatePayPension=SR_bandScott;//2,000.00
dueTax1 = startedRatePayPension * startedRateScott;//380.00
basicRatePayPension = amtBasicRateScott;//10,150.00
dueTax2 = basicRatePayPension * basicRateScott;//2,030.00
intermediateRatePayPension = amtIntermediateRateScott;//19,430.00
dueTax3 = intermediateRatePayPension * intermediateRateScott;//4,080.30	
heigherRatePayPension = totlIncome-(startedRatePayPension+basicRatePayPension+intermediateRatePayPension);//23270
dueTax4 = heigherRatePayPension * heigherRateScott;//9540.7

totIncomeTaxDue = dueTax1 + dueTax2 + dueTax3 +dueTax4;//16031
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n2;
incomeTaxDueAmt = totIncomeTaxDue - totalTaxDeductedAmt;

total1 = (totlIncome - (SR_bandScott + amtBasicRateScott))-amtIntermediateRateScott;//23,270
amtTaxAdjustment = (total1*heigherRateScott) - (total1*basicRateScott); //4,886.70
Assert.assertEquals(deficiencyReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxAdjustment));
Reporter.log("Total tax deducted is Verified: "+deficiencyReliefAmt.getText(),true);

totalTaxDeductedAmt=n2;
incomeTaxDueAmt = totalTaxDeductedAmt - (totIncomeTaxDue -amtTaxAdjustment);

Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));//1000
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
total2 = taxLimit1Uk - (totlIncome - n11);
otherGainsBasicAmt = total2 * capitalGainsRateLower;
otherGainsAmt = (n10 - (annualExemptIndividualsProposed + total2)) * capitalGainsRateUpper;
capitalGainsTaxdueAmt= otherGainsBasicAmt + otherGainsAmt;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));//£14395
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

Totaltax= capitalGainsTaxdueAmt - incomeTaxDueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",Totaltax));//£126
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest162(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 162",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delCGI(driver);
}
public void addTestCase163(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15)throws Exception
{
Reporter.log("Exceuting MTR Test Case 163",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str3);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str4);
isCloseCompanyChkBox.click();
isDirectorChkBox.click();
dateTxtBox.clear();
dateTxtBox.sendKeys(str5);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str6);
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str7);
OtherBenefitsTxtBox.clear();
OtherBenefitsTxtBox.sendKeys(str8);
expensesPaymentsReceivedtxtBox.clear();
expensesPaymentsReceivedtxtBox.sendKeys(str9);
BusnsTrvlAndSubstancTxtBox.clear();
BusnsTrvlAndSubstancTxtBox.sendKeys(str10);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str11);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str12);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str13);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str14);
commentTxtBox.clear();
commentTxtBox.sendKeys(str15);
SaveBtn1.click();
n1=Double.parseDouble(str3);//55750.00
n2=Double.parseDouble(str4);//11970.00
n3=Double.parseDouble(str6);//3600.00
n4=Double.parseDouble(str7);//350.00
n5=Double.parseDouble(str8);//7500.00
n6=Double.parseDouble(str9);//4500.00
n7=Double.parseDouble(str10);//5000.00
n8 = Double.parseDouble(str12);//99000.00
n9 = Double.parseDouble(str13);//9000.00
n10 = Double.parseDouble(str14);//90000.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n1;//55750.00
benefitsAndExpensesReceivedAmt = n3+n4+n5+n6;//£15950	 
allowableExpensesAmt =n7;//£5,000.00	 
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;

totalincome = totalFromAllEmployments;

totlIncome=totalincome - personalAllowanceRate;	


Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;
heigherRatePayPension=totlIncome - basicRatePayPension;
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);

dueTax2=heigherRatePayPension*HR_rate;

totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);


totalTaxDeductedAmt=n2;
incomeTaxDueAmt = totIncomeTaxDue - totalTaxDeductedAmt;

Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax overpaid is verifired successfully"+totalIncomeTaxDue.getText(),true);

capitalGainsTaxdueAmt=(n10-annualExemptIndividualsProposed) * capitalGainsRateUpper;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));//£1130.00
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

Totaltax= capitalGainsTaxdueAmt + incomeTaxDueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",Totaltax));//£126
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}

public void funcDelMTRTest163(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 163",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delCGI(driver);
}
public void addTestCase165(WebDriver driver, String str1,String str2,String str3,String str4,String str5)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 165",true);

wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str1);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str2);
redundancyAndOtherCompensationPaymentsTxtBox.clear();
redundancyAndOtherCompensationPaymentsTxtBox.sendKeys(str3);
redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str4);
compensationAndLumpSumExemptionsTxtBox.clear();
compensationAndLumpSumExemptionsTxtBox.sendKeys(str5);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
n1=Double.parseDouble(str1); //120000.00
n2=Double.parseDouble(str3); //15000.00
n3=Double.parseDouble(str4); //3000.00
n4=Double.parseDouble(str5); //7560.00
n5=Double.parseDouble(str2); //2
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
capitalGainsTaxdueAmt = n1;
payFromAllEmploymentsAmt = n2;
totalincome = payFromAllEmploymentsAmt + capitalGainsTaxdueAmt;
totlIncome=totalincome;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension = payFromAllEmploymentsAmt;//15000.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1 = basicRatePayPension*BR_rate;//3000.00
basicRateSaving = taxLimit1Uk - (basicRatePayPension + nilRate2);//19000.00	
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2 = basicRateSaving*(BR_rate);//3800
heigherRateSaving = capitalGainsTaxdueAmt - (nilRate2 + basicRateSaving);//1,00,500.00	
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*(HR_rate);//40,200.00
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;//47,000.00
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
notionalTaxFromGainsOnLifeAmt=capitalGainsTaxdueAmt * BR_rate;//2000
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",notionalTaxFromGainsOnLifeAmt));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: "+amtNotionalTaxFromGainsOnLife.getText(),true);
fullGainAmt = n1;//120000
sliceGainAmt = fullGainAmt / n5;//60000
Reporter.log("sliceGainAmt: "+sliceGainAmt,true);
basicRateLiability = fullGainAmt / sliceGainAmt;//2
Reporter.log("basicRateLiability: "+basicRateLiability,true);
total1 = taxLimit1Uk - (SR_band + nilRate2);
total2 = sliceGainAmt - (SR_band + nilRate2 + total1);
total3 =  (total1 * BR_rate) + (total2 * HR_rate);//16000
total4 = sliceGainAmt * BR_rate;//12000
topSlicingReliefVal=(total3 - total4)*basicRateLiability;//8000
Reporter.log("Top Slicing Relief Value: "+topSlicingReliefVal,true);
Assert.assertEquals(topSlicingReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(topSlicingReliefVal)));
Reporter.log("Amount of Top Slicing Relief is verifired successfully"+topSlicingReliefAmt.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue-(topSlicingReliefVal + notionalTaxFromGainsOnLifeAmt);
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+incomeTaxdueafterallowancesandreliefs,true);
totalTaxDeductedAmt=n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs - totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));//£12000
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
}
public void funcDelMTRTest165(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 165",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase166(WebDriver driver, String str1,String str2,String str3,String str4,String str5)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 166",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//3770.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str2);//3121.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str3);//624.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str4);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str5);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
n1=Double.parseDouble(str1);//3770.00
n2=Double.parseDouble(str2);//3121.00
n3=Double.parseDouble(str3);//624.2
n4=Double.parseDouble(str4);//10000.00
n5=Double.parseDouble(str5);//4
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
UKPensionAndStateBenefitAmt = n1 + n2;//6891
capitalGainsTaxdueAmt = n4;
totalincome = UKPensionAndStateBenefitAmt + capitalGainsTaxdueAmt;
totlIncome= totalincome - personalAllowanceRate;
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
if (totlIncome< (SR_band + nilRate2))
{
totIncomeTaxDue=0;
}
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
notionalTaxFromGainsOnLifeAmt = totlIncome * BR_rate;//2000
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",notionalTaxFromGainsOnLifeAmt));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: "+amtNotionalTaxFromGainsOnLife.getText(),true);

totalTaxDeductedAmt=n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

}
public void funcDelMTRTest166(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 166",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 2,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase167(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 167",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str6);//6200.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,stockDividendsTxtBox);
stockDividendsTxtBox.clear();
stockDividendsTxtBox.sendKeys(str7);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str8);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str9);
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str10);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str11);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str12);
legalManagmntAndPrfsnalFeesTxtBox.clear();
legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str13);
costsOfServicProvidedTxtBox.clear();
costsOfServicProvidedTxtBox.sendKeys(str14);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str15);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str16);
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str17);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,notResidentInUKChkBox);
notResidentInUKChkBox.click();
meetTheThirdAutomaticOverseasTestChkBox.click();
hadAGapBetweenEmploymentsInThisTaxYearChkBox.click();
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str18);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str19);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str20);
numberOfWorkdaysSpentOverseasTxtBox.clear();
numberOfWorkdaysSpentOverseasTxtBox.sendKeys(str21);
personalAllowancesClaimOnOtherBasisChkBox.click();
listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue(str22);
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();
n1 = Double.parseDouble(str3); //321.00
n2 = Double.parseDouble(str4); //1625.00
n3 = Double.parseDouble(str5); //128.00
n4 = Double.parseDouble(str6);//6200
n5 = Double.parseDouble(str7);//3065.99

n6 = Double.parseDouble(str9);//45000.00
n7 = Double.parseDouble(str10);//1654.00
n8 = Double.parseDouble(str11);//4000.00
n9 = Double.parseDouble(str12);//1500.00
n10 = Double.parseDouble(str13);//1200.00
n11 = Double.parseDouble(str14);//480.00
n12 = Double.parseDouble(str15);//6890.00
n13 = Double.parseDouble(str16);//2691.00
n14 = Double.parseDouble(str17);//500.00

n15 = Double.parseDouble(str18);//99
n16 = Double.parseDouble(str20);//80
n17 = Double.parseDouble(str21);//160

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromUKLandAndProperty = n6-(n7+n8+n9+n10+n11+n12);//29276
dividendsFromUKCompaniesAmt = Math.floor(n5) + n3;
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+ n2;
UKPensionAndStateBenefitAmt=n4;
totalincome = profitFromUKLandAndProperty + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt +UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt = n13;
totlIncome =  totalincome - (personalAllowanceRate + incomeTaxReliefAmt);

Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",profitFromUKLandAndProperty));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
			
Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);


Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=totlIncome - (dividendsFromUKCompaniesAmt + interestFromUKBanksBuildingAmt);//20935
dueTax1 = basicRatePayPension*BR_rate;
Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);

basicRateSaving = interestFromUKBanksBuildingAmt - nilRate1;//1026	
dueTax2=basicRateSaving*(BR_rate);//205.20
Reporter.log("Basic Rate of Saving: "+dueTax2,true);

basicRateDividends=dividendsFromUKCompaniesAmt - dividentNillRate;//1193
dueTax3=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//89.47
Reporter.log("Basic Rate of Dividends: "+dueTax3,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = n14 * reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));//100
Reporter.log("Amount of Relief For Finance Costs is verifired successfully: "+dataReliefForFinanceCosts.getText(),true);

taxTreatedAsPaidOnDividendsFromUKCompanies = (n3 * dividendTaxBasicRate)/100;//amount of dividend from income
Assert.assertEquals(amtTaxCreditsDividendsFromUKCompanies.getText().substring(1).replace(",", ""),String.format("%.2f",taxTreatedAsPaidOnDividendsFromUKCompanies));
Reporter.log("Amount of  7.5% tax credits on dividends from UK companies (not repayable) is Verified: "+amtTaxCreditsDividendsFromUKCompanies.getText(),true);

totalTaxDeductedAmt =n1*taxedUKInterestRate ;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totIncomeTaxDue - 	(amtReliefForFinanceCosts + taxTreatedAsPaidOnDividendsFromUKCompanies + totalTaxDeductedAmt);
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}	
public void funcDelMTRTest167(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case167",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delProfit(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase168(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 168",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str6);//6200.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,stockDividendsTxtBox);
nonQualifyingTxtBox.clear();
nonQualifyingTxtBox.sendKeys(str7);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str8);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str9);
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str10);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str11);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str12);
legalManagmntAndPrfsnalFeesTxtBox.clear();
legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str13);
costsOfServicProvidedTxtBox.clear();
costsOfServicProvidedTxtBox.sendKeys(str14);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str15);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str16);
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str17);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,notResidentInUKChkBox);
notResidentInUKChkBox.click();
meetTheThirdAutomaticOverseasTestChkBox.click();
hadAGapBetweenEmploymentsInThisTaxYearChkBox.click();
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str18);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str19);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str20);
numberOfWorkdaysSpentOverseasTxtBox.clear();
numberOfWorkdaysSpentOverseasTxtBox.sendKeys(str21);
personalAllowancesClaimOnOtherBasisChkBox.click();
listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue(str22);
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();
n1 = Double.parseDouble(str3); //321.00
n2 = Double.parseDouble(str4); //1625.00
n3 = Double.parseDouble(str5); //128.00
n4 = Double.parseDouble(str6);//6200
n5 = Double.parseDouble(str7);//118.00
n6 = Double.parseDouble(str9);//45000.00
n7 = Double.parseDouble(str10);//1654.00
n8 = Double.parseDouble(str11);//4000.00
n9 = Double.parseDouble(str12);//1500.00
n10 = Double.parseDouble(str13);//1200.00
n11 = Double.parseDouble(str14);//480.00
n12 = Double.parseDouble(str15);//6890.00
n13 = Double.parseDouble(str16);//2691.00
n14 = Double.parseDouble(str17);//500.00
n15 = Double.parseDouble(str18);//99
n16 = Double.parseDouble(str20);//80
n17 = Double.parseDouble(str21);//160

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromUKLandAndProperty = n6-(n7+n8+n9+n10+n11+n12);//29276
dividendsFromUKCompaniesAmt = Math.floor(n5) + n3;
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+ n2;
UKPensionAndStateBenefitAmt=n4;
totalincome = profitFromUKLandAndProperty + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt +UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt = n13;
totlIncome =  totalincome - (personalAllowanceRate + incomeTaxReliefAmt);

Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",profitFromUKLandAndProperty));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
			
Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);


Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=totlIncome - (dividendsFromUKCompaniesAmt + interestFromUKBanksBuildingAmt);//20935
dueTax1 = basicRatePayPension*BR_rate;
Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);

basicRateSaving = interestFromUKBanksBuildingAmt - nilRate1;//1026	
dueTax2=basicRateSaving*(BR_rate);//205.20
Reporter.log("Basic Rate of Saving: "+dueTax2,true);

totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = n14 * reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));//100
Reporter.log("Amount of Relief For Finance Costs is verifired successfully: "+dataReliefForFinanceCosts.getText(),true);

taxTreatedAsPaidOnDividendsFromUKCompanies = (n3 * dividendTaxBasicRate)/100;//amount of dividend from income
Assert.assertEquals(amtTaxCreditsDividendsFromUKCompanies.getText().substring(1).replace(",", ""),String.format("%.2f",taxTreatedAsPaidOnDividendsFromUKCompanies));
Reporter.log("Amount of  7.5% tax credits on dividends from UK companies (not repayable) is Verified: "+amtTaxCreditsDividendsFromUKCompanies.getText(),true);

totalTaxDeductedAmt =n1*taxedUKInterestRate ;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totIncomeTaxDue - 	(amtReliefForFinanceCosts + taxTreatedAsPaidOnDividendsFromUKCompanies + totalTaxDeductedAmt);
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}	
public void funcDelMTRTest168(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case168",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delProfit(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase169(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 169",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str6);//6200.00
stateBenefitsSaveBtn.click();
clickIncome(driver);
addPartnershipInfo(driver,str7,str8);
wLib.explicitWait(driver, 5,PartnershipFullFormLink);
PartnershipFullFormLink.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str9);
dividendIncomeTxtBox.clear();
dividendIncomeTxtBox.sendKeys(str10);
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.clear();
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.sendKeys(str11);
SaveBtn1.click(); 
wLib.explicitWait(driver,5,Class2Class4NICsForm);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 2,editBtn);
editBtn.click();
wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.sendKeys(str12);
propertyJointlyCheckBox.click();
rentIncomeTextBox.sendKeys(str13);
UKExpensesTxtBox.sendKeys(str14);
loanInterestTxtBox.sendKeys(str15);
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str16);
allowablePropertyExpensesTxtBox.sendKeys(str17);
capitalAllowancesTxtBox.sendKeys(str18);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str19);
taxTakenOffTxtBox.clear();
taxTakenOffTxtBox.sendKeys(str20);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,notResidentInUKChkBox);
notResidentInUKChkBox.click();
meetTheThirdAutomaticOverseasTestChkBox.click();
hadAGapBetweenEmploymentsInThisTaxYearChkBox.click();
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str21);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str22);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str23);
numberOfWorkdaysSpentOverseasTxtBox.clear();
numberOfWorkdaysSpentOverseasTxtBox.sendKeys(str24);
personalAllowancesClaimOnOtherBasisChkBox.click();
listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue(str25);
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();
n1 = Double.parseDouble(str3); //321.00
n2 = Double.parseDouble(str4); //1625.00
n3 = Double.parseDouble(str5); //128.00
n4 = Double.parseDouble(str6);//6200
n5 = Double.parseDouble(str9);//62952.00
n6 = Double.parseDouble(str10);//390.00
n7 = Double.parseDouble(str11);//219.00
n8=Double.parseDouble(str13);//10800.00
n9=Double.parseDouble(str14);//950.00
n10=Double.parseDouble(str15);//3000.00
n11=Double.parseDouble(str16);//250.00
n12=Double.parseDouble(str17);//325.00
n13=Double.parseDouble(str18);//1252.00
n14=Double.parseDouble(str19);//5023.00
n15=Double.parseDouble(str20);//75.00

n16 = Double.parseDouble(str21);//99
n17 = Double.parseDouble(str23);//80
n18 = Double.parseDouble(str24);//160

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
FHLAdjustedProfitForTheYear=n8-(n9+n10+n11+n12+n13);//5023.00
AdjustedProfitForTheYear=n14;//5023.00
profitFromUKLandAndProperty=FHLAdjustedProfitForTheYear+AdjustedProfitForTheYear;//10,046.00	 
shareOfTotalTaxableProfits = n5;
profitFromPartnershipsAmt = shareOfTotalTaxableProfits + n6;
dividendsFromUKCompaniesAmt = n3;
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+ n2;
UKPensionAndStateBenefitAmt=n4;
totalincome = profitFromUKLandAndProperty + profitFromPartnershipsAmt + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt +UKPensionAndStateBenefitAmt;
totlIncome =  totalincome - personalAllowanceRate;

Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",profitFromUKLandAndProperty));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
			
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);


Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=taxLimit1Uk;
dueTax1=basicRatePayPension*BR_rate;//6900
Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);
heigherRatePayPension=totlIncome - (basicRatePayPension + interestFromUKBanksBuildingAmt +dividendsFromUKCompaniesAmt+(profitFromPartnershipsAmt - shareOfTotalTaxableProfits));
dueTax2=heigherRatePayPension*HR_rate;
Reporter.log("Heigher Rate of Pay Pension: "+dueTax2,true);

heigherRateSaving=interestFromUKBanksBuildingAmt - nilRate2;//1526

dueTax3=heigherRateSaving*HR_rate;//610.40
Reporter.log("Heigher Rate of Saving: "+dueTax3,true);

totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);


taxTreatedAsPaidOnDividendsFromUKCompanies = (n3 * dividendTaxBasicRate)/100;//amount of dividend from income
Assert.assertEquals(amtTaxCreditsDividendsFromUKCompanies.getText().substring(1).replace(",", ""),String.format("%.2f",taxTreatedAsPaidOnDividendsFromUKCompanies));
Reporter.log("Amount of  7.5% tax credits on dividends from UK companies (not repayable) is Verified: "+amtTaxCreditsDividendsFromUKCompanies.getText(),true);

totalTaxDeductedAmt =(n1*taxedUKInterestRate) + n7 + n15;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totIncomeTaxDue - 	(taxTreatedAsPaidOnDividendsFromUKCompanies + totalTaxDeductedAmt);
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}	
public void funcDelMTRTest169(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case169",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delProfit(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);
wLib.explicitWait(driver,5,Class2Class4NICsForm);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
}
public void addTestCase172(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 172",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//3678
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str4);
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str5,"",str6,"",str7);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str8);
saveAdditionalInfoBtn.click();

n1 = Double.parseDouble(str3);//3678
n2=Double.parseDouble(str4);//8052.00
n3=Double.parseDouble(str5);//7000.00
n4=Double.parseDouble(str6);//1400.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = n1;
UKPensionAndStateBenefitAmt = n2;
otherIncomeAmt=n3;
totalincome = interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + otherIncomeAmt;
totlIncome=totalincome- personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt)); 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = (UKPensionAndStateBenefitAmt + otherIncomeAmt) - personalAllowanceRate;//3202
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//640.4
startedRateSaving=SR_band-basicRatePayPension;//1798
basicRateSaving = interestFromUKBanksBuildingAmt - (startedRateSaving + nilRate1);//880
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*BR_rate;//176

totIncomeTaxDue = dueTax1 + dueTax2;

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

calculateMAT=maxMAT*MATrate;//869.50
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);

totalTaxDeductedAmt=n4;
incomeTaxDueAmt = totalTaxDeductedAmt;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+amtIncomeTaxoverpaid.getText(),true);
}

public void funcDelMTRTest172(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 172",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherUKIncome(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase173(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 173",true);
clickIncome(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str4);//8052
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str5,"",str6,"",str7);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str8);
chkBoxHalfMinimumAllowanceTransferToOther.click();
saveAdditionalInfoBtn.click();
n1=Double.parseDouble(str3);//3678.00
n2=Double.parseDouble(str4);//8052.00
n3=Double.parseDouble(str5);//7000.00
n4=Double.parseDouble(str6);//1400.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=n1;//3678.00
UKPensionAndStateBenefitAmt = n2;//8052
otherIncomeAmt = n3;
totalincome = interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + otherIncomeAmt;
totlIncome = totalincome - personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions and State Benefits is Verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",Math.floor(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = totlIncome - interestFromUKBanksBuildingAmt;
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1 = basicRatePayPension*BR_rate;
startedRateSaving = SR_band - basicRatePayPension;//£1798
Reporter.log("startedRateSaving: "+startedRateSaving,true);
basicRateSaving = interestFromUKBanksBuildingAmt - (startedRateSaving + nilRate1);//880
Reporter.log("basicRateSaving: "+basicRateSaving,true);
dueTax2=round(basicRateSaving*BR_rate,2);//176
totIncomeTaxDue = dueTax1 + dueTax2;//£7,265.26	
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
calculateMAT = (maxMAT - MCA_2)*MATrate;
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
totalTaxDeductedAmt = n4;//1400.00
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totalTaxDeductedAmt-(totIncomeTaxDue - calculateMAT) ;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
 
}

public void funcDelMTRTest173(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 173",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delUKPensionsAnnuities(driver);
delOtherUKIncome(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase174(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 174",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//3678
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str4);
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str5,"",str6,"",str7);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
spousesNameTxtBox.clear();
spousesNameTxtBox.sendKeys(str8);
chkBoxAllMinimumAllowanceTransferToOther.click();
saveAdditionalInfoBtn.click();

n1 = Double.parseDouble(str3);//3678
n2=Double.parseDouble(str4);//8052.00
n3=Double.parseDouble(str5);//7000.00
n4=Double.parseDouble(str6);//1400.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = n1;
UKPensionAndStateBenefitAmt = n2;
otherIncomeAmt=n3;
totalincome = interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + otherIncomeAmt;
totlIncome=totalincome- personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt)); 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = (UKPensionAndStateBenefitAmt + otherIncomeAmt) - personalAllowanceRate;//3202
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//640.4
startedRateSaving=SR_band-basicRatePayPension;//1798
basicRateSaving = interestFromUKBanksBuildingAmt - (startedRateSaving + nilRate1);//880
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*BR_rate;//176

totIncomeTaxDue = dueTax1 + dueTax2;

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

calculateMAT =(maxMAT - MCA)*MATrate;//869.50
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue -  calculateMAT;
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Total tax deducted is Verified: "+incomeTaxDueAmt,true);
totalTaxDeductedAmt=n4;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totalTaxDeductedAmt - incomeTaxDueAmt;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Total tax deducted is Verified: "+amtIncomeTaxoverpaid.getText(),true);
}

public void funcDelMTRTest174(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 174",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherUKIncome(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase175(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 175",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//3678
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str4);
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str5,"",str6,"",str7);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,spousesNameTxtBox);
allMinimumAllowanceTransferToYouChkBox.click();
previousSpousesNameTxtBox.sendKeys(str8);
dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str9);
saveAdditionalInfoBtn.click();

n1 = Double.parseDouble(str3);//3678
n2=Double.parseDouble(str4);//8052.00
n3=Double.parseDouble(str5);//7000.00
n4=Double.parseDouble(str6);//1400.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = n1;
UKPensionAndStateBenefitAmt = n2;
otherIncomeAmt=n3;
totalincome = interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + otherIncomeAmt;
totlIncome=totalincome- personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt)); 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = (UKPensionAndStateBenefitAmt + otherIncomeAmt) - personalAllowanceRate;//3202
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//640.4
startedRateSaving=SR_band-basicRatePayPension;//1798
basicRateSaving = interestFromUKBanksBuildingAmt - (startedRateSaving + nilRate1);//880
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*BR_rate;//176

totIncomeTaxDue = dueTax1 + dueTax2;

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

calculateMAT =(MCA - ((MCA * August6_2018to5September2018)/month))*MATrate;//224.00
Assert.assertEquals(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""),String.format("%.2f",calculateMAT));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriedCoupleAllowanceAmt.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue -  calculateMAT;
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Total tax deducted is Verified: "+incomeTaxDue1.getText(),true);
totalTaxDeductedAmt=n4;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totalTaxDeductedAmt - incomeTaxDueAmt;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Total tax deducted is Verified: "+amtIncomeTaxoverpaid.getText(),true);
}

public void funcDelMTRTest175(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 175",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherUKIncome(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase176(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19)throws Exception
{
Reporter.log("Exceuting MTR Test Case 176",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
funcAddForeignInterest(driver,str4);
linkOtherTaxInformation.click();
wLib.explicitWait(driver, 5,form1OpenBtn);
form1OpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
listbox1 = new Select(studentLoanTypeLstBox);
listbox1.selectByValue("1");
amountTxtBox.clear();
amountTxtBox.sendKeys(str5);
repaidChckBox.click();
SaveBtn2.click();
clickIncome(driver);
funcAddEmployerForMTR(driver, str6, str7);
funcAddEmpIncomeWithTaxTakenOff(driver, str8,str9,"");
wLib.explicitWait(driver, 3,addEmploymentBtn);
addEmploymentBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 1,EmployerName);
EmployerName.sendKeys(str10);
txtEmployerPAYERef.sendKeys(str11);
SaveBtn2.click();
wLib.explicitWait(driver,5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
listbox1 = new Select(employerLstBox);
listbox1.selectByVisibleText(str10);
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str12);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str13);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str14);
FuelForCompanyCarsAndVans.clear();
FuelForCompanyCarsAndVans.sendKeys(str15);
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str16);
FxdExpnsDeductTxtBox.clear();
FxdExpnsDeductTxtBox.sendKeys(str17);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
addTaxUnderPaid(driver, str18, str19, "");
n1 = Double.parseDouble(str3);//176.80
n2 = Double.parseDouble(str4);//200.00
n3 = Double.parseDouble(str5);//2169.81
n4 = Double.parseDouble(str8);//33254.00
n5 = Double.parseDouble(str9);//4280.80
n6=Double.parseDouble(str12); //27515.00
n7=Double.parseDouble(str13); //3728.00
n8=Double.parseDouble(str14); //2250.00
n9=Double.parseDouble(str15); //650.00
n10=Double.parseDouble(str16); //75.00
n11=Double.parseDouble(str17); //75.00
n12=Double.parseDouble(str18); //2999.99
n13=Double.parseDouble(str19); //2999.99
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n4+n6;
benefitsAndExpensesReceivedAmt=n8+n9+n10;
allowableExpensesAmt = n11;
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;

interestFromUKBanksBuildingAmt = Math.floor(n1);
foreignIncomeCalc=n2;//200
totalincome = totalFromAllEmployments + interestFromUKBanksBuildingAmt + foreignIncomeCalc;
totlIncome=totalincome-personalAllowanceRate;

Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);

Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
basicRatePayPension=taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6900
heigherRatePayPension=totlIncome - (basicRatePayPension + interestFromUKBanksBuildingAmt +foreignIncomeCalc);
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;
incomeTaxDueAmt=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxDueAmt)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

total1= payFromAllEmploymentsAmt-allowableExpensesAmt;
studentLoanAmt=Math.floor((total1 - plan1Threshold) * studentLoanRate)- java.lang.Math.ceil(n3);
Assert.assertEquals(studentLoanAmountTaxWindow.getText().substring(1).replace(",", ""),String.format("%.2f",(studentLoanAmt)));
Reporter.log("Student Loan repayments amount is verified: "+studentLoanAmountTaxWindow.getText(),true);

tax1 = incomeTaxDueAmt + studentLoanAmt + n12 ;
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDue1.getText(),true);
totalTaxDeductedAmt=n5 + n7 + n13;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
finalAmount=tax1-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",finalAmount));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""), String.format("%.2f",finalAmount));
Reporter.log("tax For This Year is Verified Successfully: "+taxForThisYear,true);
}
public void delTestCase176(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 176",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
delOtherUKIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delStudentLoanRepayment(driver);
delUnderpaidTax(driver);
}
public void addTestCase177(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 177",true);
addStudentLoanPlan1(driver,str1);
clickIncome(driver);
funcAddEmployerForMTR(driver, str2, str3);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str4);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str5);
VochrCredcardExsMilg.clear();
VochrCredcardExsMilg.sendKeys(str6);
ProfFeesAndSubsTxtBox.clear();
ProfFeesAndSubsTxtBox.sendKeys(str7);
OtherExpensTxtBox.clear();
OtherExpensTxtBox.sendKeys(str8);
SaveBtn1.click();
wLib.explicitWait(driver, 3,addEmploymentBtn);
addEmploymentBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 1,EmployerName);
EmployerName.sendKeys(str9);
txtEmployerPAYERef.sendKeys(str10);
SaveBtn2.click();
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
listbox1 = new Select(employerLstBox);
listbox1.selectByVisibleText(str9);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str11);
TipsPaymentsNtOnP60.clear();
TipsPaymentsNtOnP60.sendKeys(str12);
isTeacherChkBox.click();
SaveBtn1.click();
n1=Double.parseDouble(str1);//15.30
n2=Double.parseDouble(str4);//18500.00
n3=Double.parseDouble(str5);//1450.00
n4=Double.parseDouble(str6);//600.00
n5=Double.parseDouble(str7);//150.00
n6=Double.parseDouble(str8);//85.00
n7=Double.parseDouble(str11); //8000
n8=Double.parseDouble(str12); //50.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();

payFromAllEmploymentsAmt = n2+n7+n8;//26550
benefitsAndExpensesReceivedAmt = n4;//600 
allowableExpensesAmt =n5+n6;//235
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;//26915
totalincome = totalFromAllEmployments;//26915
totlIncome=totalincome - personalAllowanceRate;//15065
	
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome)); 	 
Reporter.log("Amount of Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Amount of Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension= totlIncome;//£9,803.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£1,960.60
incomeTaxDueAmt=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
studentLoanAmt=Math.floor((totalincome -plan1Threshold)*studentLoanRate) - java.lang.Math.ceil(n1); //756
Assert.assertEquals(studentLoanAmountTaxWindow.getText().substring(1).replace(",", ""),String.format("%.2f",(studentLoanAmt)));
Reporter.log("Student Loan repayments amount is verified: "+studentLoanAmountTaxWindow.getText(),true);
tax1 = incomeTaxDueAmt + studentLoanAmt;
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",tax1));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDue1.getText(),true);
totalTaxDeductedAmt=n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=tax1-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
}
public void funcDelMTRTest177(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 177",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	delStudentLoanRepayment(driver);
	clickIncome(driver);
	clickEmployment(driver);
	delEmpInfo(driver);
}

public void addTestCase178(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19)throws Exception
{

Reporter.log("Exceuting MTR Test Case 178",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
n1 = Double.parseDouble(str3);//3678
n2 = Double.parseDouble(str4);//12750
n3 = Double.parseDouble(str5);//6200
n4 = Double.parseDouble(str7);//7000.00
n5 = Double.parseDouble(str8);//900.00
n6 = Double.parseDouble(str9);//1874.00
n7 = Double.parseDouble(str10);//135.00
n8 = Double.parseDouble(str11);//5001.00
n9 = Double.parseDouble(str12);//522.00
n10 = Double.parseDouble(str13);//1000.00
n11 = Double.parseDouble(str14);//160.00
n12 = Double.parseDouble(str15);//8000.00
n13 = Double.parseDouble(str16);//3000.00
n14 = Double.parseDouble(str17);//500.00
n15 = Double.parseDouble(str18);//10000.00
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//3678
addOtherDivident(driver,str4,"0.00","0.00");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);//8239.00
stateBenefitsSaveBtn.click();
incmFrmProLink.click();
wLib.explicitWait(driver, 2,editBtn);
editBtn.click();
wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.sendKeys(str6);
rentIncomeTextBox.sendKeys(str7);
UKExpensesTxtBox.sendKeys(str8);
loanInterestTxtBox.sendKeys(str9);
privateUseAdjustmentTxtBox.sendKeys(str10);

rentIncomeEEATextBox.clear();
rentIncomeEEATextBox.sendKeys(str11);
uKExpensesEAATxtBox.clear();
uKExpensesEAATxtBox.sendKeys(str12);
loanInterestEEATxtBox.clear();
loanInterestEEATxtBox.sendKeys(str13);
privateUseAdjustmentEAATxtBox.clear();
privateUseAdjustmentEAATxtBox.sendKeys(str14);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str15);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str16);
enhancedCapitalAllowancesTxtBox.clear();
enhancedCapitalAllowancesTxtBox.sendKeys(str17);
SaveBtn1.click();
FHLAdjustedProfitForTheYear=(n4+n7) - (n5+n6);//4361‬
FHLAdjustedProfitForTheYear1=(n8+n11)-(n9+n10);//3,639‬
AdjustedProfitForTheYear=n12-(n13+n14);//4,500‬
Assert.assertEquals(calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",FHLAdjustedProfitForTheYear));
Reporter.log("Adjusted profit for the year verified successfully"+calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),true);
Assert.assertEquals(calculateFHLUKTaxableProfitForYear.getAttribute("value"),calculateFHLUKAdjustedProfitForTheYear.getAttribute("value") );
Reporter.log("Taxable profit for the year verified successfully: "+calculateFHLUKTaxableProfitForYear.getAttribute("value"),true);
wLib.explicitWait(driver, 5,calculateFHLEaaUKTaxableProfitForYear);
Assert.assertEquals(calculateFHLEaaUKTaxableProfitForYear.getAttribute("value"),String.format("%.2f",FHLAdjustedProfitForTheYear1));
Reporter.log("Taxable profit for the year verified successfully for another property: "+calculateFHLEaaUKTaxableProfitForYear.getAttribute("value"),true);

Assert.assertEquals(adjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",(AdjustedProfitForTheYear)));
Reporter.log("Adjusted profit for the year verified successfully: "+adjustedProfitForTheYear.getAttribute("value"),true);
Assert.assertEquals(taxableProfitForTheYear.getAttribute("value"),adjustedProfitForTheYear.getAttribute("value"));
Reporter.log("Taxable profit for the year verified successfully: "+taxableProfitForTheYear.getAttribute("value"),true);

wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
txtBoxNoTaxAmountGainOnPolicy.clear();
txtBoxNoTaxAmountGainOnPolicy.sendKeys(str18);
txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.clear();
txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.sendKeys(str19);
wLib.explicitWait(driver, 5,saveAdditionalInfoBtn);
saveAdditionalInfoBtn.click();

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromUKLandAndProperty=FHLAdjustedProfitForTheYear+FHLAdjustedProfitForTheYear1+AdjustedProfitForTheYear;//18,292.00
interestFromUKBanksBuildingAmt =n1;
dividendsFromUKCompaniesAmt=n2;
UKPensionAndStateBenefitAmt = n3;
capitalGainsTaxdueAmt = n15;
totalincome = profitFromUKLandAndProperty + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt + capitalGainsTaxdueAmt;
totlIncome=totalincome-personalAllowanceRate;


Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = totlIncome - (interestFromUKBanksBuildingAmt+capitalGainsTaxdueAmt+dividendsFromUKCompaniesAmt);//6,850.00
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6,960.00
basicRateSaving=(interestFromUKBanksBuildingAmt+capitalGainsTaxdueAmt)-nilRate1;//£12,678.00
Reporter.log("basicRateSaving: "+basicRateSaving,true);
dueTax2=round(basicRateSaving*BR_rate,2);//£535.60
Reporter.log("Basic Rate of Saving: "+dueTax2,true);
basicRateDividends=dividendsFromUKCompaniesAmt-dividentNillRate;//£10,750.00
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax3=(basicRateDividends*dividendTaxBasicRate)/100;//£806.25
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;//£4,711.85
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest178(WebDriver driver)throws Exception
{
wLib = new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Deleting MTR Test Case 178",true);
funcDelMTRTest16(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase179(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35)throws Exception
{
Reporter.log("Exceuting MTR Test Case 179",true);
wLib = new WaitStatementLib();
clickIncome(driver);
funcAddEmployerForMTR(driver,str1, str2);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.sendKeys(str3);
UkTaxTakenOffPay.sendKeys(str4);
PrvtMedAndDntl.sendKeys(str5);
GoodsEtcTxtBob.sendKeys(str6);
AccommodationProvidedByEmployerTxtBox.sendKeys(str7);
ProfFeesAndSubsTxtBox.sendKeys(str8);
SaveBtn1.click();
clickIncome(driver);
incmFrmProLink.click();
wLib.explicitWait(driver, 2,editBtn);
editBtn.click();
wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.sendKeys(str9);
rentIncomeTextBox.sendKeys(str10);
UKExpensesTxtBox.sendKeys(str11);
loanInterestTxtBox.sendKeys(str12);
privateUseAdjustmentTxtBox.sendKeys(str13);

rentIncomeEEATextBox.clear();
rentIncomeEEATextBox.sendKeys(str14);
uKExpensesEAATxtBox.clear();
uKExpensesEAATxtBox.sendKeys(str15);
loanInterestEEATxtBox.clear();
loanInterestEEATxtBox.sendKeys(str16);
privateUseAdjustmentEAATxtBox.clear();
privateUseAdjustmentEAATxtBox.sendKeys(str17);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str18);
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str19);
enhancedCapitalAllowancesTxtBox.clear();
enhancedCapitalAllowancesTxtBox.sendKeys(str20);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str22);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str23);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();
wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("224");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str24);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str25);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver,5,SaveBtn2);
SaveBtn2.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
overseasPensionsSocialScurityBenefitsAndRoyalties.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str26);
wLib.explicitWait(driver, 2,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str27);
wLib.explicitWait(driver, 2,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver, 2,SaveBtn2);
SaveBtn2.click();
//driver.navigate().refresh();
wLib.explicitWait(driver, 2,foreignIncomeEditSummaryBtn);
foreignIncomeEditSummaryBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str34);
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str21);
wLib.explicitWait(driver, 5,totalRentsAndOtherReceiptsTxtBox);
totalRentsAndOtherReceiptsTxtBox.clear();
totalRentsAndOtherReceiptsTxtBox.sendKeys(str28);
propertyExpensesTxtBox.clear();
propertyExpensesTxtBox.sendKeys(str29);
wLib.explicitWait(driver, 5,foreignIncomeNumberOfOverseasLetPropertiesTxtBox);
foreignIncomeNumberOfOverseasLetPropertiesTxtBox.clear();
foreignIncomeNumberOfOverseasLetPropertiesTxtBox.sendKeys(str30);
foreignIncomePrivateUseAdjustmentsTxtBox.clear();
foreignIncomePrivateUseAdjustmentsTxtBox.sendKeys(str31);
foreignIncomeCostsOfReplacingDomesticItemsTxtBox.clear();
foreignIncomeCostsOfReplacingDomesticItemsTxtBox.sendKeys(str32);
foreignIncomeResidentialFinanceCostsTxtBox.clear();
foreignIncomeResidentialFinanceCostsTxtBox.sendKeys(str33);
wLib.explicitWait(driver, 5,txtBoxLossBroughtForward);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str35);
SaveBtn1.click();
try
{
if (SaveBtn1.isDisplayed()==true)
{
SaveBtn1.click();
}
}
catch (Exception e) {
Reporter.log("Save button clicked in first attempt",true);
}
n1 = Double.parseDouble(str3); //101000.00
n2 = Double.parseDouble(str4); //20430.00
n3 = Double.parseDouble(str5); //500.00
n4 = Double.parseDouble(str6); //5000.00
n5 = Double.parseDouble(str7); //7500.00
n6 = Double.parseDouble(str8); //175.00
n7 = Double.parseDouble(str10);//7000.00
n8 = Double.parseDouble(str11);//900.00
n9 = Double.parseDouble(str12);//1874.00
n10 = Double.parseDouble(str13);//135.00
n11 = Double.parseDouble(str14);//5001.00
n12 = Double.parseDouble(str15);//522.00
n13 = Double.parseDouble(str16);//1000.00
n14 = Double.parseDouble(str17);//160.00
n15 = Double.parseDouble(str18);//8000.00
n16 = Double.parseDouble(str19);//3000.00
n17 = Double.parseDouble(str20);//500.00
n18 = Double.parseDouble(str21); //2261.67
n19 = Double.parseDouble(str22); //3562
n20 = Double.parseDouble(str23); //356
n21 = Double.parseDouble(str24); //2679
n22 = Double.parseDouble(str25); //401
n23 = Double.parseDouble(str26); //6741
n24 = Double.parseDouble(str27);//1685
n25 = Double.parseDouble(str28);//3602.00
n26 = Double.parseDouble(str29);//2510.00
n27 = Double.parseDouble(str31);//90.00
n28 = Double.parseDouble(str32);//360.00
n29 = Double.parseDouble(str33);//120.00
n30 = Double.parseDouble(str34);//822
n31 = Double.parseDouble(str35);//320.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n1;
benefitsAndExpensesReceivedAmt=n3+n4+n5;
allowableExpensesAmt = n6;
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;

FHLAdjustedProfitForTheYear=(n7+n10) - (n8+n9);//4361‬
FHLAdjustedProfitForTheYear1=(n11+n14)-(n12+n13);//3,639‬
AdjustedProfitForTheYear=n15-(n16+n17);//4,500‬
profitFromUKLandAndProperty=FHLAdjustedProfitForTheYear+FHLAdjustedProfitForTheYear1+AdjustedProfitForTheYear;//18,292.00
foreignIncomeCalc=n19+n23+n30;//11,125
dividendsFromForeignCompaniesCalc=n21;//2679.00
totalincome = profitFromUKLandAndProperty + totalFromAllEmployments +foreignIncomeCalc + dividendsFromForeignCompaniesCalc ;
incomeTaxReliefAmt=n31;
totlIncome= totalincome - incomeTaxReliefAmt;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);

Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
basicRatePayPension=taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6900
heigherRatePayPension=totlIncome - (basicRatePayPension+dividendsFromForeignCompaniesCalc+n19);
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//39627
heigherRateSaving=n19-nilRate2;//3062
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//1223.80
heigherRateDividends=dividendsFromForeignCompaniesCalc-dividentNillRate;//679
dueTax4=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//220.67
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;//£10,745.35
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts=n29*reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//720.00
Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);

Assert.assertEquals(amtForeignTaxCreditRelief.getText().substring(1).replace(",", ""),String.format("%.2f",(n18)));
Reporter.log("Amount of Foreign Tax Credit Relief is verifired successfully: "+amtForeignTaxCreditRelief.getText(),true);

incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - (amtReliefForFinanceCosts+n18);

Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);

totalTaxDeductedAmt=n2;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totIncomeTaxDue=incomeTaxdueafterallowancesandreliefs-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
fnltax=totIncomeTaxDue;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);

}
public void delTestCase179(WebDriver driver) throws Exception
{
wLib = new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Deleting MTR Test Case 179",true);
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
try{
wLib.explicitWait(driver, 5,delOverseasSavings);
if(delOverseasSavings.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for overseas savings is not available",true);
}
try{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
if(delDividendsForeignComaniesBtn.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
delDividendsForeignComaniesBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Dividends from foreign companies is not available",true);
}
try{
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
if(delOverseasPensionsRoyaltiesBtn.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
delOverseasPensionsRoyaltiesBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Overseas pensions is not available",true);
}

try{
wLib.explicitWait(driver, 5,delSummaryFOR);
if(delSummaryFOR.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delSummaryFOR);
delSummaryFOR.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Dividend income received by a person abroad is not available",true);
}
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delProfit(driver);
}
public void addTestCase182(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 182",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//8206.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str2);//326501.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str3);//6530.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str4);
tradingEnddateTxtBox.clear();
tradingEnddateTxtBox.sendKeys(str5);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str6);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str7);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str8);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str9);
ownGoodsAndServicesTxtBox.clear();
ownGoodsAndServicesTxtBox.sendKeys(str10);
anyOtherBusinessIncomeTxtBox.clear();
anyOtherBusinessIncomeTxtBox.sendKeys(str11);
SaveBtn1.click();
driver.navigate().refresh();
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
ExemptfromPayingClass4NICs.click();  
SaveBtn2.click();
driver.navigate().refresh();
n1=Double.parseDouble(str1);//8206.00
n2=Double.parseDouble(str2);//32650.00
n3=Double.parseDouble(str3);//6530.00

n4=Double.parseDouble(str6);//14560.00
n5=Double.parseDouble(str7);//13603.00
n6=Double.parseDouble(str8);//1700.00
n7=Double.parseDouble(str9);//3926.00
n8=Double.parseDouble(str10);//720.00
n9=Double.parseDouble(str11);//250.00


wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome=((n4-n5)+(n7+n8)-n6)+n9;//4153
UKPensionAndStateBenefitAmt = n1+n2;//6891
totalincome=selfEmploymentIncome + UKPensionAndStateBenefitAmt;//45009
totlIncome=totalincome- personalAllowanceRate;//33159


wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totlIncome;//33159
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6631.8
incomeTaxDueAmt=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = incomeTaxDueAmt-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);

}
public void funcDelMTRTest182(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 182",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delSEshort(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 2,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
}
public void addTestCase184(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 184",true);
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str3);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str4);
VochrCredcardExsMilg.clear();
VochrCredcardExsMilg.sendKeys(str5);
ProfFeesAndSubsTxtBox.clear();
ProfFeesAndSubsTxtBox.sendKeys(str6);
OtherExpensTxtBox.clear();
OtherExpensTxtBox.sendKeys(str7);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver,5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver,5,editBtn);
editBtn.click();
wLib.explicitWait(driver,2,residentialPropertyNumberOfDisposalsTxtBox);
residentialPropertyNumberOfDisposalsTxtBox.clear();
residentialPropertyNumberOfDisposalsTxtBox.sendKeys(str8);
residentialPropertyGainsInTheYearTxtBox.clear();
residentialPropertyGainsInTheYearTxtBox.sendKeys(str9);
residentialPropertyCarriedInterestTxtBox.clear();
residentialPropertyCarriedInterestTxtBox.sendKeys(str10);
commentTxtBox.clear();
commentTxtBox.sendKeys(str11);
SaveBtn1.click();
addTaxUnderPaid(driver, "", "",  str12);
n1=Double.parseDouble(str3);//18500.00
n2=Double.parseDouble(str4);//1450.00
n3=Double.parseDouble(str5);//600.00
n4=Double.parseDouble(str6);//150.00
n5=Double.parseDouble(str7);//85.00
n6=Double.parseDouble(str9); //38000
n7=Double.parseDouble(str10);//38000
n8 = Double.parseDouble(str12);//1450
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();

payFromAllEmploymentsAmt = n1;//26550
benefitsAndExpensesReceivedAmt = n3;//600 
allowableExpensesAmt =n4+n5;//235
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;//26915
totalincome = totalFromAllEmployments;//26915
totlIncome=totalincome - personalAllowanceRate;//15065
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome)); 	 
Reporter.log("Amount of Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Amount of Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension= totlIncome;//£9,803.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£1,960.60
incomeTaxDueAmt=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n2-n8;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=incomeTaxDueAmt - totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Amount of Total Income Tax Due is Verified: "+ totalIncomeTaxDue.getText(),true);
capitalGainsTaxdueAmt = (n6 - annualExemptIndividualsProposed) * lower_CGT_rate_RP_CI;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax = taxBalance + capitalGainsTaxdueAmt;
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest184(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 184",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delCGI(driver);
delUnderpaidTax(driver);
}
public void addTestCase185(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 185",true);
clickIncome(driver);
wLib.explicitWait(driver, 10,dividentLink);
dividentLink.click();
addOtherUKIncome(driver,"","","",str1,str2);
addPensionTaxReliefForm(driver,str3, "", "", "");
addGiftAidPayment(driver, str4);
otherGiftAidpayment(driver, str5, str6);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,giftInterestAfterTaxTxtBox);
giftInterestAfterTaxTxtBox.clear();
giftInterestAfterTaxTxtBox.sendKeys(str7);
taxTakenOff1TxtBox.clear();
taxTakenOff1TxtBox.sendKeys(str8);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str9);
//reliefClaimedTxtBox.clear();
//reliefClaimedTxtBox.sendKeys(str10);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
addPartnershipInfo(driver,str11, str12);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str12);*/
CashBasisChkBox.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str13);
adjustmentForChangeOfAccountingPractice.clear();
adjustmentForChangeOfAccountingPractice.sendKeys(str14);
lossesBroughtForward.clear();
lossesBroughtForward.sendKeys(str15);
otherBusinessIncomeTxtBox.clear();
otherBusinessIncomeTxtBox.sendKeys(str16);
adjustmentToClass4NICProfits.sendKeys(str17);
shareOfUnTaxedInterestEtc.sendKeys(str18);
shareOfTaxTakenOffTradingIncome.sendKeys(str19);
SaveBtn1.click();
driver.navigate().refresh();
n1=Double.parseDouble(str1); //1265.00
n2=Double.parseDouble(str3); //1800.00
n3=Double.parseDouble(str4); //1000.00
n4=Double.parseDouble(str5); //100.00
n5=Double.parseDouble(str6); //200.00
n6=Double.parseDouble(str7); //4139.31
n7=Double.parseDouble(str8); //1034.83
n8=Double.parseDouble(str9); //5174.14
n9=Double.parseDouble(str10); //20000.00
n10=Double.parseDouble(str13); //64000.00
n11=Double.parseDouble(str14); //16512.00
n12=Double.parseDouble(str15); //15625.00
n13=Double.parseDouble(str16); //9620.00
n14=Double.parseDouble(str17); //16512.00
n15=Double.parseDouble(str18); //1540.00
n16=Double.parseDouble(str19); //5640.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
shareOfTotalTaxableProfits=((((n10+n11)-n12)+n13)+n12);
profitFromPartnershipsAmt= shareOfTotalTaxableProfits+n15;//91672
interestFromUKBanksBuildingAmt = Math.floor(n8);//5,174.00	 
otherIncomeAmt=n1;
totalincome = profitFromPartnershipsAmt + interestFromUKBanksBuildingAmt + otherIncomeAmt;
incomeTaxReliefAmt=n12;
totlIncome = totalincome - (incomeTaxReliefAmt + personalAllowanceRate);
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
total1=((n3-n4)+n5);
Reporter.log("total1: "+total1,true);
basicRatePayPension=(total1*giftAidRate)+taxLimit1Uk+n2;//37,675
dueTax1=basicRatePayPension*BR_rate;//7,535.00
Reporter.log("Basic Rate of Pay Pension: "+dueTax1,true);
heigherRatePayPension=((shareOfTotalTaxableProfits+n1)-n12)-(basicRatePayPension + personalAllowanceRate);
dueTax2=round(heigherRatePayPension*HR_rate,2);
Reporter.log("Heigher Rate of Pay Pension: "+dueTax2,true);
heigherRateSaving=(n15+interestFromUKBanksBuildingAmt)-nilRate2;//6,214.14	
dueTax3=round(heigherRateSaving*(HR_rate),2);//2,485.66
Reporter.log("Heigher Rate of Saving: "+dueTax3,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class4Amt=(((((n10+n11)-n12)+n13)- n14)-(class4LPLAmt+nIC_Band))*class4UPLRate;//232.90
Reporter.log("sharePartnershipProfit:"+(shareOfTotalTaxableProfits - n14),true);
Reporter.log("Class 4 value:"+(class4LPLAmt+nIC_Band),true);
Reporter.log("Lower rate amount of Class 4 National Insurance contributions:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
totalTaxDeductedAmt=totIncomeTaxDue+class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt1=totalTaxDeductedAmt - (n16+n7);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);	
Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}
public void delTestCase185(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 185",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delOtherUKIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
delPensionTaxRelief(driver);
delInfoGiftAid(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase186(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 186",true);
clickIncome(driver);
wLib.explicitWait(driver, 10,dividentLink);
dividentLink.click();
addOtherUKIncome(driver,"","","",str1,str2);
addPensionTaxReliefForm(driver,str3, "", "", "");
addGiftAidPayment(driver, str4);
otherGiftAidpayment(driver, str5, str6);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,giftInterestAfterTaxTxtBox);
giftInterestAfterTaxTxtBox.clear();
giftInterestAfterTaxTxtBox.sendKeys(str7);
taxTakenOff1TxtBox.clear();
taxTakenOff1TxtBox.sendKeys(str8);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str9);
subscriptionsSharesTxtBox.clear();
subscriptionsSharesTxtBox.sendKeys(str10);
//reliefClaimedTxtBox.clear();
//reliefClaimedTxtBox.sendKeys(str11);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
addPartnershipInfo(driver,str12,str13);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str13);*/
CashBasisChkBox.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str14);
adjustmentForChangeOfAccountingPractice.clear();
adjustmentForChangeOfAccountingPractice.sendKeys(str15);
lossesBroughtForward.clear();
lossesBroughtForward.sendKeys(str16);
otherBusinessIncomeTxtBox.clear();
otherBusinessIncomeTxtBox.sendKeys(str17);
adjustmentToClass4NICProfits.sendKeys(str18);
shareOfUnTaxedInterestEtc.sendKeys(str19);
shareOfTaxTakenOffTradingIncome.sendKeys(str20);
SaveBtn1.click();
driver.navigate().refresh();
n1=Double.parseDouble(str1); //1265.00
n2=Double.parseDouble(str3); //1800.00
n3=Double.parseDouble(str4); //1000.00
n4=Double.parseDouble(str5); //100.00
n5=Double.parseDouble(str6); //200.00
n6=Double.parseDouble(str7); //4139.31
n7=Double.parseDouble(str8); //1034.83
n8=Double.parseDouble(str9); //5174.14
n9=Double.parseDouble(str10); //10000.00
n10=Double.parseDouble(str11); //12000.00
n11=Double.parseDouble(str14); //64000.00
n12=Double.parseDouble(str15); //16512.00
n13=Double.parseDouble(str16); //15625.00
n14=Double.parseDouble(str17); //9620.00
n15=Double.parseDouble(str18); //16512.00
n16=Double.parseDouble(str19); //1540.00
n17=Double.parseDouble(str20); //5640.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
shareOfTotalTaxableProfits = ((((n11+n12)-n13)+n14)+n13);
profitFromPartnershipsAmt = shareOfTotalTaxableProfits+n16;//91672
interestFromUKBanksBuildingAmt = Math.floor(n8);//5,174.00	 
otherIncomeAmt = n1;
totalincome = profitFromPartnershipsAmt + interestFromUKBanksBuildingAmt + otherIncomeAmt;
incomeTaxReliefAmt=n13;
totlIncome = totalincome - (incomeTaxReliefAmt + personalAllowanceRate);
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
total1=((n3-n4)+n5);
Reporter.log("total1: "+total1,true);
basicRatePayPension=(total1*giftAidRate)+taxLimit1Uk+n2;//37,675
dueTax1=basicRatePayPension*BR_rate;//7,535.00
Reporter.log("Basic Rate of Pay Pension: "+dueTax1,true);
heigherRatePayPension=((shareOfTotalTaxableProfits+n1)-n13)-(basicRatePayPension + personalAllowanceRate);
dueTax2=round(heigherRatePayPension*HR_rate,2);
Reporter.log("Heigher Rate of Pay Pension: "+dueTax2,true);
heigherRateSaving=(n16+interestFromUKBanksBuildingAmt)-nilRate2;//6,214.14	
dueTax3=round(heigherRateSaving*(HR_rate),2);//2,485.66
Reporter.log("Heigher Rate of Saving: "+dueTax3,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
enterpriseInvestmentSchemereliefAmt=n9*EIS_rate;
Assert.assertEquals(dataEnterpriseInvestmentSchemerelief.getText().substring(1).replace(",", ""),String.format("%.2f",(enterpriseInvestmentSchemereliefAmt)));
Reporter.log("Amount of Enterprise Investment Scheme Reliefis verifired successfully: "+dataEnterpriseInvestmentSchemerelief.getText(),true);

class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class4Amt=(((((n11+n12)-n13)+n14)- n15)-(class4LPLAmt+nIC_Band))*class4UPLRate;//232.90
Reporter.log("sharePartnershipProfit:"+(shareOfTotalTaxableProfits - n15),true);
Reporter.log("Class 4 value:"+(class4LPLAmt+nIC_Band),true);
Reporter.log("Lower rate amount of Class 4 National Insurance contributions:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
totalTaxDeductedAmt=(totIncomeTaxDue-enterpriseInvestmentSchemereliefAmt)+class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt1=totalTaxDeductedAmt - (n17+n7);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);	
Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase186(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 186",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delOtherUKIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
delPensionTaxRelief(driver);
delInfoGiftAid(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase187(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 187",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
addHighIncomeChildBenefitCharge(driver,str5,str6,str7);
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str8);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str9);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str10);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str11);
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.clear();
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.sendKeys(str12);
SaveBtn1.click();
n1 = Double.parseDouble(str3); //22.00
n2 = Double.parseDouble(str4); //2099.88
n3 = Double.parseDouble(str5);//4539.00
n4 = Double.parseDouble(str6);//3
n5=Double.parseDouble(str9);//32495.00
n6=Double.parseDouble(str10);//8620.00
n7=Double.parseDouble(str11);//1200.00
n8=Double.parseDouble(str12);//800.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
totalDisallowableExpensesSelfEmpShort = n7+n8;
selfEmploymentIncome = n5 - (n6 + totalDisallowableExpensesSelfEmpShort);
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+Math.floor(n2);
totalincome =interestFromUKBanksBuildingAmt + selfEmploymentIncome;
totlIncome=totalincome-personalAllowanceRate;

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totlIncome - interestFromUKBanksBuildingAmt;//10025
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£2005.00
basicRateSaving=interestFromUKBanksBuildingAmt - nilRate1;//1126
Reporter.log("Basic Rate of Saving: "+ basicRateSaving,true);
dueTax2=basicRateSaving*(BR_rate);//225.20
totIncomeTaxDue=dueTax1+dueTax2;//2230.20
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class4Amt1 = (selfEmploymentIncome - class4LPLAmt)*class4LPLRate;//1210.59
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",class4Amt1));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt = class4Amt1+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue + class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt = n1 * taxedUKInterestRate;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);

taxBalance=incomeTaxDueAmt - totalTaxDeductedAmt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Income Tax, Class 2 and Class 4 National Insurance contributions due is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);	

Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);	
}
public void funcDelTest187(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 56",true);
checkLockbutton(driver);
delSEshort(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
delChildBenefitCharge(driver);
}

public void addTestCase188(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 188",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
funcAddEmployerForMTR(driver, str8, str9);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);	
payFrmEmployer.sendKeys(str10);
UkTaxTakenOffPay.sendKeys(str11);
EarningPTtoUAPTxtBox.sendKeys(str12);
SaveBtn1.click();
addHighIncomeChildBenefitCharge(driver,str5,str6,str7);
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str13);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str14);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str15);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str16);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str17);
subContractorsTaxDeductionTxtBox.clear();
subContractorsTaxDeductionTxtBox.sendKeys(str18);
SaveBtn1.click();
n1 = Double.parseDouble(str3); //22.00
n2 = Double.parseDouble(str4); //2099.88
n3 = Double.parseDouble(str5);//5000
n4 = Double.parseDouble(str6);//3
n5 = Double.parseDouble(str10);//33254.00
n6 = Double.parseDouble(str11);//4280.80
n7 = Double.parseDouble(str12);//24830.00
n8 = Double.parseDouble(str14);//59465.00
n9 = Double.parseDouble(str15);//6365.00
n10 = Double.parseDouble(str16);//995.00
n11 = Double.parseDouble(str17);//7295.00
n12 = Double.parseDouble(str18);//10421.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n5;
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+Math.floor(n2);

selfEmploymentIncome=(n8-n9)+n10;//£54095
netBusinessProfitForTaxPurpose = selfEmploymentIncome - n11;
totalincome = payFromAllEmploymentsAmt + interestFromUKBanksBuildingAmt +selfEmploymentIncome;
incomeTaxReliefAmt = n11 ; //7295.00 
totlIncome =  totalincome -(personalAllowanceRate + incomeTaxReliefAmt);

Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6900
heigherRatePayPension=totlIncome - (basicRatePayPension + interestFromUKBanksBuildingAmt);
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//13481.60
heigherRateSaving=interestFromUKBanksBuildingAmt-nilRate2;//1626
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//650.40
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;//£21032
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
total1 = (max_NIC + nIC2_annual_limit)-((n7 * nIC1_rate)+class2Amount);

total2 = roundDown2(total1/class4LPLRate);
total3 = class4UPLAmt - class4LPLAmt;
total4 = total3 -total2;
total5 = roundDown2(total4 * class4UPLRate);
total6 =(netBusinessProfitForTaxPurpose - class4UPLAmt) * class4UPLRate;
class4Amt1 = total1 + total5 + total6;
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Amaount of Class 4 National Insurance contributions is verified :" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);

class4_2Amt=class4Amt1+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
tot1 = totIncomeTaxDue + class4_2Amt + n3;//27292.56
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(tot1)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=n6+n12+(n1*taxedUKInterestRate);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1 = tot1 - totalTaxDeductedAmt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);
}
public void funcDelTest188(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 188",true);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
clickEmployment(driver);
delEmpInfo(driver);
delChildBenefitCharge(driver);
delSEshort(driver);
}
public void addTestCase192(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 192",true);
clickIncome(driver);
addBank(driver,str1,str1,str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","",str4);
addOtherUKIncome(driver,"","","",str5,str6);
funcAddEmployerForMTR(driver, str7, str8);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.sendKeys(str9);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str10);
isCloseCompanyChkBox.click();
isDirectorChkBox.click();
dateTxtBox.clear();
dateTxtBox.sendKeys(str11);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str12);
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str13);
OtherBenefitsTxtBox.clear();
OtherBenefitsTxtBox.sendKeys(str14);
expensesPaymentsReceivedtxtBox.clear();
expensesPaymentsReceivedtxtBox.sendKeys(str15);
BusnsTrvlAndSubstancTxtBox.clear();
BusnsTrvlAndSubstancTxtBox.sendKeys(str16);
SaveBtn1.click();
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
addGiftAidPayment(driver, str17);
addCharitableIncome(driver,str18,"","");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
subscriptionsVentureTxtBox.clear();
subscriptionsVentureTxtBox.sendKeys(str19);
maintenancePaymentTxtBox.clear();
maintenancePaymentTxtBox.sendKeys(str20);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
n1=Double.parseDouble(str3);//10120.00
n2=Double.parseDouble(str4);//828319.10
n3=Double.parseDouble(str5);//1265.00
n4=Double.parseDouble(str9);//55750.00
n5=Double.parseDouble(str10);//11970.00
n6=Double.parseDouble(str12);//3600.00
n7=Double.parseDouble(str13);//350.00
n8=Double.parseDouble(str14);//7500.00
n9=Double.parseDouble(str15);//4500.00
n10=Double.parseDouble(str16);//5000.00
n11=Double.parseDouble(str17);//240.00
n12=Double.parseDouble(str18);//2145.00
n13=Double.parseDouble(str19);//20000.00
n14=Double.parseDouble(str20);//1820.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n4;//55750.00
benefitsAndExpensesReceivedAmt=n6+n7+n8+n9;//£15,950.00
allowableExpensesAmt =n10;//£5000.00
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
interestFromUKBanksBuildingAmt=n1;
dividendsFromUKCompaniesAmt=Math.floor(n2);
otherIncomeAmt = n3;
totalincome = totalFromAllEmployments + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + otherIncomeAmt;
totlIncome = totalincome - n12;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = taxLimit1Uk + (n11 * giftAidRate);//34,800.00
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6,960.00
heigherRatePayPension=((totalFromAllEmployments+otherIncomeAmt)-n12) - basicRatePayPension;//31,020.00	
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//12,408.00
heigherRateSaving= n1;//10,120.00	
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax3=round((heigherRateSaving*HR_rate),2);//4,048.00
heigherRateDividends=(taxLimit3 + (n11 * giftAidRate))-(((totalFromAllEmployments+otherIncomeAmt)-n12)+interestFromUKBanksBuildingAmt +dividentNillRate);//72,360.00	
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax4=(heigherRateDividends*dividendTaxHigherRate)/100;//23,517.00
additionalRateDividends=dividendsFromUKCompaniesAmt -(heigherRateDividends+ dividentNillRate);
dueTax5= (additionalRateDividends*dividendTaxAdditionalRate)/100;//296,281.60
Reporter.log("Additional Rate of Dividends: "+additionalRateDividends,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
ventureCapitalTrustAmt=n13 * VCT_rate;
Assert.assertEquals(dataVentureCapitalTrustrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(ventureCapitalTrustAmt)));
Reporter.log("Amount of Venture Capitale Trust Relief is verifired successfully: "+dataVentureCapitalTrustrelief.getText(),true);
maintenanceAndAlimonyPaidAmt=n14*A_rate;
Assert.assertEquals(dataMaintenanceAndAlimonyPaid.getText().substring(1).replace(",", ""),String.format("%.2f",(maintenanceAndAlimonyPaidAmt)));
tax1=totIncomeTaxDue - (ventureCapitalTrustAmt + maintenanceAndAlimonyPaidAmt);
Reporter.log("Amount of Maintenance and alimony paid is verifired successfully: "+dataMaintenanceAndAlimonyPaid.getText(),true);
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",(tax1)));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+tax1,true);
totalTaxDeductedAmt=n5;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
fnltax=tax1-totalTaxDeductedAmt;//316,039.38
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));//£316,039.38
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),totalIncomeTaxDue.getText());//£316,039.38
Reporter.log("Amount of Balance for this year is Verified: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest192(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 192",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
driver.navigate().refresh();
clickEmployment(driver);
delEmpInfo(driver);
driver.navigate().refresh();
funcDelAdditionalInfo(driver);
delGiftAid(driver);
Reporter.log("Gift Aid Payment amount Deleted Successfully",true);
delCharitableGiving(driver);
}
public void addTestCase195(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 195",true);
clickIncome(driver);
wLib.explicitWait(driver, 10,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);
statPensionLumpSum.clear();
statPensionLumpSum.sendKeys(str2);
taxtakenoffLumpsum.clear();
taxtakenoffLumpsum.sendKeys(str3);
taxableIncapacityBenefit.clear();
taxableIncapacityBenefit.sendKeys(str4);
taxTakenOff.clear();
taxTakenOff.sendKeys(str5);
stateBenefitsSaveBtn.click();
addOtherUKIncome(driver,str6,str7,str8,"",str9);
funcAddEmployerForMTR(driver, str10, str11);
addEmpIncome.click();
wLib.explicitWait(driver, 5,payFrmEmployer);
payFrmEmployer.sendKeys(str12);
PrvtMedAndDntl.sendKeys(str13);
SaveBtn1.click();
Reporter.log("Employer Income added successfully",true);

n1 = Double.parseDouble(str1);//2100.00
n2 = Double.parseDouble(str2);//16534.00
n3 = Double.parseDouble(str3);//3306.80
n4 = Double.parseDouble(str4);//289.00
n5 = Double.parseDouble(str5);//57.80
n6 = Double.parseDouble(str6);//6020.00
n7 = Double.parseDouble(str7);//1000.00
n8 = Double.parseDouble(str8);//1004.00
n9 = Double.parseDouble(str12);//4266.0
n10 = Double.parseDouble(str13);//175.0


wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n9;
benefitsAndExpensesReceivedAmt = n10;
totalFromAllEmployments = payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt;
UKPensionAndStateBenefitAmt = n1 + n4;
otherIncomeAmt = n6 - n7;//5020
totalincome = UKPensionAndStateBenefitAmt + otherIncomeAmt + totalFromAllEmployments;
totlIncome= totalincome - personalAllowanceRate;
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""), String.format("%.2f",payFromAllEmploymentsAmt));
Reporter.log("Payment From employer verified: "+payFromAllEmployments.getText(), true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
	
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",totalFromAllEmployments));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	

Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);

Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",otherIncomeAmt));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
  
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);

amtStatePensionLumpSumPayment = n2 * percentageZero ;
//Assert.assertEquals(statePensionLumpSumPaymentAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtStatePensionLumpSumPayment));
Reporter.log("State Pension lump sum payment verifired successfully"+amtStatePensionLumpSumPayment,true);

incomeTaxDueAmt = totIncomeTaxDue + amtStatePensionLumpSumPayment;
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDueAmt,true);
totalTaxDeductedAmt = n3 + n5 + n8;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f", totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totalTaxDeductedAmt - incomeTaxDueAmt;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
}

public void delTestCase195(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 195",true);
checkLockbutton(driver);
clickIncome(driver);	
dividentLink.click();
delUKPensionsAnnuities(driver);
delOtherUKIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
}
public void addTestCase198(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 198",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
addPensionTaxReliefForm(driver,str4, "", "", "");
addGiftAidPayment(driver, str5);
addPartnershipInfo(driver,str6, str7);
wLib.explicitWait(driver, 5,PartnershipFullFormLink);
PartnershipFullFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str7);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str8);
wLib.explicitWait(driver, 5,lossFromThisTaxYearSetOffAgainstOtherIncome);
lossFromThisTaxYearSetOffAgainstOtherIncome.clear();
lossFromThisTaxYearSetOffAgainstOtherIncome.sendKeys(str9);
payClass2NICsVoluntarilyChkBox.click();
shareUKUntaxedSavingsIncomeTxtBox.clear();
shareUKUntaxedSavingsIncomeTxtBox.sendKeys(str10);
shareOfProfitOrLossFromUKPropertyTxtBox.clear();
shareOfProfitOrLossFromUKPropertyTxtBox.sendKeys(str11);
lossSetOffAgainstTotalIncomeTxtBox.clear();
lossSetOffAgainstTotalIncomeTxtBox.sendKeys(str12);
shareOfOtherUntaxedUKIncomeTxtBox.clear();
shareOfOtherUntaxedUKIncomeTxtBox.sendKeys(str13);
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.clear();
lossesBroughtForwardFromEarlierYearsSetOffAgainstIncomeTxtBox.sendKeys(str14);
shareOfIncomeFromOffshoreFundsTxtBox.clear();
shareOfIncomeFromOffshoreFundsTxtBox.sendKeys(str15);
SaveBtn1.click(); 
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
PayClass2NICsvoluntarily.click();
SaveBtn2.click(); 
n1=Double.parseDouble(str3); //87000
n2=Double.parseDouble(str4); //1800.00
n3=Double.parseDouble(str5); //2400.00
n4=Double.parseDouble(str8); //-53000.00
n5=Double.parseDouble(str9); //53000.00
n6=Double.parseDouble(str10); //855.00
n7=Double.parseDouble(str11); //-3000.00
n8=Double.parseDouble(str12); //3000.00
n9=Double.parseDouble(str13); //1589.00
n10=Double.parseDouble(str14); //20.00
n11=Double.parseDouble(str15); //9862.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromPartnershipsAmt =n6+n9+n11;
interestFromUKBanksBuildingAmt = n1;
totalincome = profitFromPartnershipsAmt + interestFromUKBanksBuildingAmt;
incomeTaxReliefAmt=(n5-n8)+n10;
totlIncome = totalincome - (incomeTaxReliefAmt + personalAllowanceRate);
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",Math.floor(interestFromUKBanksBuildingAmt)));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateSaving=totlIncome - (SR_band+nilRate1);//31,436.00	
dueTax1=basicRateSaving*BR_rate;//6,287.20	
totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class2Amt = class2Rate * weeksYear;//£150.45
totalTaxDeductedAmt=totIncomeTaxDue +class2Amt;
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2NationalInsurContriDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}
public void funcDelMTRTest198(WebDriver driver)throws Exception
 {
 Reporter.log("Deleting MTR Test Case 198",true);
 wLib = new WaitStatementLib();
 cis=new CISPage(driver);
 checkLockbutton(driver);
 clickIncome(driver);
 delInterestfromUKbanks(driver);
 delPartnershipFull(driver);
 delPartnershipInfo(driver);
 Class2Class4NICsForm.click();
 cis.switchwindowNew(driver);
 wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
 PayClass2NICsvoluntarily.click();
 SaveBtn2.click(); 
delPensionTaxRelief(driver);
delGiftAid(driver);
}
public void addTestCase201(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37,String str38,String str39,String str40,String str41,String str42,String str43,String str44,String str45,String str46,String str47,String str48,String str49,String str50,String str51,String str52,String str53,String str54,String str55,String str56,String str57,String str58,String str59,String str60,String str61,String str62,String str63,String str64,String str65,String str66,String str67,String str68,String str69,String str70,String str71,String str72,String str73,String str74,String str75,String str76,String str77,String str78)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 201",true);
clickIncome(driver);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str1);//4
rentIncomeTextBox.sendKeys(str2);//38247
fHLUKTraditionalAccountingChkBox.click();
UKExpensesTxtBox.sendKeys(str3);//26542.00
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str4);//9023.00
capitalAllowancesTxtBox.sendKeys(str5);//48014.00
lossToCarryForwardTxtBox.sendKeys(str6);//45332.00
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str7);//77231.00
propertyIncomeAllowanceChkBox.click();
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str8);//5900.00
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str9);//4216.00
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str10);//29168.00
legalManagmntAndPrfsnalFeesTxtBox.clear();
legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str11);//900
balancingTaxableChargesTxtBox.clear();
balancingTaxableChargesTxtBox.sendKeys(str12);//1521.00
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str13);//3621.00
lossSetOffAgainstTotlIncmOfTheYearTxtBox.clear();
lossSetOffAgainstTotlIncmOfTheYearTxtBox.sendKeys(str14);//2100.00
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str15);//9723.00
SaveBtn1.click();
driver.navigate().refresh();
clickIncome(driver);
funcAddEmployerForMTR(driver, str16, str17);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str18);//299000
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str19);//95360
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str20);//9000
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str21);//47000.00
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 10,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver,1,delButton);
delButton.click();
wLib.explicitWait(driver,1,confDel);
confDel.click();
}
catch (Exception e)
{
   Reporter.log(e.getMessage(),true);
}*/
wLib.explicitWait(driver, 3,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 3,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str22);
StartDatetxtbox.clear();
StartDatetxtbox.sendKeys(dateStart);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str23);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str24);
carVanAndTravelExpensesTxtBox.clear();
carVanAndTravelExpensesTxtBox.sendKeys(str25);
wagesSalariesAndStaffCostsTxtBox.clear();
wagesSalariesAndStaffCostsTxtBox.sendKeys(str26);
rentAndOtherPropertyCostsTxtBox.clear();
rentAndOtherPropertyCostsTxtBox.sendKeys(str27);
repairAndRenewalCostsTxtBox.clear();
repairAndRenewalCostsTxtBox.sendKeys(str28);
accountancyAndLegalFeesTxtBox.clear();
accountancyAndLegalFeesTxtBox.sendKeys(str20);
interestAndFinanceChargesTxtBox.clear();
interestAndFinanceChargesTxtBox.sendKeys(str30);
phoneAndOtherOfficeCostsTxtBox.clear();
phoneAndOtherOfficeCostsTxtBox.sendKeys(str31);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str32);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str33);
lossOfYearSetAgainstOtherIncomeTxtBox.clear();
lossOfYearSetAgainstOtherIncomeTxtBox.sendKeys(str34);
SaveBtn1.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str35);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str36);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str37);//73250.00
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str38);//23569.00
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str39);//22000.00
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str40);//16200.00
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str41);//15600.00
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str42);//659.00
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str43);//223.00
annualinvestmentTxtBox.clear();
annualinvestmentTxtBox.sendKeys(str44);//5000.00
capitalAllowancesemissionsTxtBox.clear();
capitalAllowancesemissionsTxtBox.sendKeys(str45);//2750.00
goodAndServicesTxtBox.clear();
goodAndServicesTxtBox.sendKeys(str46);//361.00
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
lossandAgainstOtherIncomeTxtBox.clear();
lossandAgainstOtherIncomeTxtBox.sendKeys(str47);//12390.00
SaveBtn1.click();
driver.navigate().refresh();
addPartnershipInfo(driver,str48,str49);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
wLib.explicitWait(driver, 5,PartnerShipRefNo);
/*PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str49);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str50);
adjustmentBasisPeriodAccountingPeriod.clear();
adjustmentBasisPeriodAccountingPeriod.sendKeys(str51);
wLib.explicitWait(driver, 5,lossFromThisTaxYearSetOffAgainstOtherIncome);
lossFromThisTaxYearSetOffAgainstOtherIncome.clear();
lossFromThisTaxYearSetOffAgainstOtherIncome.sendKeys(str52);
shareOfUnTaxedInterestEtc.clear();
shareOfUnTaxedInterestEtc.sendKeys(str53);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
wLib.explicitWait(driver, 2,residentialPropertyNumberOfDisposalsTxtBox);
residentialPropertyNumberOfDisposalsTxtBox.clear();
residentialPropertyNumberOfDisposalsTxtBox.sendKeys(str54);
residentialPropertyDisposalProceedsTxtBox.clear();
residentialPropertyDisposalProceedsTxtBox.sendKeys(str55);
residentialPropertyAllowableCostsTxtBox.clear();
residentialPropertyAllowableCostsTxtBox.sendKeys(str56);
residentialPropertyGainsInTheYearTxtBox.clear();
residentialPropertyGainsInTheYearTxtBox.sendKeys(str57);
residentialPropertyLossesInTheYearTxtBox.clear();
residentialPropertyLossesInTheYearTxtBox.sendKeys(str58);
residentialPropertyClaimOrElectionMadeTxtBox.clear();
residentialPropertyClaimOrElectionMadeTxtBox.sendKeys(str59);
residentialPropertyGainOrLossRelatingToNRCGTTxtBox.clear();
residentialPropertyGainOrLossRelatingToNRCGTTxtBox.sendKeys(str60);
residentialPropertyNRCGTtaxAlreadyChargedTxtBox.clear();
residentialPropertyNRCGTtaxAlreadyChargedTxtBox.sendKeys(str61);
residentialPropertyGainOrLossFromRTTreturnTxtBox.clear();
residentialPropertyGainOrLossFromRTTreturnTxtBox.sendKeys(str62);
residentialPropertyRTTtaxAlreadyChargedTxtBox.clear();
residentialPropertyRTTtaxAlreadyChargedTxtBox.sendKeys(str63);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str64);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str65);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str66);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str67);
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str68);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str69);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str70);
qSLossesInTheYearTxtBox.clear();
qSLossesInTheYearTxtBox.sendKeys(str71);
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str72);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str73);
uQSCostsAndIndexationTxtBox.clear();
uQSCostsAndIndexationTxtBox.sendKeys(str74);
uQSLossesInTheYearTxtBox.clear();
uQSLossesInTheYearTxtBox.sendKeys(str75);
uQSLossUsedAgainstCurrentYearIncomeTxtBox.clear();
uQSLossUsedAgainstCurrentYearIncomeTxtBox.sendKeys(str76);
lossUsedAgainstEarlierYearsGainTxtBox.clear();
lossUsedAgainstEarlierYearsGainTxtBox.sendKeys(str77);
commentTxtBox.clear();
commentTxtBox.sendKeys(str78);
SaveBtn1.click();
n1 = Double.parseDouble(str2); // 38247
n2 = Double.parseDouble(str3); // 26542
n3 = Double.parseDouble(str4); // 9023
n4 = Double.parseDouble(str5); // 48014
n5 = Double.parseDouble(str6); // 45332
n6 = Double.parseDouble(str7); // 77231
n7 = Double.parseDouble(str8); // 5900
n8 = Double.parseDouble(str9); // 4216
n9 = Double.parseDouble(str10); // 29168
n10 = Double.parseDouble(str11); // 900
n11 = Double.parseDouble(str12); // 1521
n12 = Double.parseDouble(str13); // 3621
n13 = Double.parseDouble(str14); // 2100
n14 = Double.parseDouble(str15); // 9722.67
n15 = Double.parseDouble(str18); // 299000
n16 = Double.parseDouble(str19); // 95360
n17 = Double.parseDouble(str20); // 9000
n18 = Double.parseDouble(str21); // 47000
n19 = Double.parseDouble(str23); // 27643
n20 = Double.parseDouble(str24); // 1200
n21 = Double.parseDouble(str25); // 5200
n22 = Double.parseDouble(str26); // 3900
n23 = Double.parseDouble(str27); // 7320
n24 = Double.parseDouble(str28); // 1109
n25 = Double.parseDouble(str29); // 4200
n26 = Double.parseDouble(str30); // 13642
n27 = Double.parseDouble(str31); // 1602
n28 = Double.parseDouble(str32); // 1260
n29 = Double.parseDouble(str33); // 1340
n30 = Double.parseDouble(str34); // 10450
n31 = Double.parseDouble(str37); // 73250
n32 = Double.parseDouble(str38); // 23569
n33 = Double.parseDouble(str39); // 22000
n34 = Double.parseDouble(str40); // 16200
n35 = Double.parseDouble(str41); // 15600
n36 = Double.parseDouble(str42); // 659
n37 = Double.parseDouble(str43); // 223
n38 = Double.parseDouble(str44); // 5000
n39 = Double.parseDouble(str45); // 2750
n40 = Double.parseDouble(str46); // 361
n41 = Double.parseDouble(str47); // 12390
n42 = Double.parseDouble(str50); // -71909
n43 = Double.parseDouble(str51); // 750
n44 = Double.parseDouble(str52); // 71159
n45 = Double.parseDouble(str53); // 501
n46 = Double.parseDouble(str55); // 625000
n47 = Double.parseDouble(str56); // 600900
n48 = Double.parseDouble(str57); // 5000
n49 = Double.parseDouble(str58); // 2000
n50 = Double.parseDouble(str60); // 21100
n51 = Double.parseDouble(str61); // 1800
n52 = Double.parseDouble(str62); // 3000
n53 = Double.parseDouble(str63); // 900
n54 = Double.parseDouble(str65); // 129000
n55 = Double.parseDouble(str66); // 56000
n56 = Double.parseDouble(str67); // 73000
n57 = Double.parseDouble(str69); // 30000
n58 = Double.parseDouble(str70); // 40000
n59 = Double.parseDouble(str71); // 10000
n60 = Double.parseDouble(str73); // 10000
n61 = Double.parseDouble(str74); // 15000
n62 = Double.parseDouble(str75); // 5000
n63 = Double.parseDouble(str76); // 5000
n64 = Double.parseDouble(str77); // 5000
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n15+n18;
benefitsAndExpensesReceivedAmt=n17;
totalFromAllEmployments = payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt;
profitFromPartnershipsAmt = n45;//501
AdjustedProfitForTheYear=(n6+n11)-(n7+n8+n9+n10+n12);//‭34,947‬
profitFromUKLandAndProperty=AdjustedProfitForTheYear;//34,947
totalincome=totalFromAllEmployments + profitFromPartnershipsAmt + profitFromUKLandAndProperty;//390,448.00	 
incomeTaxReliefAmt=totalincome * Dedn_taper_Rate;//97,612.00	 
totlIncome = totalincome - incomeTaxReliefAmt;//292,836.00	 
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

startedRatePayPension=SR_bandScott;//2,000.00
dueTax1=startedRatePayPension*startedRateScott;//380.00
basicRatePayPension=amtBasicRateScott;//10,150.00
dueTax2=basicRatePayPension*basicRateScott;//2,030.00
intermediateRatePayPension=amtIntermediateRateScott;//19,430.00
dueTax3=intermediateRatePayPension*intermediateRateScott;//4,080.30	
heigherRatePayPension=taxLimit2Scot;//118,420.00
dueTax4 = heigherRatePayPension * heigherRateScott;//48,552.20
additionalRatePayPension=totlIncome -(startedRatePayPension + basicRatePayPension + intermediateRatePayPension + heigherRatePayPension + profitFromPartnershipsAmt);
dueTax5=additionalRatePayPension*topRateScott;//65,474.10
additionalRateSaving=profitFromPartnershipsAmt;//501
dueTax6=(additionalRateSaving*advancedRatePercentage)/100;//225.45

totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5+dueTax6;//120,742.05
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts=Math.round(n14)*reliefFinancerate;//1,944.60
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));//1,944.60
Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);
incomeTaxdueafterallowancesandreliefs=totIncomeTaxDue - amtReliefForFinanceCosts;
Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(n16)));
Reporter.log("Amount of Tax Deduction of Other Income is verified: "+totalTaxDeducted.getText(),true); 
totalTaxDeductedAmt=incomeTaxdueafterallowancesandreliefs-n16;//1,255.60
wLib.explicitWait(driver, 5,totalIncomeTaxDue);
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));//
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
residentialProperty_CarriedInterestAmt =(((n48+n50) - (n49 + (n59+(n62-n63)))) - annualExemptIndividualsProposed) * upper_CGT_rate_RP_CI;//2,400.00	@28%=	£672.00
Reporter.log("Residential property and carried interest: "+residentialProperty_CarriedInterestAmt,true);
otherGainsBasicAmt=n56*capitalGainsRateUpper;//£14,600.00
Reporter.log("Other gains: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=(residentialProperty_CarriedInterestAmt + otherGainsBasicAmt)-(n51+n53);//12,572.00
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=totalTaxDeductedAmt+capitalGainsTaxdueAmt;//36,009.45
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));//£321,084.82
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void delTestCase201(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 201",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
delProfit(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delSEshort(driver);
delSelfEmpFull(driver);
clickIncome(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
delCGI(driver);
}
public void addTestCase202(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 202",true);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
postCessationTxtBox.clear();
postCessationTxtBox.sendKeys(str1);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str2);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str3);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(dateEnd);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
arrangementChkBox.click();
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str4);//175264
businessIncomeOtherTxtBox.clear();
businessIncomeOtherTxtBox.sendKeys(str5);//5460
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str6);//10640
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str7);//2421
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str8);//25623
phonefaxandOtherOfficeCostsTxtBox.clear();
phonefaxandOtherOfficeCostsTxtBox.sendKeys(str9);//640
accountancyLegalandOtherfeesTxtBox.clear();
accountancyLegalandOtherfeesTxtBox.sendKeys(str10);//1562
disexpCarandVanTxtBox.clear();
disexpCarandVanTxtBox.sendKeys(str11);//561
disexpRentTxtBox.clear();
disexpRentTxtBox.sendKeys(str12);//2135
restrictedCostingTxtBox.clear();
restrictedCostingTxtBox.sendKeys(str13);//4500.00
balancingChargeOnSalesTxtBox.clear();
balancingChargeOnSalesTxtBox.sendKeys(str14);//620.00
adjustmentChangeofAccountTxtBox.clear();
adjustmentChangeofAccountTxtBox.sendKeys(str15);//15200.00
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
lossBroughtForwardProfitTxtBox.clear();
lossBroughtForwardProfitTxtBox.sendKeys(str16);//5692.00
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str16);//15000.00
adjustmentProfitTxtBox.clear();
adjustmentProfitTxtBox.sendKeys(str18);//15200.00
SaveBtn1.click();
n1 = Double.parseDouble(str1);//60000.00
n2 = Double.parseDouble(str4);//175264
n3 = Double.parseDouble(str5);//5460
n4 = Double.parseDouble(str6);//10640
n5 = Double.parseDouble(str7);//2421
n6 = Double.parseDouble(str8);//25623
n7 = Double.parseDouble(str9);//640
n8 = Double.parseDouble(str10);//1562
n9 = Double.parseDouble(str11);//561
n10 = Double.parseDouble(str12);//2135
n11 = Double.parseDouble(str13);//4500
n12 = Double.parseDouble(str14);//620
n13 = Double.parseDouble(str15);//15200
n14 = Double.parseDouble(str16);//5692
n15 = Double.parseDouble(str17);//15000
n16 = Double.parseDouble(str18);//15200


wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome = ((((n2+n3)-(n4+n5+n6+n7+n8))+(n9+n10+n12)) - n11)+n13;//153,854.00  
totalincome = selfEmploymentIncome;
incomeTaxReliefAmt= amtDedn_cap + n14;
totlIncome= totalincome - (personalAllowanceRate + incomeTaxReliefAmt + blindAllowance);

Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Amount of Profit From Self Employment is Verified: "+amountProfitFromSelfEmployment.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension= taxLimit1Uk;//34500.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£9,650.00
heigherRatePayPension=totlIncome - basicRatePayPension;
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;
totIncomeTaxDue = dueTax1 + dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class4Amt=((((selfEmploymentIncome-n14) - n16)-class4LPLAmt)-nIC_Band)*class4UPLRate;//1,732.24
Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue+class4_2Amt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Due is verified: " + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
}
public void funcDelMTRTest202(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 202",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
funcDelAdditionalInfo(driver);
delSelfEmpFull(driver);
}
public void addTestCase203(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 203",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str6);//14206.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str7);//5300.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str8);//1060.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
AddgiftAidPaymentFull(driver,str9, "", str10);
clickIncome(driver);
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 2,editBtn);
editBtn.click();
wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.sendKeys(str11);
totalIncomePropertyLinkTxtBox.sendKeys(str12);
othrPropertyExpensesTxtBox.sendKeys(str13);
tenPercntWearAndTearAllowanceTxtBox.sendKeys(str14);
txtBoxLossBroughtForward.sendKeys(str15);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,notResidentInUKChkBox);
notResidentInUKChkBox.click();
residentInUKForPreviousYearChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str16);
listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue(str17);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str18);
listbox1=new Select(countryOfResidenceInPreviousYear1LstBox);
listbox1.selectByValue(str19);
domiciledOutsideTheUKForTaxChkBox.click();
firstYearOrAlwaysDomiciledOutsideUKChkBox.click();
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str20);
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();
n1 = Double.parseDouble(str3); //321.00
n2 = Double.parseDouble(str4); //1625.00
n3 = Double.parseDouble(str5); //128.00
n4 = Double.parseDouble(str6);//14206.00
n5 = Double.parseDouble(str7);//5300.00
n6 = Double.parseDouble(str8);//1060.00
n7 = Double.parseDouble(str9);//3,450.00
n8 = Double.parseDouble(str10);//3,000.00
n9 = Double.parseDouble(str12);//53780.00
n10 = Double.parseDouble(str13);//47197
n11 = Double.parseDouble(str14);//5379.00
n12 = Double.parseDouble(str15);//1204.00
n13 = Double.parseDouble(str16);//84
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromUKLandAndProperty = n9 - (n10+n11); //1204
dividendsFromUKCompaniesAmt = n3;
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate) + n1+ n2;
UKPensionAndStateBenefitAmt = n4 + n5;//19,506.00
totalincome = profitFromUKLandAndProperty + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt = n12;
totlIncome =  totalincome - (interestFromUKBanksBuildingAmt + n4 + incomeTaxReliefAmt + dividendsFromUKCompaniesAmt);

Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",profitFromUKLandAndProperty));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);


Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=totlIncome;
dueTax1 = basicRatePayPension*BR_rate;
Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);
total1=n1*taxedUKInterestRate;
taxTreatedAsPaidOnDividendsFromUKCompanies = (dividendsFromUKCompaniesAmt * dividendTaxBasicRate)/100;//amount of dividend from income
totIncomeTaxDue = dueTax1 +taxTreatedAsPaidOnDividendsFromUKCompanies+total1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
Assert.assertEquals(amtTaxCreditsDividendsFromUKCompanies.getText().substring(1).replace(",", ""),String.format("%.2f",taxTreatedAsPaidOnDividendsFromUKCompanies));
Reporter.log("Amount of  7.5% tax credits on dividends from UK companies (not repayable) is Verified: "+amtTaxCreditsDividendsFromUKCompanies.getText(),true);

totalTaxDeductedAmt =total1 + n6;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totIncomeTaxDue - 	(taxTreatedAsPaidOnDividendsFromUKCompanies + totalTaxDeductedAmt);
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}	
public void funcDelMTRTest203(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case203",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delProfit(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
delGiftAid(driver);
}
public void addTestCase204(WebDriver driver, String str1,String str2,String str3,String str4)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 204",true);

addPartnershipInfo(driver,str1, str2);
wLib.explicitWait(driver, 5,PartnershipFullFormLink);
PartnershipFullFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str2);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();	
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str3);
lossSetOffAgainstTotalIncomeTxtBox.clear();
lossSetOffAgainstTotalIncomeTxtBox.sendKeys(str4);
SaveBtn1.click();
n1=Double.parseDouble(str3);//490000.00
n2=Double.parseDouble(str4);//190000.00


wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
profitFromPartnershipsAmt = n1;
totalincome = profitFromPartnershipsAmt;
incomeTaxReliefAmt = totalincome * Dedn_taper_Rate;//97,612.00	
totlIncome = totalincome - incomeTaxReliefAmt;
Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension= taxLimit1Uk;//34500.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£9,650.00
heigherRatePayPension = taxLimit2;//115500
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;
additionalRatePayPension= totlIncome - (basicRatePayPension + heigherRatePayPension);//97875
Reporter.log("Additional Rate of Pay Pension: "+additionalRatePayPension,true);
dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;//150975
 
totIncomeTaxDue = dueTax1 + dueTax2 + dueTax3;

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",class4Amt1));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class4Amt = (profitFromPartnershipsAmt - class4UPLAmt) *class4UPLRate;//88730
Reporter.log("Lower rate Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1 + class4Amt + class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",class4_2Amt));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue+class4_2Amt));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Due is verified: " + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
taxBalance = totIncomeTaxDue + class4_2Amt;//163414.74
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
}

public void funcDelMTRTest204(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 204",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);

}
public void addTestCase207(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 207",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
verifyGiftAid(driver);
addGiftAidPayment(driver, str6);
addCharitableIncome(driver,str7,"","");
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str8);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str9);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("108");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str10);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str11);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("103");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str12);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str13);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("108");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str14);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str15);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("108");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str16);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str17);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver, 2,BtnAddSummary);
BtnAddSummary.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("103");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str18);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str19);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver, 2,BtnForeignTaxPaid);
BtnForeignTaxPaid.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("103");
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str20);
colFTxtBox.clear();
colFTxtBox.sendKeys(str21);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver, 2,BtnForeignTaxPaid);
BtnForeignTaxPaid.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("161");
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str22);
colFTxtBox.clear();
colFTxtBox.sendKeys(str23);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver, 2,BtnForeignTaxPaid);
BtnForeignTaxPaid.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str24);
colFTxtBox.clear();
colFTxtBox.sendKeys(str25);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();

wLib.explicitWait(driver, 2,BtnForeignTaxPaid);
BtnForeignTaxPaid.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("108");
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str26);
colFTxtBox.clear();
colFTxtBox.sendKeys(str27);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();
SaveBtn1.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,totalRentsAndOtherReceiptsTxtBox);
totalRentsAndOtherReceiptsTxtBox.clear();
totalRentsAndOtherReceiptsTxtBox.sendKeys(str18);	
wLib.explicitWait(driver, 5,SaveBtn1);
foreignIncomeNumberOfOverseasLetPropertiesTxtBox.sendKeys(str28);
SaveBtn1.click();
driver.navigate().refresh();
n1 = Double.parseDouble(str3);//321.00
n2 = Double.parseDouble(str4);//1625.00
n3 = Double.parseDouble(str5);//128.00
n4 = Double.parseDouble(str6);//240.00
n5 = Double.parseDouble(str7);//2145.00
n6 = Double.parseDouble(str8);//1697.00
n7 = Double.parseDouble(str9);//170.00
n8 = Double.parseDouble(str10);//5759.00
n9 = Double.parseDouble(str11);//575.90
n10 = Double.parseDouble(str12);//500.00
n11 = Double.parseDouble(str13);//75.00
n12 = Double.parseDouble(str14);//1000.00
n13 = Double.parseDouble(str15);//100.00
n14 = Double.parseDouble(str16);//500.00
n15 = Double.parseDouble(str17);//50.00
n16 = Double.parseDouble(str18);//2110.00
n17 = Double.parseDouble(str19);//686.00
n18 = Double.parseDouble(str20);//8836.00
n19 = Double.parseDouble(str21);//23904.00
n20 = Double.parseDouble(str22);//3394.00
n21 = Double.parseDouble(str23);//14655.00
n22 = Double.parseDouble(str24);//1651.00
n23 = Double.parseDouble(str25);//7434.00
n24 = Double.parseDouble(str26);//121168.00
n25 = Double.parseDouble(str27);//291486.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
foreignIncomeCalc=n6+n8+n16;//9,566.00	
dividendsFromForeignCompaniesCalc=n10+n12+n14;//2000.00	
dividendsFromUKCompaniesAmt = n3;
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate) + n1 + n2;//2,026.00	 

totalincome = foreignIncomeCalc + dividendsFromForeignCompaniesCalc+ dividendsFromUKCompaniesAmt + interestFromUKBanksBuildingAmt ;

incomeTaxReliefAmt=n5;//2145.00 (REL9)

totlIncome=totalincome - (incomeTaxReliefAmt+personalAllowanceRate);//6,855.00	
if(totlIncome <=0)
{

totlIncome = 0;
}
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(giftofInvestmentsAndPropertyAmtTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
Reporter.log("Amount of Gift of investments and Property is Verified: "+giftofInvestmentsAndPropertyAmtTaxSummary.getText(),true);		
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtTaxdueonGiftAidpayments=n4*giftAidRate;
Assert.assertEquals(calculationGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxdueonGiftAidpayments));
Reporter.log("Calculation Of Gift Aid Payments verified: "+calculationGiftAidpayments.getText(),true);
taxdueonGiftAidpaymentsValue=amtTaxdueonGiftAidpayments*reliefFinancerate;
Assert.assertEquals(taxDueGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Tax Due on Gift Aid Payments verified: "+taxDueGiftAidpayments.getText(),true);
Assert.assertEquals(incomeTaxDueAfterGifTAid.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Total Income Tax Due After GifTAid verified: "+incomeTaxDueAfterGifTAid.getText(),true);
	
totalTaxDeductedAmt=n1*taxedUKInterestRate;
 Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
 Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
 taxBalance=taxdueonGiftAidpaymentsValue - totalTaxDeductedAmt;
 
taxBalance= totalTaxDeductedAmt - taxdueonGiftAidpaymentsValue;
 	
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);

}
public void funcDelMTRTest207(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 207",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
delGiftAid(driver);
delCharitableGiving(driver);

clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();

try{
wLib.explicitWait(driver,1,delOverseasSavings);
if(delOverseasSavings.isDisplayed()==true)
{
do {
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}while(delOverseasSavings.isDisplayed()==true);
}
	}catch (Exception e) {
	Reporter.log("Delete button for overseas savings is not available",true);
	}
try{
wLib.explicitWait(driver,1,delDividendsForeignComaniesBtn);
if(delDividendsForeignComaniesBtn.isDisplayed()==true)
{
	do {
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
delDividendsForeignComaniesBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}while(delDividendsForeignComaniesBtn.isDisplayed()==true);
}
	}catch (Exception e) {
	Reporter.log("Delete button for Dividends is not available",true);
	}

driver.navigate().refresh();
wLib.explicitWait(driver, 5,delSummaryFOR);
delSummaryFOR.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 1,cnfmdel);
cnfmdel.click();
try{
wLib.explicitWait(driver,1,delForeignTaxPaid);
if(delForeignTaxPaid.isDisplayed()==true)
{
do {

wLib.explicitWait(driver, 5,delForeignTaxPaid);
delForeignTaxPaid.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 1,cnfmdel);
cnfmdel.click();
}while(delForeignTaxPaid.isDisplayed()==true);
	}
		}catch (Exception e) {
		Reporter.log("Delete button for Dividends is not available",true);
		}

wLib.explicitWait(driver, 2,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
}
public void addTestCase208(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 208",true);
addHighIncomeChildBenefitCharge(driver, str1, str2, str3);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
addGiftAidPayment(driver, str4);
clickIncome(driver);
funcAddEmployerForMTR(driver, str5, str6);
funcAddEmpIncomeWithTaxTakenOff(driver, str7, str8,"");
clickIncome(driver);
wLib.explicitWait(driver, 2,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str9);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str10);
uQSCostsAndIndexationTxtBox.clear();
uQSCostsAndIndexationTxtBox.sendKeys(str11);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str12);
adjustmentToCGTTxtBox.clear();
adjustmentToCGTTxtBox.sendKeys(str13);
nRDRTrustLiabilityTxtBox.clear();
nRDRTrustLiabilityTxtBox.sendKeys(str14);
commentTxtBox.clear();
commentTxtBox.sendKeys(str15);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,notResidentInUKChkBox);
residentInUKForPreviousYearChkBox.click();
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str16);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str17);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str18);
listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue(str19);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str20);
domiciledOutsideTheUKForTaxChkBox.click();
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str21);
remittancebasisclaimChkBox.click();
uKResidentFor12OutOf14YearsChkBox.click();
nominatedIncomeAmountTxtBox.clear();
nominatedIncomeAmountTxtBox.sendKeys(str22);
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();
n1 = Double.parseDouble(str1);//5000
n2 = Double.parseDouble(str2);//3
n3 = Double.parseDouble(str4);//250000
n4 = Double.parseDouble(str7);//33254.00
n5 = Double.parseDouble(str8);//4280.80
n6 = Double.parseDouble(str10);//20000.00
n7 = Double.parseDouble(str11);//1000
n8 = Double.parseDouble(str12);//19000
n9 = Double.parseDouble(str13);//900
n10 = Double.parseDouble(str14);//2000
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n4;
totalincome = payFromAllEmploymentsAmt;
totlIncome =  totalincome;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension = totlIncome;//33254
dueTax1 = basicRatePayPension * BR_rate;
Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);

totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
remittanceBasisCharge_nonDomiciles = res_non_dom_High_ch;
Assert.assertEquals(amtRemittanceBasisChargeNonBomiciles.getText().substring(1).replace(",", ""),String.format("%.2f",remittanceBasisCharge_nonDomiciles));
Reporter.log("Amount of Remittance Basis Charge for Non Bomiciles is Verified: "+amtRemittanceBasisChargeNonBomiciles.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue + remittanceBasisCharge_nonDomiciles;
totalTaxDeductedAmt = n5;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
otherGainsBasicAmt = n8 * capitalGainsRateLower;//£1900
Reporter.log("Other gains: "+ otherGainsBasicAmt,true);
capitalGainsTaxdueAmt = otherGainsBasicAmt + n9 + n10;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
taxBalance = (incomeTaxDueAmt - totalTaxDeductedAmt) + capitalGainsTaxdueAmt;
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}	
public void funcDelMTRTest208(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case208",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delChildBenefitCharge(driver);
delGiftAid(driver);
delCGI(driver);
}
public void addTestCase209(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 209",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
addOtherDivident(driver,str4,"0.00","0.00");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str6);
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str7);
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
overseasPensionsSocialScurityBenefitsAndRoyalties.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("230");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str9);
wLib.explicitWait(driver, 2,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str10);
wLib.explicitWait(driver, 2,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver, 2,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 2,foreignIncomeEditSummaryBtn);
foreignIncomeEditSummaryBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("75");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str12);
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str8);
propertyIncomeAllowanceChkBox.click();
propertyExpensesTxtBox.clear();
propertyExpensesTxtBox.sendKeys(str11);
lossSetOffAgainstTotalIncomeTxtBox.clear();
lossSetOffAgainstTotalIncomeTxtBox.sendKeys(str13);
amountOfChargeableGainUnderUKRulesTxtBox.clear();
amountOfChargeableGainUnderUKRulesTxtBox.sendKeys(str14);
foreignTaxPaidTxtBox.clear();
foreignTaxPaidTxtBox.sendKeys(str15);
toClaimForeignTaxCreditReliefChkBox.click();
totalForeignTaxCreditReliefOnGainsTxtBox.clear();
totalForeignTaxCreditReliefOnGainsTxtBox.sendKeys(str16);
SaveBtn1.click();
	try
	{
	if (SaveBtn1.isDisplayed()==true)
	{
	SaveBtn1.click();
	}
	}
	catch (Exception e) {
	Reporter.log("Save button clicked in first attempt",true);
	}
clickIncome(driver);
wLib.explicitWait(driver,5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver,5,editBtn);
editBtn.click();
wLib.explicitWait(driver,2,residentialPropertyNumberOfDisposalsTxtBox);
residentialPropertyNumberOfDisposalsTxtBox.clear();
residentialPropertyNumberOfDisposalsTxtBox.sendKeys(str17);
residentialPropertyDisposalProceedsTxtBox.clear();
residentialPropertyDisposalProceedsTxtBox.sendKeys(str18);
residentialPropertyAllowableCostsTxtBox.clear();
residentialPropertyAllowableCostsTxtBox.sendKeys(str19);
residentialPropertyGainsInTheYearTxtBox.clear();
residentialPropertyGainsInTheYearTxtBox.sendKeys(str20);
commentTxtBox.clear();
commentTxtBox.sendKeys(str21);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,hadAHomeOverseasChkBox);
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str22);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str23);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str24);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str25);
listbox1=new Select(countryOfResidenceInPreviousYear1LstBox);
listbox1.selectByValue(str26);
domiciledOutsideTheUKForTaxChkBox.click();
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str27);
remittancebasisclaimChkBox.click();
unremitedIncomeAndGainsUnremittedIncomeAndGainsUnderChkBox.click();
uKResidentFor7OutOf9YearsUKResidentChkBox.click();
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();

n1 = Double.parseDouble(str3);//517.00
n2 = Double.parseDouble(str4);//2038.00
n3 = Double.parseDouble(str5);//6175.00
n4 = Double.parseDouble(str6);//51777.00
n5 = Double.parseDouble(str7);//12803.00
n6 = Double.parseDouble(str8);//35299.00
n7 = Double.parseDouble(str9);//131762.00
n8 = Double.parseDouble(str10);//35299.00
n9 = Double.parseDouble(str11);//2278.00
n10 = Double.parseDouble(str12);//-2278.00
n11 = Double.parseDouble(str13);//2278
n12 = Double.parseDouble(str14);//49140.00
n13 = Double.parseDouble(str15);//49140.00
n14 = Double.parseDouble(str16);//13759.00
n15 = Double.parseDouble(str18);//200000.00
n16 = Double.parseDouble(str19);//150860.00
n17 = Double.parseDouble(str20);//49140.00
n18 = Double.parseDouble(str22);//316
n19 = Double.parseDouble(str23);//3
n20 = Double.parseDouble(str24);//294

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
foreignIncomeCalc = n7;
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1;
dividendsFromUKCompaniesAmt = n2;
UKPensionAndStateBenefitAmt = n3 + n4;
totalincome = foreignIncomeCalc + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt = n11;
totlIncome =  totalincome - incomeTaxReliefAmt;
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);


Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

startedRatePayPension=SR_bandScott;//2,000.00
dueTax1=startedRatePayPension*startedRateScott;//380.00
basicRatePayPension=amtBasicRateScott;//10,150.00
dueTax2=basicRatePayPension*basicRateScott;//2,030.00
intermediateRatePayPension=amtIntermediateRateScott;//19,430.00
dueTax3=intermediateRatePayPension*intermediateRateScott;//4,080.30	
heigherRatePayPension=taxLimit2Scot;//118,420.00
dueTax4 = heigherRatePayPension * heigherRateScott;//48,552.20
additionalRatePayPension=(totlIncome - (interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt))-(startedRatePayPension + basicRatePayPension + intermediateRatePayPension + heigherRatePayPension);//37436
dueTax5=additionalRatePayPension*topRateScott;
additionalRateSaving = interestFromUKBanksBuildingAmt;//646
dueTax6=(additionalRateSaving*advancedRatePercentage)/100;
additionalRateDividends = dividendsFromUKCompaniesAmt - dividentNillRate;
dueTax7 = round((additionalRateDividends * dividendTaxAdditionalRate)/100,2);
Reporter.log("Additional Rate of Dividends: "+dueTax7,true);

totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5+dueTax6+dueTax7;//72568.23
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = n8;
Assert.assertEquals(amtForeignTaxCreditRelief.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));
Reporter.log("Amount of Foreign Tax Credit Relief is verifired successfully: "+amtForeignTaxCreditRelief.getText(),true);

totalTaxDeductedAmt = n5 + (n1*taxedUKInterestRate);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue - (amtReliefForFinanceCosts + totalTaxDeductedAmt);
residentialProperty_CarriedInterestAmt = (n17 - annualExemptIndividualsProposed) * upper_CGT_rate_RP_CI;//37440	@28%=	10483.20
Reporter.log("Residential property and carried interest: "+residentialProperty_CarriedInterestAmt,true);
otherGainsBasicAmt = n14;//£13759
if (residentialProperty_CarriedInterestAmt <= otherGainsBasicAmt)
{
capitalGainsTaxdueAmt = 0;
}
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

taxBalance = incomeTaxDueAmt + capitalGainsTaxdueAmt;

Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}	
public void funcDelMTRTest209(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case209",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
delCGI(driver);
delBank(driver);
delOtherDivident(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
try{
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
if(delOverseasPensionsRoyaltiesBtn.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
delOverseasPensionsRoyaltiesBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Overseas pensions is not available",true);
}

try{
wLib.explicitWait(driver, 5,delSummaryFOR);
if(delSummaryFOR.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delSummaryFOR);
delSummaryFOR.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for summary is not available",true);
}
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
}
public void addTestCase210(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 210",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//8206.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str2);//326501.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str3);//6530.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
overseasPensionsSocialScurityBenefitsAndRoyalties.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("230");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str5);
wLib.explicitWait(driver, 2,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str6);
wLib.explicitWait(driver, 2,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver, 2,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 2,foreignIncomeEditSummaryBtn);
foreignIncomeEditSummaryBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("75");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str8);
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str4);
propertyIncomeAllowanceChkBox.click();
propertyExpensesTxtBox.clear();
propertyExpensesTxtBox.sendKeys(str7);
lossSetOffAgainstTotalIncomeTxtBox.clear();
lossSetOffAgainstTotalIncomeTxtBox.sendKeys(str9);
amountOfChargeableGainUnderUKRulesTxtBox.clear();
amountOfChargeableGainUnderUKRulesTxtBox.sendKeys(str10);
foreignTaxPaidTxtBox.clear();
foreignTaxPaidTxtBox.sendKeys(str11);
toClaimForeignTaxCreditReliefChkBox.click();
totalForeignTaxCreditReliefOnGainsTxtBox.clear();
totalForeignTaxCreditReliefOnGainsTxtBox.sendKeys(str12);
SaveBtn1.click();
	try
	{
	if (SaveBtn1.isDisplayed()==true)
	{
	SaveBtn1.click();
	}
	}
	catch (Exception e) {
	Reporter.log("Save button clicked in first attempt",true);
	}
clickIncome(driver);
wLib.explicitWait(driver,5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver,5,editBtn);
editBtn.click();
wLib.explicitWait(driver,2,residentialPropertyNumberOfDisposalsTxtBox);
residentialPropertyNumberOfDisposalsTxtBox.clear();
residentialPropertyNumberOfDisposalsTxtBox.sendKeys(str13);
residentialPropertyDisposalProceedsTxtBox.clear();
residentialPropertyDisposalProceedsTxtBox.sendKeys(str14);
residentialPropertyAllowableCostsTxtBox.clear();
residentialPropertyAllowableCostsTxtBox.sendKeys(str15);
residentialPropertyGainsInTheYearTxtBox.clear();
residentialPropertyGainsInTheYearTxtBox.sendKeys(str16);
commentTxtBox.clear();
commentTxtBox.sendKeys(str17);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,hadAHomeOverseasChkBox);
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str18);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str19);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str20);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str21);
listbox1=new Select(countryOfResidenceInPreviousYear1LstBox);
listbox1.selectByValue(str22);
amountOfDTAincomeForWhichPartialReliefIsClaimedTxtBox.clear();
amountOfDTAincomeForWhichPartialReliefIsClaimedTxtBox.sendKeys(str23);
domiciledOutsideTheUKForTaxChkBox.click();
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str24);
remittancebasisclaimChkBox.click();
uKResidentFor7OutOf9YearsUKResidentChkBox.click();
nominatedIncomeAmountTxtBox.clear();
nominatedIncomeAmountTxtBox.sendKeys(str25);
nominatedCapitalGainsAmountTxtBox.clear();
nominatedCapitalGainsAmountTxtBox.sendKeys(str26);
remittedIncomeOrGainsChkBox.click();
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();

n1=Double.parseDouble(str1); //8206.00
n2=Double.parseDouble(str2); //32650.00
n3=Double.parseDouble(str3); //6530.00
n4 = Double.parseDouble(str4);//35299.00
n5 = Double.parseDouble(str5);//131762.00
n6 = Double.parseDouble(str6);//35299.00
n7 = Double.parseDouble(str7);//2278.00
n8 = Double.parseDouble(str8);//-2278.00
n9 = Double.parseDouble(str9);//2278
n10 = Double.parseDouble(str10);//49140.00
n11 = Double.parseDouble(str11);//49140.00
n12 = Double.parseDouble(str12);//13759.00
n13 = Double.parseDouble(str13);//200000.00
n14 = Double.parseDouble(str14);//150860.00
n15 = Double.parseDouble(str16);//49140.00
n16 = Double.parseDouble(str18);//316
n17 = Double.parseDouble(str19);//3
n18 = Double.parseDouble(str20);//294
n19 = Double.parseDouble(str23);//131762
n20 = Double.parseDouble(str25);//131762
n21 = Double.parseDouble(str26);//49140
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
foreignIncomeCalc = n5;
UKPensionAndStateBenefitAmt = n1+n2;//6891
totalincome = foreignIncomeCalc + UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt = n9;
totlIncome =  totalincome - incomeTaxReliefAmt;
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);


basicRatePayPension=taxLimit1Uk;
dueTax1 = basicRatePayPension*BR_rate;//6900
Reporter.log("Basic Rate of Pay Pension: " + dueTax1,true);	
heigherRatePayPension = taxLimit2;
dueTax2=heigherRatePayPension*HR_rate;
Reporter.log("Heigher Rate of Pay Pension: " + dueTax2,true);
additionalRatePayPension= totlIncome - (basicRatePayPension + heigherRatePayPension);
dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;
Reporter.log("Additional Rate of Pay Pension: " + dueTax3,true);	
totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = n6;
Assert.assertEquals(amtForeignTaxCreditRelief.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));
Reporter.log("Amount of Foreign Tax Credit Relief is verifired successfully: "+amtForeignTaxCreditRelief.getText(),true);
remittanceBasisCharge_nonDomiciles = res_non_dom_Lower_ch;
Assert.assertEquals(amtRemittanceBasisChargeNonBomiciles.getText().substring(1).replace(",", ""),String.format("%.2f",remittanceBasisCharge_nonDomiciles));
Reporter.log("Amount of Remittance Basis Charge for Non Bomiciles is Verified: "+amtRemittanceBasisChargeNonBomiciles.getText(),true);
incomeTaxdueafterallowancesandreliefs = (totIncomeTaxDue - amtReliefForFinanceCosts) + remittanceBasisCharge_nonDomiciles;
Reporter.log("Income Tax due after allowances and reliefs:"+incomeTaxdueafterallowancesandreliefs,true);
totalTaxDeductedAmt = n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs - totalTaxDeductedAmt;
residentialProperty_CarriedInterestAmt = n15 * upper_CGT_rate_RP_CI;//£13759.20
Reporter.log("Residential property and carried interest: "+residentialProperty_CarriedInterestAmt,true);
otherGainsBasicAmt = n12;//£13759

capitalGainsTaxdueAmt = residentialProperty_CarriedInterestAmt - otherGainsBasicAmt;//.20

Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

taxBalance = incomeTaxDueAmt + capitalGainsTaxdueAmt;

Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}	
public void funcDelMTRTest210(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case210",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
delCGI(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
try{
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
if(delOverseasPensionsRoyaltiesBtn.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
delOverseasPensionsRoyaltiesBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Overseas pensions is not available",true);
}

try{
wLib.explicitWait(driver, 5,delSummaryFOR);
if(delSummaryFOR.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delSummaryFOR);
delSummaryFOR.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Dividend income received by a person abroad is not available",true);
}
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
}
public void addTestCase211(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 211",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//8206.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str2);//326501.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str3);//6530.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
overseasPensionsSocialScurityBenefitsAndRoyalties.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("230");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str5);
wLib.explicitWait(driver, 2,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str6);
wLib.explicitWait(driver, 2,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver, 2,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 2,foreignIncomeEditSummaryBtn);
foreignIncomeEditSummaryBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("75");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str8);
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str4);
propertyIncomeAllowanceChkBox.click();
propertyExpensesTxtBox.clear();
propertyExpensesTxtBox.sendKeys(str7);
lossSetOffAgainstTotalIncomeTxtBox.clear();
lossSetOffAgainstTotalIncomeTxtBox.sendKeys(str9);
amountOfChargeableGainUnderUKRulesTxtBox.clear();
amountOfChargeableGainUnderUKRulesTxtBox.sendKeys(str10);
foreignTaxPaidTxtBox.clear();
foreignTaxPaidTxtBox.sendKeys(str11);
toClaimForeignTaxCreditReliefChkBox.click();
totalForeignTaxCreditReliefOnGainsTxtBox.clear();
totalForeignTaxCreditReliefOnGainsTxtBox.sendKeys(str12);
SaveBtn1.click();
	try
	{
	if (SaveBtn1.isDisplayed()==true)
	{
	SaveBtn1.click();
	}
	}
	catch (Exception e) {
	Reporter.log("Save button clicked in first attempt",true);
	}
clickIncome(driver);
wLib.explicitWait(driver,5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver,5,editBtn);
editBtn.click();
wLib.explicitWait(driver,2,residentialPropertyNumberOfDisposalsTxtBox);
residentialPropertyNumberOfDisposalsTxtBox.clear();
residentialPropertyNumberOfDisposalsTxtBox.sendKeys(str13);
residentialPropertyDisposalProceedsTxtBox.clear();
residentialPropertyDisposalProceedsTxtBox.sendKeys(str14);
residentialPropertyAllowableCostsTxtBox.clear();
residentialPropertyAllowableCostsTxtBox.sendKeys(str15);
residentialPropertyGainsInTheYearTxtBox.clear();
residentialPropertyGainsInTheYearTxtBox.sendKeys(str16);
commentTxtBox.clear();
commentTxtBox.sendKeys(str17);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,hadAHomeOverseasChkBox);
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str18);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str19);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str20);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str21);
listbox1=new Select(countryOfResidenceInPreviousYear1LstBox);
listbox1.selectByValue(str22);
amountOfDTAincomeForWhichPartialReliefIsClaimedTxtBox.clear();
amountOfDTAincomeForWhichPartialReliefIsClaimedTxtBox.sendKeys(str23);
domiciledOutsideTheUKForTaxChkBox.click();
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str24);
remittancebasisclaimChkBox.click();
uKResidentFor7OutOf9YearsUKResidentChkBox.click();
nominatedIncomeAmountTxtBox.clear();
nominatedIncomeAmountTxtBox.sendKeys(str25);
nominatedCapitalGainsAmountTxtBox.clear();
nominatedCapitalGainsAmountTxtBox.sendKeys(str26);
adjustmentToPaymentsOnAccountTxtBox.clear();
adjustmentToPaymentsOnAccountTxtBox.sendKeys(str27);
remittedIncomeOrGainsChkBox.click();
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();

n1=Double.parseDouble(str1); //8206.00
n2=Double.parseDouble(str2); //32650.00
n3=Double.parseDouble(str3); //6530.00
n4 = Double.parseDouble(str4);//35299.00
n5 = Double.parseDouble(str5);//131762.00
n6 = Double.parseDouble(str6);//35299.00
n7 = Double.parseDouble(str7);//2278.00
n8 = Double.parseDouble(str8);//-2278.00
n9 = Double.parseDouble(str9);//2278
n10 = Double.parseDouble(str10);//49140.00
n11 = Double.parseDouble(str11);//49140.00
n12 = Double.parseDouble(str12);//13759.00
n13 = Double.parseDouble(str13);//200000.00
n14 = Double.parseDouble(str14);//150860.00
n15 = Double.parseDouble(str16);//49140.00
n16 = Double.parseDouble(str18);//316
n17 = Double.parseDouble(str19);//3
n18 = Double.parseDouble(str20);//294
n19 = Double.parseDouble(str23);//131762
n20 = Double.parseDouble(str25);//131762
n21 = Double.parseDouble(str26);//49140
n22 = Double.parseDouble(str27);//2115
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
foreignIncomeCalc = n5;
UKPensionAndStateBenefitAmt = n1+n2;//6891
totalincome = foreignIncomeCalc + UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt = n9;
totlIncome =  totalincome - incomeTaxReliefAmt;
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);


basicRatePayPension=taxLimit1Uk;
dueTax1 = basicRatePayPension*BR_rate;//6900
Reporter.log("Basic Rate of Pay Pension: " + dueTax1,true);	
heigherRatePayPension = taxLimit2;
dueTax2=heigherRatePayPension*HR_rate;
Reporter.log("Heigher Rate of Pay Pension: " + dueTax2,true);
additionalRatePayPension= totlIncome - (basicRatePayPension + heigherRatePayPension);
dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;
Reporter.log("Additional Rate of Pay Pension: " + dueTax3,true);	
totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = n6;
Assert.assertEquals(amtForeignTaxCreditRelief.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));
Reporter.log("Amount of Foreign Tax Credit Relief is verifired successfully: "+amtForeignTaxCreditRelief.getText(),true);
remittanceBasisCharge_nonDomiciles = res_non_dom_Lower_ch;
Assert.assertEquals(amtRemittanceBasisChargeNonBomiciles.getText().substring(1).replace(",", ""),String.format("%.2f",remittanceBasisCharge_nonDomiciles));
Reporter.log("Amount of Remittance Basis Charge for Non Bomiciles is Verified: "+amtRemittanceBasisChargeNonBomiciles.getText(),true);
incomeTaxdueafterallowancesandreliefs = (totIncomeTaxDue - amtReliefForFinanceCosts) + remittanceBasisCharge_nonDomiciles;

totalTaxDeductedAmt = n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs - totalTaxDeductedAmt;
residentialProperty_CarriedInterestAmt = n15 * upper_CGT_rate_RP_CI;//£13759.20
Reporter.log("Residential property and carried interest: "+residentialProperty_CarriedInterestAmt,true);
otherGainsBasicAmt = n12;//£13759

capitalGainsTaxdueAmt = residentialProperty_CarriedInterestAmt - otherGainsBasicAmt;//.20

Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

taxBalance = incomeTaxDueAmt + capitalGainsTaxdueAmt;

Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}	
public void funcDelMTRTest211(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case211",true);
funcDelMTRTest210(driver);
}
public void addTestCase212(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 212",true);
clickIncome(driver);
wLib.explicitWait(driver,2,dividentLink);
dividentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str1);//8206.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str2);//326501.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str3);//6530.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
overseasPensionsSocialScurityBenefitsAndRoyalties.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("230");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str5);
wLib.explicitWait(driver, 2,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str6);
wLib.explicitWait(driver, 2,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver, 2,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 2,foreignIncomeEditSummaryBtn);
foreignIncomeEditSummaryBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("75");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str8);
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str4);
propertyIncomeAllowanceChkBox.click();
propertyExpensesTxtBox.clear();
propertyExpensesTxtBox.sendKeys(str7);
lossSetOffAgainstTotalIncomeTxtBox.clear();
lossSetOffAgainstTotalIncomeTxtBox.sendKeys(str9);
amountOfChargeableGainUnderUKRulesTxtBox.clear();
amountOfChargeableGainUnderUKRulesTxtBox.sendKeys(str10);
foreignTaxPaidTxtBox.clear();
foreignTaxPaidTxtBox.sendKeys(str11);
toClaimForeignTaxCreditReliefChkBox.click();
totalForeignTaxCreditReliefOnGainsTxtBox.clear();
totalForeignTaxCreditReliefOnGainsTxtBox.sendKeys(str12);
SaveBtn1.click();
	try
	{
	if (SaveBtn1.isDisplayed()==true)
	{
	SaveBtn1.click();
	}
	}
	catch (Exception e) {
	Reporter.log("Save button clicked in first attempt",true);
	}
clickIncome(driver);
wLib.explicitWait(driver,5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver,5,editBtn);
editBtn.click();
wLib.explicitWait(driver,2,residentialPropertyNumberOfDisposalsTxtBox);
residentialPropertyNumberOfDisposalsTxtBox.clear();
residentialPropertyNumberOfDisposalsTxtBox.sendKeys(str13);
residentialPropertyDisposalProceedsTxtBox.clear();
residentialPropertyDisposalProceedsTxtBox.sendKeys(str14);
residentialPropertyAllowableCostsTxtBox.clear();
residentialPropertyAllowableCostsTxtBox.sendKeys(str15);
residentialPropertyGainsInTheYearTxtBox.clear();
residentialPropertyGainsInTheYearTxtBox.sendKeys(str16);
commentTxtBox.clear();
commentTxtBox.sendKeys(str17);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,hadAHomeOverseasChkBox);
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str18);
howManyTiesToUKTxtBox.clear();
howManyTiesToUKTxtBox.sendKeys(str19);
numberOfWorkdaysInUKForEmploymentTxtBox.clear();
numberOfWorkdaysInUKForEmploymentTxtBox.sendKeys(str20);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str21);
listbox1=new Select(countryOfResidenceInPreviousYear1LstBox);
listbox1.selectByValue(str22);
amountOfDTAincomeForWhichPartialReliefIsClaimedTxtBox.clear();
amountOfDTAincomeForWhichPartialReliefIsClaimedTxtBox.sendKeys(str23);
domiciledOutsideTheUKForTaxChkBox.click();
conditionBChkBox.click();
yearsUKresidentTxtBox.clear();
yearsUKresidentTxtBox.sendKeys(str24);
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str25);
deemedUKdomicileAndPreviouslyClaimedRemitanceBasisChkBox.click();
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();

n1=Double.parseDouble(str1); //8206.00
n2=Double.parseDouble(str2); //32650.00
n3=Double.parseDouble(str3); //6530.00
n4 = Double.parseDouble(str4);//35299.00
n5 = Double.parseDouble(str5);//131762.00
n6 = Double.parseDouble(str6);//35299.00
n7 = Double.parseDouble(str7);//2278.00
n8 = Double.parseDouble(str8);//-2278.00
n9 = Double.parseDouble(str9);//2278
n10 = Double.parseDouble(str10);//49140.00
n11 = Double.parseDouble(str11);//49140.00
n12 = Double.parseDouble(str12);//13759.00
n13 = Double.parseDouble(str13);//200000.00
n14 = Double.parseDouble(str14);//150860.00
n15 = Double.parseDouble(str16);//49140.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
foreignIncomeCalc = n5;
UKPensionAndStateBenefitAmt = n1+n2;//6891
totalincome = foreignIncomeCalc + UKPensionAndStateBenefitAmt;
incomeTaxReliefAmt = n9;
totlIncome =  totalincome - incomeTaxReliefAmt;
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxReliefAmt));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);


basicRatePayPension=taxLimit1Uk;
dueTax1 = basicRatePayPension*BR_rate;//6900
Reporter.log("Basic Rate of Pay Pension: " + dueTax1,true);	
heigherRatePayPension = taxLimit2;
dueTax2=heigherRatePayPension*HR_rate;
Reporter.log("Heigher Rate of Pay Pension: " + dueTax2,true);
additionalRatePayPension= totlIncome - (basicRatePayPension + heigherRatePayPension);
dueTax3=(additionalRatePayPension*advancedRatePercentage)/100;
Reporter.log("Additional Rate of Pay Pension: " + dueTax3,true);	
totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts = n6;
Assert.assertEquals(amtForeignTaxCreditRelief.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));
Reporter.log("Amount of Foreign Tax Credit Relief is verifired successfully: "+amtForeignTaxCreditRelief.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtReliefForFinanceCosts;
Reporter.log("Income Tax due after allowances and reliefs:"+incomeTaxdueafterallowancesandreliefs,true);
totalTaxDeductedAmt = n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs - totalTaxDeductedAmt;
residentialProperty_CarriedInterestAmt = (n15 - annualExemptIndividualsProposed) * upper_CGT_rate_RP_CI;//37440	@28%=	10483.20
Reporter.log("Residential property and carried interest: "+residentialProperty_CarriedInterestAmt,true);
otherGainsBasicAmt = n12;//£13759
if (residentialProperty_CarriedInterestAmt <= otherGainsBasicAmt)
{
capitalGainsTaxdueAmt = 0;
}
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);

taxBalance = incomeTaxDueAmt + capitalGainsTaxdueAmt;

Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}	
public void funcDelMTRTest212(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case212",true);
funcDelMTRTest210(driver);
}
public void addTestCase213(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 213",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str4);
subscriptionsSharesTxtBox.clear();
subscriptionsSharesTxtBox.sendKeys(str5);
subscriptionsSharesUnderTxtBox.clear();
subscriptionsSharesUnderTxtBox.sendKeys(str6);
saveAdditionalInfoBtn.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,domiciledOutsideTheUKForTaxChkBox);
domiciledOutsideTheUKForTaxChkBox.click();
bornInUKButNonUKDomicileChkBox.click();
remittancebasisclaimChkBox.click();
uKResidentFor12OutOf14YearsChkBox.click();
lessThan18YearsChkBox.click();
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();
n1 = Double.parseDouble(str3); //18
n2 = Double.parseDouble(str4); //85023.00
n3 = Double.parseDouble(str5); //63376.00
n4 = Double.parseDouble(str6);//16632.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = n1 + n2;
totalincome = interestFromUKBanksBuildingAmt;

totlIncome =  totalincome ;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRateSaving = taxLimit1Uk - (SR_band + nilRate2);//29000
dueTax1 = basicRateSaving*BR_rate;//5800
Reporter.log("Basic Rate of Saving: "+ dueTax1,true);

heigherRateSaving = interestFromUKBanksBuildingAmt - (basicRateSaving + SR_band + nilRate2) ;//50541
dueTax2 = heigherRateSaving*HR_rate;
Reporter.log("Heigher Rate of Saving: "+ dueTax2,true);//20216.40
	
totIncomeTaxDue = dueTax1 + dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);

enterpriseInvestmentSchemereliefAmt = n3 * EIS_rate;
Assert.assertEquals(dataEnterpriseInvestmentSchemerelief.getText().substring(1).replace(",", ""),String.format("%.2f",enterpriseInvestmentSchemereliefAmt));
Reporter.log("Amount of Enterprise Investment Scheme Reliefis verifired successfully: "+dataEnterpriseInvestmentSchemerelief.getText(),true);

seedEnterpriseInvestmentSchemereliefAmt = n4 * SEIS_rate;
Assert.assertEquals(dataSeedEnterpriseInvestmentSchemerelief.getText().substring(1).replace(",", ""),String.format("%.2f",seedEnterpriseInvestmentSchemereliefAmt));
Reporter.log("Amount of Seed Enterprise Investment Scheme relief verifired successfully: "+dataSeedEnterpriseInvestmentSchemerelief.getText(),true);
incomeTaxdueafterallowancesandreliefs = enterpriseInvestmentSchemereliefAmt + seedEnterpriseInvestmentSchemereliefAmt;
if (incomeTaxdueafterallowancesandreliefs >= totIncomeTaxDue)
{
taxBalance = 0;
}
else
{
	taxBalance = totIncomeTaxDue - incomeTaxdueafterallowancesandreliefs;	
}
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}	
public void funcDelMTRTest213(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case213",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
funcDelAdditionalInfo(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
delInterestfromUKbanks(driver);
}
public void addTestCase214(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23)throws Exception
{
Reporter.log("Exceuting MTR Test Case 214",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
funcAddForeignInterest(driver,str4);
funcAddEmployerForMTR(driver, str5, str6);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);	
payFrmEmployer.sendKeys(str7);
EarningPTtoUAPTxtBox.sendKeys(str8);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
//delSAFull(driver);
wLib.explicitWait(driver, 10,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str9);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str10);
businessStarteddateTxtBox.clear();
businessStarteddateTxtBox.sendKeys(dateStart);
businessCeasedDateTxtBox.clear();
businessCeasedDateTxtBox.sendKeys(str11);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(dateStart);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(str11);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
wLib.explicitWait(driver, 2,trunoverTxtBox);
//Business Income
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str12);//74900.00
//Business Expenses
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str13);//25000.00
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str14);//2000.00
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str15);//12000.00
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str16);//10800.00
advertisingandEntertainmentCostTxtBox.clear();
advertisingandEntertainmentCostTxtBox.sendKeys(str17);//1400.00
interestbankTxtBox.clear();
interestbankTxtBox.sendKeys(str18);//5800.00
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str19);//1500.00
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str20);//1500.00
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(dateStart);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(dateEnd);
accountingperiodandProfitlossTxtBox.clear();
accountingperiodandProfitlossTxtBox.sendKeys(str21);//-1010.00
anyBusinessIncomeTxtBox.clear();
anyBusinessIncomeTxtBox.sendKeys(str22);//300.00
//Balance Sheet
//Capital Account
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str23);//2600.00
SaveBtn1.click();

n1 = Double.parseDouble(str3);//176.80
n2 = Double.parseDouble(str4);//200.00
n3 = Double.parseDouble(str7);//9050.00
n4 = Double.parseDouble(str8);//626.00
n5 = Double.parseDouble(str12);//74900
n6 = Double.parseDouble(str13);//25000
n7 = Double.parseDouble(str14);//2000
n8 = Double.parseDouble(str15);//12000
n9 = Double.parseDouble(str16);//10800
n10 = Double.parseDouble(str17);//1400
n11 = Double.parseDouble(str18);//5800
n12 = Double.parseDouble(str19);//1500
n13 = Double.parseDouble(str20);//1500
n14 = Double.parseDouble(str21);//-1010
n15 = Double.parseDouble(str22);//300
n16 = Double.parseDouble(str23);//2600
SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
Date start = dateFormat.parse(dateStart);
Date end = dateFormat.parse(str11);
int weeks1 = calculateWeek(start, end);
Reporter.log("Weeks: " + weeks1,true);
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n3;
foreignIncomeCalc=n2;//200
interestFromUKBanksBuildingAmt = Math.floor(n1);
totalExpensesSelfEmpFull=n6+n7+n8+n9+n10+n11+n12+n13;//60000
netProfitSelfEmpFull = n5 - totalExpensesSelfEmpFull;//14900
selfEmploymentIncome=netProfitSelfEmpFull + n14 + n15;//14190
totalincome = payFromAllEmploymentsAmt + selfEmploymentIncome + foreignIncomeCalc + interestFromUKBanksBuildingAmt;
totlIncome = totalincome - personalAllowanceRate;
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",payFromAllEmploymentsAmt));
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
	
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totlIncome - (foreignIncomeCalc + interestFromUKBanksBuildingAmt);
dueTax1=basicRatePayPension*BR_rate;//2278
Reporter.log("Basic Rate of Pay Pension: "+dueTax1,true);
totIncomeTaxDue=dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
class4Amt1 =(selfEmploymentIncome - class4LPLAmt) * class4LPLRate;
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Amaount of Class 4 National Insurance contributions is verified :" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeks1;//£115.05
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue+class4_2Amt)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Due is verified: " + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
}
public void funcDelTest214(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 214",true);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
clickEmployment(driver);
delEmpInfo(driver);
delSelfEmpFull(driver);
}
public void addTestCase215(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 215",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
dividentUKCompanies(driver,"Company1","", str4);
addOtherDivident(driver,"0.00", str5, str6);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str7);//3770.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str8);//3121.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str9);//624.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 2,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
uQSTotalDisposalTxtBox.clear();
uQSTotalDisposalTxtBox.sendKeys(str10);
uQSDisposalProceedTxtBox.clear();
uQSDisposalProceedTxtBox.sendKeys(str11);
uQSCostsAndIndexationTxtBox.clear();
uQSCostsAndIndexationTxtBox.sendKeys(str12);
uQSGainsInTheYearTxtBox.clear();
uQSGainsInTheYearTxtBox.sendKeys(str13);
adjustmentToCGTTxtBox.clear();
adjustmentToCGTTxtBox.sendKeys(str14);
nRDRTrustLiabilityTxtBox.clear();
nRDRTrustLiabilityTxtBox.sendKeys(str15);
commentTxtBox.clear();
commentTxtBox.sendKeys(str16);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,notResidentInUKChkBox);
notResidentInUKChkBox.click();
meetTheThirdAutomaticOverseasTestChkBox.click();
hadAGapBetweenEmploymentsInThisTaxYearChkBox.click();
hadAHomeOverseasChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str17);
personalAllowancesClaimDueToDTAChkBox.click();
listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue("NLD");
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue("NLD");
commentTxtBox.clear();
commentTxtBox.sendKeys("Details");
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("20");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str19);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str20);
colDTxtBox.clear();
colDTxtBox.sendKeys(str21);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();
wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("31");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str22);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str23);
colEChkBox.click();
SaveBtn2.click();
wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
overseasPensionsSocialScurityBenefitsAndRoyalties.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("20");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str24);
wLib.explicitWait(driver, 2,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str25);
wLib.explicitWait(driver, 2,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver, 2,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 2,dividendIncomeReceivedByAPersonAbroadBtn);
dividendIncomeReceivedByAPersonAbroadBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("99");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str26);
colCTxtBox.clear();
colCTxtBox.sendKeys(str27);
colEChkBox.click();
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str18);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//4598.00
n2 = Double.parseDouble(str4);//2450.00
n3 = Double.parseDouble(str5);//165.00
n4 = Double.parseDouble(str6);//14.90
n5 = Double.parseDouble(str7);//3770.00
n6 = Double.parseDouble(str8);//3121.00
n7 = Double.parseDouble(str9);//624.20
n8 = Double.parseDouble(str11);//20000.00
n9 = Double.parseDouble(str12);//1000.00
n10 = Double.parseDouble(str13);//19000.00
n11 = Double.parseDouble(str14);//900.00
n12 = Double.parseDouble(str15);//2000.00
n13 = Double.parseDouble(str18);//97.12
n14 = Double.parseDouble(str19);//500.00
n15 = Double.parseDouble(str20);//100.00
n16 = Double.parseDouble(str21);//75.00
n17 = Double.parseDouble(str22);//659.00
n18 = Double.parseDouble(str23);//98.85
n19 = Double.parseDouble(str24);//1360.00
n20 = Double.parseDouble(str25);//340.00
n21 = Double.parseDouble(str26);//3620.00
n22 = Double.parseDouble(str27);//724.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = n1;
foreignIncomeCalc = n14 + n19;
dividendsFromForeignCompaniesCalc = n3 + n17 + n21;
dividendsFromUKCompaniesAmt = n2;
UKPensionAndStateBenefitAmt = n5 + n6;
totalincome = foreignIncomeCalc + dividendsFromForeignCompaniesCalc + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;

totlIncome =  totalincome - personalAllowanceRate ;
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);


basicRateDividends=(totlIncome - (interestFromUKBanksBuildingAmt+n14))-dividentNillRate;//£1295
dueTax1=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//£97.12
Reporter.log("Basic Rate of Dividends: "+dueTax1,true);
totIncomeTaxDue = dueTax1;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - n13;
Reporter.log("Income Tax Due after allowances and reliefs:"+incomeTaxdueafterallowancesandreliefs,true);
taxTreatedAsPaidOnDividendsFromUKCompanies = (dividendsFromUKCompaniesAmt * dividendTaxBasicRate)/100;
Assert.assertEquals(amtTaxCreditsDividendsFromUKCompanies.getText().substring(1).replace(",", ""),String.format("%.2f",taxTreatedAsPaidOnDividendsFromUKCompanies));
Reporter.log("Amount of  7.5% tax credits on dividends from UK companies (not repayable) is Verified: "+amtTaxCreditsDividendsFromUKCompanies.getText(),true);
totalTaxDeductedAmt = n7 + n16;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
	
incomeTaxDueAmt = totalTaxDeductedAmt - incomeTaxdueafterallowancesandreliefs;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax overpaid is verifired successfully: "+amtIncomeTaxoverpaid.getText(),true);

otherGainsBasicAmt = (n10 - annualExemptIndividualsProposed) * capitalGainsRateLower;//730
Reporter.log("Other gains: "+ otherGainsBasicAmt,true);
capitalGainsTaxdueAmt = otherGainsBasicAmt + n11 + n12;
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",capitalGainsTaxdueAmt));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
taxBalance = capitalGainsTaxdueAmt - incomeTaxDueAmt;
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}	
public void funcDelMTRTest215(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case215",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
funcDelAdditionalInfo(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
delCGI(driver);
delBank(driver);
deleteDivident(driver);
delOtherDivident(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
delOverseasPensionsRoyaltiesBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();

wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
delDividendsForeignComaniesBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();

wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,delDividendIncomeReceivedPersonAbroad);
delDividendIncomeReceivedPersonAbroad.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
}
public void addTestCase216(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
{
Reporter.log("Exceuting MTR Test Case 216",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","", str4);
addOtherDivident(driver,"0.00",str5,str6);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str7);
stateBenefitsSaveBtn.click();
addMAT(driver, str8, str9, str10, str11, str12);

n1 = Double.parseDouble(str3);//4598.00
n2 = Double.parseDouble(str4);//2450.00
n3 = Double.parseDouble(str5);//165.00
n4 = Double.parseDouble(str6);//14.00
n5 = Double.parseDouble(str7);//8052.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
dividendsFromForeignCompaniesCalc=n3;
dividendsFromUKCompaniesAmt=n2;
interestFromUKBanksBuildingAmt = n1;
UKPensionAndStateBenefitAmt=n5;
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + dividendsFromForeignCompaniesCalc + UKPensionAndStateBenefitAmt +otherIncomeAmt;
totlIncome= (totalincome - personalAllowanceRate) + marriageAllowance;

Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
dividendInc = dividendsFromForeignCompaniesCalc+dividendsFromUKCompaniesAmt;
savingInc = totlIncome - (dividendInc + nonSavingInc);
if (dividendInc <= dividentNillRate)
{
basicRateDividends=0.00;
}
if (savingInc <= SR_band)
{
basicRateSaving = 0.00;
}
taxDueInc=basicRateDividends + basicRateSaving;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
}
public void delTestCase216(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 216",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
delOtherDivident(driver);
delMarriageAllowance(driver);
}

public void addTestCase219(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13)throws Exception
{

Reporter.log("Exceuting MTR Test Case 219",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//33529.00
dividentUKCompanies(driver,"Company1","",str4);//57011.00
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);//6200.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver, 5,delButton);
delButton.click();
wLib.explicitWait(driver, 5,confDel);
confDel.click();
}
catch (Exception e)
{
    Reporter.log(e.getMessage(),true);
}*/
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str6);
tradingEnddateTxtBox.clear();
tradingEnddateTxtBox.sendKeys(str7);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str8);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str9);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str10);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str11);
ownGoodsAndServicesTxtBox.clear();
ownGoodsAndServicesTxtBox.sendKeys(str12);
anyOtherBusinessIncomeTxtBox.clear();
anyOtherBusinessIncomeTxtBox.sendKeys(str13);
SaveBtn1.click();
driver.navigate().refresh();
n1 = Double.parseDouble(str3);//33529.00
n2 = Double.parseDouble(str4);//57011.00
n3 = Double.parseDouble(str5);//6200
n4 = Double.parseDouble(str8);//14560
n5 = Double.parseDouble(str9);//13603
n6 = Double.parseDouble(str10);//1700
n7 = Double.parseDouble(str11);//3926
n8 = Double.parseDouble(str12);//720
n9 = Double.parseDouble(str13);//250
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome=((n4-n5)+(n7+n8)-n6)+n9;//4153
interestFromUKBanksBuildingAmt =n1;
UKPensionAndStateBenefitAmt=n3;
dividendsFromUKCompaniesAmt=n2;
totalincome = selfEmploymentIncome + interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt +dividendsFromUKCompaniesAmt ;
if (totalincome > personalAllowanceRateMaxLimit)
{
total1 = totalincome - personalAllowanceRateMaxLimit;
allowance1=Math.floor(total1/2);
tax1=personalAllowanceRate-allowance1;
totlIncome= totalincome - tax1;
}
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateSaving=interestFromUKBanksBuildingAmt-(SR_band+nilRate2);//28029
Reporter.log("basic Rate of Saving: "+basicRateSaving,true);
dueTax1=basicRateSaving*(BR_rate);//5605.8
Reporter.log("basic Rate of Saving Calculated Amount: "+dueTax1,true);
heigherRateDividends=(dividendsFromUKCompaniesAmt -(tax1 - (UKPensionAndStateBenefitAmt+selfEmploymentIncome))) - dividentNillRate;//53,960.00	
dueTax2=(heigherRateDividends*dividendTaxHigherRate)/100;//17,537.00
Reporter.log("Heigher Rate of Dividends: "+dueTax3,true);
totIncomeTaxDue=dueTax1+dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),incomeTaxDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}

public void funcDelMTRTest219(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 219",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	delBank(driver);
	deleteDivident(driver);
	clickIncome(driver);
	delSEshort(driver);
}
public void addTestCase220(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 220",true);
clickIncome(driver);
wLib.explicitWait(driver, 10,dividentLink);
dividentLink.click();
dividentUKCompanies(driver,"Company1","",str1);//32000
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str2);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str3);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str4);
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str5);
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.clear();
allowanceForSmallBalanceOfUnrelievedExpenditureTxtBox.sendKeys(str6);
SaveBtn1.click();
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,notResidentInUKChkBox);
notResidentInUKChkBox.click();
residentInUKForPreviousYearChkBox.click();
numberOfDaysSpentInUKTxtBox.clear();
numberOfDaysSpentInUKTxtBox.sendKeys(str7);
listbox1=new Select(countryOfNationalityOrResidence1LstBox);
listbox1.selectByValue(str8);
listbox1=new Select(countryOfResidenceForTaxInYear1LstBox);
listbox1.selectByValue(str9);
listbox1=new Select(countryOfResidenceInPreviousYear1LstBox);
listbox1.selectByValue(str10);
domiciledOutsideTheUKForTaxChkBox.click();
firstYearOrAlwaysDomiciledOutsideUKChkBox.click();
dateOfComingToLiveInUKTxtBox.clear();
dateOfComingToLiveInUKTxtBox.sendKeys(str11);
commentTxtBox.clear();
commentTxtBox.sendKeys("Test1");
SaveBtn1.click();
n1 = Double.parseDouble(str1);//32000
n2 = Double.parseDouble(str3); //32495.00
n3 = Double.parseDouble(str4); //8620.00
n4 = Double.parseDouble(str5); //1200.00
n5 = Double.parseDouble(str6); //800.00
n6 = Double.parseDouble(str7);//84

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
totalDisallowableExpensesSelfEmpShort = n4+n5;
selfEmploymentIncome = n2 - (n3 + totalDisallowableExpensesSelfEmpShort);
dividendsFromUKCompaniesAmt = n1;
totalincome = selfEmploymentIncome + dividendsFromUKCompaniesAmt;

totlIncome =  totalincome - dividendsFromUKCompaniesAmt ;
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);


basicRatePayPension=totlIncome;
dueTax1 = basicRatePayPension * basicRateScott;
Reporter.log("Basic Rate of Pay Pension: "+ dueTax1,true);
dueTax2 = (dividendsFromUKCompaniesAmt * dividendTaxBasicRate)/100;
Reporter.log("Basic Rate of Dividend: "+ dueTax2,true);
totIncomeTaxDue = dueTax1 + dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
taxTreatedAsPaidOnDividendsFromUKCompanies = (dividendsFromUKCompaniesAmt * dividendTaxBasicRate)/100;
Assert.assertEquals(amtTaxCreditsDividendsFromUKCompanies.getText().substring(1).replace(",", ""),String.format("%.2f",taxTreatedAsPaidOnDividendsFromUKCompanies));
Reporter.log("Amount of  7.5% tax credits on dividends from UK companies (not repayable) is Verified: "+amtTaxCreditsDividendsFromUKCompanies.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue - taxTreatedAsPaidOnDividendsFromUKCompanies;
class4Amt1 = (selfEmploymentIncome-class4LPLAmt)*class4LPLRate;//1210.59
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);

taxBalance = incomeTaxDueAmt + class4_2Amt;
Assert.assertEquals(taxForThisYear.getText().replace("(","").replace(")","").substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}	
public void funcDelMTRTest220(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case220",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
wLib.explicitWait(driver, 5,residenceRemittanceBasisLink);
residenceRemittanceBasisLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();	
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
delSEshort(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
deleteDivident(driver);
}
public void addTestCase221(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13, String str14,String str15,String str16)throws Exception
{

Reporter.log("Exceuting MTR Test Case 221",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//10120
dividentUKCompanies(driver,"Company1","",str4);//828319.1
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
/*try
{
wLib.explicitWait(driver, 5,delButton);
delButton.click();
wLib.explicitWait(driver, 5,confDel);
confDel.click();
}
catch (Exception e)
{
    Reporter.log(e.getMessage(),true);
}*/
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str5);
tradingEnddateTxtBox.clear();
tradingEnddateTxtBox.sendKeys(str6);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str7);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str8);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str9);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str10);
ownGoodsAndServicesTxtBox.clear();
ownGoodsAndServicesTxtBox.sendKeys(str11);
anyOtherBusinessIncomeTxtBox.clear();
anyOtherBusinessIncomeTxtBox.sendKeys(str12);
SaveBtn1.click();
driver.navigate().refresh();
addPartnershipInfo(driver,str13, str14);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipShortFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str14);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str15);
wLib.explicitWait(driver, 5,lossFromThisTaxYearSetOffAgainstOtherIncome);
lossFromThisTaxYearSetOffAgainstOtherIncome.clear();
lossFromThisTaxYearSetOffAgainstOtherIncome.sendKeys(str16);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//10120.00
n2 = Double.parseDouble(str4);//828319.1
n3 = Double.parseDouble(str7);//14560
n4 = Double.parseDouble(str8);//13603
n5 = Double.parseDouble(str9);//1700
n6 = Double.parseDouble(str10);//3926
n7 = Double.parseDouble(str11);//720
n8 = Double.parseDouble(str12);//250
n9 = Double.parseDouble(str15); //-62547.0
n10 = Double.parseDouble(str16); //62547.0
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
selfEmploymentIncome=((n3-n4)+(n6+n7)-n5)+n8;//4153
interestFromUKBanksBuildingAmt =n1;
dividendsFromUKCompaniesAmt=Math.floor(n2);

totalincome = selfEmploymentIncome + interestFromUKBanksBuildingAmt +dividendsFromUKCompaniesAmt ;
incomeTaxReliefAmt=n10;
totlIncome= totalincome - incomeTaxReliefAmt;


	
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateDividends=(taxLimit1Uk - SR_band)-dividentNillRate;//27,500.00
dueTax1=(basicRateDividends*dividendTaxBasicRate)/100;
Reporter.log("Basic Rate of Dividends: "+dueTax2,true);
	
heigherRateDividends=taxLimit2;//115,500.00	
dueTax2=(heigherRateDividends*dividendTaxHigherRate)/100;
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
additionalRateDividends=totlIncome -(taxLimit1Uk+taxLimit2);
dueTax3= (additionalRateDividends*dividendTaxAdditionalRate)/100;//296,281.60
Reporter.log("Additional Rate of Dividends: "+additionalRateDividends,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),incomeTaxDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest221(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 221",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
delPartnershipShort(driver);
delPartnershipInfo(driver);
delSEshort(driver);
}
public void addTestCase218(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20)throws Exception
{
wLib=new WaitStatementLib();
cis=new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 218",true);
clickIncome(driver);
addBank(driver,str1,str1,str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str6);//14206.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str7);//5300.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str8);//1060.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,incmFrmProLink);
incmFrmProLink.click();
wLib.explicitWait(driver, 2,editBtn);
editBtn.click();
wLib.explicitWait(driver, 2,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.sendKeys(str9);
propertyJointlyCheckBox.click();
rentIncomeTextBox.sendKeys(str10);
UKExpensesTxtBox.sendKeys(str11);
loanInterestTxtBox.sendKeys(str12);
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str13);
allowablePropertyExpensesTxtBox.sendKeys(str14);
capitalAllowancesTxtBox.sendKeys(str15);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str16);
taxTakenOffTxtBox.clear();
taxTakenOffTxtBox.sendKeys(str17);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 2,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
propertyEtcAttributedGainTxtBox.clear();
propertyEtcAttributedGainTxtBox.sendKeys(str18);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str19);
commentTxtBox.clear();
commentTxtBox.sendKeys(str20);
SaveBtn1.click();
n1=Double.parseDouble(str3);//365
n2=Double.parseDouble(str4);//7283
n3=Double.parseDouble(str5);//1510
n4=Double.parseDouble(str6);//14206.00
n5=Double.parseDouble(str7);//5300.00
n6=Double.parseDouble(str8);//1060.00
n7=Double.parseDouble(str10);//10800.00
n8=Double.parseDouble(str11);//950.00
n9=Double.parseDouble(str12);//3000.00
n10=Double.parseDouble(str13);//250.00
n11=Double.parseDouble(str14);//325.00
n12=Double.parseDouble(str15);//1252.00
n13=Double.parseDouble(str16);//5023.00
n14=Double.parseDouble(str17);//75.00
n15=Double.parseDouble(str18);//17654.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
FHLAdjustedProfitForTheYear=n7-(n8+n9+n10+n11+n12);//5023.00
AdjustedProfitForTheYear=n13;//5023.00
profitFromUKLandAndProperty=FHLAdjustedProfitForTheYear+AdjustedProfitForTheYear;//10,046.00	 
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+ n2;//7,739.00
dividendsFromUKCompaniesAmt=n3;
UKPensionAndStateBenefitAmt=n4+n5;//19,506.00
totalincome = (profitFromUKLandAndProperty +interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt);//38,801.00	 
totlIncome=totalincome -personalAllowanceRate;//26,951.00	 
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",profitFromUKLandAndProperty));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
startedRatePayPension=SR_bandScott;//2,000.00
dueTax1=startedRatePayPension*startedRateScott;//380.00
Reporter.log("Started Rate of Pay Pension: "+dueTax1,true);
basicRatePayPension=amtBasicRateScott;//10,150.00
dueTax2=basicRatePayPension*basicRateScott;//2,030.00
Reporter.log("Basic rate of Pay Pension: "+dueTax2,true);
intermediateRatePayPension=(profitFromUKLandAndProperty+UKPensionAndStateBenefitAmt)-(personalAllowanceRate+startedRatePayPension+basicRatePayPension);
Reporter.log("Intermediate Rate of Pay Pension: "+intermediateRatePayPension,true);
dueTax3=intermediateRatePayPension * intermediateRateScott;
basicRateSaving=interestFromUKBanksBuildingAmt - nilRate1;
dueTax4=basicRateSaving*basicRateScott;
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=(n1*taxedUKInterestRate) + n6 +n14;//1,226.25
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1 = totIncomeTaxDue - totalTaxDeductedAmt;//3,697.47
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
otherGainsBasicAmt=n15-annualExemptIndividualsProposed;
Reporter.log("Other gains basic Amount: "+otherGainsBasicAmt,true);
otherGainsAmt = otherGainsBasicAmt*capitalGainsRateLower;
capitalGainsTaxdueAmt=otherGainsAmt;//595.40
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=totalTaxDeductedAmt1+capitalGainsTaxdueAmt;//4,292.87
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));//
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}
public void funcDelMTRTest218(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 218",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
clickIncome(driver);
delCGI(driver);
clickIncome(driver);
delProfit(driver);
}
public void addTestCase222(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7)throws Exception
{
Reporter.log("Exceuting MTR Test Case 222",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","", str4);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();

cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);//8239.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str6);//4800.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str7);//960.00
stateBenefitsSaveBtn.click();
n1=Double.parseDouble(str3);//14324.00
n2=Double.parseDouble(str4);//5999.00
n3=Double.parseDouble(str5);//8239.00
n4=Double.parseDouble(str6);//4800.00
n5=Double.parseDouble(str7);//960.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=n1;
dividendsFromUKCompaniesAmt=n2;
UKPensionAndStateBenefitAmt=n3 + n4;
totalincome =interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt+UKPensionAndStateBenefitAmt;
totlIncome=totalincome - personalAllowanceRate;

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income received: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = totlIncome - (interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt);//1,189.00	
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate; //237.80
startedRateSaving=SR_band-basicRatePayPension;//3,811.00	
Reporter.log("started Rate of Saving: "+startedRateSaving,true);
basicRateSaving=interestFromUKBanksBuildingAmt -(startedRateSaving +nilRate1);//9513
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*BR_rate;//1,902.60
basicRateDividends=dividendsFromUKCompaniesAmt-dividentNillRate;//£3,999
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax3=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//£299.93
totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3;//2,440.33
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due verified: "+ incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n5;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totIncomeTaxDue-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxBalance)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),totalIncomeTaxDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest222(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 222",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
driver.navigate().refresh();
}
public void addTestCase223(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6)throws Exception
{
Reporter.log("Exceuting MTR Test Case 223",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//21005.00
dividentUKCompanies(driver,"Company1","",str4);//16,000.00
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str5);//37541.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str6);//7508.20
stateBenefitsSaveBtn.click();
n1 = Double.parseDouble(str3);//21005.00
n2 = Double.parseDouble(str4);//16,000.00
n3 = Double.parseDouble(str5);//37541.00
n4 = Double.parseDouble(str6);//7508.20
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=n1;
dividendsFromUKCompaniesAmt=n2;
UKPensionAndStateBenefitAmt=n3;
totalincome =interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt+UKPensionAndStateBenefitAmt;
totlIncome=totalincome - personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income received: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
basicRatePayPension=taxLimit1Uk;//£34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6,900.00
heigherRateSaving=totlIncome - (basicRatePayPension + nilRate2 + dividendsFromUKCompaniesAmt) ;//11696
Reporter.log("heigherRateSaving: "+heigherRateSaving,true);
dueTax2=heigherRateSaving*HR_rate;//£4678.4
heigherRateDividends=dividendsFromUKCompaniesAmt-dividentNillRate;//14000
dueTax3=(heigherRateDividends*dividendTaxHigherRate)/100;//4550
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n4;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totIncomeTaxDue-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxBalance)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),totalIncomeTaxDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest223(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 223",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
driver.navigate().refresh();
}
public void addTestCase224(WebDriver driver, String str1,String str2,String str3,String str4,String str5, String str6, String str7, String str8)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 224",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//32493.00
dividentUKCompanies(driver,"Company1","",str4);//4555.00
funcAddEmployerForMTR(driver, str5, str6);
funcAddEmpIncomeWithTaxTakenOff(driver,str7, str8,"");
n1 = Double.parseDouble(str3);//2493.00
n2 = Double.parseDouble(str4);//4555.00
n3=Double.parseDouble(str7);//46350
n4=Double.parseDouble(str8);//6900.00
wLib.explicitWait(driver,5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n3;
interestFromUKBanksBuildingAmt = n1;
dividendsFromUKCompaniesAmt = n2;
totalincome = payFromAllEmploymentsAmt  + interestFromUKBanksBuildingAmt +dividendsFromUKCompaniesAmt;
totlIncome=totalincome - personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;//£34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6,900.00
heigherRateSaving=totlIncome - (basicRatePayPension + nilRate2 + dividendsFromUKCompaniesAmt) ;//31993
Reporter.log("heigherRateSaving: "+heigherRateSaving,true);
dueTax2=heigherRateSaving*HR_rate;//£12797.2
heigherRateDividends=dividendsFromUKCompaniesAmt-dividentNillRate;//14000
dueTax3=(heigherRateDividends*dividendTaxHigherRate)/100;//4550
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n4;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totIncomeTaxDue-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxBalance)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),totalIncomeTaxDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest224(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 224",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
driver.navigate().refresh();
clickEmployment(driver);
delEmpInfo(driver);
}
public void addTestCase225(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8)throws Exception
{

Reporter.log("Exceuting MTR Test Case 225",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","", str5);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str6);
stateBenefitsSaveBtn.click();
Reporter.log("State benefit added successfully",true);
taxReliefsLink.click();
verifyGiftAid(driver);
addGiftAidPayment(driver, str7);
addCharitableIncome(driver,str8,"","");
n1=Double.parseDouble(str3);//747.00
n2=Double.parseDouble(str4);//27500.00
n3=Double.parseDouble(str5);//22500.00
n4=Double.parseDouble(str6);//6628
n5=Double.parseDouble(str7);//519.00
n6=Double.parseDouble(str8);//179999.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate) + n1 + n2;//28433
dividendsFromUKCompaniesAmt=n3;
UKPensionAndStateBenefitAmt=n4;
incomeTaxReliefAmt=n6;
totalincome =interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt+UKPensionAndStateBenefitAmt;
totlIncome=totalincome - (incomeTaxReliefAmt + personalAllowanceRate);
if(totlIncome <=0)
{

totlIncome = 0;
}
if (totlIncome == 0)
{
totIncomeTaxDue=0;
}
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(giftofInvestmentsAndPropertyAmtTaxSummary.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+giftofInvestmentsAndPropertyAmtTaxSummary.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtTaxdueonGiftAidpayments=java.lang.Math.ceil(n5*giftAidRate);
Assert.assertEquals(calculationGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxdueonGiftAidpayments));
Reporter.log("Calculation Of Gift Aid Payments verified: "+calculationGiftAidpayments.getText(),true);
taxdueonGiftAidpaymentsValue=amtTaxdueonGiftAidpayments*reliefFinancerate;
Assert.assertEquals(taxDueGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Tax Due on Gift Aid Payments verified: "+taxDueGiftAidpayments.getText(),true);
Assert.assertEquals(incomeTaxDueAfterGifTAid.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Total Income Tax Due After GifTAid verified: "+incomeTaxDueAfterGifTAid.getText(),true);
totalTaxDeductedAmt=n1*taxedUKInterestRate;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
Totaltax=totalTaxDeductedAmt - taxdueonGiftAidpaymentsValue;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
}
public void funcDelMTRTest225(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 225",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
delCharitableGiving(driver);
delGiftAid(driver);
}
public void addTestCase226(WebDriver driver, String str1,String str2,String str3,String str4,String str5, String str6, String str7)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 226",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,str4,"",str5);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str6);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str7);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
n1 = Double.parseDouble(str3);//37155.00
n2 = Double.parseDouble(str5);//11238.00
n3=Double.parseDouble(str6);//54367
n4=Double.parseDouble(str7);//10
wLib.explicitWait(driver,5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = n1;
dividendsFromUKCompaniesAmt = n2;
capitalGainsTaxdueAmt=n3;
totalincome =  capitalGainsTaxdueAmt + interestFromUKBanksBuildingAmt +dividendsFromUKCompaniesAmt;
reducedPersonalAllowanceAmt=personalAllowanceRate - Math.floor((totalincome-personalAllowanceRateMaxLimit) *AA_excess);
totlIncome=totalincome - reducedPersonalAllowanceAmt;

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amountReducedPersonalAllowance.getText().substring(1).replace(",", ""),String.format("%.2f",(reducedPersonalAllowanceAmt)));
Reporter.log("Reduced Personal Allowance is Verified: "+amountReducedPersonalAllowance.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateSaving = totlIncome - (dividendsFromUKCompaniesAmt + capitalGainsTaxdueAmt + SR_band + nilRate2);//21,185
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax1 = basicRateSaving*(BR_rate);//4237
heigherRateSaving = capitalGainsTaxdueAmt ;//54367
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax2=heigherRateSaving*(HR_rate);//21746.80
basicRateDividends=taxLimit1Uk-(SR_band + nilRate2 + basicRateSaving +dividentNillRate) ;//£5185
dueTax3=round((basicRateDividends*dividendTaxBasicRate)/100,2);//£436.12
Reporter.log("Basic Rate of Dividends: "+dueTax3,true);
heigherRateDividends=dividendsFromUKCompaniesAmt-(basicRateDividends+dividentNillRate);//£3,423
dueTax4=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//£1,112.47
Reporter.log("dueTax4: "+dueTax4,true);
totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3 + dueTax4;//£27,532.39

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
notionalTaxFromGainsOnLifeAmt=n3*capitalGainsRateUpper;//10,873.40
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: "+amtNotionalTaxFromGainsOnLife.getText(),true);
incomeTaxDueAmt = totIncomeTaxDue - notionalTaxFromGainsOnLifeAmt;
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+incomeTaxDueAmt,true);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest226(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 226",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
}

public void addTestCase227(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 227",true);
clickIncome(driver);
addBank(driver, str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","", str5);//11166.00
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str6);//37541.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str7);//7508.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
redundancyAndOtherCompensationPaymentsTxtBox.clear();
redundancyAndOtherCompensationPaymentsTxtBox.sendKeys(str8);//1000
redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str9);//200
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
n1 = Double.parseDouble(str3);//21.00
n2 = Double.parseDouble(str4);//811.00
n3 = Double.parseDouble(str5);//11166.00
n4 = Double.parseDouble(str6);//37541.00
n5 = Double.parseDouble(str7);//7508.20
n6=Double.parseDouble(str8); //1000.00
n7=Double.parseDouble(str9); //200.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n6;//£1000.00
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate) + n1 + n2;//837
dividendsFromUKCompaniesAmt=n3;
UKPensionAndStateBenefitAmt=n4;
totalincome = payFromAllEmploymentsAmt + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
totlIncome=totalincome-personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt)); 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totlIncome-(nilRate2+dividendsFromUKCompaniesAmt);//27028
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//5405.6

basicRateDividends=(taxLimit1Uk-(basicRatePayPension+nilRate2))-dividentNillRate;//£4,972‬
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax2=(basicRateDividends*dividendTaxBasicRate)/100;//£372.9
Reporter.log("Calculated amount of Basic Rate of Dividends: "+dueTax2,true);
heigherRateDividends=dividendsFromUKCompaniesAmt-(basicRateDividends+dividentNillRate);//5132
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax3=(heigherRateDividends*dividendTaxHigherRate)/100;//1,667.90
Reporter.log("Calculated amount of Heigher Rate of Dividends: "+dueTax3,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));//7,725.65
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n1*taxedUKInterestRate + n5 + n7;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
Totaltax=totalTaxDeductedAmt-totIncomeTaxDue;//571.9
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);
}

public void funcDelMTRTest227(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 227",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase228(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12)throws Exception
{

	Reporter.log("Exceuting MTR Test Case 228",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);
	dividentUKCompanies(driver,"Company1","",str4);
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	otherPensionsRetirementAnnuities.clear();
	otherPensionsRetirementAnnuities.sendKeys(str5);
	taxTakenOffOtherPensions.clear();
	taxTakenOffOtherPensions.sendKeys(str6);
	stateBenefitsSaveBtn.click();
	addOtherUKIncome(driver,str7,"",str8,"",str9);
	wLib.explicitWait(driver, 5,linkForeignIncome);
	linkForeignIncome.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();

	try{
	if(delOverseasSavings.isDisplayed()==true)
	{
	delOverseasSavings.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,1,cnfmdel);
	cnfmdel.click();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for overseas savings is not available",true);
	}
	try{
	if(delDividendsForeignComaniesBtn.isDisplayed()==true)
	{
	delDividendsForeignComaniesBtn.click();

	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 1,cnfmdel);
	cnfmdel.click();
	}
	}catch (Exception e) {
	Reporter.log("Delete button for Dividends from foreign companies is not available",true);
	}

	wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
	interestOtherincomefromoverseassavingsFormBtn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,countryCodeLstBox);
	listbox1=new Select(countryCodeLstBox);
	listbox1.selectByValue("60");
	wLib.explicitWait(driver,5,colBTxtBox);
	colBTxtBox.clear();
	colBTxtBox.sendKeys(str10);
	wLib.explicitWait(driver,5,SaveBtn2);
	SaveBtn2.click();
	wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
	dividendsFromForeignCompanies.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,countryCodeLstBox);
	listbox1=new Select(countryCodeLstBox);
	listbox1.selectByValue("60");
	wLib.explicitWait(driver,5,colBTxtBox);
	colBTxtBox.clear();
	colBTxtBox.sendKeys(str11);
	wLib.explicitWait(driver,5,SaveBtn2);
	SaveBtn2.click();
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,taxReliefsLink);
	taxReliefsLink.click();
	verifyGiftAid(driver);
	addGiftAidPayment(driver, str12);
	n1=Double.parseDouble(str3);//28845.00
	n2=Double.parseDouble(str4);//6000.00
	n3=Double.parseDouble(str5);//6343.00
	n4=Double.parseDouble(str6);//268.60
	n5=Double.parseDouble(str7);//1116.00
	n6=Double.parseDouble(str8);//223.20
	n7=Double.parseDouble(str10);//451.00
	n8=Double.parseDouble(str11);//14669.00
	n9=Double.parseDouble(str12);//5886.00

	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	foreignIncomeCalc = n7;
	dividendsFromForeignCompaniesCalc = n8;
	interestFromUKBanksBuildingAmt = n1;
	dividendsFromUKCompaniesAmt =n2;
	UKPensionAndStateBenefitAmt = n3;
	otherIncomeAmt=n5;
	totalincome = foreignIncomeCalc + dividendsFromForeignCompaniesCalc + dividendsFromUKCompaniesAmt + interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + otherIncomeAmt;
	totlIncome = totalincome - personalAllowanceRate;
	Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
	Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
	Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
	Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
	Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
	Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
	Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",Math.floor(otherIncomeAmt)));
	Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
	Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	basicRateSaving=(foreignIncomeCalc+interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + otherIncomeAmt)-(SR_band+nilRate2+personalAllowanceRate);//19405	
	dueTax1=basicRateSaving*BR_rate;//3881
	Reporter.log("basic Rate of Saving: "+dueTax1,true);
	basicRateDividends=((taxLimit1Uk + (java.lang.Math.ceil(n9 * giftAidRate))) - (foreignIncomeCalc+interestFromUKBanksBuildingAmt -(personalAllowanceRate - (UKPensionAndStateBenefitAmt+otherIncomeAmt))))-dividentNillRate;;//£14953
	dueTax2=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//£1,121.47
	Reporter.log("Basic Rate of Dividends: "+dueTax2,true);
	heigherRateDividends=(dividendsFromForeignCompaniesCalc + dividendsFromUKCompaniesAmt)-(dividentNillRate+basicRateDividends);//‭3,716‬	
	dueTax3=roundDown2((heigherRateDividends*dividendTaxHigherRate)/100);//1207.7
	Reporter.log("Heigher Rate of Dividends: "+dueTax3,true);
	totIncomeTaxDue=dueTax1+dueTax2+dueTax3;//6210.17
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
	Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
	totalTaxDeductedAmt=n4+n6;//491.8
	Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
	Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
	totalTaxDeductedAmt1=totIncomeTaxDue-totalTaxDeductedAmt;//5,718.38
	Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
	Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(totalTaxDeductedAmt1)));
	Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}
public void delTestCase228(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 228",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delBank(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
delInfoGiftAid(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
try{
wLib.explicitWait(driver, 5,delOverseasSavings);
if(delOverseasSavings.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for overseas savings is not available",true);
}
try{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
if(delDividendsForeignComaniesBtn.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
delDividendsForeignComaniesBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Dividends from foreign companies is not available",true);
}
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
}
public void addTestCase229(WebDriver driver, String str1,String str2,String str3,String str4,String str5, String str6, String str7)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 229",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,str4,"",str5);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str6);//8358.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str7);//2495.00
stateBenefitsSaveBtn.click();	
n1 = Double.parseDouble(str3);//37155.00
n2 = Double.parseDouble(str5);//11238.00
n3 = Double.parseDouble(str6);//33727.00
n4 = Double.parseDouble(str7);//6745.00
wLib.explicitWait(driver,5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = n1;
dividendsFromUKCompaniesAmt = n2;
UKPensionAndStateBenefitAmt = n3;
totalincome =  UKPensionAndStateBenefitAmt + interestFromUKBanksBuildingAmt +dividendsFromUKCompaniesAmt;

totlIncome=totalincome - personalAllowanceRate ;

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);


Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totlIncome - (interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt);
dueTax1=basicRatePayPension*BR_rate;
Reporter.log("basic Rate of Pay Pension: "+dueTax1,true);
basicRateSaving = interestFromUKBanksBuildingAmt - nilRate1;//7358
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2 = basicRateSaving*(BR_rate);//1471.60
basicRateDividends=dividendsFromUKCompaniesAmt - dividentNillRate;//£495
dueTax3=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//£37.12
Reporter.log("Basic Rate of Dividends: "+dueTax3,true);

totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3;//£5884.12

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);

totalTaxDeductedAmt=n4;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=totalTaxDeductedAmt-totIncomeTaxDue;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1,4).replace(",",""),String.format("%.0f",taxBalance));
Reporter.log("Income Tax overpaid is verified: "+amtIncomeTaxoverpaid.getText(),true);
}
public void funcDelMTRTest229(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 229",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
}

public void addTestCase230(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 230",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","",str4);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str5);
stateBenefitsSaveBtn.click();
driver.navigate().refresh();
addPensionTaxReliefForm(driver,str6, "", "", "");
//verifyGiftAid(driver);
AddgiftAidPaymentFull(driver,str7,"",str8);//41.00, 41.00
clickIncome(driver);
funcAddEmployerForMTR(driver, str9, str10);
funcAddEmpIncomeWithTaxTakenOff(driver, str11,"","");
n1 = Double.parseDouble(str3); //4625.00
n2 = Double.parseDouble(str4); //46159.00
n3 = Double.parseDouble(str5); //5009.00
n4 = Double.parseDouble(str6); //2920.00
n5 = Double.parseDouble(str7); //41.00
n6 = Double.parseDouble(str8); //41.00
n7 = Double.parseDouble(str11); //10850.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n7;//10850.00
interestFromUKBanksBuildingAmt = n1;//4625.00
dividendsFromUKCompaniesAmt=n2;//46159.00
UKPensionAndStateBenefitAmt=n3;//5009.00
totalincome = payFromAllEmploymentsAmt + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;//66643
totlIncome = totalincome - personalAllowanceRate;//£54,793
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
startedRatePayPension=SR_bandScott;//2,000.00
dueTax1=startedRatePayPension*startedRateScott;//380.00
Reporter.log("Started Rate of Pay Pension: "+dueTax1,true);
basicRatePayPension=((payFromAllEmploymentsAmt + UKPensionAndStateBenefitAmt)-personalAllowanceRate)-startedRatePayPension;//£2,009
dueTax2=basicRatePayPension*basicRateScott;//£401.80
Reporter.log("Basic Rate of Pay Pension: "+dueTax2,true);
startedRateSaving=SR_band-(startedRatePayPension + basicRatePayPension);//£991
basicRateSaving=n1-(startedRateSaving+nilRate2);//3,134.00
dueTax3=basicRateSaving*BR_rate;//626.80
Reporter.log("Basic Rate of Saving: "+dueTax3,true);
basicRateDividends=((taxLimit1Uk + (java.lang.Math.ceil(n5 * giftAidRate) + n4)) - ((startedRatePayPension + basicRatePayPension) + interestFromUKBanksBuildingAmt))-dividentNillRate;//£26,838.00
dueTax4=(basicRateDividends*dividendTaxBasicRate)/100;//£2,012.85
Reporter.log("Basic Rate of Dividend: "+dueTax4,true);
heigherRateDividends=n2-(basicRateDividends+dividentNillRate);//£6,932.00	
dueTax5=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//£5,629.33
Reporter.log("heigher Rate of Dividend: "+dueTax5,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);	
taxBalance=totIncomeTaxDue;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}
public void delTestCase230(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 230",true);
wLib = new WaitStatementLib();	
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);	
delBank(driver);
deleteDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
Reporter.log("Employment income Deleted Successfully",true);
delGiftAid(driver);
Reporter.log("Gift Aid Payment amount Deleted Successfully",true);
delPensionTaxRelief(driver);
Reporter.log("Pension Tax Relief is Deleted Successfully",true);
}
public void addTestCase231(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 231",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
addOtherDivident(driver,str6,"","");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str7);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str8);
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str9);
stateBenefitsSaveBtn.click();
driver.navigate().refresh();
addOtherUKIncome(driver,str10,"",str11,"",str12);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
verifyGiftAid(driver);
addGiftAidPayment(driver, str13);
otherGiftAidpayment(driver, "", str14);
addCharitableIncome(driver,str15,"","");
clickIncome(driver);
funcAddEmployerForMTR(driver, str16, str17);
funcAddEmpIncomeWithTaxTakenOff(driver,str18, str19,"");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,grossAmountTxtBox);
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str20);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1 = new Select(countryCodeLstBox);
listbox1.selectByValue("60");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str22);
wLib.explicitWait(driver,5,colFTxtBox);
string1=colFTxtBox.getAttribute("value");
Assert.assertEquals(string1, str22);
Reporter.log("Value of Text Box F for 'Interest and other income from overseas savings' Verified: "+string1,true);
wLib.explicitWait(driver,5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("90");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str23);
wLib.explicitWait(driver,5,colFTxtBox);
string2=colFTxtBox.getAttribute("value");
Assert.assertEquals(string2, str23);
Reporter.log("Value of Text Box F for 'Dividends from foreign companies' Verified: "+string2,true);
wLib.explicitWait(driver,5,SaveBtn2);
SaveBtn2.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 5,SaveBtn1);
SaveBtn1.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str21);
wLib.explicitWait(driver, 5,SaveBtn1);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
qSTotalDisposalTxtBox.clear();
qSTotalDisposalTxtBox.sendKeys(str24);
qSDisposalProceedTxtBox.clear();
qSDisposalProceedTxtBox.sendKeys(str25);
qSCostsAndIndexationTxtBox.clear();
qSCostsAndIndexationTxtBox.sendKeys(str26);
qSGainsInTheYearTxtBox.clear();
qSGainsInTheYearTxtBox.sendKeys(str27);
qSLossesInTheYearTxtBox.clear();
qSLossesInTheYearTxtBox.sendKeys(str28);
commentTxtBox.clear();
commentTxtBox.sendKeys(str29);
SaveBtn1.click();

n1=Double.parseDouble(str3);//1898.00
n2=Double.parseDouble(str4);//2733.00
n3=Double.parseDouble(str5);//69088.00
n4=Double.parseDouble(str6);//21614.00
n5=Double.parseDouble(str7);//15308.00
n6=Double.parseDouble(str8);//110892.00
n7=Double.parseDouble(str9);//1112.00
n8=Double.parseDouble(str10);//972.00
n9=Double.parseDouble(str11);//194.40
n10=Double.parseDouble(str13);//27650.00
n11=Double.parseDouble(str14);//6000.00
n12=Double.parseDouble(str15);//256421.00
n13=Double.parseDouble(str18);//12850.00
n14=Double.parseDouble(str19);//200.00
n15=Double.parseDouble(str20);//4608.00
n16=Double.parseDouble(str21);//4632.39
n17=Double.parseDouble(str22);//19048.00
n18=Double.parseDouble(str23);//84227.00
n19=Double.parseDouble(str24);//65
n20=Double.parseDouble(str25);//2453071.00
n21=Double.parseDouble(str26);//2074877.00
n22=Double.parseDouble(str27);//487030.00
n23=Double.parseDouble(str28);//108836.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n13;
foreignIncomeCalc = n17;
dividendsFromForeignCompaniesCalc = n18;
dividendsFromUKCompaniesAmt=n3 + n4;
interestFromUKBanksBuildingAmt = Math.floor(n1*taxedUKInterestRate)+n1+n2+n15;
UKPensionAndStateBenefitAmt = n5 + n6;
otherIncomeAmt=n8;
totalincome = payFromAllEmploymentsAmt + foreignIncomeCalc + dividendsFromForeignCompaniesCalc + dividendsFromUKCompaniesAmt + interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + otherIncomeAmt;
taxDueInc = totalincome -(n12 + personalAllowanceRate);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",Math.floor(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRateDividends = taxDueInc - (SR_band + nilRate1 + dividentNillRate);
Reporter.log("Basic Rate of Dividend: "+basicRateDividends,true);
dueTax1 = roundDown2((basicRateDividends*dividendTaxBasicRate)/100);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",dueTax1));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
incomeTaxdueafterallowancesandreliefs = dueTax1-n16;
total1 = n7 + n14;
total2 = (n1*giftAidRate)*reliefFinancerate;
Assert.assertEquals(amtForeignTaxCreditRelief.getText().substring(1).replace(",", ""),String.format("%.2f",(n16)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);
Assert.assertEquals(amtBalanceofPAYEtax.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
Reporter.log("Amount of Balance of PAYE tax is verified: "+amtBalanceofPAYEtax.getText(),true);
Assert.assertEquals(amtInterestReceivedfromUKbanksBuildingSocieties.getText().substring(1).replace(",", ""),String.format("%.2f",(total2)));
Reporter.log("Amount of Interest Received from UK banks Building Societies: "+amtInterestReceivedfromUKbanksBuildingSocieties.getText(),true);
Assert.assertEquals(txtTotaltaxdeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(total1 + total2 + n9)));
Reporter.log("Amount of Total tax deducted is Verified: "+txtTotaltaxdeducted.getText(),true);
total3 = (taxLimit1Uk + Math.round((n10+n11)*giftAidRate))-((n18 + n3 + n4 + otherIncomeAmt + n5 + n6 + n13 + interestFromUKBanksBuildingAmt + n17) - (n12 + personalAllowanceRate));
total4 = total3 *capitalGainsRateLower;
total5 =(((n22- n23) - annualExemptIndividualsProposed) - total3)*capitalGainsRateUpper;
capitalGainsTaxdueAmt=	 Math.round(total4 + total5);
x1= Math.round(Double.parseDouble(capitalGainsTaxdue.getText().substring(1).replace(",", "")));
Assert.assertEquals(String.format("%.2f",(x1)),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
}
public void delTestCase231(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 231",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delBank(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
delOtherDivident(driver);
Reporter.log("Other UK Income deleted successfully",true);
delCharitableGiving(driver);
delInfoGiftAid(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
try{
wLib.explicitWait(driver, 5,delOverseasSavings);
if(delOverseasSavings.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for overseas savings is not available",true);
}
try{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
if(delDividendsForeignComaniesBtn.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
delDividendsForeignComaniesBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Dividends from foreign companies is not available",true);
}
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
delCGI(driver);
funcDelAdditionalInfo(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
Reporter.log("Employee Income deleted successfully",true);
}
public void addTestCase232(WebDriver driver, String str1,String str2,String str3,String str4,String str5, String str6, String str7,String str8,String str9,String str10,String str11,String str12,String str13)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 232",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
funcAddForeignInterest(driver,str5);
dividentUKCompanies(driver,"Company1","",str6);
addOtherDivident(driver,"0.00",str7,"0.00");
funcAddEmployerForMTR(driver, str8, str9);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);	
payFrmEmployer.sendKeys(str10);
UkTaxTakenOffPay.sendKeys(str11);
PrvtMedAndDntl.sendKeys(str12);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
addPensionTaxReliefForm(driver, str13, "", "", "");
n1 = Double.parseDouble(str3);//17111.00
n2 = Double.parseDouble(str4);//490.00
n3= Double.parseDouble(str5);//15.00
n4= Double.parseDouble(str6);//66572.00
n5= Double.parseDouble(str7);//89.00
n6 = Double.parseDouble(str10);//10850.00
n7= Double.parseDouble(str11);//57.20
n8= Double.parseDouble(str12);//1286.00
n9= Double.parseDouble(str13);//3600.00
wLib.explicitWait(driver,5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n6;
benefitsAndExpensesReceivedAmt=n8;
totalFromAllEmployments = payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt;
interestFromUKBanksBuildingAmt=Math.floor(n1*taxedUKInterestRate)+n1+n2;//21878
foreignIncomeCalc = n3;
dividendsFromForeignCompaniesCalc = n5;
dividendsFromUKCompaniesAmt = n4;
dividendInc = dividendsFromForeignCompaniesCalc + dividendsFromUKCompaniesAmt;
totalincome = totalFromAllEmployments +interestFromUKBanksBuildingAmt +dividendsFromUKCompaniesAmt + foreignIncomeCalc + dividendsFromForeignCompaniesCalc;

totlIncome=totalincome - personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);		
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",dividendsFromForeignCompaniesCalc));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);


Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=totalFromAllEmployments - personalAllowanceRate;
dueTax1=basicRatePayPension*BR_rate;//57.20
Reporter.log("basic Rate of Pay Pension: "+dueTax1,true);
startedRateSaving=SR_band-basicRatePayPension;//4714
Reporter.log("Started Rate of Saving: "+startedRateSaving,true);
basicRateSaving=(interestFromUKBanksBuildingAmt-(startedRateSaving + nilRate2))+foreignIncomeCalc;//16679
Reporter.log("Basic Rate of Saving: "+ basicRateSaving,true);
dueTax2 = basicRateSaving*(BR_rate);//3335.80
Reporter.log("Amount of Basic Rate of Saving: "+ dueTax2,true);
basicRateDividends=(taxLimit1Uk+n9)-(interestFromUKBanksBuildingAmt+basicRatePayPension+foreignIncomeCalc+dividentNillRate);//£13921
dueTax3=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//£1044.07
Reporter.log("Basic Rate of Dividends: "+dueTax3,true);
heigherRateDividends=dividendInc -(basicRateDividends+dividentNillRate);//£50740
dueTax4=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//£16490
Reporter.log("dueTax4: "+dueTax4,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;//£20927
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n7+(n1*taxedUKInterestRate);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
incomeTaxDueAmt=totIncomeTaxDue-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
fnltax=incomeTaxDueAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",fnltax));
Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);
}
public void delTestCase232(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 232",true);
wLib = new WaitStatementLib();	
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);	
delBank(driver);
deleteDivident(driver);
delOtherDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
Reporter.log("Employment income Deleted Successfully",true);
delPensionTaxRelief(driver);
Reporter.log("Pension Tax Relief is Deleted Successfully",true);
}
public void addTestCase233(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 233",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
dividentUKCompanies(driver,"Company1","",str5);
addOtherDivident(driver,str6,"0.00","0.00");
wLib.explicitWait(driver, 10,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
taxableIncapacityBenefit.clear();
taxableIncapacityBenefit.sendKeys(str7);
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
grossAmountTxtBox.clear();
grossAmountTxtBox.sendKeys(str8);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
funcAddEmployerForMTR(driver, str9, str10);
funcAddEmpIncomeWithTaxTakenOff(driver,str11,"","");
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("229");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str12);
wLib.explicitWait(driver,5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("90");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str13);
wLib.explicitWait(driver,5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver,5,SaveBtn1);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 2,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 30,editBtn);
editBtn.click();
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str14);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str15);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str16);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str17);
commentTxtBox.clear();
commentTxtBox.sendKeys(str18);
SaveBtn1.click();
n1 = Double.parseDouble(str3); //15624.00
n2 = Double.parseDouble(str4); //2545.00
n3 = Double.parseDouble(str5); //42924.00
n4 = Double.parseDouble(str6); //16393.00
n5 = Double.parseDouble(str7); //5780.00
n6 = Double.parseDouble(str8); //1364.00
n7 = Double.parseDouble(str11); //1089.00
n8 = Double.parseDouble(str12); //2703
n9 = Double.parseDouble(str13); //6332
n10 = Double.parseDouble(str15); //295729.0
n11 = Double.parseDouble(str16); //251014.00
n12 = Double.parseDouble(str17); //44715.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n7;
foreignIncomeCalc = n8;
dividendsFromForeignCompaniesCalc = n9;
interestFromUKBanksBuildingAmt = (n1*taxedUKInterestRate)+n1+n2+n6;
dividendsFromUKCompaniesAmt=n3 + n4;
UKPensionAndStateBenefitAmt = n5;
totalincome = payFromAllEmploymentsAmt + foreignIncomeCalc + dividendsFromForeignCompaniesCalc + dividendsFromUKCompaniesAmt + interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt;
totlIncome = totalincome - personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(foreignIncomeCalc)));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
total1 = (interestFromUKBanksBuildingAmt+foreignIncomeCalc)-(personalAllowanceRate - (payFromAllEmploymentsAmt+UKPensionAndStateBenefitAmt));//21161
Reporter.log("total1: "+total1,true);
basicRateSaving=total1-(SR_band+nilRate2);//15661
Reporter.log("basic Rate of Saving: "+basicRateSaving,true);
dueTax1=roundDown2(basicRateSaving*(BR_rate));//3,132.20
Reporter.log("basic Rate of Saving Calculated Amount: "+dueTax1,true);
basicRateDividends=(taxLimit1Uk-total1)-dividentNillRate;//11339
dueTax2=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);//850.43
heigherRateDividends=(dividendsFromForeignCompaniesCalc + dividendsFromUKCompaniesAmt)-(taxLimit1Uk-total1);//52,310.00	
dueTax3=(heigherRateDividends*dividendTaxHigherRate)/100;//17,000.75
Reporter.log("Heigher Rate of Dividends: "+dueTax3,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3;//20,983.38
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=(n1*giftAidRate)*(BR_rate);//3906
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=totIncomeTaxDue-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
otherGainsBasicAmt=(n12-annualExemptIndividualsProposed)*capitalGainsRateUpper;//£6603
Reporter.log("Other gains: "+otherGainsBasicAmt,true);
capitalGainsTaxdueAmt=otherGainsBasicAmt;//£6603
Assert.assertEquals(capitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Capital Gains Tax due is Verified: "+capitalGainsTaxdue.getText(),true);
Totaltax=totalTaxDeductedAmt1+capitalGainsTaxdueAmt;//23,680.38
Assert.assertEquals(IncomeandCapitalGainsTaxdue.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));//£321,084.82
Reporter.log("Amount of Income and Capital Gains Tax due is Verified: "+IncomeandCapitalGainsTaxdue.getText(),true);
}	
public void delTestCase233(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 233",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
delBank(driver);
deleteDivident(driver);
delOtherDivident(driver);
Reporter.log("Other UK Income deleted successfully",true);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
try{
wLib.explicitWait(driver, 5,delOverseasSavings);
if(delOverseasSavings.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for overseas savings is not available",true);
}
try{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
if(delDividendsForeignComaniesBtn.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
delDividendsForeignComaniesBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Dividends from foreign companies is not available",true);
}
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
Reporter.log("Employee Income deleted successfully",true);
delCGI(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase234(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 234",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
redundancyAndOtherCompensationPaymentsTxtBox.clear();
redundancyAndOtherCompensationPaymentsTxtBox.sendKeys(str4);
redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str5);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
funcAddEmployerForMTR(driver, str6, str7);
funcAddEmpIncomeWithTaxTakenOff(driver, str8,str9,"");
	
n1 = Double.parseDouble(str3);//20000.00
n2 = Double.parseDouble(str4);//10000.00
n3 = Double.parseDouble(str5);//2000.00
n4 = Double.parseDouble(str8);//15000.00
n5 = Double.parseDouble(str9);//630.00


wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt =n1;
payFromAllEmploymentsAmt = n2 + n4;//£25,000
totalincome = interestFromUKBanksBuildingAmt + payFromAllEmploymentsAmt;

totlIncome= totalincome - personalAllowanceRate;

Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",payFromAllEmploymentsAmt));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension= payFromAllEmploymentsAmt - personalAllowanceRate;//13150.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£2630.00
startedRateSaving = SR_band - (n4 - personalAllowanceRate);
basicRateSaving=n1-(nilRate1 + startedRateSaving);//17150.00	
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*(BR_rate);//3430

totIncomeTaxDue = dueTax1 + dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt = n3 + n5;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f", totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totIncomeTaxDue - totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase234(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 234",true);
checkLockbutton(driver);
clickIncome(driver);	
delInterestfromUKbanks(driver);
clickEmployment(driver);
delEmpInfo(driver);
funcDelAdditionalInfo(driver);
}


public void addTestCase235(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11)throws Exception
{

	Reporter.log("Exceuting MTR Test Case 235",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);
	dividentUKCompanies(driver,"Company1","",str4);
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	otherPensionsRetirementAnnuities.clear();
	otherPensionsRetirementAnnuities.sendKeys(str5);
	stateBenefitsSaveBtn.click();
	wLib.explicitWait(driver, 5,additionalInformationLink);
	additionalInformationLink.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();
	wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
	amountGainOnLifeInsuranceTxtBox.clear();
	amountGainOnLifeInsuranceTxtBox.sendKeys(str6);
	numberOfYearsSinceLastPolicyGainTxtBox.clear();
	numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str7);
	txtBoxNoTaxAmountGainOnPolicy.clear();
	txtBoxNoTaxAmountGainOnPolicy.sendKeys(str8);
	txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.clear();
	txtBoxNumberOfYearsSinceLastNoTaxPolicyGain.sendKeys(str9);
	redundancyAndOtherCompensationPaymentsTxtBox.clear();
	redundancyAndOtherCompensationPaymentsTxtBox.sendKeys(str10);
	redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
	redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str11);
	saveAdditionalInfoBtn.click();
	driver.navigate().refresh();
	n1=Double.parseDouble(str3);//10000.00
	n2=Double.parseDouble(str4);//10000.00
	n3=Double.parseDouble(str5);//10000.00
	n4=Double.parseDouble(str6);//10000.00
	n5=Double.parseDouble(str8);//10000.00
	n6=Double.parseDouble(str10);//10000.00
	n7=Double.parseDouble(str11);//2000.00
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n6;
interestFromUKBanksBuildingAmt=n1;
dividendsFromUKCompaniesAmt=n2;
UKPensionAndStateBenefitAmt=n3;
capitalGainsTaxdueAmt = n4 + n5;
totalincome = payFromAllEmploymentsAmt + interestFromUKBanksBuildingAmt+ dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt + capitalGainsTaxdueAmt;
totlIncome=totalincome - personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(capitalGainsTaxdueAmt)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);		
heigherRatePayPension=(((n3 + n6)-personalAllowanceRate))-(taxLimit1Uk -(n1 + n4 + n2));//3650
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax1=heigherRatePayPension*HR_rate;//1460
basicRatePayPension = n3 - heigherRatePayPension;//4500
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax2=basicRatePayPension*BR_rate;//£900.00
heigherRateSaving= n4;//10000.00
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//4,000.00
basicRateSaving=totlIncome - (heigherRateSaving +SR_band+nilRate2+dividendsFromUKCompaniesAmt +UKPensionAndStateBenefitAmt);//12,650.00	
dueTax4=basicRateSaving*BR_rate;//2,530.00
Reporter.log("Amount of Basic Rate of Saving: "+dueTax2,true);	
basicRateDividends=dividendsFromUKCompaniesAmt - dividentNillRate;//8000
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax5=(basicRateDividends*dividendTaxBasicRate)/100;//£600.00
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5;//9,860.00
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
notionalTaxFromGainsOnLifeAmt=n4*capitalGainsRateUpper;//2000
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: "+amtNotionalTaxFromGainsOnLife.getText(),true);
tax1 = totIncomeTaxDue - notionalTaxFromGainsOnLifeAmt;
//Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",(tax1)));
Reporter.log("Income Tax due After adding Underpaid tax for earlier years is verifired successfully"+tax1,true);
totalTaxDeductedAmt=n7;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1=tax1-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}

public void delTestCase235(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 235",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
}

public void addTestCase236(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 236",true);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//21005
dividentUKCompanies(driver,"Company1","", str4);//16000
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
redundancyAndOtherCompensationPaymentsTxtBox.clear();
redundancyAndOtherCompensationPaymentsTxtBox.sendKeys(str5);//15000
redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str6);//3000
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
funcAddEmployerForMTR(driver, str7, str8);
funcAddEmpIncomeWithTaxTakenOff(driver, str9,str10,"");
Reporter.log("Employment added Successfully",true);

n1 = Double.parseDouble(str3);//21005
n2 = Double.parseDouble(str4);//16000
n3 = Double.parseDouble(str5);//15000
n4 = Double.parseDouble(str6);//3000
n5 = Double.parseDouble(str9);//13350.00
n6 = Double.parseDouble(str10); //300.00

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n3 + n5;//£28,350‬
interestFromUKBanksBuildingAmt= n1 ;//21005
dividendsFromUKCompaniesAmt=n2;

totalincome = payFromAllEmploymentsAmt + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt ;
totlIncome=totalincome-personalAllowanceRate;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt)); 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=n5 -personalAllowanceRate;//1500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//300
heigherRatePayPension=payFromAllEmploymentsAmt - (basicRatePayPension + personalAllowanceRate);//15,000‬
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//6000
basicRateSaving=interestFromUKBanksBuildingAmt - ((SR_band-basicRatePayPension)+nilRate2);//17005
dueTax3=basicRateSaving*BR_rate;//3401.00
basicRateDividends=(taxLimit1Uk-(basicRatePayPension+interestFromUKBanksBuildingAmt))-dividentNillRate;//9,995
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax4=round(basicRateDividends*(dividendTaxBasicRate/100),2);//£749.63
Reporter.log("Calculated amount of Basic Rate of Dividends: "+dueTax4,true);
heigherRateDividends=dividendsFromUKCompaniesAmt-(basicRateDividends+dividentNillRate);//4005
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
dueTax5=roundDown2(heigherRateDividends*(dividendTaxHigherRate/100));//1301.62
Reporter.log("Calculated amount of Heigher Rate of Dividends: "+dueTax5,true);
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4+dueTax5;//11752.24
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));//11752.24
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n4 + n6;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
fnltax=totIncomeTaxDue-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(fnltax)));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
}

public void funcDelMTRTest236(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 236",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
deleteDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase237(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 234",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","",str4);
addOtherUKIncome(driver,str5,"",str6,"",str7);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
redundancyAndOtherCompensationPaymentsTxtBox.clear();
redundancyAndOtherCompensationPaymentsTxtBox.sendKeys(str8);
redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str9);
saveAdditionalInfoBtn.click();

	
n1 = Double.parseDouble(str3);//20000.00
n2 = Double.parseDouble(str4);//10000.00
n3 = Double.parseDouble(str5);//10000.00
n4 = Double.parseDouble(str6);//2000.00
n5 = Double.parseDouble(str8);//10000.00
n6 = Double.parseDouble(str9);//2000.00


wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = n1;//20000
payFromAllEmploymentsAmt = n5;//10000
dividendsFromUKCompaniesAmt = n2;//10000
otherIncomeAmt = n5;//10000
totalincome = interestFromUKBanksBuildingAmt + payFromAllEmploymentsAmt + dividendsFromUKCompaniesAmt + otherIncomeAmt;

totlIncome= totalincome - personalAllowanceRate;

Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",payFromAllEmploymentsAmt));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk - (n1 + n2);//4500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£900.00
heigherRatePayPension = totlIncome - (basicRatePayPension+interestFromUKBanksBuildingAmt+dividendsFromUKCompaniesAmt);//3650	
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//1460
basicRateSaving=interestFromUKBanksBuildingAmt - (nilRate2 + SR_band);//14,500.00	
Reporter.log("Basic Rate of saving: "+basicRateSaving,true);
dueTax3=basicRateSaving * BR_rate;//£2900
basicRateDividends = dividendsFromUKCompaniesAmt - dividentNillRate;//£8000
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax4=(basicRateDividends*dividendTaxBasicRate)/100;//£600
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;//£5860

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt = n4 + n6;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f", totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totIncomeTaxDue - totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase237(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 237",true);
checkLockbutton(driver);
clickIncome(driver);	
delInterestfromUKbanks(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase238(WebDriver driver, String str1,String str2,String str3,String str4,String str5)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 238",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
wLib.explicitWait(driver, 10,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str4);
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str5);//960.00
stateBenefitsSaveBtn.click();
n1=Double.parseDouble(str3);//34000.00
n2=Double.parseDouble(str4);//12850.00
n3=Double.parseDouble(str5);//2570.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt =n1;
UKPensionAndStateBenefitAmt = n2;
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
totlIncome=totalincome - personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt)); 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
startedRatePayPension = UKPensionAndStateBenefitAmt - personalAllowanceRate;//1000.00
dueTax1 = round(startedRatePayPension * startedRateScott,2);//380.00
Reporter.log("Started Rate of Pay Pension: "+dueTax1,true);
startedRateSaving = SR_band - startedRatePayPension;//4000
basicRateSaving = interestFromUKBanksBuildingAmt - ((nilRate2 + startedRateSaving) +nilRate2);//29000
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2 = basicRateSaving*(BR_rate);//5800
heigherRateSaving = interestFromUKBanksBuildingAmt - (startedRateSaving + nilRate2 + basicRateSaving);//61180
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving * HR_rate;//24472
totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt = n3;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = totIncomeTaxDue - totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
}
public void delTestCase238(WebDriver driver) throws Exception {
Reporter.log("Deleting MTR Test Case 238",true);
wLib = new WaitStatementLib();
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
}  
public void addTestCase239(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6)throws Exception
{
Reporter.log("Exceuting MTR Test Case 239",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
dividentUKCompanies(driver,"Company1","",str4);//16,000.00
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str5);
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str6);
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,marriageAllowanceForm);
marriageAllowanceForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,receiveMarriageAllowancefromChkBox);
receiveMarriageAllowancefromChkBox.click();
SaveBtn2.click();
n1=Double.parseDouble(str3);//453.00
n2=Double.parseDouble(str4);//151.00
n3=Double.parseDouble(str5);//46199.00
n4=Double.parseDouble(str6);//11579.60
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt =n1;
dividendsFromUKCompaniesAmt=n2;
UKPensionAndStateBenefitAmt = n3;
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt;
totlIncome=totalincome-personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=taxLimit1Uk;//£34500
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6,900.00
totIncomeTaxDue=dueTax1;
/*Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);*/
marriageAllowanceAmt=marriageAllowance * marriageAllowanceRate;
Assert.assertEquals(taxSummaaryMarriageAllowanceAmt.getText().substring(1).replace(",", ""),String.format("%.2f",marriageAllowanceAmt));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriageAllowanceAmt.getText(),true);
/*incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - marriageAllowanceAmt;
Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxdueafterallowancesandreliefs));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);*/
totalTaxDeductedAmt=n4;//11579.60
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
/*taxBalance= totalTaxDeductedAmt - incomeTaxdueafterallowancesandreliefs;
Assert.assertEquals(amtIncomeTaxoverpaid.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));//4917.60
Reporter.log("Income Tax overpaid is verifired successfully"+amtIncomeTaxoverpaid.getText(),true);*/
}
public void delTestCase239(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 239",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,marriageAllowanceForm);
marriageAllowanceForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,receiveMarriageAllowancefromChkBox);
receiveMarriageAllowancefromChkBox.click();
SaveBtn2.click();
}
public void addHighIncomeChildBenefitCharge(WebDriver driver, String str1,String str2, String str3)throws Exception
{
wLib = new WaitStatementLib();
cis=new CISPage(driver);
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,amountReceivedTxtBox);
amountReceivedTxtBox.clear();
amountReceivedTxtBox.sendKeys(str1);
NoOfchildrenTxtBox.clear();	
NoOfchildrenTxtBox.sendKeys(str2);
benifitStopDateTxtBox.clear();	
benifitStopDateTxtBox.sendKeys(str3);
SaveBtn2.click();
driver.navigate().refresh();
}
public void addTestCase189(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 189",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
addOtherDivident(driver,str4,"0.00","0.00");
addHighIncomeChildBenefitCharge(driver,str5,str6,"");
clickIncome(driver);
funcAddEmployerForMTR(driver, str7, str8);
funcAddEmpIncomeWithTaxTakenOff(driver, str9, str10, str11);

n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//12750.00
n3 = Double.parseDouble(str5);//1197
n4 = Double.parseDouble(str6);//1
n5 = Double.parseDouble(str9);//37950
n6 = Double.parseDouble(str10);//5879.00
n7 = Double.parseDouble(str11);//450.00


wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt = n1;
dividendsFromUKCompaniesAmt = n2;
payFromAllEmploymentsAmt = n5;
allowableExpensesAmt = n7; 
totalFromAllEmployments = payFromAllEmploymentsAmt-allowableExpensesAmt;


totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + totalFromAllEmployments;
totlIncome= totalincome - personalAllowanceRate;

Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""), String.format("%.2f",payFromAllEmploymentsAmt));
Reporter.log("Payment From employer verified: "+payFromAllEmployments.getText(), true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",totalFromAllEmployments));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension = totlIncome-(dividendsFromUKCompaniesAmt+nilRate2);//£28828
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1 = basicRatePayPension*BR_rate; //£5,765.00
basicRateDividends = taxLimit1Uk-(basicRatePayPension + nilRate2 + dividentNillRate) ;//£3172
dueTax2 = (basicRateDividends*dividendTaxBasicRate)/100;//237.90
Reporter.log("Basic Rate of Dividends: "+dueTax2,true);
	
heigherRateDividends = dividendsFromUKCompaniesAmt - (basicRateDividends + dividentNillRate) ;//7578
dueTax3 = (heigherRateDividends*dividendTaxHigherRate)/100;//2462.85
Reporter.log("Heigher Rate of Dividends: "+heigherRateDividends,true);
totIncomeTaxDue=dueTax1 + dueTax2 + dueTax3;//8466.35

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Due is Verified: "+totIncomeTaxDue,true);
adjustedNetIncomeInExcessOfChildBenefitIncomeLimit = Math.floor((totalincome - CBC_HR_thresholdMin) * CBC_taper);
total1 = n3 * CBC_taper;
highIncomeChildBenefitCharge = Math.floor(adjustedNetIncomeInExcessOfChildBenefitIncomeLimit * total1);
incomeTaxDueAmt = totIncomeTaxDue + highIncomeChildBenefitCharge;
Assert.assertEquals(incomeTaxDue1.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDueAmt,true);
totalTaxDeductedAmt=n6;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = incomeTaxDueAmt - totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",taxBalance));//3053.35
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),totalIncomeTaxDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase189(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 189",true);
checkLockbutton(driver);
clickIncome(driver);	
delInterestfromUKbanks(driver);
delOtherDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
delChildBenefitCharge(driver);
}

public void addTestCase190(WebDriver driver, String str1,String str2, String str3, String str4, String str5, String str6, String str7, String str8, String str9, String str10, String str11,String str12,String str13,String str14,String str15,String str16,String str17) throws Exception {
Reporter.log("Exceuting MTR Test Case 190",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
addHighIncomeChildBenefitCharge(driver,str1,str2,"");
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
addGiftAidPayment(driver, str3);
clickIncome(driver);
funcAddEmployerForMTR(driver, str4, str5);
addEmpIncome.click();
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str6);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str7);
VochrCredcardExsMilg.clear();
VochrCredcardExsMilg.sendKeys(str8);
ProfFeesAndSubsTxtBox.clear();
ProfFeesAndSubsTxtBox.sendKeys(str9);
OtherExpensTxtBox.clear();
OtherExpensTxtBox.sendKeys(str10);
EarningPTtoUAPTxtBox.sendKeys(str17);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str11);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str12);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str13);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str14);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str15);
subContractorsTaxDeductionTxtBox.clear();
subContractorsTaxDeductionTxtBox.sendKeys(str16);
SaveBtn1.click();
n1 = Double.parseDouble(str1);//4539.00
n2 = Double.parseDouble(str2);//3
n3 = Double.parseDouble(str3); //11000.00
n4 = Double.parseDouble(str6);//18500.00
n5 = Double.parseDouble(str7);//1450.00
n6 = Double.parseDouble(str8);//600.00
n7 = Double.parseDouble(str9);//150.00
n8 = Double.parseDouble(str10);//85.00
n9 = Double.parseDouble(str12);//59465.00
n10 = Double.parseDouble(str13);//6365.00
n11 = Double.parseDouble(str14);//995.00
n12 = Double.parseDouble(str15);//7295.00
n13 = Double.parseDouble(str16);//10421.00
n14 = Double.parseDouble(str17);//10076.00
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n4;
benefitsAndExpensesReceivedAmt=n6;
allowableExpensesAmt = n7+n8;
totalFromAllEmployments = (payFromAllEmploymentsAmt + benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
selfEmploymentIncome=(n9-n10)+n11;//£54095
netBusinessProfitForTaxPurpose = selfEmploymentIncome - n12;//46,800
totalincome = totalFromAllEmployments + selfEmploymentIncome; //72960
incomeTaxReliefAmt = n12 ; //7295.00 
totlIncome =  totalincome -(personalAllowanceRate + incomeTaxReliefAmt);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);
wLib.explicitWait(driver, 5,amountProfitFromSelfEmployment);
Assert.assertEquals(amountProfitFromSelfEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(selfEmploymentIncome)));
Reporter.log("Profit From Self Employment verified: "+amountProfitFromSelfEmployment.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension = taxLimit1Uk + (n3 * giftAidRate);//48250
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//£6,960.00
heigherRatePayPension=totlIncome - basicRatePayPension;//31,020.00	
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//12,408.00
totIncomeTaxDue=dueTax1 + dueTax2;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
//max_NIC + nIC2_annual_limit -> 3,569.69
//n14 * nIC1_rate -> 1,209.12
total1 = (max_NIC + nIC2_annual_limit)-((n14 * nIC1_rate)+class2Amount);//2206.6
total2 = roundDown2(total1/class4LPLRate);//24511.11
total3 = class4UPLAmt - class4LPLAmt; //37,926
total4 = total3 -total2;//36,412.09
total5 = roundDown2(total4 * class4UPLRate);//728.24
total6 =(netBusinessProfitForTaxPurpose - class4UPLAmt) * class4UPLRate;//9
class4Amt1 = total1 + total5 + total6;
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",(class4Amt1)));
Reporter.log("Amaount of Class 4 National Insurance contributions is verified :" + class4NationalInsurancecontributions1.getText(),true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);

class4_2Amt=class4Amt1+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
total7 = Math.floor((((totalincome - incomeTaxReliefAmt) - (n3 * giftAidRate))-CBC_HR_thresholdMin)*CBC_taper);
total8 = n1 * CBC_taper;
tot1 = totIncomeTaxDue + class4_2Amt + Math.floor(total7*total8);//15375.6
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(tot1)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);
totalTaxDeductedAmt=n5+n13;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
totalTaxDeductedAmt1 = tot1 - totalTaxDeductedAmt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt1)));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),IncomeTaxCls2andCls4NationalInsurContriDueMinusDeduction.getText());
Reporter.log("Balance Tax for the year verified is verified:" + taxForThisYear.getText(),true);
}
public void funcDelTest190(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 190",true);
checkLockbutton(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delChildBenefitCharge(driver);
delSEshort(driver);
delGiftAid(driver);
}
public void addTestCase191(WebDriver driver, String str1,String str2, String str3, String str4, String str5, String str6, String str7, String str8, String str9, String str10, String str11,String str12) throws Exception {
Reporter.log("Exceuting MTR Test Case 191",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
funcAddEmpIncomeWithTaxTakenOff(driver,str3, str4,str5);
clickIncome(driver);
addBank(driver, str6, str6, str7);
funcAddUntaxedInerest(driver,str8);
Reporter.log("Interest added Successfully",true);
addOtherDivident(driver,str9,"","");
addPensionTaxReliefForm(driver, str10, "", "", "");
addHighIncomeChildBenefitCharge(driver,str11,str12,"");

n1 = Double.parseDouble(str3);//37950
n2 = Double.parseDouble(str4);//5879.00
n3 = Double.parseDouble(str5);//450.00
n4 = Double.parseDouble(str8);//3678.00
n5 = Double.parseDouble(str9);//12750.00
n6 = Double.parseDouble(str10);//14418.00
n7 = Double.parseDouble(str11);//4539.00
n8 = Double.parseDouble(str12);//3
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n1;
allowableExpensesAmt= n3; 
totalFromAllEmployments=payFromAllEmploymentsAmt-allowableExpensesAmt;
dividendsFromUKCompaniesAmt=n5;
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""), String.format("%.2f",payFromAllEmploymentsAmt));
Reporter.log("Payment From employer verified: "+payFromAllEmployments.getText(), true);
Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);
Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(Math.floor(n4))));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);

totalincome=totalFromAllEmployments+dividendsFromUKCompaniesAmt+n4;
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
totlIncome= totalincome - personalAllowanceRate;
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);


basicRatePayPension=totlIncome-(dividendsFromUKCompaniesAmt+n4);//£25,650.00
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate; //£5,130.00

basicRateSaving=n4-(nilRate1);//2,678.00		
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*(BR_rate);//535.60
basicRateDividends=dividendsFromUKCompaniesAmt-dividentNillRate;
Reporter.log("Basic Rate of Dividend: "+basicRateDividends,true);
dueTax3=round((basicRateDividends*dividendTaxBasicRate)/100,2);//806.25
taxDueInc=dueTax1+dueTax2+dueTax3;
Reporter.log("Income Tax Due amount: "+taxDueInc,true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
totalTaxDeductedAmt=n2;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=taxDueInc-totalTaxDeductedAmt;
Assert.assertEquals(totalIncomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxBalance)));//£592.85
Reporter.log("Amount of Total Income Tax Due is Verified: "+totalIncomeTaxDue.getText(),true);
Assert.assertEquals(taxForThisYear.getText(),totalIncomeTaxDue.getText());
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void delTestCase191(WebDriver driver) throws Exception 
{
Reporter.log("Deleting MTR Test Case 191",true);
checkLockbutton(driver);
clickIncome(driver);	
delInterestfromUKbanks(driver);
delOtherDivident(driver);
clickEmployment(driver);
delEmpInfo(driver);
delPensionTaxRelief(driver);
delChildBenefitCharge(driver);
}
public void addTestCase5(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22)throws Exception
{
Reporter.log("Exceuting MTR Test Case 5",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
addPensionTaxReliefForm(driver,"",str4, "","");
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
businessNameTxtBox.clear();
businessNameTxtBox.sendKeys(str5);
descriptionofBusinessTxtBox.clear();
descriptionofBusinessTxtBox.sendKeys(str6);
booksAccoutsStartDateTxtBox.clear();
booksAccoutsStartDateTxtBox.sendKeys(str7);
businessBooksEnddateTxtBox.clear();
businessBooksEnddateTxtBox.sendKeys(str8);
businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
wLib.explicitWait(driver, 2,trunoverTxtBox);
//Business Income
trunoverTxtBox.clear();
trunoverTxtBox.sendKeys(str9);
//Business Expenses
goodsOfCostfullTxtBox.clear();
goodsOfCostfullTxtBox.sendKeys(str10);
wagesSalariesandOtherStaffCostsTxtBox.clear();
wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str11);
travelexpensesTxtBox.clear();
travelexpensesTxtBox.sendKeys(str12);
rentInsurancecostTxtBox.clear();
rentInsurancecostTxtBox.sendKeys(str13);
advertisingandEntertainmentCostTxtBox.clear();
advertisingandEntertainmentCostTxtBox.sendKeys(str14);
interestbankTxtBox.clear();
interestbankTxtBox.sendKeys(str15);
bankCreditandOtherFinancialChargesTxtBox.clear();
bankCreditandOtherFinancialChargesTxtBox.sendKeys(str16);
otherbusinessexpensesTxtBox.clear();
otherbusinessexpensesTxtBox.sendKeys(str17);
basisPeriodBeganTxtBox.clear();
basisPeriodBeganTxtBox.sendKeys(str18);
basisPeriodEndedTxtBox.clear();
basisPeriodEndedTxtBox.sendKeys(str19);
accountingperiodandProfitlossTxtBox.clear();
accountingperiodandProfitlossTxtBox.sendKeys(str20);
anyBusinessIncomeTxtBox.clear();
anyBusinessIncomeTxtBox.sendKeys(str21);
n1 = Double.parseDouble(str3);//3678.00
n2= Double.parseDouble(str4);//1200.00
n3 = Double.parseDouble(str9);//74900.00
n4 = Double.parseDouble(str10);//25000.00
n5 = Double.parseDouble(str11);//2000.00
n6 = Double.parseDouble(str12);//12000.00
n7 = Double.parseDouble(str13);//10800.00
n8 = Double.parseDouble(str14);//1400.00
n9 = Double.parseDouble(str15);//5800.00
n10 = Double.parseDouble(str16);//1500.00
n11 = Double.parseDouble(str17);//1500.00
n12 = Double.parseDouble(str20);//-1010.00
n13 = Double.parseDouble(str21);//300.00
n14 = Double.parseDouble(str22);//2600.00
//Balance Sheet
//Capital Account
balanceStartPeriodTxtBox.clear();
balanceStartPeriodTxtBox.sendKeys(str22);
SaveBtn1.click();
wLib.explicitWait(driver, 5,editFullRecordsSE);
editFullRecordsSE.click();
total1=n4+n5+n6+n7+n8+n9+n10+n11;
t1=String.format("%.2f",(total1));
wLib.explicitWait(driver, 5,businessExpTotalExpensesTxtBox);
value1=businessExpTotalExpensesTxtBox.getAttribute("value");
Assert.assertEquals(value1, t1);
Reporter.log("Total expenses Verified: "+value1,true);
x1=Double.parseDouble(value1);
totlIncome=n3-x1;
t2=String.format("%.2f",(totlIncome));
//Net profit or loss - Fetch Text
string1=netProfitTxtBox.getAttribute("value");
Assert.assertEquals(string1, t2);
Reporter.log("Net profit Verified: "+string1,true);
netBusinessProfit=Double.parseDouble(netBusinessProfitfortaxpurposeTxtBox.getAttribute("value"));
adjustedProfit=Double.parseDouble(adjustedProfitTxtBox.getAttribute("value"));
Assert.assertEquals(adjustedProfit,(netBusinessProfit+n12));
Reporter.log("Adjusted profit for current tax year: " +adjustedProfitTxtBox,true);

totalProfitFromBusiness=Double.parseDouble(totalProfitFromBusinessTxtBox.getAttribute("value"));
Assert.assertEquals(totalProfitFromBusiness,(adjustedProfit+n13));	
Reporter.log("Total taxable profit from this business Verified: "+totalProfitFromBusiness,true);
string2=netprofitorlossTxtBox.getAttribute("value");
Assert.assertEquals(string2,string1);
Reporter.log("Capital amount Net profit Verified: "+string2,true);
n15 = Double.parseDouble(string2);//14900.00

balanceEndPeriod=Double.parseDouble(balanceEndPeriodTxtBox.getAttribute("value"));
Assert.assertEquals(balanceEndPeriod,(n14+n15));
Reporter.log("Balance at end of period Verified: "+balanceEndPeriod,true);
Reporter.log("Total taxable profit from this business: "+string2,true);
SaveBtn1.click();
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,marriageAllowanceForm);
marriageAllowanceForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,receiveMarriageAllowancefromChkBox);
if (receiveMarriageAllowancefromChkBox.getAttribute("checked")!="checked")
{
receiveMarriageAllowancefromChkBox.click();
SaveBtn2.click();
}
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5, TotalIncomeReceived);
expResult1=TotalIncomeReceived.getText().substring(1).replace(",", "");
calculation1=Double.parseDouble(expResult1);
total1=totalProfitFromBusiness+n1;
Assert.assertEquals(calculation1,total1);
Reporter.log("Total income received Verified: "+calculation1,true);
expResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
calculation2=Double.parseDouble(expResult1);
total2=calculation1 - (n2+personalAllowanceRate);
Assert.assertEquals(calculation2,total2);
Reporter.log("Total income on which tax is due Verified: "+calculation2,true);
startedRatePayPension=(total2-n1)*startedRateScott;
Reporter.log("startedRatePayPension: "+startedRatePayPension,true);
totIncomeTaxDue=round(Double.parseDouble(incomeTaxDue.getText().substring(1).replace(",", "")),2);
Reporter.log("Total Income Tax due: "+totIncomeTaxDue,true);
incomeTaxCharged=round(startedRatePayPension,2);
Reporter.log("incomeTaxCharged: "+incomeTaxCharged,true);
Assert.assertEquals(totIncomeTaxDue,incomeTaxCharged);
Reporter.log("Income Tax due Verified Successfully: "+totIncomeTaxDue,true);
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",((totalProfitFromBusiness-class4LPLAmt)*class4LPLRate)));
Reporter.log("Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
}
public void funcDelMTRTest5(WebDriver driver)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
Reporter.log("Deleting MTR Test Case 5",true);
delSelfEmpFull(driver);
Reporter.log("Self Employment income Deleted Successfully",true);
clickIncome(driver);
delInterestfromUKbanks(driver);
Reporter.log("UnTaxed amount Deleted Successfully",true);
delPensionTaxRelief(driver);
Reporter.log("Paying into retirement annuity Deleted Successfully",true);
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
wLib.explicitWait(driver, 5,marriageAllowanceForm);
marriageAllowanceForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,receiveMarriageAllowancefromChkBox);
if (receiveMarriageAllowancefromChkBox.getAttribute("checked")=="checked")
{
receiveMarriageAllowancefromChkBox.click();
SaveBtn2.click();
}
}	
public void addTestCase6(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7)throws Exception
	{
Reporter.log("Exceuting MTR Test Case 6",true);
wLib = new WaitStatementLib();	
cis = new CISPage(driver);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
wLib.explicitWait(driver, 10,frm1Btn);	
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str4);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str5);
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str6);
stateBenefitsSaveBtn.click();
Reporter.log("UK pensions, annuities and other state benefits received added Successfully",true);
dividentUKCompanies(driver,"Company1", "Test", str7);	
Reporter.log("Dividend added Successfully",true);
n1 = Double.parseDouble(str3);//21989.00
n2= Double.parseDouble(str4);//6198.00
n3 = Double.parseDouble(str5);//17563.00
n4 = Double.parseDouble(str6);//3152.60
n5 = Double.parseDouble(str7);//4250.60
wLib.explicitWait(driver, 10,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 10, taxCalSummaryLink);
taxCalSummaryLink.click();
expResult1=TotalIncomeReceived.getText().substring(1).replace(",", "");
calculation1=Double.parseDouble(expResult1);
total1=n1+n2+n3+Math.floor(n5);
Assert.assertEquals(calculation1,total1);
Reporter.log("Total income received Verified: "+calculation1,true);
expResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
calculation2=Double.parseDouble(expResult1);
total2=calculation1 -personalAllowanceRate;
Assert.assertEquals(calculation2,total2);
Reporter.log("Total income on which tax is due Verified: "+calculation2,true);
startedRatePayPension=SR_bandScott*startedRateScott;
Reporter.log("Started Rate of Pay Pension: "+startedRatePayPension,true);
basicRatePayPension=amtBasicRateScott *basicRateScott;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
intermediateRatePayPension=((n2+n3)-(SR_bandScott+amtBasicRateScott))*intermediateRateScott;
Reporter.log("Intermediate Rate of Pay Pension: "+intermediateRatePayPension,true);
Assert.assertEquals(SR_bandScott+amtBasicRateScott+((n2+n3)-(SR_bandScott+amtBasicRateScott)),n2+n3);
Reporter.log("Pay, pensions, profit etc. (Scottish income tax rate) amount is Verified",true);
total3=round(n1-(personalAllowanceRate+nilRate2),2);
Reporter.log("total3: " +total3,true);
basicRateSaving=(total1*basicRateScott);
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
Assert.assertEquals(total3+nilRate2,n1-personalAllowanceRate);
Reporter.log("Savings interest from banks or building societies, securities etc. amount is Verified",true);
totalTaxDeductedAmt=round(Double.parseDouble(totalTaxDeducted.getText().substring(1).replace(",", "")),2);
Reporter.log("totalTaxDeductedAmt: "+totalTaxDeductedAmt,true);
Assert.assertEquals(totalTaxDeductedAmt,n4);
Reporter.log("Total tax deducted is Verified: "+totalTaxDeductedAmt,true);
	
}
public void funcDelMTRTest6(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 6",true);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
Reporter.log("UnTaxed amount Deleted Successfully",true);
deleteDivident(driver);
delUKPensionsAnnuities(driver);
}
public void addTestCase7(WebDriver driver, String str1,String str2, String str3, String str4, String str5,String str6) throws Exception {
wLib = new WaitStatementLib();	
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 7",true);
clickIncome(driver);
funcAddEmployerForMTR(driver, str1, str2);
funcAddEmpIncomeWithTaxTakenOff(driver,str3, str4,"");
wLib.explicitWait(driver, 10,taxReliefsLink);
addPensionTaxReliefForm(driver,"",str5, "","");
addTaxUnderPaid(driver, "", "", str6);

wLib.explicitWait(driver, 30,taxReturnLink);
n1=Double.parseDouble(str3);//33254.00
n2=Double.parseDouble(str4);//2000.00
n3=Double.parseDouble(str5);//1200
n4=Double.parseDouble(str6);//2000
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
wLib.explicitWait(driver, 5,TotalIncomeReceived);
displayTotal=TotalIncomeReceived.getText().substring(1).replace(",", "");
totalincome=Double.parseDouble(displayTotal);
Assert.assertEquals(totalincome,n1);
Reporter.log("Total income received Verified: "+totalincome,true);
taxdueOnInc1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",","");
taxDueInc = totalincome - (personalAllowanceRate+n3);	
taxTotal=String.format("%.2f",(taxDueInc));
Assert.assertEquals(taxdueOnInc1,taxTotal);
Reporter.log("Total income on which tax is due is Verified: "+taxdueOnInc1,true);
basicRatePayPension=taxDueInc*(BR_rate);
taxdueOnInc1=incomeTaxDue.getText().substring(1).replace(",","");
dueTax1=Double.parseDouble(taxdueOnInc1);
Assert.assertEquals(dueTax1,basicRatePayPension);
Reporter.log("Income Tax due is Verified: "+dueTax1,true);
totIncomeTaxDue=dueTax1-(n2-n4);
taxFinal=String.format("%.2f",(totIncomeTaxDue));
taxFinalUI=taxForThisYear.getText().substring(1).replace(",", "");
Assert.assertEquals(taxFinalUI,taxFinal);
Reporter.log("Balance Tax for the year is verified successfully: " +taxFinalUI,true);
}

public void funcDelMTRTest7(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 7",true);
	wLib = new WaitStatementLib();
	cis=new CISPage(driver);
	checkLockbutton(driver);
	clickIncome(driver);
	clickEmployment(driver);
	delEmpInfo(driver);
	delPensionTaxRelief(driver);
	delUnderpaidTax(driver);
	
}
public void addTestCase8(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15, String str16, String str17,String str18, String str19, String str20)throws Exception
{
Reporter.log("Exceuting MTR Test Case 8",true);
	wLib = new WaitStatementLib();
	clickIncome(driver);
	wLib.explicitWait(driver, 5,dividentLink);
	dividentLink.click();
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis = new CISPage(driver);
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str1);
	stateBenefitsSaveBtn.click();
	wLib.explicitWait(driver, 5,selfEmploymentLink);
	selfEmploymentLink.click();
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	businessNameTxtBox.clear();
	businessNameTxtBox.sendKeys(str2);//6
	descriptionofBusinessTxtBox.clear();
	descriptionofBusinessTxtBox.sendKeys(str3);//7
	booksAccoutsStartDateTxtBox.clear();
	booksAccoutsStartDateTxtBox.sendKeys(str4);//8
	businessBooksEnddateTxtBox.clear();
	businessBooksEnddateTxtBox.sendKeys(str5);//9
	businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
	wLib.explicitWait(driver, 5,trunoverTxtBox);
	//Business Income
	trunoverTxtBox.clear();
	trunoverTxtBox.sendKeys(str6);//10
	//Business Expenses
	goodsOfCostfullTxtBox.clear();
	goodsOfCostfullTxtBox.sendKeys(str7);//11
	wagesSalariesandOtherStaffCostsTxtBox.clear();
	wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str8);//12
	travelexpensesTxtBox.clear();
	travelexpensesTxtBox.sendKeys(str9);//13
	rentInsurancecostTxtBox.clear();
	rentInsurancecostTxtBox.sendKeys(str10);//14
	advertisingandEntertainmentCostTxtBox.clear();
	advertisingandEntertainmentCostTxtBox.sendKeys(str11);//15
	interestbankTxtBox.clear();
	interestbankTxtBox.sendKeys(str12);//16
	bankCreditandOtherFinancialChargesTxtBox.clear();
	bankCreditandOtherFinancialChargesTxtBox.sendKeys(str13);//17
	otherbusinessexpensesTxtBox.clear();
	otherbusinessexpensesTxtBox.sendKeys(str14);//18
	basisPeriodBeganTxtBox.clear();
	basisPeriodBeganTxtBox.sendKeys(dateStart);
	basisPeriodEndedTxtBox.clear();
	basisPeriodEndedTxtBox.sendKeys(dateEnd);
	accountingperiodandProfitlossTxtBox.clear();
	accountingperiodandProfitlossTxtBox.sendKeys(str15);//19
	anyBusinessIncomeTxtBox.clear();
	anyBusinessIncomeTxtBox.sendKeys(str16);//20
	n1 = Double.parseDouble(str1);//6200.00
	n2 = Double.parseDouble(str6);//74900.00
	n3 = Double.parseDouble(str7);//25000.00
	n4 = Double.parseDouble(str8);//2000.00
	n5 = Double.parseDouble(str9);//12000.00
	n6 = Double.parseDouble(str10);//10800.00
	n7 = Double.parseDouble(str11);//1400.00
	n8 = Double.parseDouble(str12);//5800.00
	n9 = Double.parseDouble(str13);//1500.00
	n10 = Double.parseDouble(str14);//1500.00
	n11 = Double.parseDouble(str15);//-1010.00
	n12 = Double.parseDouble(str16);//300.00
	n13 = Double.parseDouble(str17);//2600.00
	balanceStartPeriodTxtBox.clear();
	balanceStartPeriodTxtBox.sendKeys(str17);
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,editFullRecordsSE);
	editFullRecordsSE.click();
	total1=n3+n4+n5+n6+n7+n8+n9+n10;
	t1=String.format("%.2f",(total1));
	value1=businessExpTotalExpensesTxtBox.getAttribute("value");
	Assert.assertEquals(value1, t1);
	Reporter.log("Total expenses Verified: "+value1,true);
	x1=Double.parseDouble(value1);
	totlIncome=n2-x1;//14900
	t2=String.format("%.2f",(totlIncome));
	//Net profit or loss - Fetch Text
	string1=netProfitTxtBox.getAttribute("value");
	Assert.assertEquals(string1, t2);
	Reporter.log("Net profit Verified: "+string1,true);
	netBusinessProfit=Double.parseDouble(netBusinessProfitfortaxpurposeTxtBox.getAttribute("value"));
	adjustedProfit=Double.parseDouble(adjustedProfitTxtBox.getAttribute("value"));
	Assert.assertEquals(adjustedProfit,(netBusinessProfit+n11));
	Reporter.log("Adjusted profit for current tax year: " +adjustedProfitTxtBox,true);
	
	totalProfitFromBusiness=Double.parseDouble(totalProfitFromBusinessTxtBox.getAttribute("value"));
	Assert.assertEquals(totalProfitFromBusiness,(adjustedProfit+n12));	
	Reporter.log("Total taxable profit from this business Verified: "+totalProfitFromBusiness,true);
	string3=netprofitorlossTxtBox.getAttribute("value");
	Assert.assertEquals(string3,string1);
	Reporter.log("Capital amount Net profit Verified: "+string3,true);
	n14 = Double.parseDouble(string3);
	balanceEndPeriod=Double.parseDouble(balanceEndPeriodTxtBox.getAttribute("value"));
	Assert.assertEquals(balanceEndPeriod,(n13+n14));
	Reporter.log("Balance at end of period Verified: "+balanceEndPeriod,true);
	Reporter.log("Balance at end of period Verified: "+string3,true);
	SaveBtn1.click();
	driver.navigate().refresh();
	Class2Class4NICsForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
	ExemptfromPayingClass4NICs.click();
	SaveBtn2.click(); 
	driver.navigate().refresh();
	wLib.explicitWait(driver, 5,additionalInformationLink);
	additionalInformationLink.click();
	wLib.explicitWait(driver, 5,commonEditBtn);
	commonEditBtn.click();
	wLib.explicitWait(driver, 5,spousesNameTxtBox);
	spousesNameTxtBox.clear();
	spousesNameTxtBox.sendKeys(str18);
	spousesDateOfBirthTxtBox.clear();
	spousesDateOfBirthTxtBox.sendKeys(str19);
	dateOfMarriageOrCivilPartnershipTxtBox.clear();
	dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str20);
	saveAdditionalInfoBtn.click();
	driver.navigate().refresh();
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	displayTotal=TotalIncomeReceived.getText().substring(1).replace(",", "");
	totalincome=Double.parseDouble(displayTotal);
	Assert.assertEquals(totalincome,totalProfitFromBusiness+n1);
	Reporter.log("Total income received Verified: "+totalincome,true);
	taxdueOnInc1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",","");
	taxDueInc = totalincome - personalAllowanceRate;
	taxTotal=String.format("%.2f",(taxDueInc));
	Assert.assertEquals(taxdueOnInc1,taxTotal);
	Reporter.log("Total income on which tax is due is Verified: "+taxdueOnInc1,true);
	basicRatePayPension=taxDueInc*(BR_rate);
	taxdueOnInc1=incomeTaxDue.getText().substring(1).replace(",","");
	dueTax1=Double.parseDouble(taxdueOnInc1);
	Assert.assertEquals(dueTax1,basicRatePayPension);
	Reporter.log("Income Tax due is Verified: "+dueTax1,true);
	calculateMAT=round(maxMAT-(maxMAT / month),2);
	total1=round(calculateMAT*MATrate,2);
	Reporter.log("calculateMAT: "+calculateMAT,true);
	Reporter.log("total1: "+total1,true);
	amtMAT=Double.parseDouble(taxSummaaryMarriedCoupleAllowanceAmt.getText().substring(1).replace(",",""));
	Assert.assertEquals(amtMAT,total1);
	Reporter.log("Marriage Allowance Transfer is Verified: "+amtMAT,true);
	
	taxFinal=taxForThisYear.getText().substring(1).replace(",","");
	finalAmount=basicRatePayPension-total1;
	FinalCalculation=String.format("%.2f",finalAmount);
	taxFinal=taxForThisYear.getText().substring(1).replace(",","");
	Assert.assertEquals(taxFinal,FinalCalculation);
	Reporter.log("Balance for this year: "+taxFinal,true);

}
public void funcDelMTRTest8(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 8",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
delSelfEmpFull(driver);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
ExemptfromPayingClass4NICs.click();
SaveBtn2.click(); 
driver.navigate().refresh();
clickIncome(driver);
wLib.explicitWait(driver, 5,dividentLink);
dividentLink.click();
delUKPensionsAnnuities(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase11(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17)throws Exception
{

	Reporter.log("Exceuting MTR Test Case 11",true);
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);//21005.00
	addOtherDivident(driver,str4,"0.00","0.00");
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str5);//8239.00
	stateBenefitsSaveBtn.click();
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5,editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str6);
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str7);
	intrstAndOthrFinancialChrgsTxtBox.clear();
	intrstAndOthrFinancialChrgsTxtBox.sendKeys(str8);
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str9);
	ResidentialfinancecostsTxtBox.clear();
	ResidentialfinancecostsTxtBox.sendKeys(str10);
	SaveBtn1.click();
	driver.navigate().refresh();
	wLib.explicitWait(driver, 5,adjustedProfitForTheYear);
	string1=adjustedProfitForTheYear.getAttribute("value");
	calculation1=Double.parseDouble(string1);
	string2=taxableProfitForTheYear.getAttribute("value");
	calculation2=Double.parseDouble(string2);
	clickIncome(driver);
	funcAddEmployerForMTR(driver, str11, str12);
	funcAddEmpIncomeWithTaxTakenOff(driver, str13, str14,"");
	addTaxUnderPaid(driver, "", "", str15);
	addPensionTaxReliefForm(driver,str16,"", "", "");
	addGiftAidPayment(driver, str17);
	n1 = Double.parseDouble(str3);//n1 = 3678
	n2 = Double.parseDouble(str4);//n2 =12750
	n3 = Double.parseDouble(str5);//n3 = 6200
	n4 = Double.parseDouble(str7);//n4 = 7800
	n5 = Double.parseDouble(str8);//n5 =3000
	n6 = Double.parseDouble(str9);//n6 = 1200
	n7 = Double.parseDouble(str10);//n7 = 625
	n8 = Double.parseDouble(str13);//n8 = 33254
	n9 = Double.parseDouble(str14);//n9 = 2000
	n10 = Double.parseDouble(str15);//n0 = 2000
	n11 = Double.parseDouble(str15);//3600
	n12 = Double.parseDouble(str16);//2400
	total1=n4-(n5+n6);//3600.00
	totalincome=(total1+n1+n2+n3+n8)-personalAllowanceRate;
	taxDueInc=((totalincome-(taxLimit1Uk+nilRate2+dividentNillRate))*(dividendTaxHigherRate/100))+amount1;
	Totaltax=(taxDueInc-(n7*reliefFinancerate))-(n9-n10);
	Assert.assertEquals(calculation1,total1);
	Reporter.log("Adjusted profit for the year verified successfully: "+calculation1,true);
	Assert.assertEquals(calculation2,total1);
	Reporter.log("Taxable profit for the year verified successfully: "+calculation2,true);
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(n8)));
	Reporter.log("Amount of pay From All Employments is Verified: "+payFromAllEmployments.getText(),true);
	Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(total1)));
	Reporter.log("Amount of Profit From UK Land And Property is Verified: "+amountProfitFromUKLandAndProperty.getText(),true);
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
	Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	string1=amountDividendsfromUKCompanies.getText();
	String divVal[]=string1.split("£");
	Assert.assertEquals(divVal[2].replace(",", ""),String.format("%.2f",(n2)));
	Reporter.log("Amount of Dividends from UK Companies is Verified: "+amountDividendsfromUKCompanies.getText(),true);
	wLib.explicitWait(driver, 5,amountUKpensionsAndStateBenefits);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n3)));
	Reporter.log("Amount of UK pensions and State Benefits is Verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(total1+n1+n2+n3+n8)));
	Reporter.log("Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
	Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
	Reporter.log("Balance for the year is Verified: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest11(WebDriver driver)throws Exception
{
wLib = new WaitStatementLib();
cis=new CISPage(driver);
funcDelMTRTest16(driver);
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
Reporter.log("Employment income Deleted Successfully",true);
delUnderpaidTax(driver);
Reporter.log("outstanding Debit amount Deleted Successfully",true);
delPensionTaxRelief(driver);
delGiftAid(driver);
}
public void addTestCase12(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8)throws Exception
{
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 12",true);
	clickIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);//32493.00
	dividentUKCompanies(driver,"Company1","",str4);//4555.00
	addOtherUKIncome(driver,str5,"",str6,"",str7);//376.18, 75.23
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	totStatPension.clear();
	totStatPension.sendKeys(str8);//8052
	stateBenefitsSaveBtn.click();
	n1 = Double.parseDouble(str3);//n1 = 32493.00
	n2 = Double.parseDouble(str4);//n2 =4555.00
	n3 = Double.parseDouble(str5);//n3 = 376.18
	n4 = Double.parseDouble(str6);//n4 = 75.23
	n5 = Double.parseDouble(str8);//n5 =8052
	totalincome=(n1+n2+(Math.floor(n3))+n5)-personalAllowanceRate;
	total1=((totalincome-n2)-(SR_band+nilRate1))*(BR_rate);
	Reporter.log("Tax amount 1: "+ total1,true);
	total2=(n2-dividentNillRate)*(dividendTaxBasicRate/100);
	Reporter.log("Tax amount 2: "+ total2,true);
	taxDueInc=roundDown2(total1+total2);
	Reporter.log("Final Tax amount: "+ taxDueInc,true);
	Totaltax=taxDueInc-n4;
	wLib.explicitWait(driver, 5,taxReturnLink);
	taxReturnLink.click();
	wLib.explicitWait(driver, 5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(n1)));
	Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	string1=amountDividendsfromUKCompanies.getText();
	String divVal[]=string1.split("£");
	Assert.assertEquals(divVal[2].replace(",", ""),String.format("%.2f",(n2)));
	Reporter.log("Amount of Dividends from UK Companies is Verified: "+amountDividendsfromUKCompanies.getText(),true);
	wLib.explicitWait(driver, 5,amountUKpensionsAndStateBenefits);
	Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(n5)));
	Reporter.log("Amount of UK pensions and State Benefits is Verified: "+amountUKpensionsAndStateBenefits.getText(),true);
	otherIncomeAmt=n3;
	Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",(Math.floor(otherIncomeAmt))));
	Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);
	Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(n1+n2+(Math.floor(n3))+n5)));
	Reporter.log("Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);
	Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
	Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
	Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(Totaltax)));
	Reporter.log("Balance for the year is Verified: "+taxForThisYear.getText(),true);
	
}
public void funcDelMTRTest12(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 12",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
delOtherUKIncome(driver);
deleteDivident(driver);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
stateBenefitsSaveBtn.click();
driver.navigate().refresh();
}
public void addTestCase13(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28,String str29,String str30,String str31,String str32,String str33,String str34,String str35,String str36,String str37)throws Exception
{
	wLib = new WaitStatementLib();
	cis = new CISPage(driver);
	Reporter.log("Exceuting MTR Test Case 13",true);
	n1 = Double.parseDouble(str3);//3678.00
	Reporter.log("n1: "+n1,true);
	n2 = Double.parseDouble(str4);//6200
	Reporter.log("n2: "+n2,true);
	n3= Double.parseDouble(str5);//1500
	Reporter.log("n3: "+n3,true);
	n4= Double.parseDouble(str6);//300.00
	Reporter.log("n4: "+n4,true);
	n5 = Double.parseDouble(str10);//33254.00
	Reporter.log("n5: "+n5,true);
	n6= Double.parseDouble(str11);//2000.00
	Reporter.log("n6: "+n6,true);
	n7 = Double.parseDouble(str13);//7800
	Reporter.log("n7: "+n7,true);
	n8 = Double.parseDouble(str14);//3000
	Reporter.log("n8: "+n8,true);
	n9 = Double.parseDouble(str15);//1200
	Reporter.log("n9: "+n9,true);
	n10 = Double.parseDouble(str16);//1200.00
	Reporter.log("n10: "+n10,true);
	n11 = Double.parseDouble(str17);//2400
	Reporter.log("n11: "+n11,true);
	n12 = Double.parseDouble(str21);//74900
	Reporter.log("n12: "+n12,true);
	n13 = Double.parseDouble(str22);//25000
	Reporter.log("n13: "+n13,true);
	n14 = Double.parseDouble(str23);//2000
	Reporter.log("n14: "+n14,true);
	n15 = Double.parseDouble(str24);//12000
	Reporter.log("n15: "+n15,true);
	n16 = Double.parseDouble(str25);//10800
	Reporter.log("n16: "+n16,true);
	n17 = Double.parseDouble(str26);//1400
	Reporter.log("n17: "+n17,true);
	n18 = Double.parseDouble(str27);//5800
	Reporter.log("n18: "+n18,true);
	n19 = Double.parseDouble(str28);//1500
	Reporter.log("n19: "+n19,true);
	n20 = Double.parseDouble(str29);//1500
	Reporter.log("n20: "+n20,true);
	n21 = Double.parseDouble(str30);//-1010
	Reporter.log("n21: "+n21,true);
	n22 = Double.parseDouble(str31);//300
	Reporter.log("n22: "+n22,true);
	n23 = Double.parseDouble(str32);//2600
	Reporter.log("n23: "+n23,true);
	n25 = Double.parseDouble(str33);//617
	Reporter.log("n25: "+n25,true);
	n26 = Double.parseDouble(str37);//2000
	Reporter.log("n26: "+n26,true);
	verifyBankIncome(driver);
	addBank(driver,str1, str1, str2);
	funcAddUntaxedInerest(driver,str3);//3678.00
	Reporter.log("Interest added Successfully",true);
	wLib.explicitWait(driver, 5,frm1Btn);
	frm1Btn.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 5,totStatPension);
	totStatPension.clear();
	totStatPension.sendKeys(str4);//6200.00
	stateBenefitsSaveBtn.click();
	Reporter.log("Total State Pension added Successfully",true);
	addOtherUKIncome(driver,str5,"",str6,"",str7);//1500.00, 300.00
	Reporter.log("Other UK Income added Successfully",true);
	funcAddEmployerForMTR(driver, str8, str9);
	funcAddEmpIncomeWithTaxTakenOff(driver, str10,str11,"");//33254.00, 2000.00
	Reporter.log("Payment from employer is added Successfully",true);
	clickIncome(driver);
	wLib.explicitWait(driver, 5,incmFrmProLink);
	incmFrmProLink.click();
	wLib.explicitWait(driver, 5, editBtn);
	editBtn.click();
	wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
	noOfPropertiesRentedOutTxtBox.clear();
	noOfPropertiesRentedOutTxtBox.sendKeys(str12);//1
	totalIncomePropertyLinkTxtBox.clear();
	totalIncomePropertyLinkTxtBox.sendKeys(str13);//7800.00
	intrstAndOthrFinancialChrgsTxtBox.clear();
	intrstAndOthrFinancialChrgsTxtBox.sendKeys(str14);//3000.00
	othrPropertyExpensesTxtBox.clear();
	othrPropertyExpensesTxtBox.sendKeys(str15);//1200.00
	SaveBtn1.click();
	driver.navigate().refresh();
	total1=n7-(n8+n9);//3600.00
	wLib.explicitWait(driver, 5,adjustedProfitForTheYear);
	string1=adjustedProfitForTheYear.getAttribute("value");
	calculation1=Double.parseDouble(string1);
	string2=taxableProfitForTheYear.getAttribute("value");
	calculation2=Double.parseDouble(string2);
	Assert.assertEquals(calculation1,total1);
	Reporter.log("Adjusted profit for the year verified successfully: "+calculation1,true);
	Assert.assertEquals(calculation2,total1);
	Reporter.log("Taxable profit for the year verified successfully: "+calculation2,true);
	Reporter.log("Income from Property added Successfully",true);
	addPensionTaxReliefForm(driver,"", str16, "", "");
	Reporter.log("Payment to a retirement annuity added Successfully",true);
	verifyGiftAid(driver);
	addGiftAidPayment(driver, str17);
	Reporter.log("Payment gift aid added Successfully",true);
	clickIncome(driver);
	wLib.explicitWait(driver, 5,selfEmploymentLink);
	selfEmploymentLink.click();
	//delSAFull(driver);
	wLib.explicitWait(driver, 10,frm1Btn);
	frm1Btn.click();
	businessNameTxtBox.clear();
	businessNameTxtBox.sendKeys(str18);
	descriptionofBusinessTxtBox.clear();
	descriptionofBusinessTxtBox.sendKeys(str19);
	booksAccoutsStartDateTxtBox.clear();
	booksAccoutsStartDateTxtBox.sendKeys(dateStart);
	businessBooksEnddateTxtBox.clear();
	businessBooksEnddateTxtBox.sendKeys(str20);
	businessBooksEnddateTxtBox.sendKeys(Keys.TAB);
	wLib.explicitWait(driver, 2,trunoverTxtBox);
	//Business Income
	trunoverTxtBox.clear();
	trunoverTxtBox.sendKeys(str21);//16- 74900.00
	//Business Expenses
	goodsOfCostfullTxtBox.clear();
	goodsOfCostfullTxtBox.sendKeys(str22);//17-25000.00
	wagesSalariesandOtherStaffCostsTxtBox.clear();
	wagesSalariesandOtherStaffCostsTxtBox.sendKeys(str23);//18-2000.00
	travelexpensesTxtBox.clear();
	travelexpensesTxtBox.sendKeys(str24);//19- 12000.00
	rentInsurancecostTxtBox.clear();
	rentInsurancecostTxtBox.sendKeys(str25);//20-10800.00
	advertisingandEntertainmentCostTxtBox.clear();
	advertisingandEntertainmentCostTxtBox.sendKeys(str26);//21-1400.00
	interestbankTxtBox.clear();
	interestbankTxtBox.sendKeys(str27);//22-5800.00
	bankCreditandOtherFinancialChargesTxtBox.clear();
	bankCreditandOtherFinancialChargesTxtBox.sendKeys(str28);//23-1500.00
	otherbusinessexpensesTxtBox.clear();
	otherbusinessexpensesTxtBox.sendKeys(str29);//24-1500.00
	basisPeriodBeganTxtBox.clear();
	basisPeriodBeganTxtBox.sendKeys(dateStart);//25
	basisPeriodEndedTxtBox.clear();
	basisPeriodEndedTxtBox.sendKeys(dateEnd);//26
	accountingperiodandProfitlossTxtBox.clear();
	accountingperiodandProfitlossTxtBox.sendKeys(str30);//27 - (-1010.00)
	anyBusinessIncomeTxtBox.clear();
	anyBusinessIncomeTxtBox.sendKeys(str31);//28 - 300.00
	//Balance Sheet
	//Capital Account
	balanceStartPeriodTxtBox.clear();
	balanceStartPeriodTxtBox.sendKeys(str32);//29 - 2600.00
	SaveBtn1.click();
	wLib.explicitWait(driver, 5,editFullRecordsSE);
	editFullRecordsSE.click();
	total2=n13+n14+n15+n16+n17+n18+n19+n20;
	t1=String.format("%.2f",(total2));
	wLib.explicitWait(driver, 5,businessExpTotalExpensesTxtBox);
	value1=businessExpTotalExpensesTxtBox.getAttribute("value");
	Assert.assertEquals(value1, t1);
	Reporter.log("Total expenses Verified: "+value1,true);
	x1=Double.parseDouble(value1);
	totlIncome=n12-x1;
	t2=String.format("%.2f",(totlIncome));
	//Net profit or loss - Fetch Text
	string1=netProfitTxtBox.getAttribute("value");
	Assert.assertEquals(string1, t2);
	Reporter.log("Net profit Verified: "+string1,true);
	netBusinessProfit=Double.parseDouble(netBusinessProfitfortaxpurposeTxtBox.getAttribute("value"));
	adjustedProfit=Double.parseDouble(adjustedProfitTxtBox.getAttribute("value"));
	Assert.assertEquals(adjustedProfit,(netBusinessProfit+n21));
	Reporter.log("Adjusted profit for current tax year: " +adjustedProfitTxtBox,true);
	totalProfitFromBusiness=Double.parseDouble(totalProfitFromBusinessTxtBox.getAttribute("value"));
	Assert.assertEquals(totalProfitFromBusiness,(adjustedProfit+n22));	
	Reporter.log("Total taxable profit from this business Verified: "+totalProfitFromBusiness,true);
	string3=netprofitorlossTxtBox.getAttribute("value");
	Assert.assertEquals(string3,string1);
	Reporter.log("Capital amount Net profit Verified: "+string3,true);
	n24 = Double.parseDouble(string3);//14900.00
	balanceEndPeriod=Double.parseDouble(balanceEndPeriodTxtBox.getAttribute("value"));
	Assert.assertEquals(balanceEndPeriod,(n23+n24));
	Reporter.log("Balance at end of period Verified: "+balanceEndPeriod,true);
	Reporter.log("Total taxable profit from this business: "+string3,true);
	SaveBtn1.click();
	driver.navigate().refresh();
	Class2Class4NICsForm.click();
	cis.switchwindowNew(driver);
	
	wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);

	ExemptfromPayingClass4NICs.click();
	
	SaveBtn2.click(); 
	driver.navigate().refresh();
	
	Reporter.log("Self Employment Income added Successfully",true);
	wLib.explicitWait(driver, 5,linkOtherTaxInformation);
	linkOtherTaxInformation.click();
	wLib.explicitWait(driver,2,finishingTaxLink);
	finishingTaxLink.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver, 2,taxRoundedOffTxtBox);
	taxRoundedOffTxtBox.clear();
	otherInfoTxtBox.clear();
	taxRoundedOffTxtBox.sendKeys(str33);
	otherInfoTxtBox.sendKeys(str34);
	SaveBtn2.click();
	wLib.explicitWait(driver, 2,additionalInformationLink);
	additionalInformationLink.click();
	wLib.explicitWait(driver, 2,commonEditBtn);
	commonEditBtn.click();
	wLib.explicitWait(driver, 2,allMinimumAllowanceTransferToYouChkBox);
	allMinimumAllowanceTransferToYouChkBox.click();
	previousSpousesNameTxtBox.clear();
	previousSpousesNameTxtBox.sendKeys(str35);
	dateOfMarriageOrCivilPartnershipTxtBox.clear();
	dateOfMarriageOrCivilPartnershipTxtBox.sendKeys(str36);
	saveAdditionalInfoBtn.click();
	driver.navigate().refresh();
	try {
	wLib.explicitWait(driver, 2,allMinimumAllowanceTransferToYouChkBox);
	Reporter.log(allMinimumAllowanceTransferToYouChkBox.getAttribute("checked"),true);
	if(allMinimumAllowanceTransferToYouChkBox.getAttribute("checked")!="checked")
	{
	
allMinimumAllowanceTransferToYouChkBox.click();
	}
	saveAdditionalInfoBtn.click();
	driver.navigate().refresh();

}
catch (Exception e) {
	Reporter.log("Minimum allowance is to be given to you Check Box is clicked");
}
	addTaxUnderPaid(driver, "", "", str37);
	
	wLib.explicitWait(driver,2,taxReturnLink);
	taxReturnLink.click();
 	wLib.explicitWait(driver,5, taxCalSummaryLink);
	taxCalSummaryLink.click();
	totalincome=n5+totalProfitFromBusiness +total1 +n1+n2+n3;
	finalAmount=totalincome-(n10+personalAllowanceRate);
	actResult1=totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", "");
	expResult1 = String.format("%.2f",(finalAmount));
	Assert.assertEquals(actResult1,expResult1);
	Reporter.log("Verified Total income on which tax is due"+actResult1,true);
	basicRatePayPension=(taxLimit1Uk+(giftAidRate*n11))*BR_rate;
	Reporter.log("basicRatePayPension: "+basicRatePayPension,true);
	heigherRateDividends=(finalAmount-((taxLimit1Uk+(giftAidRate*n11))+n1))*HR_rate;
	Reporter.log("heigherRateDividends: "+heigherRateDividends,true);
	dueTax1=basicRatePayPension+heigherRateDividends;
	Reporter.log("dueTax1: "+dueTax1,true);
	
	heigherRateSaving=(n1-nilRate2)*HR_rate;
	Reporter.log("heigherRateSaving: "+heigherRateSaving,true);
	tax1=heigherRateSaving+dueTax1;
	Reporter.log("tax1: "+tax1,true);
	amtMAT=(MCA-((MCA * August6_2018to5September2018)/month))*MATrate;
	Reporter.log("amtMAT: "+amtMAT,true);
	dueTax2=n22-(n6-n26);
	Reporter.log("dueTax2: "+dueTax2,true);
	Totaltax=(tax1-(amtMAT+dueTax2))+n25;
	Reporter.log("Totaltax: "+Totaltax,true);
	taxTotal=String.format("%.2f",(Totaltax));
	Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),	taxTotal);
	Reporter.log("tax For This Year is Verified Successfully: "+taxForThisYear,true);
	
}
public void funcDelMTRTest13(WebDriver driver)throws Exception
{
	Reporter.log("Deleting MTR Test Case 13",true);
	wLib = new WaitStatementLib();
	checkLockbutton(driver);
	clickIncome(driver);
	delBank(driver);
	Reporter.log("State benefits, Pensions, Annuities,Bank Interest,Dividend Income Deleted Successfully",true);
	delOtherUKIncome(driver);
	Reporter.log("Income of Other UK is Deleted Successfully",true);
	clickEmployment(driver);
	delEmpInfo(driver);
	Reporter.log("Employment income Deleted Successfully",true);
	delSelfEmpFull(driver);
	driver.navigate().refresh();
	Class2Class4NICsForm.click();
	cis.switchwindowNew(driver);
	wLib.explicitWait(driver,5,ExemptfromPayingClass4NICs);
	ExemptfromPayingClass4NICs.click();
	
	SaveBtn2.click(); 
	driver.navigate().refresh();
	
	Reporter.log("Self Employment income Deleted Successfully",true);
	delProfit(driver);
	Reporter.log("Income from property Deleted Successfully",true);
	delGiftAid(driver);
	Reporter.log("Gift Aid Payment amount Deleted Successfully",true);
	delPensionTaxRelief(driver);
	Reporter.log("Pension Tax Relief is Deleted Successfully",true);
	delFinishingTaxReturn(driver);
	Reporter.log("Finishing Tax Return is Deleted Successfully",true);
	funcDelAdditionalInfo(driver);
	delUnderpaidTax(driver);
	Reporter.log("Underpaid Tax Information is Deleted Successfully",true);
}
public void addTestCase30(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 30",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
addOtherDivident(driver,str4,"0.00","0.00");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str5);//14473.97
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str6);//2894.79
anyOtherPensionsBenefits.clear();
anyOtherPensionsBenefits.sendKeys(str7);//1757.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
deficiencyReliefOnLifeInsuranceGainsTxtBox.clear();
deficiencyReliefOnLifeInsuranceGainsTxtBox.sendKeys(str8);
saveAdditionalInfoBtn.click();

addPartnershipInfo(driver,str9,str10);
wLib.explicitWait(driver, 5,PartnershipFullFormLink);
PartnershipFullFormLink.click();
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(dateStart);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(dateEnd);
wLib.explicitWait(driver, 5,yourShareOfPartnershipProfitLoss);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str11);
dividendIncomeTxtBox.clear();
dividendIncomeTxtBox.sendKeys(str12);
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.clear();
deductionsShareOfIncomeTaxTakenOffPartnershipIncomeTxtBox.sendKeys(str13);
SaveBtn1.click(); 
n1 = Double.parseDouble(str3);//3678.00
n2 = Double.parseDouble(str4);//12750.00
n3 = Double.parseDouble(str5);//14473.97
n4 = Double.parseDouble(str6);//2894.79
n5 = Double.parseDouble(str7);//1757.00
n6 = Double.parseDouble(str8); //14755.00
n7 = Double.parseDouble(str11);//62952.00
n8 = Double.parseDouble(str12);//390.00
n9 = Double.parseDouble(str13);//219.00
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=n1;
dividendsFromUKCompaniesAmt=n2;
UKPensionAndStateBenefitAmt = Math.floor(n3) + Math.floor(n5);
shareOfTotalTaxableProfits = n7;
profitFromPartnershipsAmt = shareOfTotalTaxableProfits + n8;
totalincome = profitFromPartnershipsAmt + interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt; 

totlIncome = totalincome - personalAllowanceRate;		

Assert.assertEquals(profitFromPartnershipsCalculation.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromPartnershipsAmt)));
Reporter.log("Profit From Partnerships Amount verified:" + profitFromPartnershipsCalculation.getText(),true);

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension = taxLimit1Uk;//34500
Reporter.log("Basic Rate Pay of Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;
heigherRatePayPension = (shareOfTotalTaxableProfits + UKPensionAndStateBenefitAmt) - (personalAllowanceRate +basicRatePayPension);//32832
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//13132.80
heigherRateSaving=interestFromUKBanksBuildingAmt - nilRate2;//3178
Reporter.log("Heigher Rate of saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//£1271.20
heigherRateDividends=(dividendsFromUKCompaniesAmt + n8)-dividentNillRate;//11140
dueTax4=round((heigherRateDividends*dividendTaxHigherRate)/100,2);//3620.50

totIncomeTaxDue = dueTax1+dueTax2+dueTax3+dueTax4;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
total1=roundDown2((heigherRateDividends * dividendTaxHigherRate)/100) - roundDown2((heigherRateDividends *dividendTaxBasicRate)/100);
total2 = n6 - heigherRateDividends;
total3 = roundDown2(total2 * HR_rate) - roundDown2(total2 *BR_rate);
amtTaxAdjustment =  total1 +total3;
Reporter.log("Total Amount of Relief :"+amtTaxAdjustment,true);
Assert.assertEquals(deficiencyReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxAdjustment));
Reporter.log("Amount of Deficiency Relief is Verified: "+deficiencyReliefAmt.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtTaxAdjustment;
Reporter.log("Income Tax due after allowances and reliefs: "+incomeTaxdueafterallowancesandreliefs,true);
class4Amt1 = nIC_Band*class4LPLRate;//3,413.34
Assert.assertEquals(class4NationalInsurancecontributions1.getText().substring(1).replace(",", ""),String.format("%.2f",class4Amt1));
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4NationalInsurancecontributions1.getText(),true);
//class4LPLAmt = 8424.00
//nIC_Band = 37926.00
total4=(shareOfTotalTaxableProfits - class4LPLAmt)-nIC_Band;//16602
class4Amt=total4*class4UPLRate;//332.04
Reporter.log("Upper rate amount of Class 4 National Insurance contributions verified:" + class4Amt,true);
class2Amt = class2Rate * weeksYear;//£153.40
Reporter.log("Class 2 National Insurance contributions: "+class2Amt,true);
class4_2Amt=class4Amt1+class4Amt+class2Amt;
Assert.assertEquals(totalClass2andClass4NationalInsurancecontributionsdue.getText().substring(1).replace(",", ""),String.format("%.2f",(class4_2Amt)));
Reporter.log("Total of Class 2 and Class 4 National Insurance contributions due verified successfully"+totalClass2andClass4NationalInsurancecontributionsdue.getText(),true);
incomeTaxDueAmt = incomeTaxdueafterallowancesandreliefs + class4_2Amt;
Assert.assertEquals(IncomeTaxCls2andCls4NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxDueAmt));
Reporter.log("Income Tax Cls 2 and Cls 4 National Insurrance Contribution Minus tax deducted is verified:" + IncomeTaxCls2andCls4NationalInsurContriDue.getText(),true);	
Reporter.log("Total amount of Class 4 National Insurance contributions verified:" + class4_2Amt,true);
totalTaxDeductedAmt = round(n4+n9,2);
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=incomeTaxDueAmt - totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);

}

public void funcDelMTRTest30(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 30",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
delOtherDivident(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase31(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 31",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
dividentUKCompanies(driver,str4,"",str5);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str6);//14473.97
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str7);//2894.79
anyOtherPensionsBenefits.clear();
anyOtherPensionsBenefits.sendKeys(str8);//1757.00
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
deficiencyReliefOnLifeInsuranceGainsTxtBox.clear();
deficiencyReliefOnLifeInsuranceGainsTxtBox.sendKeys(str9);
saveAdditionalInfoBtn.click();
n1 = Double.parseDouble(str3);//10120.00
n2 = Double.parseDouble(str5);//828319.10
n3 = Double.parseDouble(str6);//14473.97
n4 = Double.parseDouble(str7);//2894.79
n5 = Double.parseDouble(str8);//1757.00
n6 = Double.parseDouble(str9); //14755.00
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=n1;
dividendsFromUKCompaniesAmt=Math.floor(n2);
UKPensionAndStateBenefitAmt = Math.floor(n3) + Math.floor(n5);
totalincome = interestFromUKBanksBuildingAmt + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt; 
totlIncome = totalincome;		
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);	

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=UKPensionAndStateBenefitAmt;
dueTax1 = basicRatePayPension *BR_rate;
Reporter.log("Basic Rate of Pay Pension: "+dueTax1,true);

basicRateSaving = interestFromUKBanksBuildingAmt;//10,120.00	
dueTax2 = basicRateSaving * BR_rate;
Reporter.log("Basic Rate of Saving: "+dueTax2,true);
basicRateDividends=taxLimit1Uk -(basicRatePayPension + basicRateSaving +dividentNillRate);//6150
dueTax3=(basicRateDividends*dividendTaxBasicRate)/100;
Reporter.log("Basic Rate of Dividends: "+dueTax3,true);
	
heigherRateDividends = taxLimit2;//115,500.00	
dueTax4 = (heigherRateDividends * dividendTaxHigherRate)/100;
Reporter.log("Heigher Rate of Dividends: "+dueTax4,true);
additionalRateDividends=dividendsFromUKCompaniesAmt -(dividentNillRate + basicRateDividends+ heigherRateDividends);
dueTax5= round((additionalRateDividends*dividendTaxAdditionalRate)/100,2);//268478.88
Reporter.log("Additional Rate of Dividends: "+dueTax5,true);

totIncomeTaxDue = dueTax1+dueTax2+dueTax3+dueTax4+dueTax5;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
amtTaxAdjustment = roundDown2((n6 * dividendTaxHigherRate)/100) - roundDown2((n6 *dividendTaxBasicRate)/100); 
Reporter.log("Total Amount of Relief :"+incomeTaxReliefAmt,true);
Assert.assertEquals(deficiencyReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxAdjustment));
Reporter.log("Amount of Deficiency Relief is Verified: "+deficiencyReliefAmt.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - amtTaxAdjustment;
//Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxdueafterallowancesandreliefs));
Reporter.log("Income Tax due after allowances and reliefs: "+incomeTaxdueafterallowancesandreliefs,true);

totalTaxDeductedAmt = n4;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = incomeTaxdueafterallowancesandreliefs - totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest31(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 31",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
funcDelAdditionalInfo(driver);
}
public void addTestCase32(WebDriver driver,String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27,String str28) throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 32",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);
Reporter.log("Interest added Successfully",true);
dividentUKCompanies(driver,str4,"",str5);
addOtherDivident(driver,str6,"0.00","0.00");
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
totStatPension.clear();
totStatPension.sendKeys(str7);//3770.00
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str8);//3121.00
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str9);//624.20
stateBenefitsSaveBtn.click();
wLib.explicitWait(driver, 5,taxReliefsLink);
taxReliefsLink.click();
AddgiftAidPaymentFull(driver,str10, "", str11);
wLib.explicitWait(driver, 5,marriageAllowanceForm);
marriageAllowanceForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,receiveMarriageAllowancefromChkBox);
receiveMarriageAllowancefromChkBox.click();
SaveBtn2.click();
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
stockDividendsTxtBox.clear();
stockDividendsTxtBox.sendKeys(str12);//490.5
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,selfEmploymentLink);
selfEmploymentLink.click();
wLib.explicitWait(driver, 5,formOpenBtn);
formOpenBtn.click();
wLib.explicitWait(driver, 5,descriptionOfBusinessTxtBox);
descriptionOfBusinessTxtBox.clear();
descriptionOfBusinessTxtBox.sendKeys(str13);
tradingEnddateTxtBox.clear();
tradingEnddateTxtBox.sendKeys(str14);
businessAccountsEnddateTxtBox.clear();
businessAccountsEnddateTxtBox.sendKeys(dateEnd);
businessIncomeTxtBox.clear();
businessIncomeTxtBox.sendKeys(str15);
costsOfGoodsBoughtForResaleTxtBox.clear();
costsOfGoodsBoughtForResaleTxtBox.sendKeys(str16);
otherCapitalAllowancesTxtBox.clear();
otherCapitalAllowancesTxtBox.sendKeys(str17);
totalBalancingChargesTxtBox.clear();
totalBalancingChargesTxtBox.sendKeys(str18);
ownGoodsAndServicesTxtBox.clear();
ownGoodsAndServicesTxtBox.sendKeys(str19);
anyOtherBusinessIncomeTxtBox.clear();
anyOtherBusinessIncomeTxtBox.sendKeys(str20);
SaveBtn1.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkCapitalGain);
linkCapitalGain.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,propertyEtcTotalDisposalTxtBox);
propertyEtcTotalDisposalTxtBox.clear();
propertyEtcTotalDisposalTxtBox.sendKeys(str21);
propertyEtcDisposalProceedTxtBox.clear();
propertyEtcDisposalProceedTxtBox.sendKeys(str22);
propertyEtcCostsAndIndexationTxtBox.clear();
propertyEtcCostsAndIndexationTxtBox.sendKeys(str23);
propertyEtcGainsInTheYearTxtBox.clear();
propertyEtcGainsInTheYearTxtBox.sendKeys(str24);
propertyEtcClaimOrElectionMadeTxtBox.clear();
propertyEtcClaimOrElectionMadeTxtBox.sendKeys(str25);
propertyEtcGainFromRTTreturnTxtBox.clear();
propertyEtcGainFromRTTreturnTxtBox.sendKeys(str26);
propertyEtcRTTtaxAlreadyChargedTxtBox.clear();
propertyEtcRTTtaxAlreadyChargedTxtBox.sendKeys(str27);
commentTxtBox.clear();
commentTxtBox.sendKeys(str28);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//6710.40
n2 = Double.parseDouble(str5);//5009.93
n3 = Double.parseDouble(str6);//224.47
n4 = Double.parseDouble(str7);//3770.00
n5 = Double.parseDouble(str8);//3121.00
n6 = Double.parseDouble(str9); //624.20
n7 = Double.parseDouble(str10);//3,450.00
n8 = Double.parseDouble(str11);//3,000.00
n9 = Double.parseDouble(str12);//490.50
n10 = Double.parseDouble(str15);//14560.00
n11 = Double.parseDouble(str16);//13603.00
n12 = Double.parseDouble(str17);//1700.00
n13 = Double.parseDouble(str18);//3926.00
n14 = Double.parseDouble(str19);//720
n15 = Double.parseDouble(str20);//250
n16 = Double.parseDouble(str22);//30000
n17 = Double.parseDouble(str23);//17000
n18 = Double.parseDouble(str24);//13000
n19 = Double.parseDouble(str26);//13000
n20 = Double.parseDouble(str27);//170

taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
interestFromUKBanksBuildingAmt=Math.floor(n1);
dividendsFromUKCompaniesAmt=Math.floor(n2) + Math.floor(n3) + Math.floor(n9);
UKPensionAndStateBenefitAmt = n4 + n5;//6891
selfEmploymentIncome=((n10-n11)+(n13+n14)-n12)+n15;//4153
totalincome = selfEmploymentIncome + interestFromUKBanksBuildingAmt + UKPensionAndStateBenefitAmt + dividendsFromUKCompaniesAmt;
totlIncome = totalincome - personalAllowanceRate;
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(interestFromUKBanksBuildingAmt)));
Reporter.log("Amount of Interest From UK banks and Building is Verified: "+amountInterestFromUKbanksBuilding.getText(),true);
Assert.assertEquals(calculateDividentFrmUKCompany2(driver).replace(",", ""),String.format("%.2f",dividendsFromUKCompaniesAmt));
Reporter.log("Dividends from UK Companies verified: "+dividendsFromUKCompaniesAmt,true);
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",UKPensionAndStateBenefitAmt));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRateDividends= totlIncome - (SR_band + nilRate1 + dividentNillRate);//3,627.00
Reporter.log("Basic Rate of Dividends: "+basicRateDividends,true);
dueTax1=round((basicRateDividends*dividendTaxBasicRate)/100,2);
Reporter.log("calculated amount of Basic Rate of Dividends: " + dueTax1,true);
totIncomeTaxDue = dueTax1;

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
marriageAllowanceAmt = marriageAllowance * marriageAllowanceRate;
Assert.assertEquals(taxSummaaryMarriageAllowanceAmt.getText().substring(1).replace(",", ""),String.format("%.2f",marriageAllowanceAmt));
Reporter.log("Marriage Allowance Transfer is Verified: "+taxSummaaryMarriageAllowanceAmt.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - marriageAllowanceAmt;
Assert.assertEquals(amountIncomeTaxdueafterallowances.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxdueafterallowancesandreliefs)));
Reporter.log("Income Tax due after allowances and reliefs: "+amountIncomeTaxdueafterallowances.getText(),true);
	
amtTaxdueonGiftAidpayments=java.lang.Math.ceil(n7*giftAidRate);
Assert.assertEquals(calculationGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",amtTaxdueonGiftAidpayments));
Reporter.log("Calculation Of Gift Aid Payments verified: "+calculationGiftAidpayments.getText(),true);
taxdueonGiftAidpaymentsValue=amtTaxdueonGiftAidpayments*reliefFinancerate;
Assert.assertEquals(taxDueGiftAidpayments.getText().substring(1).replace(",", ""),String.format("%.2f",taxdueonGiftAidpaymentsValue));
Reporter.log("Tax Due on Gift Aid Payments verified: "+taxDueGiftAidpayments.getText(),true);
amtCapitalGainTaxDue = n20;
Assert.assertEquals(amountCapitalGainTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",amtCapitalGainTaxDue));
Reporter.log("Capital Gain Tax Due Payments verified: "+amountCapitalGainTaxDue.getText(),true);
incomeTaxdueAfterGiftAid = taxdueonGiftAidpaymentsValue - amtCapitalGainTaxDue;
Assert.assertEquals(incomeTaxDueAfterGifTAid.getText().substring(1).replace(",", ""),String.format("%.2f",incomeTaxdueAfterGiftAid));
Reporter.log("Total Income Tax Due After GifTAid verified: "+incomeTaxDueAfterGifTAid.getText(),true);

totalTaxDeductedAmt = n6;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
if (incomeTaxdueafterallowancesandreliefs > incomeTaxdueAfterGiftAid)
{
taxBalance = incomeTaxdueafterallowancesandreliefs - totalTaxDeductedAmt;
}
else
{
taxBalance = incomeTaxdueAfterGiftAid - totalTaxDeductedAmt;
}
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",taxBalance));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest32(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 32",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
delOtherDivident(driver);
funcDelAdditionalInfo(driver);
delSEshort(driver);
delCGI(driver);
delInfoGiftAid(driver);
wLib.explicitWait(driver, 5,marriageAllowanceForm);
marriageAllowanceForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,receiveMarriageAllowancefromChkBox);
receiveMarriageAllowancefromChkBox.click();
SaveBtn2.click();
}
public void addTestCase33(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 33",true);
addStudentLoanPlan1(driver,str1);
clickIncome(driver);
funcAddEmployerForMTR(driver, str2, str3);
funcAddEmpIncomeWithTaxTakenOff(driver, str4, str5,"");
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
lumpSumSalariesAndOtherPaymentsTxtBox.clear();
lumpSumSalariesAndOtherPaymentsTxtBox.sendKeys(str6);
redundancyAndOtherCompensationTaxTakenOffTxtBox.clear();
redundancyAndOtherCompensationTaxTakenOffTxtBox.sendKeys(str7);
saveAdditionalInfoBtn.click();
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver,5,interestOtherincomefromoverseassavingsFormBtn);
interestOtherincomefromoverseassavingsFormBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str9);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str10);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
SaveBtn2.click();
wLib.explicitWait(driver, 2,dividendsFromForeignCompanies);
dividendsFromForeignCompanies.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("224");
wLib.explicitWait(driver,5,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str11);
wLib.explicitWait(driver,5,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str12);
wLib.explicitWait(driver,5,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver,5,SaveBtn2);
SaveBtn2.click();
driver.navigate().refresh();
wLib.explicitWait(driver, 2,overseasPensionsSocialScurityBenefitsAndRoyalties);
overseasPensionsSocialScurityBenefitsAndRoyalties.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str13);
wLib.explicitWait(driver, 2,colCTxtBox);
colCTxtBox.clear();
colCTxtBox.sendKeys(str14);
wLib.explicitWait(driver, 2,colEChkBox);
colEChkBox.click();
wLib.explicitWait(driver, 2,SaveBtn2);
SaveBtn2.click();
//driver.navigate().refresh();
wLib.explicitWait(driver, 2,foreignIncomeEditSummaryBtn);
foreignIncomeEditSummaryBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 2,countryCodeLstBox);
listbox1=new Select(countryCodeLstBox);
listbox1.selectByValue("38");
wLib.explicitWait(driver, 2,colBTxtBox);
colBTxtBox.clear();
colBTxtBox.sendKeys(str22);
wLib.explicitWait(driver, 5,SaveBtn2);
SaveBtn2.click();
wLib.explicitWait(driver, 5,totalForeignTaxReliefTxtBox);
totalForeignTaxReliefTxtBox.clear();
totalForeignTaxReliefTxtBox.sendKeys(str8);
wLib.explicitWait(driver, 5,totalRentsAndOtherReceiptsTxtBox);
totalRentsAndOtherReceiptsTxtBox.clear();
totalRentsAndOtherReceiptsTxtBox.sendKeys(str15);
propertyExpensesTxtBox.clear();
propertyExpensesTxtBox.sendKeys(str16);
wLib.explicitWait(driver, 5,foreignIncomeNumberOfOverseasLetPropertiesTxtBox);
foreignIncomeNumberOfOverseasLetPropertiesTxtBox.clear();
foreignIncomeNumberOfOverseasLetPropertiesTxtBox.sendKeys(str17);
foreignIncomePrivateUseAdjustmentsTxtBox.clear();
foreignIncomePrivateUseAdjustmentsTxtBox.sendKeys(str18);
foreignIncomeCostsOfReplacingDomesticItemsTxtBox.clear();
foreignIncomeCostsOfReplacingDomesticItemsTxtBox.sendKeys(str19);
foreignIncomeResidentialFinanceCostsTxtBox.clear();
foreignIncomeResidentialFinanceCostsTxtBox.sendKeys(str20);
unusedResidentialFinanceCostsBroughtForwardTxtBox.clear();
unusedResidentialFinanceCostsBroughtForwardTxtBox.sendKeys(str21);
wLib.explicitWait(driver, 5,txtBoxLossBroughtForward);
txtBoxLossBroughtForward.clear();
txtBoxLossBroughtForward.sendKeys(str23);
SaveBtn1.click();
try
{
if (SaveBtn1.isDisplayed()==true)
{
SaveBtn1.click();
}
}
catch (Exception e) {
Reporter.log("Save button clicked in first attempt",true);
}

n1=Double.parseDouble(str1);//1343.16
n2 = Double.parseDouble(str4);//33254.00
n3 = Double.parseDouble(str5);//4280.80
n4 = Double.parseDouble(str6);//24850.00
n5 = Double.parseDouble(str7);//4970.00
n6 = Double.parseDouble(str8);//2261.67
n7 = Double.parseDouble(str9);//3562
n8 = Double.parseDouble(str10);//356
n9 = Double.parseDouble(str11);//2679
n10 = Double.parseDouble(str12);//401
n11 = Double.parseDouble(str13);//6741
n12 = Double.parseDouble(str14);//1685
n13 = Double.parseDouble(str15);//3602.00
n14 = Double.parseDouble(str16);//2510.00
n15 = Double.parseDouble(str18);//90.00
n16 = Double.parseDouble(str19);//360.00
n17 = Double.parseDouble(str20);//80.00
n18 = Double.parseDouble(str21);//40.00
n19 = Double.parseDouble(str22);//822
n20 = Double.parseDouble(str23);//320.00


taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt = n2 + n4;
foreignIncomeCalc=n7 + n11 + n19;//11,125
dividendsFromForeignCompaniesCalc=n9;//2679.00
totalincome = payFromAllEmploymentsAmt +foreignIncomeCalc + dividendsFromForeignCompaniesCalc ;
incomeTaxReliefAmt=n20;
totlIncome = totalincome - (personalAllowanceRate + incomeTaxReliefAmt);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(foreignIncomeAmt.getText().substring(1).replace(",", ""),String.format("%.2f",foreignIncomeCalc));
Reporter.log("Foreign income amount on tax calculation summary verified: "+foreignIncomeAmt.getText(),true);
Assert.assertEquals(dividendsFromForeignCompaniesAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(dividendsFromForeignCompaniesCalc)));
Reporter.log("Dividends from foreign companies amount on tax calculation summary verified: " + dividendsFromForeignCompaniesAmt.getText(),true);
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
	
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totalincome));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);

Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));
Reporter.log("Total Income on WhichTaxIsDue is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension=taxLimit1Uk;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6900
heigherRatePayPension=totlIncome - (basicRatePayPension+dividendsFromForeignCompaniesCalc+n7);
dueTax2=heigherRatePayPension*HR_rate;//7598.80
Reporter.log("Heigher Rate of Pay Pension: "+dueTax2,true);
heigherRateSaving = n7  -nilRate2;//3062
Reporter.log("Heigher Rate of Saving: "+heigherRateSaving,true);
dueTax3=heigherRateSaving*HR_rate;//1224.80
heigherRateDividends = dividendsFromForeignCompaniesCalc - dividentNillRate;//679
dueTax4 = round((heigherRateDividends*dividendTaxHigherRate)/100,2);//220.67
totIncomeTaxDue = dueTax1+dueTax2+dueTax3+dueTax4;//£15944.27

Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",totIncomeTaxDue));
Reporter.log("Income Tax Due is Verified: "+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts  = (n17 + n18) * reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",amtReliefForFinanceCosts));
Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);

Assert.assertEquals(amtForeignTaxCreditRelief.getText().substring(1).replace(",", ""),String.format("%.2f",n6));
Reporter.log("Amount of Foreign Tax Credit Relief is verifired successfully"+amtForeignTaxCreditRelief.getText(),true);
incomeTaxdueafterallowancesandreliefs = totIncomeTaxDue - (amtReliefForFinanceCosts + n6);



studentLoanAmt = Math.floor((totalincome -plan1Threshold)*studentLoanRate) - java.lang.Math.ceil(n1); //756
Assert.assertEquals(studentLoanAmountTaxWindow.getText().substring(1).replace(",", ""),String.format("%.2f",(studentLoanAmt)));
Reporter.log("Student Loan repayments amount is verified: "+studentLoanAmountTaxWindow.getText(),true);
totalTaxDeductedAmt = n3 + n5;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",totalTaxDeductedAmt));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance = (incomeTaxdueafterallowancesandreliefs + studentLoanAmt) - totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest33(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 33",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
delStudentLoanRepayment(driver);
funcDelAdditionalInfo(driver);
clickIncome(driver);
wLib.explicitWait(driver, 5,linkForeignIncome);
linkForeignIncome.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
try{
wLib.explicitWait(driver, 5,delOverseasSavings);
if(delOverseasSavings.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delOverseasSavings);
delOverseasSavings.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for overseas savings is not available",true);
}
try{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
if(delDividendsForeignComaniesBtn.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delDividendsForeignComaniesBtn);
delDividendsForeignComaniesBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Dividends from foreign companies is not available",true);
}
try{
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
if(delOverseasPensionsRoyaltiesBtn.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delOverseasPensionsRoyaltiesBtn);
delOverseasPensionsRoyaltiesBtn.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Overseas pensions is not available",true);
}

try{
wLib.explicitWait(driver, 5,delSummaryFOR);
if(delSummaryFOR.isDisplayed()==true)
{
wLib.explicitWait(driver, 5,delSummaryFOR);
delSummaryFOR.click();

cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,cnfmdel);
cnfmdel.click();
driver.navigate().refresh();
}
}catch (Exception e) {
Reporter.log("Delete button for Dividend income received by a person abroad is not available",true);
}
wLib.explicitWait(driver, 5,confirmDel);
confirmDel.click();
wLib.explicitWait(driver, 5,popup1);
driver.switchTo().activeElement();
yesBtn.click();
clickIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
}
public void addTestCase35(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 35",true);
verifyBankIncome(driver);
addBank(driver,str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//6710.40
Reporter.log("Interest added Successfully",true);
wLib.explicitWait(driver, 5,frm1Btn);
frm1Btn.click();
cis.switchwindowNew(driver);
otherPensionsRetirementAnnuities.clear();
otherPensionsRetirementAnnuities.sendKeys(str4);//14473.97
taxTakenOffOtherPensions.clear();
taxTakenOffOtherPensions.sendKeys(str5);//2894.79
anyOtherPensionsBenefits.clear();
anyOtherPensionsBenefits.sendKeys(str6);//1757.00
stateBenefitsSaveBtn.click();
Reporter.log("State benefit added successfully",true);
dividentUKCompanies(driver,str7,"",str8);//£5,009.93
addOtherDivident(driver,str9,"0.00","0.00");//£224.47
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str10);//4213.00
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str11);//4
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str12);//2
rentIncomeTextBox.sendKeys(str13);//3500.00
fHLUKTraditionalAccountingChkBox.click();
UKExpensesTxtBox.sendKeys(str14);//2750.00
loanInterestTxtBox.sendKeys(str15);//600.00
legalManagementOthrProfessionalFeesTxtBox.sendKeys(str16);//100
allowablePropertyExpensesTxtBox.sendKeys(str17);//30
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str18);//6852.00
propertyIncomeAllowanceChkBox.click();
premiumsForGrantOfALeaseTxtBox.clear();
premiumsForGrantOfALeaseTxtBox.sendKeys(str19);//50.00
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str20);//750
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str21);//130
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str22);//800
legalManagmntAndPrfsnalFeesTxtBox.clear();
legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str23);//300
othrPropertyExpensesTxtBox.clear();
othrPropertyExpensesTxtBox.sendKeys(str24);//1200
propertyPrivateUseAdjustmentTxtBox.clear();
propertyPrivateUseAdjustmentTxtBox.sendKeys(str25);//790.00
annualInvestmentAllowanceTxtBox.clear();
annualInvestmentAllowanceTxtBox.sendKeys(str26);//650.00
ResidentialfinancecostsTxtBox.clear();
ResidentialfinancecostsTxtBox.sendKeys(str27);//266.67
SaveBtn1.click();
driver.navigate().refresh();
n1=Double.parseDouble(str3);//6710.40	
n2=Double.parseDouble(str4);//14473.97
n3=Double.parseDouble(str5);//2894.79
n4=Double.parseDouble(str6);//1757.00	
n5=Double.parseDouble(str8);//5009.93
n6=Double.parseDouble(str9);//224.47
n7=Double.parseDouble(str10);//4213.00	
n8=Double.parseDouble(str13);//3500.00	
n9=Double.parseDouble(str14);//2750.00	
n10=Double.parseDouble(str15);//600.00
n11=Double.parseDouble(str16);//100.00	
n12=Double.parseDouble(str17);//30.00
n13=Double.parseDouble(str18);//6852.00	
n14=Double.parseDouble(str19);//50.00
n15=Double.parseDouble(str20);//750.00
n16=Double.parseDouble(str21);//130.00	
n17=Double.parseDouble(str22);//800.00
n18=Double.parseDouble(str23);//300.00
n19=Double.parseDouble(str24);//1200.00
n20=Double.parseDouble(str25);//790.00
n21=Double.parseDouble(str26);//650.00
n22=Double.parseDouble(str27);//266.67
wLib.explicitWait(driver, 2,calculateFHLUKAdjustedProfitForTheYear);
FHLAdjustedProfitForTheYear=n8-(n9+n10+n11+n12);//20
Assert.assertEquals(calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",(FHLAdjustedProfitForTheYear)));
Reporter.log("Adjusted profit for the year verified successfully"+calculateFHLUKAdjustedProfitForTheYear.getAttribute("value"),true);
Assert.assertEquals(calculateFHLUKTaxableProfitForYear.getAttribute("value"),calculateFHLUKAdjustedProfitForTheYear.getAttribute("value") );
Reporter.log("Taxable profit for the year verified successfully"+calculateFHLUKTaxableProfitForYear.getAttribute("value"),true);
AdjustedProfitForTheYear=((n13+n14-(n15+n16+n17+n18+n19))+n20)-n21;//3862
wLib.explicitWait(driver, 5,adjustedProfitForTheYear);
Assert.assertEquals(adjustedProfitForTheYear.getAttribute("value"),String.format("%.2f",(AdjustedProfitForTheYear)));
Reporter.log("Adjusted profit for the year verified successfully: "+adjustedProfitForTheYear.getAttribute("value"),true);
Assert.assertEquals(taxableProfitForTheYear.getAttribute("value"),adjustedProfitForTheYear.getAttribute("value"));
Reporter.log("Taxable profit for the year verified successfully: "+taxableProfitForTheYear.getAttribute("value"),true);
profitFromUKLandAndProperty=FHLAdjustedProfitForTheYear+AdjustedProfitForTheYear;
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
Reporter.log("Profit From UK Land And Property verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",(Math.floor(n1))));
Reporter.log("Interest From UK banks Building verified: "+amountInterestFromUKbanksBuilding.getText(),true);
dividendsFromUKCompaniesAmt=(Math.floor(n5))+(Math.floor(n6));
Assert.assertEquals(calculateDividentFrmUKCompany1(driver).replace(",", ""),String.format("%.2f",(dividendsFromUKCompaniesAmt)));
Reporter.log("Dividends from UK Companies verified: "+amountDividendsfromUKCompanies.getText(),true);
UKPensionAndStateBenefitAmt=(Math.floor(n2))+(Math.floor(n4));
Assert.assertEquals(amountUKpensionsAndStateBenefits.getText().substring(1).replace(",", ""),String.format("%.2f",(UKPensionAndStateBenefitAmt)));
Reporter.log("Amount of UK pensions And State Benefits is verified: "+amountUKpensionsAndStateBenefits.getText(),true);	
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(n7)));
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
totlIncome=profitFromUKLandAndProperty + Math.floor(n1) + dividendsFromUKCompaniesAmt + UKPensionAndStateBenefitAmt + n7;
Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome - personalAllowanceRate)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
basicRatePayPension=(profitFromUKLandAndProperty+UKPensionAndStateBenefitAmt)-personalAllowanceRate;
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;
Reporter.log("Amount of Basic Rate of Pay Pension: "+dueTax1,true);
basicRateSaving=(Math.floor(n1)+ Math.floor(n7))-nilRate1;
Reporter.log("Basic Rate of Saving: "+basicRateSaving,true);
dueTax2=basicRateSaving*BR_rate;
Reporter.log("Amount of Basic Rate of Saving: "+dueTax2,true);
basicRateDividends=dividendsFromUKCompaniesAmt-dividentNillRate;
Reporter.log("Basic Rate of Dividend: "+basicRateDividends,true);
dueTax3=roundDown2((basicRateDividends*dividendTaxBasicRate)/100);
Reporter.log("basicRateDividends: "+dueTax3,true);
taxDueInc=dueTax1+dueTax2+dueTax3;
Reporter.log("Income Tax Due amount: "+taxDueInc,true);
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(taxDueInc)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
amtReliefForFinanceCosts=Math.round(n22)*reliefFinancerate;
Assert.assertEquals(dataReliefForFinanceCosts.getText().substring(1).replace(",", ""),String.format("%.2f",(amtReliefForFinanceCosts)));
Reporter.log("Amount of Relief For Finance Costs is verifired successfully"+dataReliefForFinanceCosts.getText(),true);
notionalTaxFromGainsOnLifeAmt=n7*capitalGainsRateUpper;
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies is verifired successfully"+amtNotionalTaxFromGainsOnLife.getText(),true);
finalAmount=taxDueInc-(amtReliefForFinanceCosts+notionalTaxFromGainsOnLifeAmt+n3);
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",", ""),String.format("%.2f",(finalAmount)));
Reporter.log("Balance for the year is Verified: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest35(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 35",true);
wLib = new WaitStatementLib();
cis = new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delBank(driver);
deleteDivident(driver);
delOtherDivident(driver);
funcDelAdditionalInfo(driver);
delProfit(driver);
}
public void addTestCase36(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22,String str23,String str24,String str25,String str26,String str27)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 36",true);
clickIncome(driver);
addBank(driver,str1, str1, str2);
addUKInterestNew(driver,str3);
funcAddUntaxedInerest(driver,str4);
addOtherUKIncome(driver,str5,"",str6,"",str7);
funcAddEmployerForMTR(driver, str8, str9);
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str10);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str11);
VochrCredcardExsMilg.clear();
VochrCredcardExsMilg.sendKeys(str12);
ProfFeesAndSubsTxtBox.clear();
ProfFeesAndSubsTxtBox.sendKeys(str13);
OtherExpensTxtBox.clear();
OtherExpensTxtBox.sendKeys(str14);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
wLib.explicitWait(driver, 5,addEmpIncome);
addEmpIncome.click();
wLib.explicitWait(driver, 1,payFrmEmployer);
payFrmEmployer.clear();
payFrmEmployer.sendKeys(str15);
UkTaxTakenOffPay.clear();
UkTaxTakenOffPay.sendKeys(str16);
isCloseCompanyChkBox.click();
isDirectorChkBox.click();
dateTxtBox.clear();
dateTxtBox.sendKeys(str17);
CompanyCarsAndVans.clear();
CompanyCarsAndVans.sendKeys(str18);
PrvtMedAndDntl.clear();
PrvtMedAndDntl.sendKeys(str19);
OtherBenefitsTxtBox.clear();
OtherBenefitsTxtBox.sendKeys(str20);
expensesPaymentsReceivedtxtBox.clear();
expensesPaymentsReceivedtxtBox.sendKeys(str21);
BusnsTrvlAndSubstancTxtBox.clear();
BusnsTrvlAndSubstancTxtBox.sendKeys(str22);
SaveBtn1.click();
Reporter.log("Employment Income Added successfully",true);
driver.navigate().refresh();
wLib.explicitWait(driver, 5,linkOtherTaxInformation);
linkOtherTaxInformation.click();
wLib.explicitWait(driver, 5,form1OpenBtn);
form1OpenBtn.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver, 5,studentLoanTypeLstBox);
listbox1 = new Select(studentLoanTypeLstBox);
listbox1.selectByValue("1");
amountTxtBox.clear();
amountTxtBox.sendKeys(str23);
SaveBtn2.click();
Reporter.log("Plan 1 student loan added successfully",true);
addPensionTaxReliefForm(driver,str24, str25, "", "");
Reporter.log("Paying into registered pension schemes and overseas pension schemes amount added successfully",true);
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
wLib.explicitWait(driver, 5,amountGainOnLifeInsuranceTxtBox);
amountGainOnLifeInsuranceTxtBox.clear();
amountGainOnLifeInsuranceTxtBox.sendKeys(str26);
numberOfYearsSinceLastPolicyGainTxtBox.clear();
numberOfYearsSinceLastPolicyGainTxtBox.sendKeys(str27);
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
Reporter.log("Life Insurance Gains added successfully",true);
n1=Double.parseDouble(str3);//22.00
n2=Double.parseDouble(str4);//2099.88
n3=Double.parseDouble(str5);//7000.00
n4=Double.parseDouble(str6);//1400.00
n5=Double.parseDouble(str10);//18500.00
n6=Double.parseDouble(str11);//1450.00
n7=Double.parseDouble(str12);//600.00
n8=Double.parseDouble(str13);//150.00
n9=Double.parseDouble(str14);//85.00
n10=Double.parseDouble(str15);//55750.00
n11=Double.parseDouble(str16);//11970.00
n12=Double.parseDouble(str18);//3600.00
n13=Double.parseDouble(str19);//350.00
n14=Double.parseDouble(str20);//7500.00
n15=Double.parseDouble(str21);//4500.00
n16=Double.parseDouble(str22);//5000.00
n17=Double.parseDouble(str23);//3,383.10
n18=Double.parseDouble(str24);//3,205.00
n19=Double.parseDouble(str25);//681.00
n20=Double.parseDouble(str26);//120000.00
n21=Double.parseDouble(str27);//2
payFromAllEmploymentsAmt = n5+n10;//74250
benefitsAndExpensesReceivedAmt = n7+n12+n13+n14+n15;//£16,550.00	 
allowableExpensesAmt =n8+n9+n16;//£5,235.00	 
totalFromAllEmployments=(payFromAllEmploymentsAmt+benefitsAndExpensesReceivedAmt)-allowableExpensesAmt;
x1=n1+(n1*taxedUKInterestRate);
interestFromUKBanksBuildingAmt=(Math.floor(x1)+Math.floor(n2));//2,126
totlIncome=totalFromAllEmployments + interestFromUKBanksBuildingAmt + n20 + n3;
amtRetirementAnnuity =n19;
totalIncome1=totlIncome-amtRetirementAnnuity;

wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5, taxCalSummaryLink);
taxCalSummaryLink.click();
	 
wLib.explicitWait(driver, 5,payFromAllEmployments);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);

Assert.assertEquals(amtBenefitsandexpensesreceived.getText().substring(1).replace(",", ""),String.format("%.2f",benefitsAndExpensesReceivedAmt));
Reporter.log("Amount of Benefits and Expenses Received is Verified: "+amtBenefitsandexpensesreceived.getText(),true);

Assert.assertEquals(amtAllowableexpenses.getText().substring(1).replace(",", ""),String.format("%.2f",allowableExpensesAmt));
Reporter.log("Allowable expenses is verified: "+amtAllowableexpenses.getText(),true);

Assert.assertEquals(TotalFromAllEmployment.getText().substring(1).replace(",", ""),String.format("%.2f",(totalFromAllEmployments)));
Reporter.log("Total from all employments is verified: "+TotalFromAllEmployment.getText(),true);	

Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt));	 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);
	
Assert.assertEquals(amountGainsOnLifeInsurancePolicies.getText().substring(1).replace(",", ""),String.format("%.2f",(n20)));//120000
Reporter.log("Amount of Gains on life insurance policies etc is verified: "+amountGainsOnLifeInsurancePolicies.getText(),true);
otherIncomeAmt=n3;
Assert.assertEquals(amountOtherIncome.getText().substring(1).replace(",", ""),String.format("%.2f",Math.floor(otherIncomeAmt)));
Reporter.log("Other Income verified: "+amountOtherIncome.getText(),true);


Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",totlIncome));//£284,691.00	 	 
Reporter.log("Amount of Total Income Received is Verified: "+TotalIncomeReceived.getText(),true);

Assert.assertEquals(PaymentsIntoRetirementAnnuity.getText().substring(1).replace(",", ""),String.format("%.2f",amtRetirementAnnuity));//£681.00	 	 
Reporter.log("Payments into a retirement annuity contract etc. is Verified: "+TotalIncomeReceived.getText(),true);


Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totalIncome1)));//£284,010.00	 
Reporter.log("Amount of Total Income on Which Tax is Due is Verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);

basicRatePayPension = taxLimit1Uk+n18;
Reporter.log("Basic Rate of Pay Pension :"+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;

heigherRatePayPension=(((totalFromAllEmployments + otherIncomeAmt)-n19))-basicRatePayPension;
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);

dueTax2=heigherRatePayPension*HR_rate;

heigherRateSaving= taxLimit3+n18 -((heigherRatePayPension +basicRatePayPension));
Reporter.log("Heigher Rate of Savingg: "+heigherRateSaving,true);

dueTax3=round((heigherRateSaving*HR_rate),2);

additionalRateSaving=totalIncome1-(basicRatePayPension+heigherRatePayPension+heigherRateSaving);
Reporter.log("Additional Rate of Saving: "+additionalRateSaving,true);

dueTax4=(additionalRateSaving*advancedRatePercentage)/100;	
totIncomeTaxDue=dueTax1+dueTax2+dueTax3+dueTax4;
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
notionalTaxFromGainsOnLifeAmt=n20*capitalGainsRateUpper;
Assert.assertEquals(amtNotionalTaxFromGainsOnLife.getText().substring(1).replace(",", ""),String.format("%.2f",(notionalTaxFromGainsOnLifeAmt)));
Reporter.log("Amount of Notional tax from gains on life policies etc. is verifired successfully: "+amtNotionalTaxFromGainsOnLife.getText(),true);
Reporter.log("interestFromUKBanksBuildingAmt: "+interestFromUKBanksBuildingAmt,true);
total1=(heigherRateSaving-interestFromUKBanksBuildingAmt)*HR_rate;//23,678.00

total2=(additionalRateSaving*advancedRatePercentage)/100;//27,362.25

total3=(total1+total2)-notionalTaxFromGainsOnLifeAmt;//27,040.25

total4=n20/n21;//60000(Gains on UK life insurance /Number of years )

total5=n20/total4;//2

total6=total4-(heigherRateSaving-interestFromUKBanksBuildingAmt);//805 

total7=(total6*advancedRatePercentage)/100;//362.25

total8=total4*BR_rate;//12,000.00

total9=(total1+total7);//24040.25-c17.43

total10=total9-total8;//12,040.25

topSlicingReliefVal=total3-(total10*total5);//2,959.75
Reporter.log("Top Slicing Relief Value: "+topSlicingReliefVal,true);
Assert.assertEquals(topSlicingReliefAmt.getText().substring(1).replace(",", ""),String.format("%.2f",(topSlicingReliefVal)));
Reporter.log("Amount of Top Slicing Relief is verifired successfully"+topSlicingReliefAmt.getText(),true);

studentLoanRate=Math.floor(((((((n5+n7+n10+n15)-(n8+n9+n16))+(interestFromUKBanksBuildingAmt+n20+otherIncomeAmt))-(n18+n19))-plan1Threshold)*studentLoanRate)- java.lang.Math.ceil(n17));
Reporter.log("Student Loan Amount: "+studentLoanRate,true);
Assert.assertEquals(studentLoanAmountTaxWindow.getText().substring(1).replace(",",""),String.format("%.2f",studentLoanRate));
totalTaxDeductedAmt=n6+n11+(n1*taxedUKInterestRate)+n4;
Assert.assertEquals(totalTaxDeducted.getText().substring(1).replace(",", ""),String.format("%.2f",(totalTaxDeductedAmt)));
Reporter.log("Total tax deducted is Verified: "+totalTaxDeducted.getText(),true);
taxBalance=((totIncomeTaxDue-(notionalTaxFromGainsOnLifeAmt+topSlicingReliefVal))+studentLoanRate)-totalTaxDeductedAmt;
Assert.assertEquals(taxForThisYear.getText().substring(1).replace(",",""),String.format("%.2f",(taxBalance)));
Reporter.log("Balance for this year: "+taxForThisYear.getText(),true);
}
public void funcDelMTRTest36(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 36",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
delOtherUKIncome(driver);
clickEmployment(driver);
delEmpInfo(driver);
delPensionTaxRelief(driver);
Reporter.log("Pension Tax Relief Amount Deleted Successfully",true);
delStudentLoanRepayment(driver);
Reporter.log("Student Loan Amount Deleted Successfully",true);
driver.navigate().refresh();
funcDelAdditionalInfo(driver);
Reporter.log("Gain Life Insurance Amount Deleted Successfully",true);
}
public void addTestCase240(WebDriver driver, String str1,String str2,String str3,String str4,String str5,String str6,String str7,String str8,String str9,String str10,String str11,String str12,String str13,String str14,String str15,String str16,String str17,String str18,String str19,String str20,String str21,String str22)throws Exception
{
wLib = new WaitStatementLib();
cis = new CISPage(driver);
Reporter.log("Exceuting MTR Test Case 240",true);
clickIncome(driver);
addBank(driver, str1, str1, str2);
funcAddUntaxedInerest(driver,str3);//18
wLib.explicitWait(driver, 5,additionalInformationLink);
additionalInformationLink.click();
wLib.explicitWait(driver, 5,commonEditBtn);
commonEditBtn.click();
redundancyAndOtherCompensationPaymentsTxtBox.clear();
redundancyAndOtherCompensationPaymentsTxtBox.sendKeys(str4);//98038.00
saveAdditionalInfoBtn.click();
driver.navigate().refresh();
clickIncome(driver);
funcAddEmployerForMTR(driver, str5, str6);
funcAddEmpIncomeWithTaxTakenOff(driver, str7,"","");
Reporter.log("Employment added Successfully",true);
addPartnershipInfo1(driver,str8,str11,str9,str10);
wLib.explicitWait(driver, 5, PartnershipShortFormLink);
PartnershipFullFormLink.click();
/*wLib.explicitWait(driver, 5,PartnerShipRefNo);
PartnerShipRefNo.clear();
PartnerShipRefNo.sendKeys(str11);*/
wLib.explicitWait(driver, 5,BasisBusinessStartDate);
BasisBusinessStartDate.clear();
BasisBusinessStartDate.sendKeys(str12);
wLib.explicitWait(driver, 5,BasisBusinessEndDate);
BasisBusinessEndDate.clear();
BasisBusinessEndDate.sendKeys(str13);
yourShareOfPartnershipProfitLoss.clear();
yourShareOfPartnershipProfitLoss.sendKeys(str14);
wLib.explicitWait(driver, 5,lossFromThisTaxYearSetOffAgainstOtherIncome);
lossFromThisTaxYearSetOffAgainstOtherIncome.clear();
lossFromThisTaxYearSetOffAgainstOtherIncome.sendKeys(str15);
totalLossToCarryForwardTxtBox.clear();
totalLossToCarryForwardTxtBox.sendKeys(str16);
payClass2NICsVoluntarilyChkBox.click();
SaveBtn1.click();
driver.navigate().refresh();
wLib.explicitWait(driver,5,Class2Class4NICsForm);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
PayClass2NICsvoluntarily.click();
SaveBtn2.click(); 
driver.navigate().refresh();
clickIncome(driver);
incmFrmProLink.click();
wLib.explicitWait(driver, 5,editBtn);
editBtn.click();
wLib.explicitWait(driver, 5,noOfPropertiesRentedOutTxtBox);
noOfPropertiesRentedOutTxtBox.clear();
noOfPropertiesRentedOutTxtBox.sendKeys(str17);
totalIncomePropertyLinkTxtBox.clear();
totalIncomePropertyLinkTxtBox.sendKeys(str18);
rentRatesInsuranceEtcTxtBox.clear();
rentRatesInsuranceEtcTxtBox.sendKeys(str19);
repairsAndMaintenanceTxtBox.clear();
repairsAndMaintenanceTxtBox.sendKeys(str20);
intrstAndOthrFinancialChrgsTxtBox.clear();
intrstAndOthrFinancialChrgsTxtBox.sendKeys(str21);
legalManagmntAndPrfsnalFeesTxtBox.clear();
legalManagmntAndPrfsnalFeesTxtBox.sendKeys(str22);
SaveBtn1.click();
n1 = Double.parseDouble(str3);//18
n2 = Double.parseDouble(str4);//98038.00
n3 = Double.parseDouble(str7);//1073.00
n4 = Double.parseDouble(str14);//-70250
n5 = Double.parseDouble(str15);//50000.00
n6 = Double.parseDouble(str16);//20616.00
n7 = Double.parseDouble(str18);//3300
n8 = Double.parseDouble(str19);//128
n9 = Double.parseDouble(str20);//340
n10 = Double.parseDouble(str21);//104
n11 = Double.parseDouble(str22);//117
SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
Date start = dateFormat.parse(str9);
Date end = dateFormat.parse(str10);
int weeks1 = calculateWeek(start, end);
Reporter.log("Weeks: " + weeks1,true);
wLib.explicitWait(driver, 5,taxReturnLink);
taxReturnLink.click();
wLib.explicitWait(driver, 5,taxCalSummaryLink);
taxCalSummaryLink.click();
payFromAllEmploymentsAmt=n2 + n3;//99111‬
interestFromUKBanksBuildingAmt= n1 ;//18
profitFromUKLandAndProperty = n7-(n8+n9+n10+n11);//2551
totalincome = profitFromUKLandAndProperty +payFromAllEmploymentsAmt + interestFromUKBanksBuildingAmt ;
incomeTaxReliefAmt=n5;
totlIncome=totalincome-(incomeTaxReliefAmt+personalAllowanceRate);
Assert.assertEquals(amountProfitFromUKLandAndProperty.getText().substring(1).replace(",", ""),String.format("%.2f",(profitFromUKLandAndProperty)));
 Reporter.log("Amount of Profit From UK Land And Property is Verified: "+amountProfitFromUKLandAndProperty.getText(),true);
Assert.assertEquals(payFromAllEmployments.getText().substring(1).replace(",", ""),String.format("%.2f",(payFromAllEmploymentsAmt)));
Reporter.log("Pay From All Employments verified:" + payFromAllEmployments.getText(),true);
Assert.assertEquals(amountInterestFromUKbanksBuilding.getText().substring(1).replace(",", ""),String.format("%.2f",interestFromUKBanksBuildingAmt)); 
Reporter.log("Interest from UK banks, building societies and securities is verified: "+amountInterestFromUKbanksBuilding.getText(),true);

Assert.assertEquals(TotalIncomeReceived.getText().substring(1).replace(",", ""),String.format("%.2f",(totalincome)));
Reporter.log("Total Income Received verified: "+TotalIncomeReceived.getText(),true);
Assert.assertEquals(amtIncometaxrelief.getText().substring(1).replace(",", ""),String.format("%.2f",(incomeTaxReliefAmt)));
Reporter.log("Amount of Income tax relief is Verified: "+amtIncometaxrelief.getText(),true);
	
Assert.assertEquals(totalIncomeOnWhichTaxIsDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totlIncome)));
Reporter.log("Total Income On Which Tax is Due verified: "+totalIncomeOnWhichTaxIsDue.getText(),true);
nonSavingInc=profitFromUKLandAndProperty + n3;

basicRatePayPension=taxLimit1Uk -interestFromUKBanksBuildingAmt;//34482
Reporter.log("Basic Rate of Pay Pension: "+basicRatePayPension,true);
dueTax1=basicRatePayPension*BR_rate;//6896.4
Reporter.log("Calculated amoun of Basic Rate of Pay Pension: "+dueTax1,true);
heigherRatePayPension=totlIncome - (basicRatePayPension + interestFromUKBanksBuildingAmt);//5330
Reporter.log("Heigher Rate of Pay Pension: "+heigherRatePayPension,true);
dueTax2=heigherRatePayPension*HR_rate;//2132
Reporter.log("Calculated amoun of Heigher Rate of Pay Pension: "+dueTax2,true);
totIncomeTaxDue=dueTax1+dueTax2;//9028.4
Assert.assertEquals(incomeTaxDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue)));//9028.4
Reporter.log("Income Tax due verifired successfully"+incomeTaxDue.getText(),true);
class2Amt = class2Rate * weeks1;//£150.45
Assert.assertEquals(class2NationalInsurancecontributions.getText().substring(1).replace(",", ""),String.format("%.2f",(class2Amt)));
Reporter.log("Class 2 National Insurance contributions is verified:" + class2NationalInsurancecontributions.getText(),true);
Assert.assertEquals(IncomeTaxCls2NationalInsurContriDue.getText().substring(1).replace(",", ""),String.format("%.2f",(totIncomeTaxDue+class2Amt)));
Reporter.log("Income Tax Cls 2 National Insurrance Contribution Due is verified: " + IncomeTaxCls2NationalInsurContriDue.getText(),true);
}

public void funcDelMTRTest240(WebDriver driver)throws Exception
{
Reporter.log("Deleting MTR Test Case 240",true);
wLib = new WaitStatementLib();
cis=new CISPage(driver);
checkLockbutton(driver);
clickIncome(driver);
delInterestfromUKbanks(driver);
clickEmployment(driver);
delEmpInfo(driver);
delProfit(driver);
clickIncome(driver);
delPartnershipFull(driver);
delPartnershipInfo(driver);
wLib.explicitWait(driver,5,Class2Class4NICsForm);
Class2Class4NICsForm.click();
cis.switchwindowNew(driver);
wLib.explicitWait(driver,5,PayClass2NICsvoluntarily);
PayClass2NICsvoluntarily.click();
SaveBtn2.click(); 
funcDelAdditionalInfo(driver);
}
}